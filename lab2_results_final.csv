Hash,Message,Filename,Diff,Baseline_Message,Rectified_Message,Improvement_Category,Improvement_Reason,Developer_Score,Baseline_LLM_Score,Rectifier_Score,Developer_Justification,Baseline_LLM_Justification,Rectifier_Justification
96463cb491a2f9babf9d49147c15f1ebf2aca5a6,"Couldn't call module twice, fixed now


Former-commit-id: 476a5058ad17fe3008ab1ef962c33961514c2990",geocoder/__init__.py,"@@ -7,47 +7,41 @@ __license__ = 'Apache 2.0'
 __copyright__ = 'Copyright 2014 Denis Carriere'
 
 from geocoder import Geocoder
+from google import Google
+from bing import Bing
+from maxmind import Maxmind
+from nokia import Nokia
+from esri import Esri
+from mapquest import Mapquest
+from osm import Osm
+from tomtom import Tomtom
 
-def google(location):
-    from google import Google
 
+def google(location):
     return Geocoder(Google(location))
 
 def bing(location, key=''):
-    from bing import Bing
     return Geocoder(Bing(location, key))
 
 def maxmind(location):
-    from maxmind import Maxmind
-
     return ip(location)
 
 def ip(location):
     return maxmind(location)
 
 def nokia(location, app_id='', app_code=''):
-    from nokia import Nokia
-
     return Geocoder(Nokia(location, app_id, app_code))
 
 def esri(location):
-    from esri import Esri
-
     return Geocoder(Esri(location))
 
 def mapquest(location):
-    from mapquest import Mapquest
-
     return Geocoder(Mapquest(location))
 
 def osm(location):
-    from osm import Osm
-
     return Geocoder(Osm(location))
 
 def tomtom(location):
-    from tomtom import Tomtom
-
     return Geocoder(Tomtom(location))
 
 
",add missing import statements,add(geocoder): support for multiple geocoding services,Semantic,"The new message describes a functional enhancement—adding support for multiple geocoding services—which changes the module's behavior and capability, indicating a semantic improvement rather than a simple fix or cosmetic change.",2.0,3.0,3.0,"The commit message 'Couldn't call module twice, fixed now' is extremely vague and lacks specific details about what was actually changed or why. While it indicates a fix related to module imports, the phrasing does not clearly explain the problem (e.g., duplicate imports causing issues) or the solution (e.g., removing redundant from statements). The diff shows that redundant 'from X import X' lines were removed, which suggests the issue was code duplication or import confusion. A better message would specify that redundant import statements were removed to prevent duplicate module loading or to improve code clarity. As such, the message is technically correct but insufficiently descriptive for a meaningful code review or audit.","The commit message 'add missing import statements' is accurate and reflects the change, as the diff shows that import statements (e.g., from google import Google, from bing import Bing, etc.) were added back to the code where they had previously been removed. However, the message is vague and lacks detail about the scope or impact of the change. It does not specify which services were affected or why the imports were missing, which reduces its clarity and usefulness for other developers. While correct in essence, it falls short of being detailed or explanatory, hence a score of 3 (Fair) rather than 4 or 5.","The commit message 'add(geocoder): support for multiple geocoding services' is vague and lacks specific details about what was actually added or how it improves the functionality. While it correctly identifies the general nature of the change (adding support for multiple geocoding services), it does not specify which services were added, why they were added, or any impact on usability or performance. The diff shows that the imports were moved from function scopes to the top level, which is a code refactoring to avoid redundant imports, not a true addition of new services. Therefore, the message overstates the change and misrepresents the actual nature of the commit. A better message would clarify that redundant imports were removed and services are now available via top-level imports. Hence, the score is 3 — it's partially accurate but lacks precision and context."
f309cb6ae74c67ef17c92b093056413c55eac161,"Pep8 changes


Former-commit-id: 306c88d7e8b96e5d04d321b09bb51d351e4acc23",geocoder/bing.py,"@@ -5,7 +5,6 @@ from base import Base
 
 class Bing(Base):
     #http://msdn.microsoft.com/en-us/library/ff701713.aspx
-    
     name = 'Bing'
     url = 'http://dev.virtualearth.net/REST/v1/Locations'
     key = 'AtnSnX1rEHr3yTUGC3EHkD6Qi3NNB-PABa_F9F8zvLxxvt8A7aYdiG3bGM_PorOq'
@@ -43,4 +42,4 @@ class Bing(Base):
     def bbox(self):
         southwest = self.json.get('bbox-0'), self.json.get('bbox-1')
         northeast = self.json.get('bbox-2'), self.json.get('bbox-3')
-        return self.safe_bbox(southwest, northeast)
\ No newline at end of file
+        return self.safe_bbox(southwest, northeast)
",add missing documentation,fix(base): remove unnecessary blank line and fix bbox return,Cosmetic,"The change removes an unnecessary blank line and fixes the bbox return format, which is a minor formatting adjustment without altering functionality.",1.0,1.0,3.0,"The commit message 'Pep8 changes' is extremely vague and provides no context about what was actually changed or why. The diff shows only minor whitespace or newline adjustments (removal of a blank line and a trailing newline), which are not significant enough to warrant a commit labeled as 'Pep8 changes'. Moreover, the commit message fails to mention any actual code modifications, the purpose of the changes, or their impact. A proper commit message should describe the intent and effect of the change. Therefore, this message is poor in clarity, specificity, and usefulness.","The commit message 'add missing documentation' is highly misleading given the actual changes in the code diff. The diff shows only whitespace changes (removal of a blank line and a comment), no new documentation is added. The code appears to be cleaned up or formatted, not documented. The commit message does not accurately reflect the changes, making it misleading and unhelpful. Therefore, it is poorly written and should be scored low.","The commit message correctly identifies a minor fix (removing an unnecessary blank line) and addresses a code change related to the bbox return, which is accurate. However, it lacks specificity about the actual impact or context—such as why the blank line was unnecessary or what the bbox fix actually improved. While the message is technically correct and concise, it is somewhat vague and doesn't fully convey the significance of the changes. Therefore, it's better than poor but falls short of being excellent."
f309cb6ae74c67ef17c92b093056413c55eac161,"Pep8 changes


Former-commit-id: 306c88d7e8b96e5d04d321b09bb51d351e4acc23",geocoder/google.py,"@@ -34,8 +34,12 @@ class Google(Base):
         return self.safe_format('postal_code')
 
     def bbox(self):
-        southwest = self.json.get('southwest-lat'), self.json.get('southwest-lng')
-        northeast = self.json.get('northeast-lat'), self.json.get('northeast-lng')
+        south = self.json.get('southwest-lat')
+        west = self.json.get('southwest-lng')
+        north = self.json.get('northeast-lat')
+        east = self.json.get('northeast-lng')
+        southwest = south, west
+        northeast = north, east
         return self.safe_bbox(southwest, northeast)
 
 if __name__ == '__main__':
",add google.bbox(),refactor(google): use separate variables for bbox coordinates,Semantic,"The new message indicates a specific refactoring action (using separate variables for bbox coordinates) which changes the code's structure and intent, improving clarity and maintainability, thus representing a semantic improvement.",2.0,2.0,3.0,"The commit message 'Pep8 changes' is overly vague and does not accurately reflect the actual changes in the diff. While the code modification involves variable naming and restructuring for clarity (e.g., renaming `southwest-lat`/`northeast-lng` to `south`, `west`, `north`, `east`), this is not merely a Pep8 compliance issue—it's a code readability and maintainability improvement. The commit message fails to describe the actual change, making it difficult to understand the purpose. A better message would specify the change, such as 'Improved bbox method readability by renaming lat/lng components for clarity.' Therefore, the message is insufficient and only deserves a score of 2.","The commit message 'add google.bbox()' is overly vague and does not convey the actual change or its significance. The diff shows a refactoring of the bbox method to use more descriptive variable names (south, west, north, east), which improves readability and maintainability. A better commit message would reflect this improvement, such as 'refactor google.bbox() to use clearer variable names for geographic bounds'. As it stands, the message lacks detail about what was changed and why, making it insufficient for understanding the context or value of the change.","The commit message is clear and relevant to the changes, indicating a refactoring effort to improve readability by using separate variables for bbox coordinates. However, it lacks detail about the motivation or impact of the change (e.g., why this refactoring was necessary, improved maintainability, or readability). While the message accurately reflects the diff, it is somewhat minimal and does not fully communicate the value or context of the change, which limits its completeness."
f309cb6ae74c67ef17c92b093056413c55eac161,"Pep8 changes


Former-commit-id: 306c88d7e8b96e5d04d321b09bb51d351e4acc23",setup.py,"@@ -19,21 +19,22 @@ with open('LICENSE') as f:
     license = f.read()
 
 
-setup(name = 'geocoder',
-      version = geocoder.__version__,
-      long_description = readme,
-      description = 'Python Geocoder (Google, Bing, OSM, TomTom, ESRI, MaxMind, Mapquest, Nokia)',
-      author = 'Denis Carriere',
-      author_email = 'info@addxy.com',
-      url = 'http://addxy.com',
-      license = license,
-      packages = packages,
-      package_data={'': ['LICENSE']},
-      package_dir={'geocoder': 'geocoder'},
-      include_package_data=True,
-      install_requires = requires,
-      zip_safe=False,
-      classifiers = [
+setup(
+    name='geocoder',
+    version=geocoder.__version__,
+    long_description=readme,
+    description=""Python Geocoder"",
+    author='Denis Carriere',
+    author_email='info@addxy.com',
+    url='http://addxy.com',
+    license=license,
+    packages=packages,
+    package_data={'': ['LICENSE']},
+    package_dir={'geocoder': 'geocoder'},
+    include_package_data=True,
+    install_requires=requires,
+    zip_safe=False,
+    classifiers=(
         'Development Status :: 5 - Production/Stable',
         'Intended Audience :: Developers',
         'Intended Audience :: Science/Research',
@@ -45,5 +46,5 @@ setup(name = 'geocoder',
         'Topic :: Internet :: WWW/HTTP',
         'Topic :: Scientific/Engineering :: GIS',
         'Topic :: Software Development :: Libraries :: Python Modules'
-],
-     )
\ No newline at end of file
+    ),
+)
",add classifiers to setup.py,docs(chore): update setup.py with consistent formatting and improved description,Cosmetic,"The change involves updating formatting and description in setup.py, which improves readability and consistency without altering functionality or behavior.",1.0,2.0,3.0,"The commit message 'Pep8 changes' is highly misleading and inaccurate. The diff shows no actual PEP8 (Python style guide) formatting changes—there are no issues with whitespace, indentation, or naming conventions. Instead, the changes are primarily about formatting the setup.py file with consistent indentation, proper parentheses, and improved readability, which are more about code style and clarity than PEP8 compliance. Additionally, the message fails to describe any actual changes or context, making it vague and uninformative. A better message would describe the actual improvements, such as 'Improved setup.py formatting and consistency for better readability and maintainability.' Therefore, the commit message is poor in both accuracy and usefulness.","The commit message 'add classifiers to setup.py' is technically correct but extremely vague and lacks detail. While the diff shows that classifiers were indeed added, the message does not indicate what the classifiers are, why they were added, or their significance. A better message would specify the purpose (e.g., 'add PyPI classifiers to improve package discoverability and categorization'). As it stands, the message is minimally informative and fails to convey context or value, making it a poor commit message despite the actual change being relevant.","The commit message correctly identifies the file and action (updating setup.py), and mentions formatting and description improvements. However, it lacks specificity about what exactly was changed—such as the removal of the old description and the addition of a more concise one. The term 'consistent formatting' is vague and doesn't clearly reflect the actual changes (e.g., line breaks, parentheses, whitespace). While the message is not incorrect, it doesn't fully capture the technical scope of the diff, which involved both formatting and a significant change in the description. Therefore, it's moderately accurate but lacks detail, resulting in a score of 3."
b46e8cfc5a75be51fd5819d7b46394dd84d54329,"Fixed bbox & Added keys


Former-commit-id: d073aa3628c03010b822f12eb91eb8178ab46f1e",geocoder/__init__.py,"@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 
 __title__ = 'geocoder'
-__version__ = '0.2.62'
+__version__ = '0.2.63'
 __author__ = 'Denis Carriere'
 __license__ = 'Apache 2.0'
 __copyright__ = 'Copyright 2014 Denis Carriere'
",add missing entries,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue in the bounding box processing, which points to a corrective fix addressing a functional problem rather than a cosmetic or trivial change.",1.0,2.0,1.0,"The commit message 'Fixed bbox & Added keys' is vague and does not accurately reflect the actual changes in the diff. The diff only shows a version bump from '0.2.62' to '0.2.63', which is a minor version update, not a fix for bbox or addition of keys. The commit message fails to describe the actual change, lacks context, and misrepresents the work done. Therefore, it is poor and should receive a score of 1.","The commit message 'add missing entries' is vague and provides no context about what was actually added or why. The diff shows only a version bump from '0.2.62' to '0.2.63', which is a simple change in versioning. A more descriptive message such as 'Bump version to 0.2.63' would be more informative and relevant. Therefore, the message is minimally adequate but lacks clarity and specificity, resulting in a score of 2.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was actually fixed or why. It does not describe the change in the code (which is simply a version bump), nor does it explain the issue or its resolution. A meaningful commit message should clearly state what was fixed and why. Given the lack of detail and relevance to the actual change (a version update), this message is inadequate and poorly written."
b46e8cfc5a75be51fd5819d7b46394dd84d54329,"Fixed bbox & Added keys


Former-commit-id: d073aa3628c03010b822f12eb91eb8178ab46f1e",geocoder/bing.py,"@@ -7,7 +7,7 @@ class Bing(Base):
     #http://msdn.microsoft.com/en-us/library/ff701713.aspx
     name = 'Bing'
     url = 'http://dev.virtualearth.net/REST/v1/Locations'
-    key = ''
+    key = 'AtnSnX1rEHr3yTUGC3EHkD6Qi3NNB-PABa_F9F8zvLxxvt8A7aYdiG3bGM_PorOq'
 
     def __init__(self, location, key=''):
         self.location = location
@@ -40,6 +40,11 @@ class Bing(Base):
         return self.safe_format('address-postalCode')
 
     def bbox(self):
-        southwest = self.json.get('bbox-0'), self.json.get('bbox-1')
-        northeast = self.json.get('bbox-2'), self.json.get('bbox-3')
+        south = self.json.get('bbox-0')
+        west = self.json.get('bbox-1')
+        north = self.json.get('bbox-2')
+        east = self.json.get('bbox-3')
+        southwest = south, west
+        northeast = north, east
+        
         return self.safe_bbox(southwest, northeast)
",add missing api docs,feat(bing): add API key and refactor bbox extraction,Semantic,"The new message provides more context by specifying the feature (API key addition) and the refactoring effort (bbox extraction), indicating a clearer semantic improvement over the old message that was vague and lacked detail.",2.0,1.0,3.0,"The commit message is too vague and lacks detail. While it mentions 'Fixed bbox & Added keys', it does not clearly explain what was fixed, why it was necessary, or how the changes improve the code. The 'Added keys' part is particularly ambiguous — it appears the API key was hardcoded, which is a security risk, and this should be explicitly noted. The bbox fix is also under-specified: the change in variable names (southwest/northeast to south/west/north/east) is a refactoring that improves readability, but this is not clearly communicated. A better message would specify the exact issue fixed and the rationale for the change.","The commit message 'add missing api docs' is highly inaccurate given the actual changes in the code. The diff shows a concrete change in the Bing class: a hardcoded API key is added, and the bbox method is refactored to use more descriptive variable names (south, west, north, east). These are not documentation changes but rather implementation details. The commit message fails to reflect the true nature of the changes, making it misleading and irrelevant. Therefore, it is poor and should receive a score of 1.","The commit message 'feat(bing): add API key and refactor bbox extraction' is generally clear and covers the two main changes. However, it lacks specific details about the refactoring—such as why the bbox extraction was refactored or what improvements were made. The addition of a hardcoded API key is a security concern and should be better communicated, especially since it's not a feature but a configuration change. A more detailed message would improve clarity and help reviewers understand the context and implications. Thus, while the message is accurate in scope, it falls short in depth and potential risk awareness, warranting a score of 3."
b46e8cfc5a75be51fd5819d7b46394dd84d54329,"Fixed bbox & Added keys


Former-commit-id: d073aa3628c03010b822f12eb91eb8178ab46f1e",geocoder/nokia.py,"@@ -6,8 +6,8 @@ from base import Base
 class Nokia(Base):
     name = 'Nokia'
     url = 'http://geocoder.cit.api.here.com/6.2/geocode.json'
-    app_id = ''
-    app_code = ''
+    app_id = '6QqTvc3kUWsMjYi7iGRb'
+    app_code = 'q7R__C774SunvWJDEiWbcA'
 
 
     def __init__(self, location, app_id='', app_code=''):
",add nokia example,feat(nokia): add app_id and app_code for geocoding,Semantic,"The new message provides a more specific and meaningful description of the change by indicating the addition of app_id and app_code for geocoding in the Nokia app, which adds contextual semantic value compared to the vague 'Fixed bbox & Added keys' in the old message.",2.0,2.0,3.0,"The commit message is vague and lacks specificity. While it mentions 'Fixed bbox' and 'Added keys', there is no clear indication of what was actually fixed or why the keys were added. The reference to 'bbox' is not explained, and the commit message does not align with the actual changes in the diff, which only shows the addition of app_id and app_code values. A more descriptive message would link the changes to a specific issue or feature, such as 'Added Here API credentials for Nokia geocoding service'. As it stands, the message is too generic and provides little context for reviewers or developers.","The commit message 'add nokia example' is too vague and lacks detail about what was changed or why. While it correctly indicates a change related to Nokia, it does not specify that app credentials were added or that the implementation now includes a functional geocoding service with specific API keys. A better message would mention the addition of app_id and app_code values for Nokia geocoding. The message is minimally informative but provides no context for the change's purpose or impact, which is essential for maintainability and understanding.","The commit message correctly identifies the feature (adding app_id and app_code for geocoding) and specifies the component (Nokia). However, it lacks context about why these values are needed or how they improve the functionality. It also does not mention that the values are now hardcoded, which could be a security or configuration concern. While the message is clear and relevant, it is somewhat minimal and missing technical depth, resulting in a moderate score."
b46e8cfc5a75be51fd5819d7b46394dd84d54329,"Fixed bbox & Added keys


Former-commit-id: d073aa3628c03010b822f12eb91eb8178ab46f1e",geocoder/osm.py,"@@ -30,6 +30,11 @@ class Osm(Base):
         return self.safe_postal(self.address())
 
     def bbox(self):
-        southwest = self.json.get('boundingbox-0'), self.json.get('boundingbox-2')
-        northeast = self.json.get('boundingbox-1'), self.json.get('boundingbox-3')
+        south = self.json.get('boundingbox-0')
+        west = self.json.get('boundingbox-2')
+        north = self.json.get('boundingbox-1')
+        east = self.json.get('boundingbox-3')
+        southwest = south, west
+        northeast = north, east
+
         return self.safe_bbox(southwest, northeast)
\ No newline at end of file
",add missing return statement,refactor(osm): extract bounding box coordinates for clearer southwest and northeast definitions,Semantic,"The new message provides a more descriptive and semantic explanation of the change by specifying the extraction of bounding box coordinates and clarifying the definitions of southwest and northeast points, improving understanding of the refactoring's intent.",3.0,1.0,4.0,"The commit message 'Fixed bbox & Added keys' is vague and lacks detail about what was actually changed or why. While the diff shows a refactoring of the bbox method to use more descriptive variable names (south, west, north, east), the commit message does not clearly convey this improvement or its significance. It also fails to explain the rationale behind the change, such as improving readability or maintainability. A better message would specify the change in variable naming and its benefit. Thus, it is functional but insufficiently informative, warranting a medium score.","The commit message 'add missing return statement' is completely inaccurate and misleading. The diff shows a refactoring of variable names and reorganization of code to make the bounding box logic more readable, not the addition of a missing return statement. There is no missing return statement in the code — the function already returns a value via `return self.safe_bbox(southwest, northeast)`. The commit message fails to reflect the actual changes made, which were a code clarity improvement through better variable naming and structure. Therefore, it is poor and does not match the diff.","The commit message accurately reflects the change: it refactors the bounding box extraction to make the southwest and northeast coordinates more clearly defined by naming individual components (south, west, north, east). This improves readability and maintainability. While the message is clear and relevant, it could be slightly more specific about the benefit (e.g., 'improves clarity by explicitly naming bounding box coordinates'), but overall it is well-written and appropriate for the change. Therefore, it earns a solid 4."
b46e8cfc5a75be51fd5819d7b46394dd84d54329,"Fixed bbox & Added keys


Former-commit-id: d073aa3628c03010b822f12eb91eb8178ab46f1e",geocoder/tomtom.py,"@@ -4,7 +4,7 @@ from base import Base
 class Tomtom(Base):
     name = 'TomTom'
     url = 'https://api.tomtom.com/lbs/geocoding/geocode'
-    key = ''
+    key = '95kjrqtpzv39ujcxfyr57wz3'
 
     def __init__(self, location, key=''):
         self.location = location
",add missing docstring,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue in the bbox handling, which implies a corrective fix to address a previously occurring problem.",2.0,1.0,1.0,"The commit message 'Fixed bbox & Added keys' is vague and lacks specificity. While it mentions adding a key (which is accurate), it references 'fixed bbox' without any context or evidence from the diff. The diff shows only a key being set, not any bbox-related changes. Therefore, the message is misleading and does not accurately reflect the actual changes. A better message would clearly state 'Added TomTom API key' or 'Updated TomTom API key'. The message is partially correct but lacks clarity and precision, warranting a score of 2.","The commit message 'add missing docstring' is highly misleading and inaccurate given the diff. The diff shows a change from an empty string to a concrete API key value, not the addition of a docstring. There is no docstring added or modified in the code. The message does not reflect the actual change, making it incorrect and unhelpful for understanding the commit's purpose. Therefore, it is poor and deserves a score of 1.","The commit message 'fix: rectification failed' is highly vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what the change accomplishes. The diff shows a simple update to the Tomtom class's key from an empty string to a concrete API key, which is a clear configuration fix. A proper commit message should reflect this change, such as 'fix: set default TomTom API key'. The current message fails to convey any meaningful context, making it poor for code review and traceability."
a5859f496fe80337ba8419a28fe67807cb5622c5,"Fixed OSM bbox


Former-commit-id: f0e318fe6d6616794536779154d1d27dc59c60dc",geocoder/google.py,"@@ -55,6 +55,9 @@ class Google(Base):
         northeast = north, east
         return self.safe_bbox(southwest, northeast)
 
+    def country(self):
+        return self.json.get('country')
+
 if __name__ == '__main__':
     provider = Google('Ottawa')
     print provider
",add missing test for google provider,feat(google): add country property to return country from JSON,Semantic,"The new message introduces a new feature (adding a country property to JSON responses) related to functionality and data returned, which changes the semantic meaning of the output, not just fixing a bug or making a cosmetic change.",1.0,1.0,3.0,"The commit message 'Fixed OSM bbox' is highly misleading and inaccurate given the code diff. The diff introduces a new `country()` method and does not address any bbox (bounding box) issue related to OSM. There is no mention of fixing a bounding box or OSM-related functionality. The message fails to describe what was actually changed, misrepresents the task, and provides no context. This is a poor commit message that does not reflect the actual changes.","The commit message 'add missing test for google provider' is highly inconsistent with the actual changes in the code diff. The diff shows the addition of a new method `country()` to the Google class, which returns the country from the JSON data. There is no mention of a test being added, and no test-related changes are present in the diff. Therefore, the commit message is misleading and does not accurately reflect the changes made. This misalignment between the message and the code reduces its clarity and usefulness, warranting a poor score.","The commit message is clear and identifies the feature as adding a country property from JSON, which aligns with the code change. However, it lacks context about why this is useful or how it improves the functionality (e.g., for user-facing output or integration). The message is accurate and concise but could be improved with more detail about the impact or usage. Therefore, it is functional but not outstanding."
a5859f496fe80337ba8419a28fe67807cb5622c5,"Fixed OSM bbox


Former-commit-id: f0e318fe6d6616794536779154d1d27dc59c60dc",geocoder/osm.py,"@@ -37,4 +37,4 @@ class Osm(Base):
         southwest = south, west
         northeast = north, east
 
-        return self.safe_bbox(southwest, northeast)
\ No newline at end of file
+        return self.safe_bbox(southwest, northeast)
",add missing newline,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue in the OSM bbox processing, which implies a corrective fix to address a functional problem rather than a cosmetic or trivial change.",1.0,2.0,2.0,"The commit message is extremely vague and provides no context about what was fixed or why. It only states 'Fixed OSM bbox' without indicating the nature of the issue, the impact of the change, or any relevant background. The diff shows a trivial change — removing a newline — which is likely a formatting fix, not a functional fix. A proper commit message should explain the problem and the solution. This message fails to do so, making it poor and unhelpful for understanding the change's significance.","The commit message 'add missing newline' is technically accurate and addresses the observed change in the code diff, which indeed adds a missing newline at the end of the file. However, it is overly minimal and lacks context—such as why the newline matters, the impact on code formatting, or any broader implications. A better commit message would explain the significance (e.g., 'Fix missing newline to ensure file ends properly for linters or tools'). As such, while correct, it falls short of being meaningful or informative, warranting a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a trivial change — removing a newline at the end of a file — which is likely a formatting issue, not a 'rectification failure'. The term 'rectification failed' is ambiguous and does not reflect the actual change. A better message would specify the nature of the change (e.g., 'fix: remove trailing newline in bbox method'). Thus, the message is minimally informative and lacks clarity, warranting a score of 2."
34258106e4ba5145f85b1d35807d756d8d782f0f,"Fixed Mapquest


Former-commit-id: f4ffde0cbd432687b5aac318719afb6b5dfb45ef",geocoder/mapquest.py,"@@ -5,19 +5,17 @@ from base import Base
 
 class Mapquest(Base):
     name = 'MapQuest'
-    url = 'http://www.mapquestapi.com/geocoding/v1/address'
+    url = 'http://www.mapquest.ca/_svc/searchio'
 
     def __init__(self, location):
         self.location = location
-        self.referer = 'http://www.mapquestapi.com/geocoding/'
         self.json = dict()
         self.params = dict()
-        self.params['location'] = location
-        self.params['inFormat'] = 'kvp'
-        self.params['outFormat'] = 'json'
+        self.params['action'] = 'search'
+        self.params['query0'] = location
         self.params['maxResults'] = 1
+        self.params['page'] = 0
         self.params['thumbMaps'] = 'false'
-        self.params['key'] = 'Kmjtd|luua2qu7n9,7a=o5-lzbgq'
 
     def lat(self):
         return self.safe_coord('latLng-lat')
@@ -26,17 +24,16 @@ class Mapquest(Base):
         return self.safe_coord('latLng-lng')
 
     def address(self):
-        # No single line address exists for Mapquest :(
-        return self.location
+        return self.safe_format('address-singleLineAddress')
 
     def quality(self):
-        return self.safe_format('locations-geocodeQuality')
+        return self.safe_format('address-quality')
 
     def postal(self):
-        return self.safe_format('locations-postalCode')
+        return self.safe_format('address-postalCode')
 
     def city(self):
-        return self.safe_format('locations-adminArea5')
+        return self.safe_format('address-locality')
 
     def country(self):
-        return self.safe_format('locations-adminArea1')
+        return self.safe_format('address-countryLong')
",add mapquest api docs,refactor(mapquest): update API endpoint and parameters for search functionality,Corrective,"The change involves updating API endpoints and parameters for search functionality, which indicates a fix or improvement to the functionality, not just a cosmetic or trivial change.",2.0,1.0,3.0,"The commit message 'Fixed Mapquest' is extremely vague and provides no context about what was actually fixed, why it was changed, or how it impacts functionality. While the diff shows a significant change in URL, parameters, and method calls (e.g., switching from MapQuest API to mapquest.ca's searchio service and updating parameter names), the commit message fails to explain the purpose or rationale behind these changes. A good commit message should describe the change in functional terms (e.g., 'Updated MapQuest integration to use searchio endpoint with new query parameters for location lookup'). As such, the message is technically correct in being a fix but lacks clarity, context, and usefulness for maintainers. Therefore, it receives a score of 2 (Fair).","The commit message 'add mapquest api docs' is highly irrelevant to the actual changes in the code diff. The diff shows a significant modification to the Mapquest class, including changes to the API endpoint, parameters, and field mappings (e.g., from using MapQuest's geocoding API to a different search endpoint with new parameters like 'action', 'query0', and field name changes). These changes imply a functional and structural update to the integration, not the addition of API documentation. A meaningful commit message should reflect the actual work done—such as 'Update MapQuest integration to use new search API endpoint and adjust field mappings'—but instead, the message is vague, incorrect, and fails to describe the real change. Therefore, it is poor.","The commit message accurately identifies the refactoring effort and mentions the key change—updating the API endpoint and parameters for search functionality. However, it lacks specific details about the nature of the changes (e.g., switching from geocoding to search, removal of old parameters, addition of new ones like 'action' and 'query0'). While it correctly captures the broad scope, it does not fully reflect the depth of the changes (e.g., removal of deprecated fields, restructure of parameter keys, or changes in data extraction paths). A more detailed message would have been better, so this is a moderate score reflecting adequacy but not completeness."
34258106e4ba5145f85b1d35807d756d8d782f0f,"Fixed Mapquest


Former-commit-id: f4ffde0cbd432687b5aac318719afb6b5dfb45ef",test_geocoder.py,"@@ -1,13 +1,10 @@
 import geocoder
 
 
-def test(location, provider):
-    g = geocoder.get(location, provider=provider)
-    g.debug()
-
 if __name__ == '__main__':
-    location = 'New York City'
+    location = '1552 Payette dr., Ottawa Ontario'
     geocoders = ['osm', 'google', 'bing', 'nokia', 'mapquest', 'tomtom', 'esri']
-    #geocoders = ['esri']
-    for name in geocoders:
-        test(location, name)
\ No newline at end of file
+    
+    g = geocoder.mapquest(location)
+
+    g.debug()
\ No newline at end of file
",add test for geocoder.debug(),fix(test): update location and use mapquest geocoder,Corrective,"The new message specifies a test update involving location and the use of MapQuest geocoder, indicating a fix to functionality or test behavior, which falls under corrective changes.",2.0,2.0,3.0,"The commit message is extremely vague and lacks context. It only says 'Fixed Mapquest' without explaining what was fixed, why it was fixed, or what the change actually does. The diff shows a removal of a test function and a replacement with a single MapQuest geocoding call, which is not a 'fix' but rather a change in behavior or testing approach. The commit message does not reflect the actual change in functionality or intent. A better message would describe the change (e.g., 'Updated geocoding test to use MapQuest for Ottawa address') and clarify the purpose. Therefore, it scores a 2 for being too minimal and uninformative.","The commit message 'add test for geocoder.debug()' is misleading and inaccurate. The diff does not add a test; instead, it modifies the code to use a specific geocoder (mapquest) and call debug(), which is a runtime debugging action, not a test. There is no new test case or assertion introduced. The message fails to reflect the actual change, which is a code modification for demonstration or debugging purposes, not a test addition. Therefore, it is poorly descriptive and does not convey the true nature of the change.","The commit message is somewhat relevant but lacks detail and context. It correctly notes the update to the location and the use of mapquest, but it fails to mention the removal of the test function and the broader change in behavior (e.g., replacing a loop of tests with a single mapquest call). A more complete message would explain the intent behind the change, such as why only mapquest was used or why the test suite was simplified. As a result, it's functional but not fully descriptive, earning a moderate score."
a6061cd3cfd06382956214fa0d5c94a60b973a59,"Manifest changes


Former-commit-id: 07a11a921f9d3e32a28015d9960a7d4563865c14",setup.py,"@@ -11,7 +11,7 @@ except ImportError:
     from distutils.core import setup
 
 if sys.argv[-1] == 'publish':
-    os.system('python setup.py sdist upload')
+    os.system('python setup.py sdist --formats=gztar upload')
     sys.exit()
 
 requires = ['requests>=2.2.0']
",add sdist --formats=gztar,feat(build): use gztar format for sdist upload,Semantic,"The new message provides a clearer, more descriptive semantic meaning by specifying the feature (using gztar format) and its context (sdist upload), improving understanding of the change's purpose compared to the vague 'Manifest changes'.",2.0,3.0,3.0,"The commit message 'Manifest changes' is overly vague and does not clearly describe the actual change made. The diff shows a specific modification to the setup.py publish command, adding the '--formats=gztar' flag, which affects how the source distribution is built and uploaded. A better commit message would specify this change, such as 'Add --formats=gztar to sdist upload to ensure gzipped tarballs are generated'. Since the message lacks detail and context about what was changed and why, it earns a score of 2.","The commit message 'add sdist --formats=gztar' is technically correct and indicates the change, but it lacks context. It does not explain why the format was changed to gztar (e.g., compatibility, packaging requirements, or deprecation of other formats). A better message would include the rationale. While the change itself is minor and clear, the message is too brief to be considered excellent. Therefore, a score of 3 reflects a basic but incomplete explanation.","The commit message indicates a feature addition related to building, specifically changing the sdist upload format to gztar. While the change is relevant and the action is clearly stated, the message lacks context about why gztar was chosen over other formats (e.g., bztar, xz), and it does not explain the impact or necessity of this change. A stronger message would include rationale or benefits. Thus, it is accurate and relevant but not fully detailed or explanatory, resulting in a moderate score."
7f71a41bb16977290bd75db548d495b454e5caba,"Fixing requirements.txt


Former-commit-id: 2ba78214c04ee936e630ecaad858414fa757e246",setup.py,"@@ -14,7 +14,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist --formats=gztar upload')
     sys.exit()
 
-requires = ['requests>=2.2.0']
+requires = ['requests==2.2.0']
 
 scripts = ['scripts/geocoder']
 
",update sdist.py,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error in the requirements.txt handling, which points to a corrective fix addressing a malfunction.",2.0,2.0,2.0,"The commit message is overly vague and does not clearly describe the change or its impact. While the diff shows a change from 'requests>=2.2.0' to 'requests==2.2.0', the message 'Fixing requirements.txt' provides no context about why the version was changed, what problem it solves, or how it affects the system. A better message would specify the exact version constraint change and its rationale (e.g., 'Enforce exact requests version 2.2.0 to prevent compatibility issues'). As such, the message is minimally informative and lacks clarity, warranting a score of 2.","The commit message 'update sdist.py' is overly vague and provides no context about what was changed or why. While the diff shows a specific change from 'requests>=2.2.0' to 'requests==2.2.0', the commit message fails to explain the impact or rationale—such as version pinning for stability or compatibility reasons. A better message would include the change and its significance (e.g., 'Pin requests to exact version 2.2.0 to ensure reproducible builds'). As such, it lacks detail and clarity, warranting a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe the actual change or its purpose. The diff shows a change from 'requests>=2.2.0' to 'requests==2.2.0', which indicates a stricter version requirement, likely to prevent version mismatches. However, the term 'rectification failed' is ambiguous and does not convey what was fixed or why. A better message would specify the issue (e.g., 'fix: enforce exact requests version 2.2.0 to prevent compatibility issues'). Therefore, while the message is in the correct format (fix:), it lacks clarity and context, resulting in a low score."
805eab15ca9b430458910bdeba5966a0fed2a4a7,"Changed requests version


Former-commit-id: 2e20ab12a63119152e76262d39a41aeb30cad385",setup.py,"@@ -14,7 +14,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist --formats=gztar upload')
     sys.exit()
 
-requires = ['requests==2.3.0']
+requires = ['requests==2.2.0']
 
 scripts = ['scripts/geocoder']
 
",update sdist.py,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug or error was resolved, which falls under corrective changes.",2.0,2.0,2.0,"The commit message is extremely vague and provides no context about why the requests version was changed from 2.3.0 to 2.2.0. It lacks details such as the reason for the downgrade (e.g., compatibility, bug fixes, dependencies), potential impact, or any related changes. While it correctly states the change, the absence of meaningful context makes it insufficient for understanding the purpose or significance of the update, which is essential for maintainability and code review.","The commit message 'update sdist.py' is extremely vague and provides no context about what was changed or why. While the diff shows a version downgrade of the 'requests' package from 2.3.0 to 2.2.0, the commit message fails to communicate the significance of this change, such as potential compatibility issues, breaking changes, or the reason for the downgrade. A better message would specify the change (e.g., 'downgrade requests to 2.2.0 to resolve compatibility issue') and the file affected. As it stands, the message offers minimal value and does not meet expectations for clarity or usefulness.","The commit message 'fix: rectification failed' is vague and does not clearly describe the actual change or its purpose. The diff shows a simple version downgrade from 'requests==2.3.0' to 'requests==2.2.0', which suggests a bug fix or compatibility change, but the message fails to explain why this change was made or what problem it resolves. A better message would specify the issue (e.g., 'fix: downgrade requests to 2.2.0 to resolve compatibility issue with older Python versions'). As such, the message is minimally informative and lacks context, warranting a low but not extremely poor score."
11786b59c22461f578baa7bfc3449c0e51b36eb1,"Change to US


Former-commit-id: 9522fb7f08437b2cb1783945c5e02f27b3b3f659",test_geocoder.py,"@@ -1,6 +1,6 @@
 import geocoder
 
-location = 'Canada'
+location = 'United States'
 ip = '74.125.226.99'
 
 def test_entry_points():
",add test for,feat(location): update default location to United States,Semantic,"The new message provides a clearer, more descriptive semantic meaning by specifying the type of change (feature) and the exact update (default location to United States), improving readability and context compared to the vague 'Change to US'.",2.0,2.0,3.0,"The commit message is extremely brief and lacks context. While it correctly indicates a change from 'Canada' to 'United States', it does not explain why this change was made, what impact it has on the code or functionality, or any related considerations. A commit message should provide enough context to understand the purpose of the change without needing to look at the code. This message is technically correct but insufficiently informative, making it a low-score entry.","The commit message 'add test for' is extremely vague and provides no context about what was actually changed or why. The diff shows a simple change in location from 'Canada' to 'United States' in a test file, but the commit message fails to indicate that a test case was updated or what specific functionality is being tested. While it technically references a test, it lacks specificity, purpose, and clarity, which are essential for a meaningful commit message. A score of 2 reflects that it's partially relevant but significantly insufficient in detail.","The commit message indicates a feature change related to updating a default location, which is accurate. However, it lacks context about why the change was made (e.g., due to a bug, user feedback, or regional data accuracy). The message is concise but minimal in explaining the rationale or impact. It correctly uses the 'feat' prefix, but without additional detail, it falls short of being excellent. Therefore, a score of 3 reflects a basic but somewhat appropriate commit message."
8365ea17660aa500c88df9f699e1c66d488c85f4,"Change tests to Canada


Former-commit-id: d6d0435d8d2fa0e73b7fd3075660bedadf5476a0",test_geocoder.py,"@@ -1,6 +1,6 @@
 import geocoder
 
-location = 'United States'
+location = 'Canada'
 ip = '74.125.226.99'
 
 def test_entry_points():
",add test for,feat(globals): update location to Canada,Semantic,"The new message provides a clearer, more descriptive intent by specifying the type of change (feat) and the scope (globals), making the purpose of the change more understandable than the old message.",2.0,2.0,3.0,"The commit message is overly vague and lacks context. While it correctly indicates a change from 'United States' to 'Canada', it does not explain why this change was made, what impact it has on the tests, or whether it's part of a larger update. A better message would include the reason for the change (e.g., 'Update test location to reflect current geographic testing scope') or reference a related task. As it stands, the message is minimally informative and fails to provide meaningful context for developers reviewing the change.","The commit message 'add test for' is extremely vague and provides no context about what was actually changed or why. The diff shows a simple change in location from 'United States' to 'Canada' in a test file, which suggests the test is now using a different geographic location. However, the commit message fails to indicate that a test was updated or that the change relates to a specific functionality or intent. While it starts with a relevant action ('add test'), the lack of specificity makes it insufficient. A better message would describe the change, such as 'update test location to Canada for IP geolocation validation'. Thus, it receives a score of 2 for being minimally relevant but lacking detail and clarity.","The commit message 'feat(globals): update location to Canada' is somewhat appropriate in structure and uses the correct convention (feat, globals), but it lacks context about why the change was made. The diff shows a simple update from 'United States' to 'Canada', which is a minor change, and the commit message does not explain the rationale or impact. A better message would include context such as the reason for the change (e.g., testing or configuration update). As a result, it is functional but not fully descriptive or meaningful for a code review."
b59ef78823d6f2bc01af7ec3cd9fcd54de2a6ae3,"Fixed Bing issues


Former-commit-id: df815886a64aca418005906639a3144fb2023881",geocoder/bing.py,"@@ -17,6 +17,7 @@ class Bing(Base):
         self.json = dict()
         self.params['key'] = key
         self.params['q'] = location
+        self.params['maxResults'] = 1
 
     def lat(self):
         return self.safe_coord('coordinates-0')
",update bing.py,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug or issue was resolved, which aligns with a corrective improvement.",2.0,2.0,1.0,"The commit message 'Fixed Bing issues' is extremely vague and provides no details about what was actually fixed or why. The diff shows only a change to set 'maxResults' to 1 in the params, which suggests a specific configuration adjustment, but the commit message fails to convey this context. A better message would specify the change and its purpose (e.g., 'Set maxResults to 1 to limit Bing search results for better performance'). As such, the message is insufficient for understanding the change, warranting a low score.","The commit message 'update bing.py' is extremely vague and provides no information about what was changed or why. While the diff shows a specific addition of 'maxResults' = 1 in the params, the commit message fails to reflect this change. A better message would indicate the addition of a parameter limit for Bing search results. The message lacks context, purpose, and technical detail, which reduces its usefulness for code review or future developers.","The commit message 'fix: rectification failed' is vague, ambiguous, and provides no context about what was actually fixed or why. The diff shows a simple addition of 'maxResults' set to 1 in the params, which appears to be a configuration change for Bing API requests, likely to limit results. However, the commit message does not reflect this change, nor does it explain the purpose or impact of the fix. A meaningful commit message should clearly describe the change and its intent. Therefore, the message is poor and fails to meet basic expectations for clarity and usefulness."
b59ef78823d6f2bc01af7ec3cd9fcd54de2a6ae3,"Fixed Bing issues


Former-commit-id: df815886a64aca418005906639a3144fb2023881",test_geocoder.py,"@@ -18,8 +18,12 @@ def test_google():
     assert g.ok
 
 def test_bing():
-    g = geocoder.bing(location)
-    assert g.ok
+    ok = False
+    for i in xrange(3):
+        g = geocoder.bing(location)
+        if g.ok:
+            ok = True
+    assert ok
 
 def test_osm():
     g = geocoder.osm(location)
",add test for,fix(bing): ensure successful geocoding by retrying up to 3 times,Corrective,"The new message provides specific details about the fix—retrying geocoding up to three times—which addresses a functional issue and improves reliability, indicating a corrective change rather than just a cosmetic or trivial update.",2.0,2.0,4.0,"The commit message 'Fixed Bing issues' is too vague and lacks specific details about what was fixed or why the change was necessary. The diff shows a modification to the Bing test that adds retry logic (three attempts) when checking if `g.ok` is true, which improves reliability. However, the commit message does not mention the addition of retries or the intent to handle transient failures. A better message would specify the change, such as 'Added retry logic to Bing geocoding test to improve reliability'. As it stands, the message is insufficiently descriptive and fails to convey the technical impact, resulting in a low score.","The commit message 'add test for' is extremely vague and lacks specificity. It does not indicate what was added, why it was added, or what functionality is being tested. While the diff shows a modification to a test that improves reliability by retrying Bing geocoding attempts, the commit message fails to reflect this improvement or context. A better message would describe the change, such as 'add retry logic to Bing geocoding test for improved reliability'. Therefore, the message is insufficient and only scores a 2.","The commit message is clear and relevant to the change, accurately describing the fix for the Bing geocoding issue by adding retries. It specifies the scope (bing) and the action (retrying up to 3 times), which is helpful for understanding the change. However, it lacks detail about why retries are needed (e.g., network issues, temporary failures), which could be improved for completeness. Overall, it is well-written and appropriate for the change, earning a strong score."
97709200c4dcea8f51a7f8cda158433914a80366,"Fixed Scripts as Entry Points


Former-commit-id: 14f0d93b1ce76547935284872a3ad9cf1ce4f9b7",setup.py,"@@ -16,7 +16,8 @@ if sys.argv[-1] == 'publish':
 
 requires = ['requests==2.2.0', 'haversine==0.1']
 
-scripts = ['scripts/geocoder']
+entry_points = dict()
+entry_points['console_scripts'] = ['geocoder = geocoder:_main', ]
 
 with open('README.rst') as f:
     readme = f.read()
@@ -33,7 +34,7 @@ setup(
     url='https://github.com/DenisCarriere/geocoder',
     download_url='https://github.com/DenisCarriere/geocoder/tarball/master',
     license=license,
-    scripts=scripts,
+    entry_points=entry_points,
     packages=['geocoder'],
     package_data={'': ['LICENSE', 'README.rst']},
     package_dir={'geocoder': 'geocoder'},
",add setup.py for geocoder,docs(conftest): update entry_points for console scripts,Semantic,"The new message provides more specific context about the change (updating entry_points in conftest for console scripts) and clarifies the scope and location, improving semantic clarity over the generic 'Fixed Scripts as Entry Points'.",2.0,2.0,2.0,"The commit message 'Fixed Scripts as Entry Points' is too vague and lacks specificity. While it correctly identifies a change in script handling, it does not explain what was fixed, why it was necessary, or how it improves the code or user experience. A better message would mention the transition from `scripts=` to `entry_points`, and perhaps note the benefit (e.g., better compatibility with Python packaging standards or improved script installation). As it stands, the message is minimally informative and fails to provide context for reviewers or future developers.","The commit message 'add setup.py for geocoder' is overly vague and does not reflect the actual changes made. The diff shows a modification to setup.py where scripts are replaced with entry_points for console scripts, indicating a more specific change related to packaging and entry point configuration. The commit message fails to mention the key update (entry_points instead of scripts) or the purpose of the change (improving package distribution with console scripts). A better message would clarify that entry points were added for the geocoder console script. Thus, it is insufficiently descriptive and lacks technical detail, warranting a score of 2.","The commit message is misleading and poorly aligned with the actual changes. It claims to be about 'docs(conftest)' which is unrelated to the changes—there is no conftest.py or documentation update involved. The actual change is updating entry_points for console scripts in the setup.py file, which is a packaging/configuration change, not a documentation one. The message fails to accurately describe the change's purpose or scope, making it confusing and potentially misleading. A better message would have stated something like 'setup.py: add console script entry_points for geocoder'. Thus, it receives a score of 2 for being off-topic and inaccurate."
a56216b472a6b984ef534b54553c83a186184788,"Fixed IP blocking


Former-commit-id: c484e55ae171747d9abca61f6a742a7c761911fd",geocoder/ip.py,"@@ -8,11 +8,13 @@ class Ip(Base):
 
     def __init__(self, location):
         self.location = location
-        url = 'http://www.maxmind.com/geoip/v2.0/city_isp_org/{ip}'
+        url = 'https://geoip.maxmind.com/geoip/v2.0/city_isp_org/{ip}'
         self.url = url.format(ip=location)
         self.json = dict()
         self.params = dict()
-        self.params['demo'] = 1
+        self.params['geolocation_status'] = 'UNSUPPORTED'
+        self.headers = dict()
+        self.headers['Referer'] = 'http://www.maxmind.com/en/javascript_demo'
 
     def lat(self):
         return self.safe_coord('location-latitude')
",add maxmind support for ip,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now being addressed, which aligns with a corrective fix rather than a cosmetic or trivial change.",2.0,2.0,1.0,"The commit message 'Fixed IP blocking' is overly vague and does not accurately reflect the changes in the code diff. The diff shows a change from HTTP to HTTPS in the URL, addition of headers and a parameter, and removal of a demo flag — none of which directly relate to 'IP blocking'. The message fails to explain what was actually fixed or why. While the changes might indirectly affect requests (e.g., due to header or protocol changes), the commit message lacks specificity and context, making it difficult to understand the intent or impact. A better message would describe the actual changes, such as 'Updated MaxMind API URL to HTTPS and added Referer header for compliance'. Therefore, the score is 2 — insufficient detail but not completely off-topic.","The commit message 'add maxmind support for ip' is overly vague and does not reflect the actual changes made. The diff shows updates to the URL (from HTTP to HTTPS), addition of headers and parameters, and structural changes to the class initialization. A better message would specify these changes, such as 'Update MaxMind API integration to use HTTPS, add Referer header, and set geolocation_status parameter'. The current message fails to convey the technical details or purpose of the changes, making it insufficient for understanding the commit's intent.","The commit message 'fix: rectification failed' is highly vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what change was made. The diff shows a clear update from HTTP to HTTPS, a change in parameter name, and addition of headers, which are meaningful improvements for security and functionality. A proper commit message should reflect these changes (e.g., 'fix: update MaxMind URL to HTTPS and add Referer header for compliance'). The current message fails to provide context or value to a reviewer, making it poor in clarity and usefulness."
a56216b472a6b984ef534b54553c83a186184788,"Fixed IP blocking


Former-commit-id: c484e55ae171747d9abca61f6a742a7c761911fd",setup.py,"@@ -33,7 +33,7 @@ with open('LICENSE') as f:
 
 setup(
     name='geocoder',
-    version='0.4.3',
+    version='0.4.4',
     long_description=readme,
     description=""Python (Google) Geocoder"",
     author='Denis Carriere',
",add missing setup.py,chore(version): update version to 0.4.4,Cosmetic,"The change involves updating a version number, which is a routine maintenance task with no functional impact, and is primarily a cosmetic update to versioning information.",1.0,1.0,5.0,"The commit message 'Fixed IP blocking' is highly misleading given the actual change in the code diff. The diff only shows an increment in the version number from '0.4.3' to '0.4.4', which is a version bump and does not indicate any fix for IP blocking. There is no mention of IP blocking, related code, or any functionality affected. A proper commit message should accurately reflect the change. Therefore, the message is inaccurate and does not match the actual diff, resulting in a poor score.","The commit message 'add missing setup.py' is highly inaccurate and misleading. The diff shows only a version bump from '0.4.3' to '0.4.4' in the setup.py file, not the addition of a missing file. The message fails to reflect the actual change and incorrectly implies the file was missing and added, when in fact it was already present and only versioned. A proper commit message should describe the actual change, such as 'Bump version to 0.4.4 in setup.py'. Therefore, the commit message is poor and does not match the diff.","The commit message is clear, concise, and follows the conventional format for version updates ('chore(version): update version to 0.4.4'). It accurately reflects the change in the code (version bump) and is appropriately categorized under 'chore' as it is a maintenance task unrelated to core functionality. The message provides sufficient context without being verbose, making it excellent for readability and version tracking in a changelog or Git history."
f5d40118ac5fde14b73526a6309989cd08b8afaa,"Fixed Distance function


Former-commit-id: bb04b523c5a444292790c643c811d10b1e69e615",geocoder/distance.py,"@@ -30,11 +30,11 @@ class Distance(object):
 		return '<Distance - {0} to {1} [{2}km]>'.format(self.location1, self.location2, self.km)
 
 	def calculate_distance(self):
-		if bool(self.lat1 and self.lng1 and self.lat2 and self.lng2):
-			self.ok = True
+		latlng1 = self.location1.latlng
+		latlng2 = self.location2.latlng
 
-			latlng1 = (self.lat1, self.lng1) 
-			latlng2 = (self.lat2, self.lng2)
+		if bool(latlng1 and latlng2):
+			self.ok = True
 			self.km = haversine(latlng1, latlng2)
 			self.miles = haversine(latlng1, latlng2, miles=True)
 		else:
",update distance.py,refactor(distance): use location latlng instead of separate lat/lng fields,Semantic,"The change replaces separate lat/lng fields with a location latlng object, improving code semantics and readability by aligning with more natural geographic data representation.",2.0,2.0,5.0,"The commit message 'Fixed Distance function' is overly vague and provides no context about what was actually fixed or why. While the code diff shows a refactoring of the distance calculation logic to use location.latlng properties instead of raw lat/lng attributes, the commit message fails to convey the improvement, the problem it solved, or the benefit. A better message would describe the change (e.g., 'Refactored distance calculation to use latlng properties for cleaner and safer access'). As such, it scores a 2 for lacking specificity and technical context.","The commit message 'update distance.py' is extremely vague and provides no information about what was changed or why. While the diff shows a meaningful refactoring of the distance calculation logic—replacing direct latitude/longitude attributes with a latlng property access and improving code readability—the commit message fails to convey the actual improvement or intent. A better message would describe the change, such as 'Refactor distance calculation to use location.latlng for cleaner coordinate handling'. As it stands, the message offers no value for understanding the change, resulting in a low score.","The commit message accurately reflects the change in the code: it refactors the distance calculation to use the `latlng` property from the location objects instead of separate `lat1`, `lng1`, etc. fields. This is clear, concise, and directly relevant to the diff, which shows the removal of redundant lat/lng fields and their replacement with `location1.latlng` and `location2.latlng`. The message also correctly identifies the type of change ('refactor') and the specific improvement ('use location latlng instead of separate lat/lng fields')."
76f866c078762901ee43cf3681fb3089b34397ef,"Fixed Distance func


Former-commit-id: b9a712abccb0a36f34eee05835e38d3a877a99dc",geocoder/google.py,"@@ -2,35 +2,18 @@
 
 from base import Base
 
-
 class Google(Base):
     name = 'Google'
     url = 'http://maps.googleapis.com/maps/api/geocode/json'
 
-    def __init__(self, location='', lat='', lng='', proxies=''):
+    def __init__(self, location='', proxies=''):
         self.proxies = proxies
         self.location = location
         self.json = dict()
         self.params = dict()
         self.params['sensor'] = 'false'
-
-        # Normal Geocoding Params
-        if location:
-            self.params['address'] = location
-        # Reverse Geocoding Params
-        else:
-            self.reverse_geocode(lat, lng)
-
-    def reverse_geocode(self, lat, lng):
-        if isinstance(lat, (tuple, list)):
-            if len(lat) == 2:
-                lat, lng = lat
-
-        if bool(lat and lng):
-            latlng = '{0},{1}'.format(lat, lng)
-            self.params['latlng'] = latlng
-            self.location = latlng
-
+        self.params['address'] = location
+        
     def lat(self):
         return self.safe_coord('location-lat')
 
",add missing docstring,fix(base): remove redundant reverse geocoding logic and simplify init,Corrective,"The change removes redundant logic and simplifies initialization, which improves correctness by eliminating unnecessary operations and potential bugs in the distance function's behavior.",1.0,1.0,4.0,"The commit message 'Fixed Distance func' is highly misleading and irrelevant to the actual changes in the diff. The diff shows modifications to a Google geocoding class, specifically removing reverse geocoding logic and adjusting parameter handling in the __init__ method, with no mention of a 'Distance func'. There is no reference to distance calculation or any related functionality. The message does not accurately reflect the changes made, leading to confusion and misalignment with the actual code modifications. Therefore, it is poor and should be scored 1.","The commit message 'add missing docstring' is highly inadequate given the actual changes in the code diff. The diff shows a significant refactoring of the `__init__` method, including removal of reverse geocoding logic, restructuring of parameters, and removal of unused code. These changes are not merely about adding a docstring; they involve functional reorganization and logic changes. A meaningful commit message should reflect the actual purpose and scope of the change. The current message fails to describe what was actually changed, why it was changed, or how it affects functionality. Therefore, it is poor and misleading.","The commit message accurately reflects the changes in the code diff. It correctly identifies that redundant reverse geocoding logic was removed and the __init__ method was simplified. The message is concise, relevant, and clearly communicates the purpose of the change. However, it slightly misses mentioning the removal of the `lat` and `lng` parameters from the `__init__` signature (which were replaced by `location`), and the fact that the `reverse_geocode` method is now only called when `location` is absent — a detail that could improve clarity. Still, the message is generally clear and appropriate for a code change, making it a strong but not perfect commit message."
76f866c078762901ee43cf3681fb3089b34397ef,"Fixed Distance func


Former-commit-id: b9a712abccb0a36f34eee05835e38d3a877a99dc",geocoder/reverse.py,"@@ -0,0 +1,57 @@
+# -*- coding: utf-8 -*-
+
+from base import Base
+from location import Location
+
+
+class Reverse(Base):
+    name = 'Reverse Google'
+    url = 'http://maps.googleapis.com/maps/api/geocode/json'
+
+    def __init__(self, latlng='', proxies=''):
+        self.proxies = proxies
+        location = Location(latlng)
+        lat = location.lat
+        lng = location.lng
+        self.latlng = '{0},{1}'.format(lat, lng)
+        self.json = dict()
+        self.params = dict()
+        self.params['sensor'] = 'false'
+        self.params['latlng'] = self.latlng
+        self.location = latlng
+
+    def lat(self):
+        return self.safe_coord('location-lat')
+
+    def lng(self):
+        return self.safe_coord('location-lng')
+
+    def address(self):
+        return self.safe_format('results-formatted_address')
+
+    def status(self):
+        return self.safe_format('status')
+
+    def quality(self):
+        return self.safe_format('geometry-location_type')
+
+    def postal(self):
+        return self.safe_format('postal_code')
+
+    def bbox(self):
+        south = self.json.get('southwest-lat')
+        west = self.json.get('southwest-lng')
+        north = self.json.get('northeast-lat')
+        east = self.json.get('northeast-lng')
+        return self.safe_bbox(south, west, north, east)
+
+    def city(self):
+        return self.safe_format('locality')
+
+    def country(self):
+        return self.safe_format('country')
+
+if __name__ == '__main__':
+    latlng = (45.4215296, -75.69719309999999)
+    provider = Reverse(latlng)
+    print provider.latlng
",add reverse api docs,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue in the distance function's behavior, which points to a corrective fix addressing a functional problem.",1.0,1.0,1.0,"The commit message 'Fixed Distance func' is completely irrelevant to the code diff provided. The diff introduces a new class `Reverse` for geocoding functionality, not a distance function. There is no mention of a 'Distance' function or any related code. The commit message does not accurately describe what was changed, and the former-commit-id suggests a different context. This is a clear case of a mismatch between the commit message and the actual changes, making it poor and misleading.","The commit message 'add reverse api docs' is highly mismatched with the actual code change. The diff shows the addition of a new Python class `Reverse` that implements a reverse geocoding functionality using Google Maps API, including methods for extracting latitude, longitude, address, status, and other location data. There is no documentation (e.g., comments, docstrings, or API documentation) added in the code. The message suggests documentation was added, but the code contains no such content. Therefore, the commit message is misleading and does not accurately reflect the change.","The commit message 'fix: rectification failed' is highly inadequate for the provided code diff. The diff shows the addition of a new class `Reverse` that implements geocoding functionality using Google's API, with methods to extract latitude, longitude, address, status, and other location details. There is no indication of a 'rectification failure' or any actual bug being fixed. The message is vague, technically incorrect, and does not describe what was actually changed or why. It fails to provide context, clarity, or relevance to the code changes, making it poor communication for both developers and reviewers."
76f866c078762901ee43cf3681fb3089b34397ef,"Fixed Distance func


Former-commit-id: b9a712abccb0a36f34eee05835e38d3a877a99dc",setup.py,"@@ -33,7 +33,7 @@ with open('LICENSE') as f:
 
 setup(
     name='geocoder',
-    version='0.4.4',
+    version='0.4.5',
     long_description=readme,
     description=""Python (Google) Geocoder"",
     author='Denis Carriere',
",add missing setup.py,chore(version): update version to 0.4.5,Trivial,"The change is a version update, which is a routine maintenance task with no functional or behavioral impact on the code or its output.",1.0,2.0,5.0,"The commit message 'Fixed Distance func' is highly misleading and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '0.4.4' to '0.4.5' in the setup.py file, which is a semantic version update, not a fix to a 'Distance func'. There is no mention of a distance function or any related functionality. The commit message fails to describe what was actually changed, making it unclear and potentially confusing. Therefore, it is poor in terms of clarity, accuracy, and usefulness.","The commit message 'add missing setup.py' is misleading and inaccurate. The diff shows only a version bump from '0.4.4' to '0.4.5' in setup.py, not the addition of a missing file. The message does not reflect the actual change, which is a version update, not the creation of a file. A more accurate message would be 'Bump version to 0.4.5 in setup.py'. Therefore, the commit message is poorly descriptive and fails to convey the true nature of the change, warranting a low score.","The commit message is clear, concise, and follows the conventional format for version updates. It explicitly states the type of change ('chore'), the action taken ('update version'), and the new version number ('0.4.5'). This provides sufficient context for any developer reviewing the change without needing to look at the diff, making it excellent for version tracking and maintainability."
e973bf1e8246d38c6aa57d6c51dd59eaf2aa93f8,"Small fixes


Former-commit-id: 00feeb8d7a4fe2f69958da7ed35ff4f230dee117",geocoder/geonames.py,"@@ -59,7 +59,7 @@ class Geonames(Base):
     def population(self):
         return self.json.get('geonames-population')
 
-    def help_key(self):
+    def help_username(self):
         print '<ERROR>'
         print 'Please provide a <username> paramater when using Geonames'
         print '    >>> import geocoder'
",add missing documentation for geonames,feat(geonames): rename help_key to help_username,Semantic,"The change introduces a meaningful renaming of a parameter (help_key to help_username), which alters the semantic meaning of the code and reflects a more accurate or intuitive naming convention, indicating a deliberate design improvement.",2.0,2.0,2.0,"The commit message 'Small fixes' is overly vague and provides no context about what was actually changed or why. The diff shows a clear renaming of a method from `help_key` to `help_username`, which is a specific change with a clear purpose. A better commit message would describe this change explicitly, such as 'Rename help_key to help_username to clarify parameter expectation'. Since the message lacks detail and fails to communicate the significance of the change, it earns a score of 2.","The commit message 'add missing documentation for geonames' is overly vague and does not accurately reflect the actual change. The diff shows a method rename from `help_key` to `help_username`, which is a functional change, not just documentation. The commit message fails to mention the method rename or the specific update to the help functionality. A better message would describe the change in terms of what was renamed and why. Thus, it is only minimally relevant and lacks specificity, warranting a score of 2.","The commit message is technically correct in stating that the method was renamed from `help_key` to `help_username`, but it lacks context and clarity. It does not explain why the change was made, what the method originally did, or how this affects users. A better commit message would include the purpose of the change and its impact. As a result, while the message is accurate, it is minimal and insufficient for a clear understanding of the change, warranting a score of 2."
9bafc8b9f46d460264ccfff7e476e0dd7e49234f,"Fixed Free keys


Former-commit-id: 38410dd93055d026ab0d12b59bbd88a75a156a42",geocoder/bing.py,"@@ -8,7 +8,7 @@ class Bing(Base):
     name = 'Bing'
     url = 'http://dev.virtualearth.net/REST/v1/Locations'
 
-    def __init__(self, location, key='AtnSnX1rEHr3yTUGC3EHkD6Qi3NNB-PABa_F9F8zvLxxvt8A7aYdiG3bGM_PorOq'):
+    def __init__(self, location, key):
         self.location = location
         self.params = dict()
         self.json = dict()
",add missing docstrings,feat(bing): remove default key parameter,Corrective,"The change removes a default key parameter that could lead to unintended behavior or security risks, addressing a potential flaw in the configuration, thus correcting a functional issue.",2.0,2.0,3.0,"The commit message 'Fixed Free keys' is vague and does not clearly describe what was actually changed or why. The diff shows that a default API key was removed (from the constructor), which suggests the change was to make the key parameter required instead of defaulting to a hardcoded one. However, the commit message fails to explain the intent—such as improving security, avoiding hardcoded keys, or enabling users to provide their own keys. A better message would clarify the purpose (e.g., 'Remove hardcoded API key to improve security and allow user configuration'). As a result, the message is technically accurate but lacks clarity and context, warranting a score of 2.","The commit message 'add missing docstrings' is vague and does not accurately reflect the actual change. The diff shows that a default parameter value for the 'key' argument was removed, not that docstrings were added. Since the change is about removing a default value (which may affect API key handling), the commit message is misleading and fails to convey the true nature of the change. A more accurate message would describe the removal of a hardcoded API key default. Therefore, the message is only minimally relevant and deserves a low score.","The commit message correctly identifies the change as removing a default key parameter, which aligns with the diff. However, it lacks context about why the change was made (e.g., security concerns, configuration best practices) and does not mention the broader impact or intent. While it is accurate and concise, it is somewhat minimal in explanation, which limits its usefulness for understanding the motivation behind the change. Therefore, it receives a moderate score."
9bafc8b9f46d460264ccfff7e476e0dd7e49234f,"Fixed Free keys


Former-commit-id: 38410dd93055d026ab0d12b59bbd88a75a156a42",geocoder/nokia.py,"@@ -0,0 +1,61 @@
+# -*- coding: utf-8 -*-
+from base import Base
+
+
+class Nokia(Base):
+    name = 'Nokia'
+    url = 'http://geocoder.api.here.com/6.2/geocode.json'
+
+    def __init__(self, location, app_id, app_code):
+        self.location = location
+        self.json = dict()
+        self.params = dict()
+        self.params['searchtext'] = location
+        self.params['app_id'] = app_id
+        self.params['app_code'] = app_code
+        self.params['gen'] = 4
+
+        if not bool(app_id and app_code):
+            self.help_key()
+
+    def lat(self):
+        return self.safe_coord('NavigationPosition-Latitude')
+
+    def lng(self):
+        return self.safe_coord('NavigationPosition-Longitude')
+
+    def address(self):
+        return self.safe_format('Address-Label')
+
+    def quality(self):
+        return self.safe_format('Result-MatchLevel')
+
+    def postal(self):
+        return self.safe_format('Address-PostalCode')
+
+    def bbox(self):
+        south = self.json.get('BottomRight-Latitude')
+        west = self.json.get('TopLeft-Longitude')
+        north = self.json.get('TopLeft-Latitude')
+        east = self.json.get('BottomRight-Longitude')
+        return self.safe_bbox(south, west, north, east)
+
+    def city(self):
+        return self.safe_format('Address-City')
+
+    def state(self):
+        return self.safe_format('StateName')
+
+    def country(self):
+        return self.safe_format('CountryName')
+
+    def help_key(self):
+        print '<ERROR> Please provide both (app_code & app_id) paramaters when using Nokia'
+        print '>>> import geocoder'
+        print '>>> app_code = ""XXXX""'
+        print '>>> app_id = ""XXXX""'
+        print '>>> g = geocoder.nokia(<location>, app_code=app_code, app_id=app_id)'
+        print ''
+        print 'How to get a Key?'
+        print '-----------------'
+        print 'http://developer.here.com/get-started'
",add nokia api docs,feat(geocoder): add Nokia geocoding service with app_id and app_code support,Semantic,"The new message provides a clearer, more specific description of the change, indicating a new feature (Nokia geocoding service) with relevant technical details (app_id and app_code), whereas the old message was vague and lacked context.",1.0,2.0,4.0,"The commit message 'Fixed Free keys' is highly misleading and irrelevant to the actual changes in the code diff. The diff introduces a new Nokia geocoding provider class with proper initialization, method definitions for location fields, and a help_key() method that prints usage instructions when app_id and app_code are missing. There is no indication of fixing 'free keys' or any issue related to key access. The message does not describe what was actually implemented or fixed, and the reference to 'former-commit-id' suggests a lack of context or clarity. Therefore, the commit message is poor in content, accuracy, and usefulness.","The commit message 'add nokia api docs' is overly vague and does not accurately reflect the actual content of the diff. The diff introduces a full Python class implementation for the Nokia geocoding service, including initialization, method definitions, and error handling, not just documentation. While the code includes helpful usage examples and error messages (like the help_key method), this is functionality, not documentation. A more accurate commit message would reflect the addition of a Nokia geocoding provider implementation. Therefore, the message is misleading and under-specifies the actual change, warranting a score of 2.","The commit message is clear, relevant, and accurately reflects the change: it introduces a new Nokia geocoding service with proper app_id and app_code support. It uses the correct semantic tag 'feat' and clearly communicates the purpose. However, it lacks detail about the implementation (e.g., error handling, parameter validation, or specific fields used like bbox or quality), which could be useful for maintainers. Still, it is well-structured and appropriate for a feature addition, just not fully exhaustive."
9bafc8b9f46d460264ccfff7e476e0dd7e49234f,"Fixed Free keys


Former-commit-id: 38410dd93055d026ab0d12b59bbd88a75a156a42",geocoder/tomtom.py,"@@ -5,7 +5,7 @@ class Tomtom(Base):
     name = 'TomTom'
     url = 'https://api.tomtom.com/lbs/geocoding/geocode'
 
-    def __init__(self, location, key='95kjrqtpzv39ujcxfyr57wz3'):
+    def __init__(self, location, key):
         self.location = location
         self.json = dict()
         self.params = dict()
",add missing class attributes,refactor(api): remove default key parameter,Corrective,"The change removes a default key parameter, which likely addresses a bug or misuse in the API behavior, improving correctness and reliability.",2.0,2.0,4.0,"The commit message 'Fixed Free keys' is vague and does not clearly describe what was changed or why. The diff shows that a default key value was removed (from '95kjrqtpzv39ujcxfyr57wz3' to just 'key'), which suggests the change is about making the key parameter configurable rather than fixing a 'free key'. The message lacks context about the impact or intent, and 'Fixed Free keys' is ambiguous—there's no indication of whether it was a security fix, a deprecation, or a usability improvement. While it's slightly relevant, it fails to convey meaningful information about the change.","The commit message 'add missing class attributes' is vague and does not accurately reflect the change. The diff shows that a default parameter `key='95kjrqtpzv39ujcxfyr57wz3'` is removed and replaced with just `key`, which is not adding a missing attribute but rather removing a default value. The message fails to convey the actual change in behavior or intent, making it misleading. A better message would specify that a default parameter was removed or that the key parameter is now required. Thus, the message is technically incorrect and lacks clarity, warranting a low score.","The commit message accurately reflects the change: it removes a default parameter (`key='95kjrqtpzv39ujcxfyr57wz3'`) in the `__init__` method, which aligns with the task of refactoring the API initialization. The message is concise and clear, using the appropriate prefix 'refactor(api)'. However, it could be slightly improved by mentioning the security or configuration rationale (e.g., avoiding hardcoded keys), which would make it more informative. Still, it is accurate, relevant, and sufficient for most review contexts, warranting a strong '4'."
59b0a0d204c9bde251b0a6a20dc59d986e2150fc,"changes to readme


Former-commit-id: b9662e013894c85c5393b6b42dfe6c52b5a1940d",setup.py,"@@ -8,10 +8,6 @@ try:
 except ImportError:
     from distutils.core import setup
 
-requires = [
-    'requests>=2.2.0'
-]
-
 if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist --formats=gztar upload')
     sys.exit()
@@ -20,19 +16,21 @@ with open('README.md') as f:
     readme = f.read()
 with open('LICENSE') as f:
     license = f.read()
+with open('requirements.txt') as f:
+    requires = f.read()
 
 setup(
     name='geocoder',
-    version='0.5.6',
-    long_description=readme,
+    version='0.5.7',
     description=""A simplistic Python Geocoder (Google, Bing, OSM & more)"",
+    long_description=readme,
     author='Denis Carriere',
     author_email='carriere.denis@gmail.com',
-    url='http://addxy.com',
+    url='https://github.com/DenisCarriere/geocoder',
     download_url='https://github.com/DenisCarriere/geocoder/tarball/master',
     license=license,
     packages=['geocoder'],
-    package_data={'': ['LICENSE', 'README.rst']},
+    package_data={'': ['LICENSE', 'README.md']},
     package_dir={'geocoder': 'geocoder'},
     include_package_data=True,
     install_requires=requires,
",add geocoder to setup.py,chore(package): update version to 0.5.7 and fix requirements file path,Corrective,"The change updates the package version and fixes a requirements file path, which addresses a potential issue in the package setup and ensures correct dependency resolution.",2.0,2.0,3.0,"The commit message 'changes to readme' is extremely vague and does not accurately reflect the actual changes in the diff. While the diff does update the README file format (from .rst to .md) and modifies the version number, URL, and requirements loading, the message fails to mention any of these key changes. It also omits the update to the version (0.5.6 → 0.5.7), the change in the URL from http to https, or the addition of requirements.txt parsing. A proper commit message should clearly describe what was changed and why. Therefore, it is insufficient and misleading, warranting a low score.","The commit message 'add geocoder to setup.py' is overly vague and does not reflect the actual changes made. The diff shows that the version was updated from 0.5.6 to 0.5.7, the README and license file paths were updated, the URL was changed to GitHub, and requirements were now read from requirements.txt. The message fails to mention any of these specific improvements or changes, making it insufficient for understanding the scope and impact of the commit. A better message would include details like 'update version to 0.5.7, update URLs, and add requirements from requirements.txt'.","The commit message accurately reflects the main changes: updating the version from 0.5.6 to 0.5.7 and fixing the requirements file path (now reading from 'requirements.txt' instead of defining it directly). However, it lacks context about why the requirements path was changed or whether the `install_requires` was actually updated in a meaningful way (e.g., if the content changed). The message is clear and concise but slightly incomplete in explaining the impact. It's not poor, but it doesn't fully capture the scope or intent of the change, which reduces its completeness and clarity."
59b0a0d204c9bde251b0a6a20dc59d986e2150fc,"changes to readme


Former-commit-id: b9662e013894c85c5393b6b42dfe6c52b5a1940d",test_pandoc.py,"@@ -0,0 +1,23 @@
+try:
+    import subprocess
+    import pandoc
+
+    process = subprocess.Popen(
+        ['which pandoc'],
+        shell=True,
+        stdout=subprocess.PIPE,
+        universal_newlines=True
+    )
+
+    pandoc_path = process.communicate()[0]
+    pandoc_path = pandoc_path.strip('\n')
+
+    pandoc.core.PANDOC_PATH = pandoc_path
+
+    readme = pandoc.Document()
+    readme.markdown = open('README.md').read()
+    long_description = readme.rst
+except:
+    print 'no'
+    pass
+
",add missing pandoc header,add(utility): detect pandoc path and convert README.md to RST,Semantic,"The new message provides a more specific and meaningful description of the change, indicating a functional enhancement (detecting pandoc path and converting Markdown to RST) rather than just a cosmetic update to the README.",2.0,1.0,3.0,"The commit message is extremely vague and does not reflect the actual changes in the code. It only says 'changes to readme' which is ambiguous and provides no context about what was modified or why. The diff shows a significant addition of code that attempts to detect and set the pandoc path for processing README.md into RST, which is a specific functionality. A better commit message would describe this intent, such as 'Add pandoc path detection and README.md to RST conversion'. The current message fails to convey any technical detail or purpose, making it poor for tracking or understanding changes.","The commit message 'add missing pandoc header' is highly inaccurate and misleading. The diff shows the addition of code to detect pandoc installation and set its path, not the addition of a header. There is no header being added to a document or configuration file. The actual change is a runtime check and configuration for pandoc integration, which is unrelated to a 'header'. The message fails to describe what was actually changed, misrepresents the intent, and does not reflect the technical content of the diff. Therefore, it is poor and deserves a score of 1.","The commit message is basic and indicates the intent of the change, but it lacks detail about the actual implementation or potential edge cases. The code attempts to detect pandoc and convert README.md to RST, but the exception handling is overly broad (using bare 'except:') and could lead to silent failures. Additionally, the commit message does not mention that the conversion only occurs if pandoc is found, nor does it clarify whether the conversion is successful or handled gracefully. While the intent is clear, the message is too vague to fully reflect the implementation's scope and risks, resulting in a moderate score."
b9702a5ff1447225e95c86fa431cc66117bdc127,"change host for postgis


Former-commit-id: fff42db0af8060798d6ede862b1342f00a0903df",examples/example_postgis_connect.py,"@@ -4,7 +4,7 @@ import geocoder
 import logging
 import time
 
-conn = psycopg2.connect(""host=postgis.cbn8rngmikzu.us-west-2.rds.amazonaws.com port=5432 dbname=mydb user=addxy password=Denis44C"")
+conn = psycopg2.connect(""host=kingston.cbn8rngmikzu.us-west-2.rds.amazonaws.com port=5432 dbname=mydb user=addxy password=Denis44C"")
 cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
 
 sql_search = """"""
",add missing import,docs(backend): update database host from postgis to kingston,Semantic,"The new message provides more context by specifying the change as part of documentation updates and clearly identifies the database host change from postgis to kingston, improving clarity and intent compared to the vague original message.",2.0,1.0,3.0,"The commit message is overly vague and lacks context. While it correctly indicates a change in the host, it does not specify why the change was made, what the old and new hosts are (though the diff shows it), or any impact on functionality or environment. A better message would include the reason (e.g., 'switched to new RDS instance for better performance/availability') and clarify the change. As it stands, it's minimally informative and fails to provide meaningful context for a reviewer or future developer.","The commit message 'add missing import' is completely inaccurate and irrelevant to the code diff. The diff shows a change in the database host address (from 'postgis' to 'kingston'), not the addition of an import. There is no new import added in the code. Therefore, the commit message does not reflect the actual change and is misleading or incorrect.","The commit message incorrectly states that it's updating documentation (""docs(backend)"") when the actual change is to the database host in code, not in documentation. This misalignment between the message and the diff reduces its accuracy. While the message correctly identifies the component (backend) and the nature of the change (database host update), the ""docs"" label is misleading and technically inaccurate. The change is a code update, not a documentation update. Therefore, it's not excellent but is somewhat clear and relevant—earning a moderate score of 3."
208504a46f9342386184374b8b2d6a9ff33c8ef6,"change host for postgis


Former-commit-id: 356874c5a33de24b05a56f3dfd35fe1b8ae0db02",examples/example_postgis.py,"@@ -4,7 +4,7 @@ import geocoder
 import logging
 import time
 
-conn = psycopg2.connect(""host=postgis.cbn8rngmikzu.us-west-2.rds.amazonaws.com port=5432 dbname=mydb user=addxy password=Denis44C"")
+conn = psycopg2.connect(""host=kingston.cbn8rngmikzu.us-west-2.rds.amazonaws.com port=5432 dbname=mydb user=addxy password=Denis44C"")
 cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
 
 sql_search = """"""
",add missing import,docs(backend): update database host from postgis to kingston,Semantic,"The new message provides more context by specifying the change as part of documentation updates and clearly identifies the change from 'postgis' to 'kingston' in the database host, improving clarity and intent.",2.0,1.0,3.0,"The commit message is incomplete and lacks context. While it correctly indicates a change in the host address, it does not specify why the change was made, what the old and new hosts are, or any impact on functionality or deployment. A simple 'change host for postgis' is too vague and does not provide enough information for a reviewer to understand the significance or reason behind the change. A better message would include the reason (e.g., 'switched to new RDS instance for improved reliability') and clarify the environment or service affected.","The commit message 'add missing import' is completely irrelevant to the code changes shown in the diff. The diff shows a change in the PostgreSQL connection host from 'postgis.cbn8rngmikzu.us-west-2.rds.amazonaws.com' to 'kingston.cbn8rngmikzu.us-west-2.rds.amazonaws.com', which is a configuration update, not the addition of an import. Therefore, the message does not accurately describe the change and is misleading. A proper message would reflect this as a host update or environment change.","The commit message indicates a change in the database host from 'postgis' to 'kingston', which is accurate and relevant to the diff. However, it lacks context about why the change was made (e.g., environment switch, deployment update, or configuration change), and the term 'docs(backend)' is misleading since no documentation files were modified—only a configuration file. This creates confusion about the nature of the change. While the message correctly identifies the change, it is not detailed or clear enough to be considered excellent. Therefore, a score of 3 reflects a partially accurate but insufficiently contextual message."
32f637eb413e95e12c3493aaa217e9ea340a483e,"Change Setup details


Former-commit-id: d83c21100f178b36f6fbabc29c7c23146ea4384a",setup.py,"@@ -8,23 +8,25 @@ try:
 except ImportError:
     from distutils.core import setup, find_packages
 
-version = '0.6.0'
+VERSION = '0.6.0'
+REQUIRES = ['requests>=2.3.0']
 
-here = os.path.abspath(os.path.dirname(__file__))
-README = open(os.path.join(here, 'README.md')).read()
-REQUIRES = open(os.path.join(here, 'requirements.txt')).read()
+with open('README.md') as f:
+    README = f.read()
+with open('LICENSE') as f:
+    LICENSE = f.read()
 
 setup(
     name='geocoder',
-    version=version,
+    version=VERSION,
     description=""A simplistic Python Geocoder (Google, Bing, OSM & more)"",
     long_description=README,
     author='Denis Carriere',
     author_email='carriere.denis@gmail.com',
     url='https://github.com/DenisCarriere/geocoder',
     download_url='https://github.com/DenisCarriere/geocoder/tarball/master',
-    license=license,
-    packages=find_packages(),
+    license=LICENSE,
+    packages=['geocoder'],
     package_data={'': ['LICENSE', 'README.md']},
     package_dir={'geocoder': 'geocoder'},
     include_package_data=True,
",add missing setup.py,"feat(package): update version and add requirements, license, and README",Semantic,"The new message provides a more descriptive and semantic summary of the changes, indicating a feature addition with specific details (version update, requirements, license, README), which improves clarity and context compared to the vague 'Change Setup details'.",2.0,2.0,3.0,"The commit message is extremely vague and provides no context about what was changed or why. While the diff shows updates to version, README, LICENSE, and package configuration, the message 'Change Setup details' offers no actionable insight. A better message would specify the changes (e.g., 'Update version and dependencies; add LICENSE and README to setup; restrict packages to geocoder') and their purpose (e.g., 'Improve setup.py clarity and ensure proper licensing and documentation inclusion'). As it stands, the message fails to communicate value or impact, making it poor for a commit message.","The commit message 'add missing setup.py' is overly vague and does not accurately reflect the actual changes. The diff shows modifications to an existing setup.py file, including variable renaming (version → VERSION), addition of REQUIRES, and inclusion of README and LICENSE files. The message fails to mention any of these specific changes, nor does it indicate what was missing or why. A better message would describe the actual improvements, such as 'update setup.py with proper versioning, requirements, and license handling'. Therefore, the message is minimally informative and lacks detail, warranting a score of 2.","The commit message is somewhat accurate in indicating that the version was updated and that license, README, and requirements are now included, but it lacks specificity and clarity. It fails to mention that the `REQUIRES` list is now defined (as opposed to being read from a file), and it doesn't clarify that the package structure was narrowed to `['geocoder']` and that the `license` field now reads from a file instead of a hardcoded value. Additionally, the message implies a feature addition, but the changes are more about configuration and structure. A better message would specify the exact changes, such as 'update version to 0.6.0, add license and README to setup, and define dependencies explicitly.' Thus, it's functional but not detailed or precise enough to be excellent."
5aef5673b48c70f43a759c3101b717d6f1473f00,"Fixed Canadapost


Former-commit-id: b338139419527afe22c2cc0587a2e48ad6ed4584",test_geocoder.py,"@@ -12,6 +12,9 @@ repeat = 3
 ottawa = (45.4215296, -75.6971930)
 toronto = (43.653226, -79.3831843)
 
+g = geocoder.canadapost(address)
+print g
+
 def test_entry_points():
     geocoder.ip
     geocoder.get
",add test for,add(geocoder): implement Canadian Post geocoding,Semantic,"The new message provides a more descriptive and semantic explanation of the change, specifying the feature (geocoder) and its purpose (Canadian Post geocoding), whereas the old message is vague and lacks context.",2.0,2.0,2.0,"The commit message 'Fixed Canadapost' is overly vague and does not accurately describe the change. The diff shows an addition of a Canadapost geocoding call and a print statement, which appears to be a test or demonstration, not a fix. There is no indication of a bug being resolved or a functionality being corrected. The message lacks context about what was actually changed, why, and what the expected outcome was. A better message would specify the action taken (e.g., 'Added Canadapost geocoding example for testing') and clarify it's not a bug fix. Therefore, the message is minimally informative and falls short of being clear or useful.","The commit message 'add test for' is extremely vague and does not convey what was actually added or tested. The diff shows a simple addition of a geocoder.canadapost call and a print statement, which appears to be a debugging or testing addition, not a formal test. The message lacks specificity about the functionality being tested, the purpose, or the expected outcome. While it indicates some form of testing addition, it fails to provide meaningful context, making it insufficient for understanding the change's intent. A score of 2 reflects that it's partially relevant but lacks clarity and detail.","The commit message 'add(geocoder): implement Canadian Post geocoding' is overly generic and does not accurately reflect the actual change. The diff shows only a single line of code that attempts to call a geocoder function and prints its result, not a full implementation of Canadian Post geocoding. There is no indication of functionality added, error handling, or integration. The message implies a substantial feature addition, but the actual change is minimal and likely just a test or prototype. Therefore, it is misleading and under-specifies the actual work done, warranting a low score."
29e4ea7b8706a5a125775cc847d816b7d88401d6,"Fixed Elevation & CanadaPost


Former-commit-id: cbd3602ab8aa9b9b63a33a78cfb960deb6daef2b",geocoder/__init__.py,"@@ -5,22 +5,20 @@
 geocoder library
 ~~~~~~~~~~~~~~~~
 
-A simplistic Python Geocoder.
+A pure Python Geocoding module made easy.
 
-Geocoder is an Apache2 Licensed Geocoding library, written in Python.
+Every task is made easy with tons of ``help`` & ``debug`` commands!
 
-    >>> import geocoder
-    >>> g = geocoder.google('Moscone Center')
-    >>> g.latlng
-    (37.784173, -122.401557)
-    >>> g.city
-    'San Francisco'
+    >>> import geocoder # pip install geocoder
+    >>> g = geocoder.google('<address>')
+    >>> g.lat, g.lng
+    45.413140 -75.656703
     ...
 
 """"""
 
 __title__ = 'geocoder'
-__version__ = '0.7.0'
+__version__ = '0.7.1'
 __author__ = 'Denis Carriere'
 __license__ = 'Apache 2.0'
 __copyright__ = 'Copyright 2014 Denis Carriere'
@@ -28,4 +26,4 @@ __copyright__ = 'Copyright 2014 Denis Carriere'
 # CORE
 from api import bing, geonames, google, mapquest, nokia, osm, tomtom, geolytica
 # EXTRAS
-from api import reverse, ip, canadapost, timezone, elevation
\ No newline at end of file
+from api import reverse, ip, canadapost, timezone, elevation
",add missing doc blocks,chore(version): update version to 0.7.1,Trivial,"The change is a version update, which is a routine maintenance task with no functional or behavioral impact on the code or user experience.",2.0,2.0,3.0,"The commit message 'Fixed Elevation & CanadaPost' is vague and does not accurately reflect the actual changes in the diff. The diff shows a version bump from 0.7.0 to 0.7.1 and a minor update to the README, including a more descriptive introduction and improved documentation of usage. There is no actual fix or change to elevation or CanadaPost functionality—only a version update and documentation improvement. The message misrepresents the change as a 'fix' when it is actually a documentation update and version increment. Therefore, it is misleading and lacks clarity, warranting a low score.","The commit message 'add missing doc blocks' is overly vague and does not accurately reflect the actual changes. The diff shows updates to the README (improving documentation and adding features like help/debug commands), version bump, and no actual missing doc blocks were added. Instead, the content was enhanced and rephrased, which goes beyond just adding doc blocks. A more accurate message would reflect the improvement in documentation and version update. Therefore, the message is misleading and only partially relevant, warranting a score of 2.","The commit message is accurate and relevant — it correctly indicates a version update, which is a chore change. However, it lacks context about what else changed (e.g., the updated documentation or the addition of new features implied by the updated description). While the version bump is clearly noted, the message is minimal and does not reflect the broader improvements in the README (e.g., rephrased description, emphasis on help/debug commands, or improved user experience). A more complete message would include such context, making it excellent. As it stands, it's functional but under-informed, warranting a mid-level score."
29e4ea7b8706a5a125775cc847d816b7d88401d6,"Fixed Elevation & CanadaPost


Former-commit-id: cbd3602ab8aa9b9b63a33a78cfb960deb6daef2b",setup.py,"@@ -8,7 +8,7 @@ try:
 except ImportError:
     from distutils.core import setup
 
-version = '0.7.0'
+version = '0.7.1'
 requires = ['requests>=2.3.0', 'xmltodict>=0.9.0']
 
 with open('README.rst') as f:
@@ -42,8 +42,6 @@ setup(
         'Operating System :: OS Independent',
         'Programming Language :: Python :: 2.6',
         'Programming Language :: Python :: 2.7',
-        'Programming Language :: Python :: 3.2',
-        'Programming Language :: Python :: 3.3',
         'Topic :: Internet',
         'Topic :: Internet :: WWW/HTTP',
         'Topic :: Scientific/Engineering :: GIS',
",add missing setup.py file,chore(version): update version to 0.7.1,Trivial,"The change is a version update, which is a routine maintenance task with no functional or behavioral impact on the software.",1.0,1.0,4.0,"The commit message is highly irrelevant to the actual changes in the code diff. The diff shows only a version bump from '0.7.0' to '0.7.1' and the removal of Python 3.2 and 3.3 from the programming language tags. There is no mention of 'Elevation' or 'CanadaPost', which are referenced in the commit message. This creates a severe disconnect between the message and the code changes, indicating a lack of clarity and accuracy. As a result, the commit message is poor and misleading.","The commit message 'add missing setup.py file' is completely inaccurate and misleading. The diff shows that the version number in setup.py is being updated from '0.7.0' to '0.7.1', and some Python version tags are being removed, not that a missing setup.py file is being added. There is no indication of a missing file; instead, the file exists and is being modified. The message does not reflect the actual changes and misrepresents the purpose of the commit.","The commit message accurately reflects the change made — updating the version from 0.7.0 to 0.7.1 — and is appropriately labeled as a chore (maintenance) task. It is concise and relevant to the diff. However, it lacks additional context such as why the version was incremented (e.g., bug fixes, new features) or whether the Python 3.2/3.3 removal is related to the version update. While the message is clear and correct, a slightly more detailed explanation would make it excellent. Therefore, it is rated 4 rather than 5."
f6d972a728879081cb203338805dc7335a370dec,"lots of fixes

Added Wheel
Changed Provider to lowercase
Added XY fields
Made GeoJSON as geometry
Made bbox as GeoJSON polygon
WKT only Point now


Former-commit-id: 9514d1eaa2fec135327b9273f478b5ac718d115f",geocoder/geonames.py,"@@ -5,7 +5,7 @@ from .base import Base
 
 
 class Geonames(Base):
-    provider = 'GeoNames'
+    provider = 'geonames'
     api = 'GeoNames REST Web Services'
     url = 'http://api.geonames.org/searchJSON'
     _description = 'GeoNames is mainly using REST webservices. Find nearby postal codes / reverse geocoding\n'
",add missing docstring,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug or error was resolved, which falls under corrective improvements.",2.0,2.0,1.0,"The commit message is vague and lacks specificity. While it mentions 'Changed Provider to lowercase', which is reflected in the diff, it lists several unrelated changes ('Added Wheel', 'Added XY fields', 'Made GeoJSON as geometry', etc.) without clearly linking them to the actual changes in the diff. The diff only shows a change in the provider name from 'GeoNames' to 'geonames'—a simple case change—so the message overstates the scope and includes items not present in the code change. This misalignment between the commit message and the actual diff reduces its clarity and usefulness, resulting in a low score.","The commit message 'add missing docstring' is vague and does not accurately reflect the actual change. The diff shows a change in the case of the 'provider' attribute from 'GeoNames' to 'geonames', which is a case-sensitive string update, not the addition of a docstring. There is no docstring added in the code. Therefore, the commit message is misleading and does not properly describe the change, warranting a low score.","The commit message 'fix: rectification failed' is highly vague and provides no meaningful context about what was actually fixed or why. The diff shows a simple change in the capitalization of 'provider' from 'GeoNames' to 'geonames', which is a minor formatting adjustment. A proper commit message should describe the change clearly and purposefully, such as 'fix: lowercase provider name in Geonames class for consistency'. The current message fails to convey any useful information about the change, making it poor in terms of clarity, relevance, and usefulness for code review or future reference."
f6d972a728879081cb203338805dc7335a370dec,"lots of fixes

Added Wheel
Changed Provider to lowercase
Added XY fields
Made GeoJSON as geometry
Made bbox as GeoJSON polygon
WKT only Point now


Former-commit-id: 9514d1eaa2fec135327b9273f478b5ac718d115f",geocoder/reverse.py,"@@ -7,7 +7,7 @@ from .location import Location
 
 
 class Reverse(Google, Base):
-    provider = 'Reverse'
+    provider = 'reverse'
     api = 'Google Geocoding API'
     url = 'https://maps.googleapis.com/maps/api/geocode/json'
 
",add missing docstring,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug or error was resolved, which falls under corrective improvements.",2.0,1.0,1.0,"The commit message is vague and lacks specificity. While it mentions 'Changed Provider to lowercase', which is accurate, the phrase 'lots of fixes' is overly generic and does not clearly communicate the actual changes or their impact. The message also includes unrelated items like 'Added Wheel', 'Added XY fields', and 'Made GeoJSON as geometry' without context or clarity, making it difficult to assess the true scope. The commit diff shows only a single change (lowercasing 'Reverse' to 'reverse'), so the message significantly overstates the scope. Therefore, it is only minimally informative and deserves a low score.","The commit message 'add missing docstring' is highly inaccurate given the diff. The diff shows a change in the case of the `provider` attribute from 'Reverse' to 'reverse', which is a code formatting or naming convention change, not the addition of a docstring. There is no docstring added or modified in the code. Therefore, the commit message does not reflect the actual change and is misleading, making it poor.","The commit message 'fix: rectification failed' is vague, unclear, and does not describe what was actually fixed or why. The diff shows a simple change in casing of the 'provider' string from 'Reverse' to 'reverse', which is a minor formatting fix. A proper commit message should clearly state the change and its purpose, such as 'fix: lowercase provider name in Google Reverse class'. The current message provides no context, lacks specificity, and fails to communicate the intent or impact of the change."
f6d972a728879081cb203338805dc7335a370dec,"lots of fixes

Added Wheel
Changed Provider to lowercase
Added XY fields
Made GeoJSON as geometry
Made bbox as GeoJSON polygon
WKT only Point now


Former-commit-id: 9514d1eaa2fec135327b9273f478b5ac718d115f",setup.py,"@@ -10,7 +10,7 @@ except ImportError:
     from distutils.core import setup
 
 if sys.argv[-1] == 'publish':
-    os.system('python setup.py sdist --formats=gztar upload')
+    os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
 version = '0.8.0'
",add bdist_wheel to setup.py,feat(build): add bdist_wheel to publish command,Semantic,"The new message provides a clearer, more descriptive semantic meaning by specifying the exact feature (adding bdist_wheel) and its purpose (to enable publishing), whereas the old message was vague and listed fragmented changes without context.",2.0,3.0,3.0,"The commit message is vague and lacks specificity. While it mentions 'Added Wheel' and other changes, it does not clearly link these changes to the actual diff. The diff shows only a single change: replacing `sdist --formats=gztar upload` with `sdist bdist_wheel upload`, which is about packaging, not 'Added Wheel' as a broad fix. The other listed changes (like 'Changed Provider to lowercase', 'Added XY fields', etc.) are not reflected in the diff and appear to be from a different commit. Therefore, the message is misleading and does not accurately reflect the actual changes made. A score of 2 reflects that it contains some relevant information but is inaccurate and overly broad.","The commit message 'add bdist_wheel to setup.py' is vague and lacks context. While it correctly identifies the change (adding bdist_wheel), it does not explain why this change was made—such as supporting wheels for better package distribution or compatibility with modern Python packaging. A more detailed message would mention the purpose (e.g., 'Enable wheel support for improved installation speed and compatibility'). The diff shows a clear change, but the message fails to communicate the significance or motivation, resulting in a moderate score.","The commit message correctly identifies the change as a build-related feature and specifies the addition of bdist_wheel to the publish command. However, it lacks context about why bdist_wheel was added (e.g., to support wheels, improve distribution, or fix compatibility). The message is clear and accurate but could be more detailed or explanatory to fully convey the significance of the change. Therefore, it is moderately good but not excellent."
f6d972a728879081cb203338805dc7335a370dec,"lots of fixes

Added Wheel
Changed Provider to lowercase
Added XY fields
Made GeoJSON as geometry
Made bbox as GeoJSON polygon
WKT only Point now


Former-commit-id: 9514d1eaa2fec135327b9273f478b5ac718d115f",test.py,"@@ -1,4 +1,4 @@
 import geocoder
 
-g = geocoder.elevation('Ottawa')
-print g
\ No newline at end of file
+g = geocoder.osm('Ottawa')
+print g.provider
\ No newline at end of file
",add missing newline,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug or error in the system was resolved, which aligns with a corrective improvement.",1.0,1.0,2.0,"The commit message is highly misleading and does not accurately reflect the changes in the code diff. The diff shows only a simple change from using `geocoder.elevation('Ottawa')` to `geocoder.osm('Ottawa')` and a print of `g.provider` instead of the original `print g`. There is no evidence of the features listed in the commit message—such as 'Added Wheel', 'Added XY fields', 'Made GeoJSON as geometry', 'Made bbox as GeoJSON polygon', or 'WKT only Point now'. These claims are completely unfounded and appear to be fabricated or misaligned with the actual code changes. The commit message fails to provide clarity, accuracy, or relevance to the actual changes, making it poor and potentially misleading.","The commit message 'add missing newline' is highly irrelevant to the actual changes in the code diff. The diff shows a change from using `geocoder.elevation` to `geocoder.osm`, and a change in the printed output from `print g` to `print g.provider`. The newline issue is not the focus of the change, and the message fails to describe the actual functionality or intent of the change. A proper commit message should reflect the purpose of the change, such as switching to OSM provider for elevation data or modifying the output to show provider info. Therefore, the commit message is poor and does not match the diff.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a change from using `geocoder.elevation` to `geocoder.osm`, and a print statement change from printing the result to only printing the provider. The message fails to explain the actual change or its purpose, making it difficult to understand the intent. While it is categorized as a 'fix', the term 'rectification failed' is misleading and not descriptive. A better message would specify the change in functionality or the issue being resolved. Thus, it receives a score of 2 for being minimally relevant but lacking clarity and context."
ed3bdb2be4e9eea5d1ee9ceb15c1b5dbd7d0f3bb,"#71 Issue - Added Subpremise


Former-commit-id: c3127b5c77028da5c14a410400e9380290e6ea85",geocoder/__init__.py,"@@ -19,7 +19,7 @@ Every task is made easy with tons of ``help`` & ``debug`` commands!
 
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
-__version__ = '0.8.1'
+__version__ = '0.8.2'
 __license__ = 'Apache 2.0'
 __copyright__ = 'Copyright 2014 Denis Carriere'
 
",set some default values,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug or error correction, which aligns with a corrective improvement.",1.0,2.0,1.0,"The commit message is highly inappropriate and does not reflect the actual changes in the code diff. The diff shows only a version bump from '0.8.1' to '0.8.2' in the __version__ variable, which is a typical patch release. However, the commit message references '#71 Issue - Added Subpremise', which is unrelated to the change and appears to be a misattribution or error. Additionally, the 'Former-commit-id' line is not standard and does not belong in a commit message. A valid commit message should clearly describe what was changed, not reference an unrelated issue or contain malformed metadata. Therefore, the message is poor and misleading.","The commit message 'set some default values' is overly vague and does not accurately reflect the actual change, which is a simple version bump from '0.8.1' to '0.8.2'. A more descriptive message like 'Bump version to 0.8.2' would be clearer and more informative. Therefore, the message is only minimally relevant and lacks specificity, resulting in a score of 2.","The commit message 'fix: rectification failed' is highly vague and does not reflect the actual change in the code diff. The diff only shows an increment in the version number from '0.8.1' to '0.8.2', which is a simple version update. The commit message fails to explain what was fixed, why it was fixed, or what 'rectification failed' refers to. It provides no context or meaningful information about the change, making it inadequate for a proper commit message."
ed3bdb2be4e9eea5d1ee9ceb15c1b5dbd7d0f3bb,"#71 Issue - Added Subpremise


Former-commit-id: c3127b5c77028da5c14a410400e9380290e6ea85",setup.py,"@@ -13,7 +13,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
-version = '0.8.1'
+version = '0.8.2'
 requires = ['requests>=2.3.0', 'xmltodict>=0.9.0', 'Click', 'unicodecsv']
 
 with open('README.md') as f:
",add missing version to setup.py,chore(version): update version from 0.8.1 to 0.8.2,Trivial,"The change is a simple version bump with no functional or semantic impact, purely a maintenance task.",1.0,2.0,5.0,"The commit message is highly inappropriate and irrelevant to the code changes. The diff shows a simple version bump from '0.8.1' to '0.8.2' and a minor update to dependencies, but the commit message references '#71 Issue - Added Subpremise', which has no connection to the actual changes. There is no mention of the version update or the dependencies, and 'Added Subpremise' appears to be a misinterpretation or error. A proper commit message should clearly describe what was changed, not reference a non-existent or unrelated feature. Therefore, the message is poor, misleading, and does not reflect the actual diff.","The commit message 'add missing version to setup.py' is vague and misleading. The diff shows a version update from '0.8.1' to '0.8.2', not the addition of a missing version. The message implies a missing element was added, but in reality, it's a simple version bump. A more accurate message would be 'Bump version to 0.8.2 in setup.py'. Thus, the commit message fails to clearly describe what was changed, leading to a low score.","The commit message is clear, concise, and follows the standard format for version updates in a chore category. It accurately reflects the change (updating version from 0.8.1 to 0.8.2) and specifies the type of change as a chore, which is appropriate since it's a version bump without functional changes. The message is directly aligned with the diff, making it highly relevant and easy to understand."
f3c2cdc07c3a572ec21a7a7f6294d8baf1752b65,"Changed the Function Geocode > Get

Don’t want to confuse the CLI command with the geocode function in API.


Former-commit-id: 0ec0f5641781044cd151564139db1cc6a23a59f0",geocoder/__init__.py,"@@ -27,6 +27,6 @@ __copyright__ = 'Copyright 2014 Denis Carriere'
 from .api import yahoo, bing, geonames, google, mapquest, nokia, osm, tomtom, geolytica, arcgis
 
 # EXTRAS
-from .api import ip, canadapost, timezone, elevation, geocode
+from .api import ip, canadapost, timezone, elevation, get
 
 from cli import cli
",add missing import,fix: rectification failed,Corrective,"The new message indicates a fix for a failure in rectification, suggesting a bug or error was resolved, which falls under corrective improvement.",2.0,2.0,2.0,"The commit message is vague and poorly worded. It states 'Changed the Function Geocode > Get' which is unclear and lacks context about what exactly was changed or why. The justification provided ('Don’t want to confuse the CLI command with the geocode function in API') is relevant but not clearly tied to the actual diff. The diff shows only a simple import replacement: `geocode` is replaced with `get`, which suggests a refactoring or renaming, but the commit message fails to explain the rationale or impact. While there's a minor effort to improve clarity, the message is insufficient for understanding the change's purpose or significance, warranting a low score.","The commit message 'add missing import' is vague and lacks specificity. While it correctly identifies that an import was added, it does not explain what was removed or why the change was necessary. The diff shows that `geocode` was replaced with `get`, which suggests a more significant refactoring or API redesign, not just a simple missing import. A better message would explain the replacement and its rationale (e.g., 'replace geocode with get to align with updated API structure'). Therefore, the message is technically correct but insufficiently detailed, warranting a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple import replacement: `geocode` is replaced with `get`, which suggests a typo or incorrect import reference. However, the commit message fails to explain this change or its impact. While it includes the 'fix:' prefix, which is appropriate, the content lacks specificity and context, making it difficult to understand the intent or the problem solved. A better message would describe the actual change, such as 'fix: replace geocode with get in api imports to resolve import error'."
f3c2cdc07c3a572ec21a7a7f6294d8baf1752b65,"Changed the Function Geocode > Get

Don’t want to confuse the CLI command with the geocode function in API.


Former-commit-id: 0ec0f5641781044cd151564139db1cc6a23a59f0",geocoder/cli.py,"@@ -1,15 +1,13 @@
 import json
 import sys
-
 import click
-
-import geocoder
+from api import get
 
 @click.command()
-@click.argument('input', type=str, default="""")
+@click.argument('input', type=str)
 @click.option('--provider', '-p', default='bing', help=""provider (choose from: bing,\
 geonames, google, mapquest, nokia, osm, tomtom, geolytica, arcgis, yahoo)"")
-@click.option('--outfile', '-o', type=click.File('w'), default=sys.stdout,
+@click.option('--outfile', '-o', type=click.File('w'), default='-',
         help=""Output File"")
 def cli(input, provider, outfile):
     """"""Geocode one or many string.
@@ -27,6 +25,6 @@ def cli(input, provider, outfile):
     # Loop inside the reader
     for item in input:
         item = item.strip()
-        g = geocoder.geocode(item, provider=provider)
+        g = get(item, provider=provider)
         outfile.write(""{}\n"".format(json.dumps(g.json)))
 
",add support for --provider and --outfile,refactor(api): replace geocoder with api.get for geocoding,Semantic,"The new message provides a more precise and descriptive semantic meaning by clearly indicating a refactoring of the API function and replacing the geocoder with api.get, improving clarity and intent compared to the old message.",2.0,2.0,4.0,"The commit message is vague and lacks clarity. While it mentions changing 'Geocode > Get' and aims to avoid confusion, it does not explain the actual change, why it was made, or its impact. The diff shows a replacement of `geocoder.geocode` with `get` from an API module, but the commit message fails to describe this shift in terms of functionality, dependencies, or user impact. A better message would specify that the geocoding logic was replaced with a new API-based function to decouple from the geocoder library. As such, the message is technically accurate but insufficiently detailed for a clear understanding of the change.","The commit message 'add support for --provider and --outfile' is overly vague and does not reflect the actual changes made. The diff shows that the arguments for --provider and --outfile were already present in the code, and the main change is replacing the use of `geocoder.geocode` with a custom `get` function from an `api` module. The commit message fails to mention this key behavioral change or the dependency shift, making it misleading. While it correctly notes two options, it lacks technical detail and context about the actual implementation shift, which is significant. Therefore, it receives a score of 2 — barely sufficient but not accurate or helpful.","The commit message accurately reflects the change: replacing the `geocoder` library with a call to `api.get` for geocoding. It clearly identifies the refactoring scope ('refactor(api)') and the specific change ('replace geocoder with api.get'). However, it lacks context about why this change was made (e.g., performance, dependency reduction, or better integration), which would elevate it to an excellent score. Still, the message is concise, relevant, and correctly scoped, making it a strong refactor commit message."
1e5bf6093a1ebe4027324ca6bdd8d1e9c52279fa,"Version change


Former-commit-id: c0f2aa80284f6471e61f9948b0b2f8b056d2815d",setup.py,"@@ -13,7 +13,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
-version = '0.8.3'
+version = '0.8.4'
 requires = ['requests>=2.3.0', 'xmltodict>=0.9.0', 'Click']
 
 with open('README.md') as f:
",add missing version to setup.py,chore(version): bump version from 0.8.3 to 0.8.4,Semantic,"The new message provides a clear, standardized semantic meaning indicating a version bump, which improves clarity and context compared to the vague 'Version change' in the old message.",2.0,2.0,5.0,"The commit message is extremely vague and lacks essential details. While it correctly indicates a version change, it does not specify the old and new versions, the reason for the change, or any impact on functionality or dependencies. A minimal commit message like 'Bump version to 0.8.4' would be more informative. As it stands, the message provides little context for developers or reviewers, making it insufficient for good code review practices.","The commit message 'add missing version to setup.py' is vague and does not accurately reflect the change. The diff shows a version bump from '0.8.3' to '0.8.4', which is a simple update, not the addition of a missing version. The message fails to convey the actual nature of the change (a version increment) and implies something was missing that wasn't. A better message would be 'Bump version to 0.8.4 in setup.py'. Therefore, the message is misleading and lacks precision, warranting a score of 2.","The commit message is clear, concise, and follows the standard format for version bumps (e.g., 'chore(version): bump version from X to Y'). It accurately reflects the change in the code diff, which shows a simple version increment from '0.8.3' to '0.8.4'. The use of 'chore' is appropriate since this is a maintenance task unrelated to new features or bug fixes. The message provides sufficient context without being verbose."
21c085c6ba98ca94651f758202df77b2880faa7a,"Fixed Canada Post Multiple Results

No results were getting found when multiple results were found. Fixed
now


Former-commit-id: 980013128060b18ecefb10789ba06e24dcc0d98b",test_others.py,"@@ -11,5 +11,9 @@ def test_nokia():
     g = geocoder.nokia(location)
     print g.debug()
 
+def test_canadapost():
+	g = geocoder.canadapost('6A Assoro Crescent, Kingston')
+	print g
+
 if __name__ == '__main__':
-    test_opencage()
\ No newline at end of file
+    test_canadapost()
\ No newline at end of file
",add test for nokia and canadapost,add(canadapost): support geocoding for Canadian postal addresses,Corrective,"The new message indicates a fix for a specific functionality (geocoding for Canadian postal addresses) that was previously not working, addressing a functional deficiency in the system.",2.0,3.0,3.0,"The commit message is poorly written and does not accurately reflect the changes in the code diff. The title 'Fixed Canada Post Multiple Results' is misleading because the diff shows the addition of a new test function `test_canadapost()` for Canada Post, not a fix for handling multiple results. There is no mention of any bug fix or logic change related to multiple results. Additionally, the message lacks context, clarity, and proper explanation of what was actually implemented. The reference to a former commit ID is irrelevant here. Overall, the message fails to convey the actual change, making it unclear and unhelpful for understanding the commit's purpose.","The commit message 'add test for nokia and canadapost' is vague and lacks detail. While it correctly identifies the two components added (nokia and canadapost), it fails to specify what was actually added — for example, that a new test function was introduced for Canadapost with a specific query. The message also incorrectly implies that a test for Nokia was added, when the existing test for Nokia was already present in the code. The change only adds a new test for Canadapost, not both. Therefore, the message is misleading and underspecified, warranting a moderate score.","The commit message correctly identifies the feature added (support for Canadian postal addresses via Canadapost) and uses the appropriate format with a clear scope. However, it lacks detail about the specific implementation, such as whether the test passes, if there are edge cases, or how the functionality integrates with existing code. The message is accurate and relevant but could be more informative for maintainers. Thus, it is moderately good but not excellent."
1bfc07413fa2aec33e86a0bfb4e40283421bbf21,"#81 Fixed module not callable

Added Elevation & Timezone functions as a core function from the API.


Former-commit-id: b8ecc6fe27d17eb23e6d638e13d663305e4ca25f",geocoder/__init__.py,"@@ -20,7 +20,7 @@ Every task is made easy with tons of ``help`` & ``debug`` commands!
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '0.9.0'
+__version__ = '0.9.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
@@ -29,7 +29,7 @@ from .api import get, yahoo, bing, geonames, google, mapquest
 from .api import nokia, osm, tomtom, geolytica, arcgis, opencage
 
 # EXTRAS
-from .api import ip, canadapost
+from .api import timezone, elevation, ip, canadapost
 
 # CLI
 from cli import cli
",add missing imports,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug was resolved, which aligns with a corrective improvement.",2.0,2.0,1.0,"The commit message is partially informative but lacks clarity and precision. It mentions fixing a module not callable and adds elevation and timezone functions, which aligns with the code diff showing imports for `elevation` and `timezone`. However, the message does not clearly explain what 'module not callable' meant, nor does it describe the impact or context of the change. The reference to 'core function from the API' is vague and not supported by the diff. While the change is minor and relevant, the commit message fails to provide sufficient detail about the problem and its resolution, making it only mildly useful.","The commit message 'add missing imports' is overly vague and does not accurately reflect the actual change. While the diff shows that `timezone` and `elevation` are being added to the imports, the message fails to specify what was added or why. A more descriptive message like 'Add timezone and elevation modules to imports' would better convey the change. Therefore, it receives a score of 2 for lacking specificity and clarity.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual changes in the diff. The diff shows a simple version bump from '0.9.0' to '0.9.1' and a minor import update (adding 'timezone' and 'elevation' to the extras). There is no mention of 'rectification' or any failure related to it. The message fails to explain what was fixed, why it was necessary, or how it resolves an issue. As a result, it provides no meaningful context and is therefore poor."
1bfc07413fa2aec33e86a0bfb4e40283421bbf21,"#81 Fixed module not callable

Added Elevation & Timezone functions as a core function from the API.


Former-commit-id: b8ecc6fe27d17eb23e6d638e13d663305e4ca25f",setup.py,"@@ -13,7 +13,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
-version = '0.9.0'
+version = '0.9.1'
 requires = ['requests>=2.3.0', 'xmltodict>=0.9.0', 'Click']
 
 with open('README.md') as f:
",update version number in setup.py,chore(version): update version from 0.9.0 to 0.9.1,Trivial,"This commit only updates the version number, which is a routine maintenance task with no functional or behavioral change to the code or its output.",1.0,3.0,5.0,"The commit message is highly inaccurate and misrepresents the actual changes in the code diff. The diff only shows a version bump from '0.9.0' to '0.9.1' and a minor update to dependencies, with no mention of adding Elevation or Timezone functions or making any module callable. The claim that 'Elevation & Timezone functions were added as core functions from the API' is completely unsupported by the diff. Additionally, the commit message references a 'former-commit-id' which is not relevant or present in the context. This misalignment between the message and the actual changes renders the message misleading and unhelpful, deserving a poor score.","The commit message accurately reflects the change made — updating the version number in the code — but it lacks context such as why the version was incremented or which release it corresponds to (e.g., bug fix, feature release). While it is correct and concise, it is somewhat generic and does not provide enough detail for a complete understanding of the change's significance. A better message would include the version bump and a brief reason, such as 'Bump version to 0.9.1 for new feature and bug fixes.'","The commit message is clear, concise, and follows the standard format for version updates in a chore category. It accurately reflects the change (updating version from 0.9.0 to 0.9.1) and specifies the type of change as a chore, which is appropriate since it's a version bump without functional changes. The message is directly aligned with the diff, making it highly relevant and easy to understand."
1bfc07413fa2aec33e86a0bfb4e40283421bbf21,"#81 Fixed module not callable

Added Elevation & Timezone functions as a core function from the API.


Former-commit-id: b8ecc6fe27d17eb23e6d638e13d663305e4ca25f",test_geocoder.py,"@@ -27,6 +27,8 @@ def test_entry_points():
     geocoder.elevation
     geocoder.geolytica
     geocoder.canadapost
+    geocoder.timezone
+    geocoder.elevation
 
 def test_google():
     g = geocoder.google(location)
@@ -87,4 +89,12 @@ def test_geonames():
 
 def test_ip():
     g = geocoder.ip(ip)
+    assert g.ok
+
+def test_elevation():
+    g = geocoder.elevation(location)
+    assert g.ok
+
+def test_timezone():
+    g = geocoder.timezone(location)
     assert g.ok
\ No newline at end of file
",add more tests,"add(elevation, timezone): implement elevation and timezone geocoding services",Semantic,"The new message provides a clearer and more precise description of the changes by using a structured format (add(elevation, timezone)) and explicitly stating the implementation of geocoding services, improving readability and semantic clarity over the old message.",2.0,2.0,3.0,"The commit message is incomplete and misleading. It claims to 'fix' a module not being callable, but the diff shows additions of new functions (elevation and timezone), not fixes to existing ones. The message does not accurately reflect the actual changes. Additionally, the commit message lacks context about what 'core function from the API' means, and it fails to mention that these are new features rather than bug fixes. While it correctly references the added functions, the phrasing is vague and technically incorrect. A score of 2 reflects a basic attempt at communication but significant inaccuracies and missing details.","The commit message 'add more tests' is overly vague and provides no detail about what was added, why it was added, or the scope of the changes. While the diff shows several new test functions (e.g., test_elevation, test_timezone) and additional assertions, the message fails to convey meaningful context. A better message would specify the exact features or functionalities being tested. Thus, it receives a score of 2 for lacking specificity and clarity.","The commit message correctly identifies the addition of two new geocoding services: elevation and timezone. However, it is vague about implementation details and lacks context on how these features were added or whether they are fully functional. The diff shows that the tests are being added, but the message does not clearly state that these are new test cases or that the actual service implementations are being introduced. A stronger message would specify that test cases for elevation and timezone have been added, and that the services are now being tested. As a result, the message is partially accurate but lacks clarity and completeness, earning a mid-range score."
96d4fbcbfa3a5b8ac82bf2d93ba4aa578ec9fc06,#83 Fixed Location inputs,geocoder/base.py,"@@ -27,7 +27,12 @@ class Base(object):
     population = ''
 
     def __repr__(self):
-        return ""<[{0}] {1} - {2} [{3}]>"".format(self.status, self.provider, self.method, self.address)
+        return ""<[{0}] {1} - {2} [{3}]>"".format(
+            self.status, 
+            self.provider.title(), 
+            self.method.title(), 
+            self.address
+        )
     
     @staticmethod
     def rate_limited_get(url, **kwargs):
",add more information to the base class,refactor(base): use title() for provider and method in string representation,Cosmetic,"The change modifies the string representation to use title() for consistency and readability, without affecting functionality or behavior.",2.0,2.0,5.0,"The commit message '#83 Fixed Location inputs' is highly misleading given the actual change in the code. The diff shows a modification to the __repr__ method that capitalizes the provider and method fields using .title(), not any change related to 'location inputs'. There is no mention of location, address parsing, or input validation. The message fails to accurately describe the change, leading to confusion. While it's a minor improvement over a completely off-topic message, it is not accurate or descriptive enough to warrant a higher score.","The commit message 'add more information to the base class' is overly vague and does not accurately reflect the actual change. The diff shows a specific modification: applying the .title() method to self.provider and self.method in the __repr__ method to capitalize their first letters. This is a small, focused change that enhances readability, not a broad addition of information. The message fails to describe what was added, why it was added, or its impact. A better message would specify the change, such as 'Capitalize provider and method in __repr__ for better readability.' Thus, the commit message is only minimally informative and deserves a score of 2.","The commit message clearly and concisely describes the change: it specifies that the `title()` method is now applied to `self.provider` and `self.method` in the string representation of the class. The message is relevant, accurate, and directly tied to the diff, which shows exactly that change. It follows the standard commit message format (refactor + scope + action), making it easy to understand the intent and impact. No ambiguity or missing context exists, so it is excellent."
96d4fbcbfa3a5b8ac82bf2d93ba4aa578ec9fc06,#83 Fixed Location inputs,geocoder/location.py,"@@ -8,15 +8,29 @@ class Location(object):
     lat = None
     lng = None
     latlng = None
+    status = None
+    error = None
 
     def __init__(self, location):
-        self.name = location
-
         # Functions
-        self.lat, self.lng = self._check_input(location)
+        self._check_input(location)
 
     def __repr__(self):
-        return '<Location [{0}]>'.format(self.name)
+        return '<[{0}] Location [{1}]>'.format(self.status, self.latlng)
+
+    @property
+    def ok(self):
+        if self.latlng:
+            return True
+        else:
+            return False
+
+    @property
+    def status(self):
+        if self.ok:
+            return 'OK'
+        elif self.error:
+            return self.error
 
     def _convert_float(self, number):
         try:
@@ -25,8 +39,6 @@ class Location(object):
             return None
 
     def _check_input(self, location):
-        lat, lng = 0.0, 0.0
-
         # Checking for a String
         if isinstance(location, str):
             """"""
@@ -37,26 +49,38 @@ class Location(object):
 
         # Checking for List of Tuple
         if isinstance(location, (list, tuple)):
-            lat, lng = self._check_for_list(location)
+            self._check_for_list(location)
 
         # Checking for Dictionary
         elif isinstance(location, dict):
-            lat, lng = self._check_for_dict(location)
+            self._check_for_dict(location)
 
         # Checking for a Geocoder Class
         elif hasattr(location, 'latlng'):
-            lat, lng = location.latlng
-
-        # Return Results
-        return lat, lng
+            self.lat, self.lng = location.latlng
 
     def _check_for_list(self, location):
         # Standard LatLng list or tuple with 2 number values
         if len(location) == 2:
             lat = self._convert_float(location[0])
             lng = self._convert_float(location[1])
-            if bool(lat and lng):
-                return lat, lng
+            condition_1 = isinstance(lat, float)
+            condition_2 = isinstance(lng, float)
+            
+            # Check if input are Floats
+            if bool(condition_1 and condition_2):
+                condition_3 = lat <= 90 and lat >= -90
+                condition_4 = lng <= 180 and lng >= -180
+
+                # Check if inputs are within the World Geographical boundary (90,180,-90,-180)
+                if bool(condition_3 and condition_4):
+                    self.lat = lat
+                    self.lng = lng
+                    return self.lat, self.lng
+                else:
+                    self.error = 'ERROR - Lat & Lng are not within the world\'s geographical boundary.'
+            else:
+                self.error = 'ERROR - Lat & Lng are not floats.'
 
     def _check_for_dict(self, location):
         # Standard LatLng list or tuple with 2 number values
@@ -64,13 +88,21 @@ class Location(object):
             lat = self._convert_float(location.get('lat'))
             lng = self._convert_float(location.get('lng'))
             if bool(lat and lng):
+                self.lat = lat
+                self.lng = lng
                 return lat, lng
 
     @property
     def latlng(self):
-        return '{0},{1}'.format(self.lat, self.lng)
+        if bool(self.lat and self.lng):
+            return '{0}, {1}'.format(self.lat, self.lng)
 
 
 if __name__ == '__main__':
-    pass
+    l = Location(['6.0', u'A0'])
+    print l
+    print l.latlng
 
+    print l.ok
+    print l.lat
+    print l.lng
\ No newline at end of file
",add missing docstrings,feat(location): add status and error handling with validation and ok property,Semantic,"The new message provides more detailed information about the functionality added (status, error handling, validation, ok property) and explicitly categorizes it as a feature, improving clarity and semantic meaning compared to the generic 'Fixed Location inputs'.",2.0,1.0,5.0,"The commit message '#83 Fixed Location inputs' is overly vague and does not reflect the actual changes made in the diff. The code introduces new properties (status, error, ok), improves input validation with geographical boundary checks, adds error handling, and modifies the representation and access methods. These are not just 'fixes' but enhancements with added error reporting and robustness. A better commit message would describe the actual improvements, such as 'Added error handling and validation for latitude/longitude inputs with status reporting and boundary checks'. As it stands, the message fails to convey the scope, nature, or impact of the changes, making it poor for clarity and usefulness.","The commit message 'add missing docstrings' is highly misleading and inaccurate given the diff. The diff does not add any docstrings at all—there are no new or updated docstrings in the code. Instead, the changes introduce new properties (`status`, `ok`), modify logic, add error handling, and improve structure and validation. The code also includes inline comments and more descriptive logic, but no docstrings (such as descriptions of methods or attributes) are added. Therefore, the commit message fails to reflect the actual changes and is therefore poor.","The commit message accurately reflects the changes made in the code diff. It introduces status and error handling with proper validation logic (e.g., checking latitude and longitude boundaries, type validation), and adds an `ok` property to indicate whether location data is valid. The implementation includes detailed validation steps, error messages, and improved representation via `__repr__` and `status` property. The message is concise, specific, and clearly communicates the purpose and scope of the change, making it excellent for documentation and code review."
96d4fbcbfa3a5b8ac82bf2d93ba4aa578ec9fc06,#83 Fixed Location inputs,test_geocoder.py,"@@ -4,6 +4,7 @@
 import geocoder
 import pytest
 import unittest
+from geocoder.location import location
 
 address = '453 Booth Street, Ottawa'
 location = 'Ottawa, Ontario'
@@ -97,4 +98,13 @@ def test_geonames():
 
 def test_ip():
     g = geocoder.ip(ip)
-    assert g.ok
\ No newline at end of file
+    assert g.ok
+
+def test_location_text():
+    l = Location('45.123, -76.123')
+    assert l.ok
+
+def test_location_list():
+    l = Location([45.123, -76.123])
+    assert l.ok
+    
\ No newline at end of file
",add tests for location and ip,feat(location): add support for location text and list input,Semantic,"The new message indicates a functional enhancement by adding support for both text and list inputs in location, which expands the feature's capability beyond just fixing a bug, thus representing a semantic improvement in functionality.",2.0,3.0,4.0,"The commit message '#83 Fixed Location inputs' is overly vague and does not accurately reflect the changes in the diff. The diff introduces new test functions (test_location_text and test_location_list) for Location input types, rather than fixing existing issues. The message suggests a fix, but the actual change is an addition of new functionality, not a correction. A more accurate message would describe the addition of support for string and list-based location inputs in tests. Therefore, the message is misleading and lacks detail, warranting a score of 2.","The commit message 'add tests for location and ip' is vague and lacks specificity. While it correctly identifies the general scope (location and ip), it does not detail what was added or how the tests improve coverage. The diff shows that only location-related tests (for text and list inputs) were added, while the ip test was already present. The message fails to reflect the actual changes in detail, making it insufficient for clarity. A better message would specify the types of location inputs tested (e.g., 'add tests for Location text and list input parsing'). Thus, it receives a moderate score of 3.","The commit message accurately reflects the changes introduced in the diff, highlighting the addition of support for location text and list input. It uses the correct scope ('feat(location)') and clearly describes the feature. However, it lacks detail on how the functionality works or any edge cases handled, which slightly limits its completeness. Overall, it is clear, relevant, and appropriately scoped, making it a strong commit message."
b208d4d52a3cfac542474c9ad5542e070f1eedfa,#83 #85 Added Regex String & Fixed 0.0 inputs,geocoder/api.py,"@@ -2,7 +2,6 @@
 # coding: utf8
 
 from .keys import *
-from .ip import Ip
 from .osm import Osm
 from .bing import Bing
 from .nokia import Nokia
@@ -10,6 +9,7 @@ from .yahoo import Yahoo
 from .tomtom import Tomtom
 from .google import Google
 from .arcgis import Arcgis
+from .maxmind import Maxmind
 from .opencage import OpenCage
 from .geonames import Geonames
 from .mapquest import Mapquest
@@ -33,12 +33,12 @@ def get(location, **kwargs):
     provider = kwargs.get('provider','').lower().strip()
     method = kwargs.get('method','').lower().strip()
     options = {
-        'ip': {'geocode': Ip},
         'osm': {'geocode': Osm},
         'nokia': {'geocode': Nokia},
         'yahoo': {'geocode': Yahoo},
         'tomtom': {'geocode': Tomtom},
         'arcgis': {'geocode': Arcgis},
+        'maxmind': {'geocode': Maxmind},
         'geonames': {'geocode': Geonames},
         'mapquest': {
             'geocode': Mapquest,
@@ -56,7 +56,7 @@ def get(location, **kwargs):
             'reverse': GoogleReverse,
             'timezone': Timezone,
             'elevation': Elevation,
-        }
+        },
     }
     return options[provider][method](location, **kwargs)
 
@@ -173,13 +173,21 @@ def osm(location, **kwargs):
     """"""
     return get(location, provider='osm', **kwargs)
 
+def maxmind(location, **kwargs):
+    """"""IP (MaxMind) Provider
+
+    :param location: Your search IP Address you want geocoded.
+    :param location: (optional) if left blank will return your current IP address's location.
+    """"""
+    return get(location, provider='maxmind', **kwargs)
+
 def ip(location, **kwargs):
     """"""IP (MaxMind) Provider
 
     :param location: Your search IP Address you want geocoded.
     :param location: (optional) if left blank will return your current IP address's location.
     """"""
-    return get(location, provider='ip', **kwargs)
+    return get(location, provider='maxmind', **kwargs)
 
 def canadapost(location, **kwargs):
     """"""CanadaPost Provider
",add docs for maxmind and ip,feat(ip): add MaxMind IP geocoding support,Semantic,"The new message provides more specific and meaningful context about the feature addition (MaxMind IP geocoding) compared to the old message, which was vague and only mentioned regex and input fixes. This reflects a semantic improvement by clarifying the nature and scope of the change.",1.0,2.0,2.0,"The commit message '#83 #85 Added Regex String & Fixed 0.0 inputs' is highly inconsistent with the actual changes in the code diff. The diff shows the removal of the 'Ip' class import and the addition of a 'Maxmind' class import, along with a new `maxmind()` function and a renamed `ip()` function to use 'maxmind' instead. This indicates that the IP geocoding functionality has been migrated from an 'Ip' provider to a 'Maxmind' provider. The commit message does not reflect this change at all. Instead, it mentions 'Regex String' and 'Fixed 0.0 inputs', which are not present or evident in the diff. Therefore, the message is misleading, irrelevant, and fails to accurately describe the actual changes, making it poor.","The commit message 'add docs for maxmind and ip' is overly vague and does not accurately reflect the actual changes. The diff shows that the IP provider was renamed from 'ip' to 'maxmind' and a new `maxmind` function was added, with updated documentation. The commit message fails to mention the renaming or the structural change in the code, and instead only references 'docs' without specifying what was updated or why. A better message would clarify that the IP provider was renamed to MaxMind and documentation was updated accordingly. Thus, the message is misleading and lacks specificity, warranting a score of 2.","The commit message incorrectly states that the feature is for 'ip' when the actual change is adding MaxMind IP geocoding support. The new provider is named 'maxmind', not 'ip', and the original 'ip' provider has been replaced or redefined. The message misrepresents the change, leading to confusion about what was actually added. While it's a minor issue, the inaccuracy reduces its clarity and correctness. A better message would be 'feat(maxmind): add MaxMind IP geocoding support'."
b208d4d52a3cfac542474c9ad5542e070f1eedfa,#83 #85 Added Regex String & Fixed 0.0 inputs,geocoder/base.py,"@@ -52,6 +52,7 @@ class Base(object):
             )
             self.status_code = r.status_code
             self.url = r.url
+            self.content = r.json()
         except KeyboardInterrupt:
             sys.exit()
         except:
",update base.py,added(json)(response): add JSON content to response object,Semantic,"The new message provides more specific information about the change (adding JSON content to the response object) and includes context (json)(response), which improves clarity and semantic meaning compared to the old message.",1.0,2.0,3.0,"The commit message is highly irrelevant to the code changes. The diff shows a simple addition of `self.content = r.json()` to a class initialization, which relates to handling JSON responses. However, the commit message mentions 'Added Regex String & Fixed 0.0 inputs', neither of which is reflected in the code changes. There is no mention of regex or input validation for 0.0 values. Therefore, the message does not accurately describe the changes and is misleading or entirely incorrect.","The commit message 'update base.py' is extremely vague and provides no information about what was changed or why. While the diff shows a clear addition of `self.content = r.json()` to the Base class, the commit message fails to convey the significance of this change—such as handling JSON responses or improving data access. A better message would specify the change, e.g., 'Add content property to store JSON response from request'. Thus, it lacks detail and context, resulting in a score of 2.","The commit message is partially clear but lacks precision and follows an incorrect format. It incorrectly uses 'added(json)(response)' which is confusing and not standard. It does correctly indicate the addition of JSON content to the response object, but the phrasing is awkward and could be improved. A better message would specify exactly what was added and in what context. The message is understandable but not optimal in clarity or convention, hence a score of 3."
b208d4d52a3cfac542474c9ad5542e070f1eedfa,#83 #85 Added Regex String & Fixed 0.0 inputs,geocoder/location.py,"@@ -1,5 +1,6 @@
 #!/usr/bin/python
 # coding: utf8
+import re
 
 
 class Location(object):
@@ -41,11 +42,12 @@ class Location(object):
     def _check_input(self, location):
         # Checking for a String
         if isinstance(location, str):
-            """"""
-            Building Regex for '45.123,-76.123' Lat & Lng
-            [#85 Issue]
-            """"""
-            pass
+            expression = r""[-]?\d+[.]?[-]?[\d]+""
+            pattern = re.compile(expression)
+            match = pattern.findall(location)
+            if len(match) == 2:
+                lat, lng = match
+                self._check_for_list([lat, lng])
 
         # Checking for List of Tuple
         if isinstance(location, (list, tuple)):
@@ -85,21 +87,26 @@ class Location(object):
     def _check_for_dict(self, location):
         # Standard LatLng list or tuple with 2 number values
         if bool('lat' in location and 'lng' in location):
-            lat = self._convert_float(location.get('lat'))
-            lng = self._convert_float(location.get('lng'))
-            if bool(lat and lng):
-                self.lat = lat
-                self.lng = lng
-                return lat, lng
+            lat = location.get('lat')
+            lng = location.get('lng')
+            self._check_for_list([lat, lng])
+
+        if bool('y' in location and 'x' in location):
+            lat = location.get('y')
+            lng = location.get('x')
+            self._check_for_list([lat, lng])
 
     @property
     def latlng(self):
-        if bool(self.lat and self.lng):
+        condition1 = isinstance(self.lat, float)
+        condition2 = isinstance(self.lng, float)
+        if bool(condition1 and condition2):
             return '{0}, {1}'.format(self.lat, self.lng)
 
 
 if __name__ == '__main__':
-    l = Location(['6.0', u'A0'])
+
+    l = Location({'y':'45.123', 'x':0.0})
     print l
     print l.latlng
 
",add missing docstrings,feat(location): add regex validation and support for y/x coordinates in location input,Semantic,"The new message provides more context by specifying the feature scope (location input), introduces a meaningful enhancement (regex validation and support for y/x coordinates), and aligns with semantic versioning practices, improving clarity and intent over the old message.",3.0,1.0,4.0,"The commit message '#83 #85 Added Regex String & Fixed 0.0 inputs' is partially accurate but lacks clarity and detail. It references two issues (#83 and #85), but only the regex string implementation for parsing lat/lng is clearly added (as seen in the diff), while the mention of 'Fixed 0.0 inputs' is not explicitly supported by the changes. The diff shows a new regex pattern and handling of string inputs with two coordinates, but there's no evidence of fixing 0.0 inputs or addressing #83. The message is too vague and does not fully reflect the actual changes made. A more precise message would specify the addition of regex parsing for string lat/lng formats and clarify that the logic now handles both 'lat/lng' and 'y/x' key mappings. Therefore, it receives a score of 3 — acceptable but incomplete and unclear.","The commit message 'add missing docstrings' is highly misleading and inaccurate given the actual changes in the code. The diff does not add any docstrings — instead, it introduces new functionality involving regex pattern matching and logic for parsing latitude and longitude from strings and dictionaries. The code adds real implementation details, including a regex expression and new conditional logic, which are not related to documentation. Furthermore, the commit message fails to describe the actual changes, which involve parsing logic and structural modifications to the Location class, not just docstrings. Therefore, the message is not only incorrect but also fails to reflect the true nature of the change, making it poor and misleading.","The commit message accurately reflects the key changes introduced in the code diff: adding regex validation for latitude and longitude strings and supporting 'y/x' coordinate pairs in addition to the standard 'lat/lng'. The message is concise and relevant, covering both features. However, it lacks detail on how the validation works (e.g., the specific regex pattern or edge cases handled), which slightly limits its completeness. Overall, it is clear, appropriate, and aligned with the changes, making it a strong but not perfect commit message."
b208d4d52a3cfac542474c9ad5542e070f1eedfa,#83 #85 Added Regex String & Fixed 0.0 inputs,geocoder/maxmind.py,"@@ -4,7 +4,7 @@
 from .base import Base
 
 
-class Ip(Base):
+class Maxmind(Base):
     """"""
     MaxMind's GeoIP2
     =======================
@@ -41,6 +41,13 @@ class Ip(Base):
         }
         self.params = {'demo': 1,}
         self._initialize(**kwargs)
+        self._maxmind_catch_errors()
+
+    def _maxmind_catch_errors(self):
+        error = self.content.get('error')
+        if error:
+            code = self.content.get('code')
+            self.error = code
 
     @property
     def lat(self):
",add maxmind properties to ip,feat(ip): add error handling for MaxMind GeoIP2 responses,Corrective,"The new message introduces error handling for specific API responses, addressing potential failures in data processing, which is a corrective improvement to enhance robustness and reliability.",1.0,2.0,3.0,"The commit message '#83 #85 Added Regex String & Fixed 0.0 inputs' is completely out of alignment with the actual changes in the code diff. The diff shows a class rename from `Ip` to `Maxmind`, addition of a new method `_maxmind_catch_errors` that handles error parsing from MaxMind responses, and no mention of regex strings or fixing 0.0 inputs. The commit message fails to accurately describe the changes, misrepresents the scope, and does not reflect the actual content of the diff. This makes it poor and misleading for developers relying on commit messages for context.","The commit message 'add maxmind properties to ip' is overly vague and does not accurately reflect the changes made. The diff shows a class rename from `Ip` to `Maxmind`, and the addition of a new method `_maxmind_catch_errors` that handles error parsing from MaxMind responses. The commit message fails to mention the class rename or the specific functionality added (error handling), making it unclear about what was actually changed. A better message would specify the renaming and the new error handling capability.","The commit message correctly identifies the feature as error handling for MaxMind GeoIP2 responses, which aligns with the code change. However, it misrepresents the class name change from `Ip` to `Maxmind` as a feature of the `Ip` class, which is a significant issue. The actual change is a renaming of the class, not a new error handling feature added to an existing `Ip` class. The commit message fails to acknowledge the class rename, which is a substantial structural change. While the error handling logic is present and relevant, the message is misleading and does not accurately reflect the full scope of the change. Thus, it receives a moderate score."
b208d4d52a3cfac542474c9ad5542e070f1eedfa,#83 #85 Added Regex String & Fixed 0.0 inputs,test_geocoder.py,"@@ -4,7 +4,6 @@
 import geocoder
 import pytest
 import unittest
-from geocoder.location import location
 
 address = '453 Booth Street, Ottawa'
 location = 'Ottawa, Ontario'
@@ -100,11 +99,4 @@ def test_ip():
     g = geocoder.ip(ip)
     assert g.ok
 
-def test_location_text():
-    l = Location('45.123, -76.123')
-    assert l.ok
-
-def test_location_list():
-    l = Location([45.123, -76.123])
-    assert l.ok
     
\ No newline at end of file
",add unit tests for location and ip,remove(location): remove test_location_text and test_location_list,Corrective,"The new message indicates a removal of test-related code, which suggests a fix or cleanup to remove outdated or redundant tests, improving the codebase's correctness and maintainability.",1.0,2.0,3.0,"The commit message '#83 #85 Added Regex String & Fixed 0.0 inputs' is highly misleading and does not accurately reflect the changes in the diff. The diff shows the removal of two test functions: `test_location_text()` and `test_location_list()`, which indicates code removal or deprecation, not the addition of regex support or fixing 0.0 inputs. There is no mention of regex strings or handling of 0.0 inputs in the code changes. The message is vague, incorrect, and fails to describe the actual impact of the changes. Therefore, it is poor and does not align with the actual diff.","The commit message 'add unit tests for location and ip' is vague and overly broad. While it correctly identifies the general area of the changes (location and ip), it fails to reflect the actual changes in the diff. The diff shows the removal of two test functions (test_location_text and test_location_list) rather than adding new ones. The message also does not indicate that existing tests were removed or that functionality was being deprecated. A more accurate message would reflect the removal of location tests, not their addition. Therefore, the message is misleading and lacks precision, warranting a score of 2.","The commit message correctly identifies the removal of two test functions (`test_location_text` and `test_location_list`) and references the 'location' module, which is accurate based on the diff. However, it lacks context about why these tests were removed (e.g., if they were deprecated, redundant, or replaced), and does not mention any changes to functionality or code structure. While the message is clear and technically correct, it is minimal and lacks depth, which limits its usefulness for understanding the full impact of the change. Therefore, it is fair but not excellent."
fb14f59e6055a24b8cd8e017fb5d17ea1562c075,Issues in testing,test_geocoder.py,"@@ -67,9 +67,13 @@ def test_arcgis():
     g = geocoder.arcgis(location)
     assert g.ok
 
+""""""
+Test Failing
+
 def test_geolytica():
     g = geocoder.geolytica(address)
     assert g.ok
+""""""
 
 def test_canadapost():
     g = geocoder.canadapost(address)
@@ -95,8 +99,12 @@ def test_geonames():
     g = geocoder.geonames(location)
     assert g.ok
 
+""""""
+Test Failing
+Rate limit 25
+
 def test_ip():
     g = geocoder.ip(ip)
     assert g.ok
-
+""""""
     
\ No newline at end of file
",add more tests,fix(tests): add missing test cases for geolytica and ip with rate limit info,Corrective,"The new message specifies a concrete fix for missing test cases, addressing a deficiency in the testing process, which is a corrective action to improve test coverage and reliability.",2.0,2.0,2.0,"The commit message 'Issues in testing' is extremely vague and provides no specific details about the nature, scope, or context of the issues. While the diff shows that several test functions are commented out with placeholder notes like 'Test Failing' and 'Rate limit 25', the commit message fails to reflect this information. A good commit message should clearly describe what changed, why it was changed, and any relevant context. This message lacks actionable insight and does not align with the actual content of the diff, making it insufficient and unhelpful for understanding the intent or impact of the change.","The commit message 'add more tests' is overly vague and provides no details about what was added, why it was added, or the context of the changes. The diff shows that several test functions are commented out with 'Test Failing' or 'Rate limit 25' notes, indicating that the tests were either failing or had limitations, but the commit message fails to communicate this. A better message would specify the intent, such as 'Add tests for geolytica and ip geocoding with failure notes due to rate limits.' Thus, while the message reflects a general truth (more tests were added), it lacks clarity, context, and actionable insight, resulting in a low score.","The commit message claims to 'add missing test cases' for geolytica and ip, but the diff shows that the tests are not actually added—they are commented out with 'Test Failing' and rate limit information. The changes appear to be disabling or marking tests as failing rather than adding functional test cases. The message is misleading and does not accurately reflect the actual changes. While it mentions rate limits, which is a minor detail, the core claim of 'adding missing test cases' is false. Therefore, the message is poorly aligned with the diff and deserves a low score."
c5ff39885612843052ace5b8e6c14e0879eb0968,Fixed CLI,geocoder/cli.py,"@@ -38,7 +38,7 @@ def cli():
             output = g.geojson
         elif args.osm:
             output = g.osm
-        elif args.json:
+        else args.json:
             output = g.json
 
         if args.pretty:
",add osm command,fix(cli): incorrect elif condition for json output,Corrective,"The change addresses a logical error in the CLI's json output condition using an incorrect elif statement, which fixes a functional bug.",1.0,1.0,3.0,"The commit message 'Fixed CLI' is extremely vague and provides no information about what was actually fixed, why it was fixed, or what the issue was. The diff shows a syntax error in the condition: 'else args.json' should be 'elif args.json'. This is a critical bug that affects the CLI logic, yet the commit message fails to convey the nature of the fix. A proper commit message should describe the specific issue and the change made. Therefore, the message is poor and does not reflect the actual work done.","The commit message 'add osm command' is highly inadequate given the actual change in the code. The diff shows a syntax error in the condition `else args.json` (missing 'if' and incorrect structure), which suggests a typo or misinterpretation of the intended logic. The commit message does not reflect the actual change, which involves a malformed conditional statement related to output format handling (likely intended to handle JSON output). A proper commit message should describe what was actually changed, why, and how it affects functionality. This message is vague, incorrect, and fails to provide any useful context.","The commit message correctly identifies the issue as an incorrect condition in the CLI logic for JSON output. However, it lacks specificity about what was fixed—specifically, the original condition `elif args.json:` was changed to `else args.json:`, which is syntactically invalid and likely a typo. The message does not clearly state that the condition was incorrectly written or that it was changed to a proper `elif args.json:`. While the issue is accurately described, the justification is too vague to be considered excellent. Thus, a score of 3 reflects a mostly accurate but insufficiently detailed message."
dee965dea8b7ee5831c000b6ea88188dcdc6a7e8,Fix again CLI,geocoder/cli.py,"@@ -38,7 +38,7 @@ def cli():
             output = g.geojson
         elif args.osm:
             output = g.osm
-        else args.json:
+        else:
             output = g.json
 
         if args.pretty:
",add osm command,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed'), addressing the root cause rather than just surface-level changes, suggesting a fix for a functional issue.",2.0,1.0,2.0,"The commit message 'Fix again CLI' is vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what the issue was. While it indicates a correction was made, the term 'again' suggests prior attempts without context, and the lack of detail makes it difficult to understand the change's significance. The diff shows a simple fix in the CLI logic where an incorrect condition (`else args.json`) was replaced with `else:`, which is a small but meaningful correction. A better message would specify the issue (e.g., 'Fix incorrect default output format in CLI when no output type is specified'). Thus, the message is minimally adequate but lacks clarity and context, earning a score of 2.","The commit message 'add osm command' is highly insufficient and does not reflect the actual changes in the code diff. The diff shows a correction in the logic for determining the output format (switching from an incorrect 'else args.json' to 'else: output = g.json'), which is a fix for a syntax error, not the addition of an OSM command. The commit message is vague, inaccurate, and fails to describe what was actually changed or why. It also does not mention the fix for the syntax error or the impact on functionality. Therefore, it is poor and deserves a score of 1.","The commit message 'fix: rectification failed' is vague and does not accurately reflect the actual change in the code. The diff shows a simple fix to correct a syntax error in the elif clause — specifically, replacing `else args.json` with `else:` to properly handle the default case. The message fails to mention the actual issue (incorrect condition) or the fix applied. While it includes the 'fix' prefix, the content is misleading and lacks specificity. A better message would describe the actual change, such as 'fix: correct else clause to properly default to JSON output'. Thus, it receives a score of 2 for being technically incorrect and uninformative."
7dcb32be43c88cf5003270ee0b5becd7bc38ba57,#94 Fixed OK exception in JSON method,geocoder/base.py,"@@ -115,6 +115,9 @@ class Base(object):
                 if value:
                     self.json[key] = value
 
+        # Add OK attribute even if value is ""False""
+        self.json['ok'] = self.ok
+
     def _parse(self, content, last=''):
         # DICTIONARY
         if isinstance(content, dict):
@@ -290,7 +293,7 @@ class Base(object):
                 'coordinates': [self.lng, self.lat],
             }
             return geometry
-        return None
+        return {}
 
     @property
     def osm(self):
",add ok attribute to osm objects,add(ok): add OK attribute to JSON output even if value is False,Semantic,"The new message introduces a semantic change by explicitly adding an 'OK' attribute to JSON output even when its value is False, which alters the behavior and meaning of the output compared to the previous implementation.",2.0,3.0,3.0,"The commit message is too vague and does not accurately reflect the changes made. It claims to fix an 'OK exception' in the JSON method, but the diff shows no exception being handled or fixed—instead, it adds a default 'ok' field to the JSON output even when the value is 'False'. This is a feature or behavior change, not a fix for an exception. The message lacks context about what was actually changed, why, and what the impact is. A better message would describe the addition of the 'ok' attribute to ensure consistent JSON output.","The commit message 'add ok attribute to osm objects' is vague and lacks context. While it correctly identifies the addition of an 'ok' attribute, it does not specify that the attribute is added even when the value is 'False', nor does it mention the impact on the JSON output or the change in default return value from None to an empty object. These are significant behavioral changes. A better message would clarify the scope and implications. Thus, it is partially accurate but insufficiently detailed, warranting a score of 3.","The commit message correctly identifies the change — adding an 'ok' attribute to the JSON output even when its value is False — which is relevant to the diff. However, it lacks context about why this change was made (e.g., for consistency, error handling, or API compatibility) and is slightly ambiguous in phrasing ('add(ok)' is not standard). While the action is clear, the message could be more precise and informative. Thus, it is functional but not excellent."
c86c04b54d95d58a4adcc971a54d415f06995c9e,Fixed relative path,geocoder/opencage.py,"@@ -1,8 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from keys import opencage_key
+from .base import Base
+from .keys import opencage_key
 
 
 class OpenCage(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously masked or unreported, thus addressing a functional problem rather than just appearance or style.",2.0,3.0,2.0,"The commit message 'Fixed relative path' is too vague and lacks context. While the diff does show a change from absolute to relative imports (e.g., `from base import Base` to `from .base import Base`), the message does not explain why this change was necessary or what problem it solved. A better message would describe the intent, such as 'Updated imports to use relative paths for better module structure and maintainability.' Therefore, the message is minimally informative and only receives a score of 2.","The commit message 'add missing import' is vague and lacks specificity. While it correctly identifies that imports were added, it does not explain the context, why the imports were necessary, or what changed in functionality. The diff shows a simple change from relative imports (using `.`) to module-level relative imports, which is a common refactoring, but the message fails to communicate the intent or impact. A better message would specify, for example, 'Update imports to use relative paths for base and keys modules'. Thus, it's accurate but insufficiently detailed, earning a medium score.","The commit message 'fix: rectification failed' is vague and lacks specificity. It does not clearly explain what was fixed, why it was necessary, or what 'rectification failed' refers to. While it is categorized as a fix, the term 'rectification' is ambiguous and not directly related to the actual changes in the diff, which only involve importing modules from within the same package (using relative imports). A more descriptive message, such as 'fix: update imports to use relative paths', would be more informative and useful for understanding the change."
3bc5e8af60af86873fb6f44bd30f59d206fc45b8,"Open cage test execeptions was failing, fixed now",geocoder/opencage.py,"@@ -46,12 +46,13 @@ class OpenCage(Base):
         self._opencage_catch_errors()
 
     def _opencage_catch_errors(self):
-        status = self.content.get('status')
-        if status:
-            code = status.get('code')
-            message = status.get('message')
-            if code:
-                self.error = message
+        if self.content:
+            status = self.content.get('status')
+            if status:
+                code = status.get('code')
+                message = status.get('message')
+                if code:
+                    self.error = message
 
     @property
     def lat(self):
",add missing semicolon,fix(open-cage): handle status error more robustly,Corrective,"The new message indicates a specific fix for a robustness issue in handling status errors, which addresses a functional failure rather than a cosmetic or trivial change.",2.0,1.0,3.0,"The commit message is vague and poorly worded. It states 'Open cage test execeptions was failing, fixed now' which contains grammatical errors ('execeptions' instead of 'exceptions') and lacks clarity about what was actually fixed or why. While the diff shows a logical improvement in error handling by properly checking if `self.content` exists before accessing its 'status' field, the commit message fails to convey this change in a meaningful or actionable way. A better message would specify the issue (e.g., 'Fixed null reference in error handling when status is missing') and the fix. Therefore, it receives a score of 2 for being technically incorrect and unclear.","The commit message 'add missing semicolon' is highly misleading and inaccurate given the diff. The diff does not show a missing semicolon; instead, it shows a restructured and logically improved code block with better flow and indentation. The change involves reordering and restructuring conditional logic, not merely adding a semicolon. Therefore, the commit message fails to reflect the actual changes made, making it misleading and unhelpful for understanding the purpose of the commit.","The commit message 'fix(open-cage): handle status error more robustly' is generally appropriate and indicates a fix related to error handling. However, the diff shows only a minor reordering and indentation change in the logic—adding a check for `self.content` before accessing `status`—which is a small improvement in robustness. The change is not substantial enough to justify a high score, and the message lacks specific detail about what was fixed or why. While it's accurate, it's vague and doesn't fully reflect the actual improvement. Therefore, a score of 3 (Fair) is appropriate: the fix is valid and relevant, but the message is too generic to be considered excellent."
18533a579c9bc82372508449bb2d8f1c1e497db6,Modified Google exception,geocoder/google.py,"@@ -59,24 +59,25 @@ class Google(Base):
 
     def _exceptions(self):
         # Build intial Tree with results
-        self._build_tree(self.parse['results'][0])
+        if self.parse['results']:
+            self._build_tree(self.parse['results'][0])
 
-        # Build Geometry
-        self._build_tree(self.parse['geometry'])
+            # Build Geometry
+            self._build_tree(self.parse['geometry'])
 
-        # Parse address components with short & long names
-        for item in self.parse['address_components']:
-            for category in item['types']:
-                self.parse[category]['long_name'] = item['long_name']
-                self.parse[category]['short_name'] = item['short_name']
+            # Parse address components with short & long names
+            for item in self.parse['address_components']:
+                for category in item['types']:
+                    self.parse[category]['long_name'] = item['long_name']
+                    self.parse[category]['short_name'] = item['short_name']
 
     @property
     def lat(self):
-        return self.parse['geometry']['location']['lat']
+        return self.parse['location']['lat']
 
     @property
     def lng(self):
-        return self.parse['geometry']['location']['lng']
+        return self.parse['location']['lng']
 
     @property
     def quality(self):
@@ -84,14 +85,14 @@ class Google(Base):
 
     @property
     def accuracy(self):
-        return self.parse['geometry']['location_type']
+        return self.parse['location_type']
 
     @property
     def bbox(self):
-        south = self.parse['geometry']['viewport']['southwest']['lat']
-        west = self.parse['geometry']['viewport']['southwest']['lng']
-        north = self.parse['geometry']['viewport']['northeast']['lat']
-        east = self.parse['geometry']['viewport']['northeast']['lng']
+        south = self.parse['viewport']['southwest']['lat']
+        west = self.parse['viewport']['southwest']['lng']
+        north = self.parse['viewport']['northeast']['lat']
+        east = self.parse['viewport']['northeast']['lng']
         return self._get_bbox(south, west, north, east)
 
     @property
@@ -169,7 +170,7 @@ class Google(Base):
             return self.parse['country']['long_name']
 
 if __name__ == '__main__':
-    g = Google('Orleans, Ottawa ON')
+    g = Google('K1E 1S9')
     print g.json
     #print g.parse
     #print g.parse['viewport']['southwest']['lat']
\ No newline at end of file
",add missing classes,fix(google): handle empty results and update location properties,Corrective,"The new message indicates a specific bug fix related to handling empty results and updating location properties, which addresses a functional issue in the Google integration.",2.0,1.0,4.0,"The commit message 'Modified Google exception' is highly inadequate given the actual changes in the code. The diff shows multiple structural and logical changes: adding a conditional check for results before building the tree, fixing incorrect property access paths (e.g., `location` instead of `geometry/location`), and updating the address component parsing. These changes are not about exceptions, but rather about data parsing, property access, and error safety. The commit message fails to describe the actual scope and nature of the changes, making it misleading and unhelpful for understanding the purpose of the commit. A better message would reflect the actual improvements, such as 'Fixed and improved Google geocoding data parsing and location access paths'.","The commit message 'add missing classes' is completely inaccurate and irrelevant to the actual changes in the diff. The diff shows modifications to an existing class (Google), including fixes to property access paths, handling of empty results, and updates to data parsing logic — none of which involve adding new classes. The message misrepresents the nature of the changes, suggesting a completely different task. This is a severe misalignment between the commit message and the code changes, making it poor and misleading.","The commit message accurately reflects the key changes in the diff. It correctly identifies the fix for handling empty results by adding a conditional check in `_exceptions` to prevent errors when `parse['results']` is empty. It also properly updates the location properties (lat, lng, accuracy, bbox) to reference `location` instead of `geometry/location`, which aligns with the actual data structure changes. The message is concise and relevant, though it slightly misses mentioning the address components parsing update, which is also a significant change. Overall, it's clear, accurate, and covers the main intent of the changes, making it a strong commit message with minor scope omissions."
d769c451b4c94d0236becc51949009840675c794,Change Float in Bbox to OSM,geocoder/base.py,"@@ -167,9 +167,6 @@ class Base(object):
             return 'ERROR - No Geometry'
 
     def _get_bbox(self, south, west, north, east):
-        # Convert to float
-        south, west, north, east = float(south), float(west), float(north), float(east)
-
         # South Latitude, West Longitude, North Latitude, East Longitude
         self.south = south
         self.west = west
",add missing attribute to base,remove(float)(geometry): convert bbox coordinates to float,Semantic,"The new message provides more precise and actionable information by specifying the operation (convert bbox coordinates to float) and the affected component (geometry), improving clarity and semantic meaning over the vague original.",1.0,1.0,2.0,"The commit message 'Change Float in Bbox to OSM' is highly unclear and does not accurately reflect the changes in the code diff. The diff shows the removal of a float conversion line, not a change to OSM-related functionality. There is no mention of OSM (OpenStreetMap) or any related feature. The message is vague, misleading, and fails to describe what was actually changed or why. It does not provide context or clarity about the intent or impact of the change, making it poor communication of the commit's purpose.","The commit message 'add missing attribute to base' is highly inaccurate and misleading. The diff shows the removal of a line that converted string inputs to floats, not the addition of an attribute. There is no new attribute being added; instead, a type conversion is being removed. The message fails to describe the actual change and misrepresents the intent. A correct message would reflect the removal of a type conversion, not an addition of an attribute. Therefore, the commit message is poor and does not match the diff.","The commit message is technically incorrect and misleading. It claims to remove a float conversion, but the actual change is the removal of a commented-out float conversion. The message 'remove(float)(geometry): convert bbox coordinates to float' is confusing and contradicts the diff, which shows the conversion was already present as a comment and removed. A proper commit message should accurately reflect the change (e.g., 'Remove unnecessary float conversion from bbox coordinate parsing'). The current message is vague, inaccurate, and fails to convey the actual intent, resulting in a low score."
d769c451b4c94d0236becc51949009840675c794,Change Float in Bbox to OSM,geocoder/osm.py,"@@ -153,10 +153,10 @@ class Osm(Base):
     @property
     def bbox(self):
         if self.parse['boundingbox']:
-            south = self.parse['boundingbox'][0]
-            west = self.parse['boundingbox'][2]
-            north = self.parse['boundingbox'][1]
-            east = self.parse['boundingbox'][3]
+            south = float(self.parse['boundingbox'][0])
+            west = float(self.parse['boundingbox'][2])
+            north = float(self.parse['boundingbox'][1])
+            east = float(self.parse['boundingbox'][3])
             return self._get_bbox(south, west, north, east)
 
 if __name__ == '__main__':
",update osm.py,fix(osm): parse bounding box coordinates as float,Corrective,"The change addresses a bug by correctly parsing bounding box coordinates as floats, ensuring proper handling of floating-point values in OSM data, which improves data accuracy and functionality.",1.0,2.0,4.0,"The commit message 'Change Float in Bbox to OSM' is highly unclear and misleading. It does not accurately describe what was changed. The diff shows that string values in the bounding box coordinates were converted to floats, not a change related to 'OSM'. The message fails to convey the actual change, its purpose, or impact, making it ineffective for understanding the commit's intent. A better message would describe the conversion of string bounding box values to float for proper numeric processing.","The commit message 'update osm.py' is extremely vague and provides no information about what was changed or why. While the diff shows a clear change from integer to float conversion in the bbox property, the commit message fails to convey the significance of this change—such as ensuring proper floating-point handling for geographic coordinates. A better message would specify the nature of the change (e.g., 'Convert bounding box coordinates to float for accurate geographic calculations'). Therefore, it receives a score of 2 for lacking detail and context.","The commit message accurately describes the change: it clarifies that bounding box coordinates are now parsed as floats. This is relevant and directly tied to the diff, which shows the addition of `float()` calls around the bounding box values. The message is concise and clear, though it could be slightly more detailed (e.g., mentioning the property `bbox` or the source of the coordinates). Still, it effectively communicates the intent and impact of the change, making it a strong, clear commit message."
b00f380f4ba8354794082fcfc029609ae4d249cb,Version change 1.0.7,geocoder/__init__.py,"@@ -2,17 +2,24 @@
 # coding: utf8
 
 """"""
-geocoder library
-~~~~~~~~~~~~~~~~
+Geocoder: Simple JSON
+~~~~~~~~~~~~~~~~~~~~~
 
-A pure Python Geocoding module made easy.
+Geocoder is a MIT Licensed Geocoding library, written in Python, 
+simple and consistant.
 
-Every task is made easy with tons of ``help`` & ``debug`` commands!
+Many online providers such as Google & Bing have geocoding services,
+these providers do not include Python libraries and have different 
+JSON responses between each other.
 
-    >>> import geocoder # pip install geocoder
-    >>> g = geocoder.google('<address>')
-    >>> g.lat, g.lng
-    45.413140 -75.656703
+Consistant JSON responses from various providers.
+
+    >>> g = geocoder.google('New York City')
+    >>> g.latlng
+    [40.7127837, -74.0059413]
+    >>> g.state
+    'New York'
+    >>> g.json
     ...
 
 """"""
@@ -20,7 +27,7 @@ Every task is made easy with tons of ``help`` & ``debug`` commands!
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.0.6'
+__version__ = '1.0.7'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docs,chg(docs): update version to 1.0.7 and improve documentation,Semantic,"The new message provides more context by specifying the change type (documentation) and highlights an improvement in documentation, which adds semantic clarity and intent beyond a simple version update.",2.0,2.0,4.0,"The commit message 'Version change 1.0.7' is overly minimal and provides no context about what changed beyond the version number. While the diff shows a version bump from 1.0.6 to 1.0.7, the updated README includes meaningful improvements in documentation — such as better clarity on the library's purpose, its MIT licensing, support for multiple providers, and consistent JSON responses. A more informative commit message would highlight these enhancements (e.g., 'Improved README documentation to clarify library features and JSON consistency across providers'). As it stands, the message lacks detail and fails to reflect the actual changes in the code or documentation, making it insufficient for transparency and maintainability.","The commit message 'add missing docs' is vague and lacks specificity. While the diff shows updates to the documentation (e.g., improved description, version bump), the message does not indicate what exactly was added or why. A more descriptive message like 'update README with improved documentation and version update' would be more informative. Therefore, it receives a score of 2 for being technically accurate but insufficiently detailed.","The commit message accurately reflects the changes: it correctly updates the version number from 1.0.6 to 1.0.7 and notes an improvement in documentation. The documentation update is well-described, especially in the context of clarifying the library's purpose, highlighting consistent JSON responses, and improving examples. While the message is concise and clear, it could be slightly more specific about what exactly was improved in the documentation (e.g., structure, clarity, examples). Nonetheless, it is accurate, relevant, and sufficient for a changelog context, making it a strong 4 rather than an excellent 5."
b00f380f4ba8354794082fcfc029609ae4d249cb,Version change 1.0.7,setup.py,"@@ -13,10 +13,10 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
-version = '1.0.6'
+version = '1.0.7'
 requires = ['requests>=2.3.0', 'ratelim>=0.1.4']
 
-with open('README.md') as f:
+with open('README.rst') as f:
     readme = f.read()
 with open('LICENSE') as f:
     license = f.read()
@@ -36,12 +36,12 @@ setup(
         geocode=geocoder.cli:cli
     ''',
     packages=['geocoder'],
-    package_data={'': ['LICENSE', 'README.md']},
+    package_data={'': ['LICENSE', 'README.rst']},
     package_dir={'geocoder': 'geocoder'},
     include_package_data=True,
     install_requires=requires,
     zip_safe=False,
-    keywords='geocoder google bing mapquest nokia osm lat lng location addxy',
+    keywords='geocoder arcgis tomtom opencage google bing mapquest nokia osm lat lng location addxy',
     classifiers=(
         'Development Status :: 5 - Production/Stable',
         'Intended Audience :: Developers',
",add missing setup.py file,chore(version): bump version from 1.0.6 to 1.0.7,Cosmetic,"The new message provides a more descriptive and standardized commit format, indicating the type of change (chore) and specific version bump, which improves readability and context without altering functionality.",2.0,1.0,3.0,"The commit message 'Version change 1.0.7' is technically accurate but extremely minimal and lacks context. It does not mention the actual changes made (e.g., updated README format from .md to .rst, added new keywords like 'arcgis', 'tomtom', 'opencage'), which are significant modifications affecting documentation and functionality. A better commit message would include these details to provide clarity on the impact of the changes. Therefore, while correct in stating the version bump, it is insufficient in scope and detail for a meaningful code review or historical tracking.","The commit message 'add missing setup.py file' is completely inaccurate and misleading. The diff shows that the version number is incremented from '1.0.6' to '1.0.7', and there are changes to README.md being replaced with README.rst, as well as updates to keywords in the setup configuration. There is no indication of a missing setup.py file, and the file itself is not added or created. The message does not reflect the actual changes made, making it factually incorrect and therefore poor.","The commit message correctly identifies the type of change as a version bump and accurately reflects the version update from 1.0.6 to 1.0.7. However, it is missing context about other changes in the commit, such as the file extension change from README.md to README.rst and the addition of new keywords (e.g., 'arcgis', 'tomtom', 'opencage'). A more complete commit message would include these details to provide a clearer picture of the changes. As a result, while the message is accurate and appropriate for the version bump, it is incomplete and lacks necessary context, leading to a moderate score."
b68594ca74f9778448ec03017a15d6a3f4a5d6d2,#104 Fixed Quality attribute in Google,geocoder/__init__.py,"@@ -27,7 +27,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.0.7'
+__version__ = '1.0.8'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present, thus addressing a corrective fix rather than a cosmetic or semantic change.",1.0,1.0,1.0,"The commit message 'Fixed Quality attribute in Google' is completely unrelated to the actual code change, which only updates the version number from '1.0.7' to '1.0.8'. There is no mention of a 'Quality attribute' or any change related to Google's API or geocoding functionality. The message misrepresents the change and fails to describe what was actually modified or why. Therefore, it is poor and does not accurately reflect the commit's content.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.0.7' to '1.0.8', not any addition of docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and incorrect. A proper message would have been something like 'Bump version to 1.0.8'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.0.7' to '1.0.8', which is a minor version update, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what issue it resolves. A proper commit message should clearly describe the change and its purpose. Therefore, the message is poor and misleading."
b68594ca74f9778448ec03017a15d6a3f4a5d6d2,#104 Fixed Quality attribute in Google,geocoder/base.py,"@@ -37,12 +37,19 @@ class Base(object):
     postal = ''
 
     def __repr__(self):
-        return ""<[{0}] {1} - {2} [{3}]>"".format(
-            self.status, 
-            self.provider.title(), 
-            self.method.title(), 
-            self.address
-        )
+        if self.address:
+            return ""<[{0}] {1} - {2} [{3}]>"".format(
+                self.status, 
+                self.provider.title(), 
+                self.method.title(), 
+                self.address
+            )
+        else:
+            return ""<[{0}] {1} - {2}>"".format(
+                self.status, 
+                self.provider.title(), 
+                self.method.title()
+            )
 
     @staticmethod
     def rate_limited_get(url, **kwargs):
",add address check to base class,feat(Base): add address handling in __repr__,Semantic,"The new message introduces a functional change—adding address handling in __repr__—which alters the behavior or output of the object representation, indicating a semantic improvement rather than just a cosmetic or corrective fix.",1.0,3.0,3.0,"The commit message '#104 Fixed Quality attribute in Google' is highly inaccurate and irrelevant to the code changes. The diff shows a modification to the __repr__ method of a class, specifically handling the formatting of the address field (adding a conditional to include or omit the address based on its presence). There is no mention of a 'Quality attribute' or any related change involving Google. The message misrepresents the actual change and fails to describe what was actually fixed or improved. Therefore, it is poor in both accuracy and relevance.","The commit message 'add address check to base class' is accurate and relevant to the change, as the diff introduces a conditional check for the presence of an address in the __repr__ method. However, it is overly vague and lacks detail about the impact or context—such as why the check was needed or how it improves the output. A more descriptive message (e.g., 'improve __repr__ output by conditionally including address when present') would be better. Thus, it is functional but not excellent.","The commit message 'feat(Base): add address handling in __repr__' is somewhat vague and lacks detail about the change's scope or impact. While it correctly identifies the feature and the file, it does not clearly convey that the change handles the case when `self.address` is missing, which is a significant behavioral modification. A more descriptive message, such as 'feat(Base): improve __repr__ to handle optional address field gracefully', would be better. Thus, it's functional but not detailed enough for clarity, earning a mid-range score."
b68594ca74f9778448ec03017a15d6a3f4a5d6d2,#104 Fixed Quality attribute in Google,geocoder/google.py,"@@ -73,17 +73,17 @@ class Google(Base):
         return requests.get(*args, **kwargs)
 
     def _google_catch_errors(self):
-        status = self.parse['status']
+        status = self.parse.get('status')
         if not status == 'OK':
             self.error = status
 
     def _exceptions(self):
         # Build intial Tree with results
         if self.parse['results']:
-            self._build_tree(self.parse['results'][0])
+            self._build_tree(self.parse.get('results')[0])
 
             # Build Geometry
-            self._build_tree(self.parse['geometry'])
+            self._build_tree(self.parse.get('geometry'))
 
             # Parse address components with short & long names
             for item in self.parse['address_components']:
@@ -93,66 +93,68 @@ class Google(Base):
 
     @property
     def lat(self):
-        return self.parse['location']['lat']
+        return self.parse['location'].get('lat')
 
     @property
     def lng(self):
-        return self.parse['location']['lng']
+        return self.parse['location'].get('lng')
 
     @property
     def quality(self):
-        return self.parse['types'][0]
+        quality = self.parse.get('types')
+        if quality:
+            return quality[0]
 
     @property
     def accuracy(self):
-        return self.parse['location_type']
+        return self.parse.get('location_type')
 
     @property
     def bbox(self):
-        south = self.parse['southwest']['lat']
-        west = self.parse['southwest']['lng']
-        north = self.parse['northeast']['lat']
-        east = self.parse['northeast']['lng']
+        south = self.parse['southwest'].get('lat')
+        west = self.parse['southwest'].get('lng')
+        north = self.parse['northeast'].get('lat')
+        east = self.parse['northeast'].get('lng')
         return self._get_bbox(south, west, north, east)
 
     @property
     def address(self):
-        return self.parse['formatted_address']
+        return self.parse.get('formatted_address')
 
     @property
     def postal(self):
         if self.short_name:
-            return self.parse['postal_code']['short_name']
+            return self.parse['postal_code'].get('short_name')
         else:
-            return self.parse['postal_code']['long_name']
+            return self.parse['postal_code'].get('long_name')
 
     @property
     def subpremise(self):
         if self.short_name:
-            return self.parse['subpremise']['short_name']
+            return self.parse['subpremise'].get('short_name')
         else:
-            return self.parse['subpremise']['long_name']
+            return self.parse['subpremise'].get('long_name')
 
     @property
     def housenumber(self):
         if self.short_name:
-            return self.parse['street_number']['short_name']
+            return self.parse['street_number'].get('short_name')
         else:
-            return self.parse['street_number']['long_name']
+            return self.parse['street_number'].get('long_name')
 
     @property
     def street(self):
         if self.short_name:
-            return self.parse['route']['short_name']
+            return self.parse['route'].get('short_name')
         else:
-            return self.parse['route']['long_name']
+            return self.parse['route'].get('long_name')
 
     @property
     def neighborhood(self):
         if self.short_name:
-            return self.parse['neighborhood']['short_name']
+            return self.parse['neighborhood'].get('short_name')
         else:
-            return self.parse['neighborhood']['long_name']
+            return self.parse['neighborhood'].get('long_name')
 
     @property
     def sublocality(self):
@@ -164,31 +166,31 @@ class Google(Base):
     @property
     def city(self):
         if self.short_name:
-            return self.parse['locality']['short_name']
+            return self.parse['locality'].get('short_name')
         else:
-            return self.parse['locality']['long_name']
+            return self.parse['locality'].get('long_name')
 
     @property
     def county(self):
         if self.short_name:
-            return self.parse['administrative_area_level_2']['short_name']
+            return self.parse['administrative_area_level_2'].get('short_name')
         else:
-            return self.parse['administrative_area_level_2']['long_name']
+            return self.parse['administrative_area_level_2'].get('long_name')
 
     @property
     def state(self):
         if self.short_name:
-            return self.parse['administrative_area_level_1']['short_name']
+            return self.parse['administrative_area_level_1'].get('short_name')
         else:
-            return self.parse['administrative_area_level_1']['long_name']
+            return self.parse['administrative_area_level_1'].get('long_name')
 
     @property
     def country(self):
         if self.short_name:
-            return self.parse['country']['short_name']
+            return self.parse['country'].get('short_name')
         else:
-            return self.parse['country']['long_name']
+            return self.parse['country'].get('long_name')
 
 if __name__ == '__main__':
-    g = Google('453 Booth street, Ottawa')
+    g = Google('PIAZZA FIDIA, 1 - 20159 MILANO (MI)')
     g.debug()
\ No newline at end of file
",add more google api docs,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was addressed, which aligns with a corrective fix rather than a cosmetic or trivial change.",2.0,1.0,2.0,"The commit message only mentions fixing the 'Quality' attribute, which is a minor part of the changes. The diff shows that multiple properties across the class (lat, lng, bbox, address, postal, subpremise, housenumber, street, neighborhood, city, county, state, country) have been updated to use .get() for safer dictionary access. This indicates a broader improvement in error handling and robustness, not just the quality attribute. The commit message fails to reflect the scope and significance of the actual changes, making it misleading and incomplete. Therefore, it is only moderately accurate and lacks context, warranting a score of 2.","The commit message 'add more google api docs' is highly irrelevant to the actual changes in the code diff. The diff shows a series of safety improvements where `.get()` is used instead of direct dictionary access to avoid KeyError exceptions, which enhances robustness and error handling. These changes are not about adding API documentation but about improving code safety and resilience. The commit message fails to reflect the real purpose of the changes, making it misleading and inaccurate. Therefore, it receives a low score.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual changes made in the diff. The diff shows a consistent pattern of replacing direct dictionary key access (e.g., `self.parse['key']`) with safe `.get()` access (e.g., `self.parse.get('key')`), which improves robustness by handling missing keys gracefully. This is a clear improvement in error handling and defensive programming, likely to prevent crashes when data is missing. However, the commit message fails to describe this meaningful change—instead, it uses a generic and incorrect term 'rectification failed', which is neither descriptive nor technically accurate. A better message would be something like 'fix: add safe .get() access to prevent KeyError in address parsing'. Therefore, while the change is valid and useful, the commit message is poor in clarity and relevance, warranting a score of 2."
b68594ca74f9778448ec03017a15d6a3f4a5d6d2,#104 Fixed Quality attribute in Google,setup.py,"@@ -13,7 +13,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
-version = '1.0.7'
+version = '1.0.8'
 requires = ['requests>=2.3.0', 'ratelim>=0.1.4']
 
 with open('README.rst') as f:
",update version number in setup.py,chore(version): bump version to 1.0.8,Cosmetic,"The new message is a version bump in a chore commit, which does not change functionality or fix a bug but updates metadata. This is a cosmetic change related to versioning.",1.0,3.0,5.0,"The commit message 'Fixed Quality attribute in Google' is highly misleading and does not reflect the actual change in the code diff. The diff only shows an increment in the version number from '1.0.7' to '1.0.8' and a minor update to dependencies, with no mention of a 'Quality attribute' or any Google-related fix. The message is vague, inaccurate, and fails to describe the actual change, making it poor communication of the commit's purpose.","The commit message 'update version number in setup.py' is accurate and relevant to the change, as the diff shows a version bump from '1.0.7' to '1.0.8' in the setup.py file. However, it is overly generic and lacks detail about the impact or context—such as why the version was updated or which release this corresponds to. A more detailed message (e.g., 'Bump version to 1.0.8 for release') would be better. Thus, it is functional but not optimal.","The commit message accurately reflects the change in the code, specifically the version bump from '1.0.7' to '1.0.8'. It uses the appropriate 'chore(version)' label to indicate a version update, which is a standard convention in commit messages (e.g., in conventional commits). The message is concise, clear, and directly relevant to the diff, making it excellent for readability and maintainability."
21292930e041e1f5edfddf32ff84b73e3852c4fc,Version change,geocoder/__init__.py,"@@ -27,7 +27,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.0.8'
+__version__ = '1.0.9'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue (rectification failed) that was likely previously unreported or masked, suggesting a fix for a functional problem rather than a superficial change.",2.0,1.0,1.0,"The commit message 'Version change' is overly generic and provides no context about what was changed or why. While it correctly indicates a version update, it lacks detail such as the version number, the significance of the change, or any impact on functionality. A better message would specify the version bump (e.g., 'Bump version to 1.0.9 for consistent JSON responses') and link it to the actual change in the code. Therefore, it receives a score of 2 for minimal informativeness.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.0.8' to '1.0.9', not any addition of docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and irrelevant. A correct message would have been something like 'bump version to 1.0.9'.","The commit message 'fix: rectification failed' is highly unclear and does not accurately reflect the actual change in the code diff. The diff simply increments the version number from '1.0.8' to '1.0.9', which is a routine version update, not a fix for a rectification failure. The message lacks context, specificity, and technical clarity, making it unhelpful for understanding the purpose of the commit. A proper message should describe what was changed and why, such as 'chore: update version to 1.0.9' or 'release: bump version to 1.0.9 for next release'."
21292930e041e1f5edfddf32ff84b73e3852c4fc,Version change,setup.py,"@@ -13,7 +13,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
-version = '1.0.8'
+version = '1.0.9'
 requires = ['requests>=2.3.0', 'ratelim>=0.1.4']
 
 with open('README.rst') as f:
",add version to setup.py,chore(version): bump version from 1.0.8 to 1.0.9,Semantic,"The new message provides clearer context by specifying the type of change (chore/version) and the exact version bump, improving semantic clarity and intent compared to the vague 'Version change'.",2.0,2.0,5.0,"The commit message 'Version change' is extremely vague and provides no context about what was changed, why it was changed, or what version was updated to. While it correctly indicates a version update, it lacks essential details such as the old and new version numbers, the reason for the bump (e.g., bug fix, feature release), or any impact on the project. A more informative message like 'Bump version to 1.0.9 for release' would be significantly better.","The commit message 'add version to setup.py' is too vague and does not accurately reflect the change. The diff shows an update from version '1.0.8' to '1.0.9', which is a version bump, not an addition. A more precise message like 'Bump version to 1.0.9 in setup.py' would better describe the change. Therefore, the message is minimally informative and lacks specificity, resulting in a score of 2.","The commit message accurately reflects the change in the code, specifically the version bump from '1.0.8' to '1.0.9'. It includes the appropriate prefix 'chore(version)' to indicate it's a maintenance change related to versioning, which is standard in commit message conventions (e.g., Conventional Commits). The message is concise, clear, and directly tied to the diff, making it excellent for readability and traceability."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/__init__.py,"@@ -40,4 +40,4 @@ from .api import maxmind, freegeoip, ottawa
 from .api import timezone, elevation, ip, canadapost, reverse
 
 # CLI
-from cli import cli
+from .cli import cli
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which aligns with a corrective improvement.",1.0,3.0,2.0,"The commit message is completely irrelevant to the actual changes in the diff. The diff only shows a simple import path update from `from cli import cli` to `from .cli import cli`, which is a minor code formatting adjustment. The commit message talks about 'Python 3 support', '2to3', 'tabs indentation', and 'removal of encode('utf-8')', none of which are present or implied in the diff. There is no mention of Python 3 compatibility, 2to3, tabs, or UTF-8 encoding changes. Therefore, the message does not accurately reflect the changes and is misleading or entirely off-topic.","The commit message 'add missing import' is accurate and addresses the change, but it lacks specificity. While the diff shows a simple fix—changing `from cli import cli` to `from .cli import cli`—the message does not explain why the import was missing or what the impact of the change is. A more detailed message (e.g., 'Fix import path to use relative module import for cli') would be clearer and more helpful. Thus, it is functional but not excellent.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple import path correction from 'cli' to '.cli', which suggests a fix for a relative import issue. However, the term 'rectification failed' is ambiguous and does not convey the actual change or its purpose. A better message would specify the issue (e.g., 'fix: fix relative import path for cli module') and the impact. Thus, the message is technically a fix but lacks clarity and context, resulting in a low-to-moderate score."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/arcgis.py,"@@ -2,7 +2,7 @@
 # coding: utf8
 
 import re
-from base import Base
+from .base import Base
 
 
 class Arcgis(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needed fixing, which aligns with a corrective change.",2.0,3.0,2.0,"The commit message is incomplete and lacks clarity. It mentions 'Python 3 support' but does not clearly link the changes to actual Python 3 compatibility. The listed points (2to3, tabs, utf-8 removal) are vague and not directly tied to the diff. The diff only shows a change from `from base import Base` to `from .base import Base`, which relates to relative imports—this is not explicitly mentioned in the message. Additionally, there is no mention of why the change was made or its impact. While the message includes some relevant elements, the lack of specificity and context makes it insufficient for a clear understanding of the commit's purpose.","The commit message 'add missing import' is accurate and reflects the change, but it is overly vague and lacks context. The diff shows a change from an absolute import `from base import Base` to a relative import `from .base import Base`, which implies a structural change in the module hierarchy. A better message would specify the nature of the import change (e.g., 'update import to use relative path for base class'). While the message correctly identifies the action, it fails to provide meaningful detail about why or what was changed, resulting in a moderate score.","The commit message 'fix: rectification failed' is vague and lacks specific details about what was fixed or why. While it indicates a fix, the term 'rectification failed' is ambiguous and does not clearly describe the issue or the change made. The actual diff shows a simple import update from `base import Base` to `from .base import Base`, which suggests a change in module import path (likely to fix a relative import issue). The commit message fails to connect the change to the problem, making it insufficient for understanding the context or impact. A better message would specify the actual fix, such as 'fix: correct relative import path for Base class'."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/base.py,"@@ -5,7 +5,7 @@ import requests
 import sys
 import json
 from collections import defaultdict
-from haversine import haversine
+from .haversine import haversine
 
 
 class Base(object):
@@ -106,39 +106,39 @@ class Base(object):
         self.json['ok'] = self.ok
 
     def debug(self):
-        print(json.dumps(self.parse, indent=4))
-        print(json.dumps(self.json, indent=4))
-        print ''
-        print 'OSM Quality'
-        print '---------------'
+        print((json.dumps(self.parse, indent=4)))
+        print((json.dumps(self.json, indent=4)))
+        print('')
+        print('OSM Quality')
+        print('---------------')
         count = 0
         for key in self.osm:
             if 'addr:' in key:
                 if self.json.get(key.replace('addr:','')):
-                    print '[x]', key
+                    print('[x]', key)
                     count += 1
                 else:
-                    print '[ ]', key
-        print '({0}/{1})'.format(count, len(self.osm) - 2)
-        print ''
-        print 'Attributes'
-        print '--------------'
+                    print('[ ]', key)
+        print('({0}/{1})'.format(count, len(self.osm) - 2))
+        print('')
+        print('Attributes')
+        print('--------------')
         count = 0
         for attribute in self.attributes:
             if self.json.get(attribute):
-                print '[x]', attribute
+                print('[x]', attribute)
                 count += 1
             else:
-                print '[ ]',attribute
-        print '({0}/{1})'.format(count, len(self.attributes))
-        print ''
-        print 'URL'
-        print '---'
-        print self.url
-        print ''
-        print 'Repr'
-        print '----'
-        print self
+                print('[ ]',attribute)
+        print('({0}/{1})'.format(count, len(self.attributes)))
+        print('')
+        print('URL')
+        print('---')
+        print(self.url)
+        print('')
+        print('Repr')
+        print('----')
+        print(self)
 
     def _exceptions(self):
         pass
@@ -148,16 +148,13 @@ class Base(object):
     def _build_tree(self, content, last=''):
         if content:
             if isinstance(content, dict):
-                for key, value in content.items():
+                for key, value in list(content.items()):
                     # Rebuild the tree if value is a dictionary
                     if isinstance(value, dict):
                         self._build_tree(value, last=key)
                     else:
-                        # Convert all endpoint strings as UTF-8 encoding
-                        if isinstance(value, (str, unicode)):
-                            value = value.encode('utf-8')
                         if key == 'town':
-                            print value
+                            print(value)
 
                             exit()
                         if last:
",add debug method to base class,fix(haversine): import from local module instead of global,Corrective,"The change addresses a specific import issue by switching from a global import to a local module import, which likely resolves a potential dependency or scope problem, indicating a functional correction rather than a cosmetic or trivial change.",2.0,2.0,3.0,"The commit message is technically incomplete and misleading. It claims 'Python 3 support' but the diff shows only minor changes: a module import update (from haversine to .haversine), some print formatting changes (removing extra spaces, fixing parentheses), and a removal of a UTF-8 encoding line. The mention of '2to3' is incorrect — no 2to3 changes are visible. The 'tabs indentation fixed' is false because the diff shows no tab-to-space changes. The removal of 'encode('utf-8')' is not a major Python 3 change and is only one line, and it's not clear if it's safe or necessary. The message lacks specificity and accuracy. While it's a minimal change, the claim of 'Python 3 support' is exaggerated and not fully justified by the diff. Thus, it earns a score of 2 — partially relevant but inaccurate and vague.","The commit message 'add debug method to base class' is overly vague and does not reflect the actual changes made. The diff shows more than just adding a debug method—it includes modifications to import statements, formatting of print statements (including fixing quotes and parentheses), and changes to string formatting and line endings. These are significant refactoring and consistency improvements that go beyond simply adding a debug method. A better commit message would describe these changes more accurately, such as 'refactor debug method and formatting for consistency, improve print output formatting, and fix import path for haversine'. As it stands, the message fails to convey the scope and nature of the changes, resulting in a low score.","The commit message correctly identifies the change as importing from a local module (`from .haversine import haversine`) instead of a global one, which is relevant to the diff. However, it is overly narrow and does not reflect the broader changes in the code — such as the consistent formatting updates (e.g., removing trailing spaces, fixing parentheses, changing single quotes to double quotes, and adjusting print statements with parentheses). These are minor formatting and style changes that are not captured in the commit message. A more complete message would acknowledge these changes as well. Therefore, while the message is accurate for the haversine import, it lacks context for the other modifications, resulting in a moderate score."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/bing.py,"@@ -1,8 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from keys import bing_key
+from .base import Base
+from .keys import bing_key
 import json
 import re
 
",add missing imports,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now requires fixing, which aligns with a corrective change.",2.0,2.0,2.0,"The commit message is vague and lacks specificity about the actual changes made. While it mentions Python 3 support and some formatting fixes, it does not clearly link to the diff shown. The diff only shows a change in import paths (using relative imports with '.'), which is not directly related to the listed items like '2to3' or 'weird encode('utf-8')'. The mention of 'weird encode('utf-8')' is absent from the diff, making the message misleading or inaccurate. Therefore, the message is partially relevant but contains false or unverified claims, resulting in a low score.","The commit message 'add missing imports' is vague and lacks specificity. While the diff does show changes to import statements (changing from absolute to relative imports), the message does not explain why the change was made or what problem it solved. A better message would clarify that relative imports were used to improve module organization or resolve import path issues. As such, the message is technically correct but insufficiently descriptive, warranting a score of 2.","The commit message 'fix: rectification failed' is vague and lacks clarity about what was actually fixed or why. While it indicates a fix, the term 'rectification failed' is ambiguous and does not describe the change or its impact. The diff shows a simple update of import statements (using relative imports with a dot), which suggests a refactoring or correction in module path resolution. A better message would specify the change, e.g., 'fix: update imports to use relative paths'. As such, the message is minimally informative and falls short of being clear or useful for understanding the change."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/bing_reverse.py,"@@ -1,10 +1,10 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from bing import Bing
-from keys import bing_key
-from location import Location
+from .base import Base
+from .bing import Bing
+from .keys import bing_key
+from .location import Location
 
 
 class BingReverse(Bing, Base):
",add missing import,feat(core): refactor imports to use relative paths,Cosmetic,"The change involves refactoring import paths to be relative, which improves code organization and readability without altering functionality or fixing bugs.",2.0,2.0,4.0,"The commit message is overly vague and does not accurately reflect the changes in the diff. While it mentions 'Python 3 support' and lists a few points, the actual diff shows only a change in import paths using relative imports (e.g., `from .base import Base`), which is not related to Python 3 compatibility, 2to3, or tab indentation. The mention of removing 'weird encode('utf-8')' is also not present in the diff. Therefore, the message misrepresents the actual changes and lacks specificity and accuracy, resulting in a low score.","The commit message 'add missing import' is overly vague and lacks detail about what was changed or why. While the diff shows that relative imports were introduced (e.g., from .base import Base), the message does not clarify the context or purpose of the change. A better message would explain that relative imports were added to resolve module path issues or to improve import structure. As such, the message is technically correct but insufficiently informative, warranting a score of 2.","The commit message accurately reflects the change: it describes a refactoring of imports to use relative paths, which is exactly what the diff shows. The use of `from .base import Base` and similar relative imports is clearly indicated. While the message is concise and relevant, it lacks additional context such as why the change was made (e.g., to improve modularity, reduce coupling, or align with project structure), which could have made it more comprehensive. However, it is clear, correct, and appropriate for the change, warranting a strong score of 4."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/canadapost.py,"@@ -3,9 +3,9 @@
 
 import re
 import requests
-from base import Base
-from keys import canadapost_key
-from location import Location
+from .base import Base
+from .keys import canadapost_key
+from .location import Location
 
 
 class Canadapost(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which falls under corrective changes.",2.0,2.0,1.0,"The commit message is too vague and lacks specific details about the changes it describes. While it mentions Python 3 support and some formatting fixes, it does not clearly link to the actual diff changes (e.g., the use of relative imports with '.'). The mention of '2to3' and 'tabs indentation' is generic and not substantiated by the diff. The removal of 'encode('utf-8')' is not mentioned in the diff, making the message inaccurate. Therefore, it falls short of being clear, accurate, or meaningful for a code review, earning a score of 2.","The commit message 'add missing import' is too vague and lacks specificity. While the diff does show changes to import statements (using relative imports with a dot), the message does not indicate what was added, why it was necessary, or the context. A better message would specify the change, such as 'update imports to use relative paths for modularity'. Therefore, it receives a score of 2 for being technically correct but insufficiently descriptive.","The commit message 'fix: rectification failed' is vague, unclear, and provides no meaningful context about what was actually fixed or why. It does not describe the change, the issue it resolves, or its impact. Given the diff shows only a simple update of import paths with relative imports (using .), the message fails to reflect the actual change. A proper commit message should clearly explain the purpose of the change, such as 'fix: update import paths to use relative imports for better modularity'. Therefore, the message is poor and receives a score of 1."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/cli.py,"@@ -3,7 +3,7 @@ import fileinput
 import itertools
 import json
 import sys
-from api import get
+from .api import get
 
 def peek(iterable):
     iterator = iter(iterable)
@@ -25,7 +25,7 @@ def cli():
 
     try:
         sys.argv = [sys.argv[1]] + args.input
-	input = fileinput.input()
+        input = fileinput.input()
         _, input = peek(input)
     except IOError:
         input = args.input
","add example for -h, -i, -i2, -i3, -i4",fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now requires fixing, which aligns with a corrective change.",2.0,1.0,1.0,"The commit message is overly vague and does not accurately reflect the changes in the diff. While it mentions 'Python 3 support', '2to3', 'tabs indentation', and 'remove encode(utf-8)', the diff shows only a minor import update (from api import get to from .api import get) and a small refactoring of input handling with peek. There is no evidence of 2to3 transformation, no tab indentation changes, and no mention of encoding removal. The claim about 'weird encode('utf-8')' is completely absent from the code. The message misrepresents the actual changes, making it misleading and unhelpful for understanding the commit's purpose.","The commit message is completely irrelevant to the changes in the code diff. The diff shows a simple import update from `api import get` to `from .api import get` and a minor adjustment in the `cli()` function's input handling, with no mention of adding examples or help documentation. The commit message claims to add examples for flags like -h, -i, -i2, -i3, -i4, which is not reflected in the code changes. Therefore, the message is misleading and does not accurately describe the work done.","The commit message 'fix: rectification failed' is highly vague and technically incorrect. 'Rectification' is not a recognized term in this context, and 'failed' does not describe what was actually fixed. The diff shows a simple import update from `api import get` to `from .api import get`, which is a minor code adjustment, likely related to module resolution or namespace clarity. A proper commit message should clearly describe the change, such as 'fix: update import to use relative module path'. The current message provides no actionable information and misrepresents the change, making it poor and unhelpful for understanding or reviewing the commit."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/elevation.py,"@@ -1,8 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from location import Location
+from .base import Base
+from .location import Location
 
 
 class Elevation(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which falls under corrective changes.",2.0,2.0,2.0,"The commit message is incomplete and lacks clarity. While it mentions Python 3 support and some changes (2to3, tabs, encoding removal), it does not clearly link these changes to the actual diff. The diff shows only a change in import paths (using relative imports with `.`), which is not directly related to 2to3 or tabs. Additionally, the message does not explain why these changes were made or what benefit they provide. The reference to 'weird encode('utf-8') removed in 3 lines' is not supported by the diff, making it inaccurate. Therefore, the message is somewhat relevant but misleading and lacks technical precision, warranting a score of 2.","The commit message 'add missing import' is overly vague and provides no context about what was added, why it was necessary, or the impact of the change. While the diff shows a correction of relative imports (from base import Base to from .base import Base), the message fails to explain the significance or rationale behind the change. A better message would specify the change in import syntax and its purpose, such as 'Update imports to use relative paths for better module organization.' Thus, the message is minimally informative and lacks clarity, warranting a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple change in import statements (using relative imports with '.'), which likely resolves an import path issue. However, the commit message fails to mention the actual issue (e.g., import errors due to incorrect module paths) or the impact of the fix. While it correctly uses the 'fix:' prefix, the lack of context makes it insufficient for understanding the change's purpose. A better message would explain that relative imports were updated to resolve module resolution issues."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/freegeoip.py,"@@ -3,7 +3,7 @@
 
 import requests
 import ratelim
-from base import Base
+from .base import Base
 
 
 class FreeGeoIP(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needed fixing, which aligns with a corrective improvement.",2.0,3.0,2.0,"The commit message is vague and lacks specificity about the actual changes made. While it mentions Python 3 support and minor fixes, it does not clearly link to the diff shown, which only shows a change in import path (from base import Base to .base import Base). The references to '2to3', 'tabs indentation', and 'weird encode' are not supported by the diff. The message fails to explain what was actually fixed or why it matters, making it difficult to understand the impact. Thus, it is only minimally informative and falls short of being clear or useful.","The commit message 'add missing import' is accurate in describing the change, as the diff shows a replacement of a relative import with a proper relative import using '.' syntax. However, the message is overly vague and lacks context—such as why the import was missing or what the impact of the change is. While it correctly identifies the action, it does not provide sufficient detail to understand the intent or significance of the change, which limits its usefulness for code review or future reference.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple import update from `base import Base` to `from .base import Base`, which suggests a change in module import path (likely to resolve a relative import issue). However, the commit message fails to convey the actual change or its purpose. While it includes the 'fix:' prefix, the term 'rectification failed' is unclear and not descriptive. A better message would specify the import fix and its intent, e.g., 'fix: update import to use relative path from .base'. Therefore, the message is minimally adequate but lacks clarity and context, warranting a score of 2."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/geolytica.py,"@@ -1,7 +1,7 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
+from .base import Base
 
 class Geolytica(Base):
     """"""
",add missing import,refactor(base): use relative import for Base class,Semantic,"The new message introduces a structural change in the code (using relative imports) that affects how the Base class is accessed, which alters the module's behavior and intent, indicating a semantic improvement rather than a cosmetic or trivial change.",2.0,3.0,5.0,"The commit message is incomplete and lacks specificity. While it mentions Python 3 support and lists a few changes, it does not clearly link the changes to the actual diff. The diff shows only a module import update (from base to .base), which relates to relative imports—this is not directly covered by the listed points like '2to3' or 'tabs indentation'. Additionally, the claim about removing 'weird encode('utf-8')' is not reflected in the diff. The message is therefore vague, inaccurate, and fails to provide meaningful context about what was actually changed or why. A score of 2 reflects a basic attempt with significant factual and contextual errors.","The commit message 'add missing import' is accurate and reflects the change, but it is overly vague and lacks context. The diff shows a relative import (`from .base import Base`) being used instead of an absolute import, which suggests a refactoring or module structure improvement. A more descriptive message, such as 'Update import to use relative path for base class', would be more informative. While the message correctly identifies the action, its lack of detail reduces its usefulness for understanding the change's purpose or impact.","The commit message clearly and concisely communicates the change: refactoring the import to use a relative import (`from .base import Base`). This is relevant to the diff, which shows the replacement of an absolute import with a relative one. The message is specific, accurate, and follows the conventional format for refactor commits (e.g., 'refactor(x): description'). It directly reflects the change made, making it excellent."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/geonames.py,"@@ -1,8 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from keys import geonames_username
+from .base import Base
+from .keys import geonames_username
 
 
 class Geonames(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now needs fixing, which aligns with a corrective change.",2.0,3.0,2.0,"The commit message mentions Python 3 support and lists three changes: 2to3, tabs indentation, and removal of a UTF-8 encode call. However, the diff shows only a simple import path update (using relative imports with `.`), which is not directly related to Python 3 compatibility or the listed changes. The message is vague and does not clearly connect the changes to Python 3 support. The indentation change is mentioned, but the diff shows no actual tab-to-space change. The removal of 'encode('utf-8')' is not visible in the diff. Therefore, the commit message is misleading and lacks accuracy and clarity, resulting in a low score.","The commit message 'add missing import' is accurate in describing the change, as it correctly identifies that the imports were updated from absolute to relative (using `.`). However, it lacks context—such as why the change was necessary or what the impact is. While the message is technically correct and concise, it does not provide enough detail to be considered excellent. Therefore, it earns a moderate score of 3.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple change in import paths (using relative imports with `.`), which likely relates to refactoring or improving module structure. However, the commit message fails to convey the actual change or its purpose. While it uses the correct 'fix:' prefix, the content is too generic and lacks context, making it difficult to understand the impact. A better message would explain the import update and its reason (e.g., 'fix: update imports to use relative paths for better module organization'). Thus, it receives a score of 2 (barely acceptable)."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/google.py,"@@ -3,7 +3,7 @@
 
 import ratelim
 import requests
-from base import Base
+from .base import Base
 
 
 class Google(Base):
@@ -88,8 +88,8 @@ class Google(Base):
             # Parse address components with short & long names
             for item in self.parse['address_components']:
                 for category in item['types']:
-                    self.parse[category]['long_name'] = item['long_name'].encode('utf-8')
-                    self.parse[category]['short_name'] = item['short_name'].encode('utf-8')
+                    self.parse[category]['long_name'] = item['long_name']
+                    self.parse[category]['short_name'] = item['short_name']
 
     @property
     def lat(self):
",add missing comments,fix(base): remove utf-8 encoding from address components,Cosmetic,"The change removes unnecessary UTF-8 encoding in a specific component, which is a minor, non-functional improvement focused on code cleanliness rather than behavior or correctness.",3.0,1.0,3.0,"The commit message acknowledges Python 3 support and lists three changes: 2to3, indentation fix, and removal of unnecessary encode('utf-8'). While the changes are relevant, the message is vague about what '2to3' means in this context and does not clearly explain why the encode() calls were removed (e.g., Python 3 strings are already Unicode). The justification is minimal and lacks technical detail, making it somewhat unclear to a reviewer. It's not poor, but also not excellent due to lack of specificity.","The commit message 'add missing comments' is highly misleading and inaccurate given the actual changes in the diff. The diff shows a removal of UTF-8 encoding on string values and a change in import path from 'base' to '.base', which are substantive code modifications, not just the addition of comments. There are no comments added in the code, and the changes involve logic and structure adjustments. Therefore, the commit message does not reflect the actual changes and is therefore poor and misleading.","The commit message correctly identifies the change as removing UTF-8 encoding from address components, which aligns with the diff. However, it lacks context about why the encoding was removed (e.g., encoding is unnecessary in Python 3, or string handling has changed). While the action is accurate, the justification is minimal and does not explain the rationale or impact, which limits its completeness. Thus, it is functional but not fully informative."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/google_reverse.py,"@@ -1,9 +1,9 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from google import Google
-from location import Location
+from .base import Base
+from .google import Google
+from .location import Location
 
 
 class GoogleReverse(Google, Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now requires correction, which aligns with a corrective improvement.",2.0,3.0,2.0,"The commit message is incomplete and lacks clarity about the actual changes made. While it mentions Python 3 support and fixes like tabs and encoding, it does not clearly link these points to the actual diff. The diff shows only a change in import syntax (using relative imports with `.`), which is likely related to organizing imports in a package structure, not directly to 2to3 or UTF-8 encoding removal. The message also falsely claims 'weird encode('utf-8') removed in 3 lines' — this is not visible in the diff. Therefore, the message is misleading and lacks specificity, resulting in a low score.","The commit message 'add missing import' is accurate and reflects the change, but it is overly vague and lacks context. The diff shows that relative imports (using `from .base import Base` etc.) are being used instead of absolute imports, which suggests a potential refactoring or organization improvement. A better message would specify the change (e.g., 'switch to relative imports for better module structure') and the reason (e.g., 'to improve module organization and reduce import path clutter'). As it stands, the message is correct but insufficiently descriptive, warranting a mid-range score.","The commit message 'fix: rectification failed' is vague and lacks context. It does not clearly explain what was fixed, why it was necessary, or what 'rectification failed' refers to. While it uses the correct 'fix:' prefix, the content is ambiguous and does not provide sufficient information to understand the change or its impact. The diff shows a simple update of import paths using relative imports (from .base, .google, .location), which suggests a refactoring or correction of module imports, but the commit message fails to link that change to the actual issue. A better message would describe the change, e.g., 'fix: update imports to use relative paths for modular structure'. Thus, the message is only minimally informative, warranting a score of 2."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/location.py,"@@ -101,9 +101,9 @@ class Location(object):
 if __name__ == '__main__':
 
     l = Location({'y':'45.123', 'x':0.0})
-    print l
-    print l.latlng
+    print(l)
+    print(l.latlng)
 
-    print l.ok
-    print l.lat
-    print l.lng
\ No newline at end of file
+    print(l.ok)
+    print(l.lat)
+    print(l.lng)
\ No newline at end of file
",update location.py,fix(location): use parentheses for method calls and attribute access,Cosmetic,"The change involves formatting preferences (using parentheses for method calls and attribute access), which improves code style without altering behavior or semantics.",2.0,2.0,4.0,"The commit message is incomplete and lacks detail about the actual changes made. While it mentions Python 3 support and a few points like 2to3, tabs, and removing encode('utf-8'), the diff shows only a simple change in parentheses usage (e.g., `print l` → `print(l)`) and consistent formatting. The message fails to explicitly link these changes to the actual diff, and the 'weird encode('utf-8')' removal is not visible in the diff. Additionally, the message is vague and does not clearly explain the impact or context of the changes. It is better than poor but falls short of being clear or useful for a reviewer.","The commit message 'update location.py' is overly vague and provides no information about what was changed or why. While the diff shows a simple formatting update (adding parentheses to calls and fixing line endings), the message fails to convey the actual nature of the change. A better message would specify the change, such as 'Fix parentheses usage in Location class print statements for consistency with Python 3 syntax'. As it stands, the message offers minimal value and lacks context, resulting in a score of 2.","The commit message accurately reflects the change in the code, which involves using parentheses for method calls and attribute access (e.g., `print(l)` instead of `print l`). This is a clear and relevant fix. However, the message is somewhat generic and does not specify the context (e.g., why parentheses were needed or which specific attributes/methods were affected). While it correctly identifies the nature of the change, a more detailed explanation (e.g., 'fixes Python syntax for print and attribute access in Location class') would make it excellent. Thus, it is solid but not fully detailed, earning a 4 rather than a 5."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/mapquest.py,"@@ -3,8 +3,8 @@
 
 import re
 import requests
-from base import Base
-from keys import mapquest_key
+from .base import Base
+from .keys import mapquest_key
 
 
 class Mapquest(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now needs to be addressed, implying a corrective action is required.",2.0,2.0,1.0,"The commit message is overly vague and lacks specificity. While it mentions Python 3 support and some formatting changes, it does not clearly link the changes to the actual diff. The diff shows only a simple import update (using relative imports with `.`), which is a minor refactoring, not a significant Python 3 migration. The message mentions '2to3', 'tabs indentation', and 'remove encode('utf-8')', but the diff does not confirm any of these changes. The claim about removing 'encode('utf-8')' is not supported by the diff, which shows no such change. Therefore, the message is inaccurate and lacks detail, resulting in a low score.","The commit message 'add missing import' is too vague and provides no context about what was added or why. While the diff shows that relative imports were changed from `from base import Base` and `from keys import mapquest_key` to `from .base import Base` and `from .keys import mapquest_key`, the commit message fails to explain the rationale (e.g., fixing import paths, resolving module structure issues, or improving code organization). A better message would specify the change in import style and its purpose, such as 'Update imports to use relative imports for better module structure'. As it stands, the message lacks detail and context, earning a score of 2.","The commit message 'fix: rectification failed' is vague, ambiguous, and provides no meaningful context about what was actually fixed or why. It does not describe the change, the issue resolved, or its impact. The diff shows a simple import update (changing from absolute to relative imports), which suggests a refactoring or code organization improvement, but the commit message fails to reflect that. A proper commit message should clearly explain the purpose of the change. Therefore, this is a poor commit message."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/mapquest_reverse.py,"@@ -1,10 +1,10 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from keys import mapquest_key
-from mapquest import Mapquest
-from location import Location
+from .base import Base
+from .keys import mapquest_key
+from .mapquest import Mapquest
+from .location import Location
 
 
 class MapquestReverse(Mapquest, Base):
",add missing import,refactor(core): update import paths to use relative imports,Cosmetic,"The change involves updating import paths to use relative imports, which is a code style or organization improvement rather than a functional change, bug fix, or semantic alteration.",2.0,2.0,5.0,"The commit message is incomplete and lacks specificity. While it mentions Python 3 support and some changes (2to3, tabs, encoding), it does not clearly link these changes to the actual diff. The diff shows only a relative import update (e.g., from .base import Base), which is unrelated to 2to3 or encoding changes. The claim of removing 'weird encode('utf-8')' is not supported by the diff. Therefore, the message is vague, misleading, and fails to accurately reflect the actual changes, resulting in a low score.","The commit message 'add missing import' is overly vague and provides no context about what was changed or why. While the diff shows that relative imports were introduced (e.g., from .base, .keys, etc.), the message fails to explain the significance of the change—such as why relative imports were needed, whether this improves modularity, resolves a dependency issue, or aligns with a codebase restructuring. A better message would specify the change (e.g., 'Switch to relative imports to improve module organization and reduce import path clutter'). Thus, the message is technically correct but lacks clarity and context, warranting a score of 2.","The commit message accurately reflects the change in the code: it updates import paths to use relative imports (e.g., `from .base import Base` instead of `from base import Base`). The message is concise, relevant, and clearly describes the nature and scope of the refactoring. It also includes the appropriate context ('refactor(core)') to indicate the type of change. This is an excellent commit message that precisely matches the diff and provides meaningful context for reviewers or future developers."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/maxmind.py,"@@ -1,7 +1,7 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
+from .base import Base
 
 
 class Maxmind(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now needs to be addressed, implying a corrective action is required.",2.0,3.0,2.0,"The commit message is somewhat relevant to the changes, mentioning Python 3 support and minor fixes like tabs and encoding. However, it lacks specificity and context—there is no clear indication of what exactly was changed or why. The reference to '2to3' and 'weird encode('utf-8')' is vague and not directly tied to the actual diff, which only shows a module import change (from base to .base). The import change itself is a small refactor, not directly related to Python 3 support or encoding. Therefore, the message is incomplete and misleading in scope, earning a low score.","The commit message 'add missing import' is accurate and reflects the change, but it is overly vague and lacks context. The diff shows a relative import (`from .base import Base`) being used instead of an absolute import, which suggests a potential refactoring or improvement in module structure. A more descriptive message, such as 'Update import to use relative path for base class', would be clearer and more informative. As it is, the message is correct but insufficiently detailed, warranting a moderate score.","The commit message 'fix: rectification failed' is vague and lacks clarity about what was actually fixed or why. While it indicates a fix, the term 'rectification failed' is ambiguous and does not describe the change or its impact. The diff shows a simple import update from `base import Base` to `from .base import Base`, which suggests a fix for relative imports or module resolution. A better message would explicitly state this change, such as 'fix: use relative import for Base class'. Therefore, the message is minimally informative and only scores a 2."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/nokia.py,"@@ -1,8 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from keys import app_id, app_code
+from .base import Base
+from .keys import app_id, app_code
 
 
 class Nokia(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which aligns with a corrective change.",2.0,2.0,1.0,"The commit message mentions Python 3 support and lists three changes, but the diff shows only a simple import update (using relative imports with ""from .base"" and ""from .keys""). The message claims '2to3' and 'tabs indentation fixed' and 'weird encode('utf-8') removed', but these are not visible in the diff. The changes are minimal and the commit message lacks concrete details about what was actually changed or why. As a result, the message is vague and does not accurately reflect the actual diff, making it only partially informative.","The commit message 'add missing import' is vague and lacks specificity. While the diff does show a change in import statements (using relative imports with '.'), the message does not explain why the imports were changed or what problem they solved. A better message would indicate the reason for the change, such as 'Update imports to use relative paths for better module organization'. As it stands, the message is too minimal to be meaningful for context or review, warranting a low score.","The commit message 'fix: rectification failed' is extremely vague and uninformative. It does not describe what was actually fixed, why the fix was necessary, or what problem it resolves. The diff shows a simple change in import paths (using relative imports with `.`), which likely relates to refactoring or organizing imports, but the commit message provides no context. A good commit message should clearly explain the change and its purpose. This message fails to meet basic standards for clarity and usefulness, hence the score of 1."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/opencage.py,"@@ -1,8 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from keys import opencage_key
+from .base import Base
+from .keys import opencage_key
 
 
 class OpenCage(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was not properly addressed, implying a corrective action is needed.",2.0,3.0,2.0,"The commit message mentions Python 3 support and lists three changes: 2to3, tabs indentation, and removal of a UTF-8 encode call. However, the diff shows only a change in import paths (using relative imports with `.`), which is unrelated to 2to3 or UTF-8 encoding. The message does not accurately reflect the actual changes in the code. The mention of 'weird encode('utf-8')' is also not present in the diff. Thus, the commit message is misleading and lacks alignment with the actual diff, resulting in a low score.","The commit message 'add missing import' is vague and lacks detail about what was actually changed or why. While the diff shows that relative imports were added (from .base and from .keys), the message does not explain the context or rationale—such as why relative imports were necessary or what functionality this change enables. A better message would specify the change (e.g., 'Switch to relative imports for base and keys modules') and its purpose. Thus, it is minimally informative but not entirely useless, earning a mid-range score.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple change in import statements (using relative imports with '.'), which likely relates to fixing a module import issue. However, 'rectification failed' is ambiguous and lacks context—what was rectified, and why was it necessary? A better message would specify the actual change, such as 'fix: update imports to use relative paths for base and keys modules'. As it stands, the message provides minimal value and fails to communicate the intent or impact of the change, warranting a low score."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/opencage_reverse.py,"@@ -1,10 +1,10 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from keys import opencage_key
-from opencage import OpenCage
-from location import Location
+from .base import Base
+from .keys import opencage_key
+from .opencage import OpenCage
+from .location import Location
 
 
 class OpenCageReverse(OpenCage, Base):
",add missing import,refactor(core): update import paths to use relative imports,Cosmetic,"The change involves updating import paths to use relative imports, which is a code style or organization improvement rather than a functional change, bug fix, or semantic alteration.",2.0,2.0,5.0,"The commit message is overly vague and does not accurately reflect the changes in the diff. While it mentions 'Python 3 support' and lists some actions, the actual diff shows only a change in import paths using relative imports (from .base import Base, etc.), which is not related to 2to3, tabs, or UTF-8 encoding. The message misrepresents the changes and lacks specificity about what was actually modified. A better message would explicitly state the change in import syntax and clarify that no actual Python 3 compatibility changes were made. Therefore, the message is poor in accuracy and clarity, warranting a score of 2.","The commit message 'add missing import' is vague and lacks specificity. While the diff does show changes to import statements (using relative imports with a dot), the message does not explain why the imports were changed, what functionality they support, or the context of the change. A better message would specify that relative imports were introduced for better module organization or to resolve import path issues. As such, the message is technically correct but insufficiently informative, warranting a score of 2.","The commit message accurately reflects the changes in the code diff, which shows a consistent refactoring of import statements to use relative imports (e.g., from .base import Base). The message is concise, clear, and properly categorized under 'refactor(core)' to indicate the type of change. It correctly identifies the scope and nature of the change, making it excellent for code review and traceability."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/osm.py,"@@ -1,7 +1,7 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
+from .base import Base
 
 
 class Osm(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now requires fixing, implying a corrective action.",2.0,3.0,2.0,"The commit message is somewhat relevant but lacks specificity and clarity. It mentions 'Python 3 support' and lists three points, but does not clearly link them to the actual changes in the diff. The diff only shows a change in import path from `base import Base` to `from .base import Base`, which relates to module resolution and possibly package structure, not directly to 2to3, tab indentation, or UTF-8 encoding. The claim about removing 'weird encode('utf-8')' is not supported by the diff. Therefore, the message is misleading and overly generalized, making it only minimally informative.","The commit message 'add missing import' is vague and lacks detail about what was changed or why. While it correctly identifies that an import was added, it does not specify the context (e.g., relative import vs. absolute), the reason for the change, or any impact on functionality. The diff shows a clear change from an absolute import to a relative import, which may imply a refactoring or module restructuring, but this is not communicated in the message. A better message would explain the shift to a relative import and its purpose. Thus, the message is partially accurate but insufficiently informative, warranting a mid-range score.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple change in import path from ""base import Base"" to ""from .base import Base"", which suggests a fix for a relative import issue, likely related to module structure or package organization. However, the commit message fails to convey the actual problem or the context of the fix. A better message would specify the issue (e.g., 'fix: fix relative import path for Base class') and the reason (e.g., 'to resolve import errors in package structure'). As such, it is minimally informative and only receives a score of 2."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/ottawa.py,"@@ -2,7 +2,7 @@
 # coding: utf8
 
 import re
-from base import Base
+from .base import Base
 
 
 class Ottawa(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needed fixing, which aligns with a corrective change.",2.0,3.0,1.0,"The commit message is partially relevant but lacks specificity and clarity. It mentions Python 3 support and lists three points, but does not clearly connect to the actual changes in the diff. The diff only shows a change from importing ""base"" to "".base"" (relative import), which relates to Python 3 module structure and import resolution, not directly to tabs, 2to3, or UTF-8 encoding. The claim about removing 'weird encode('utf-8')' is not supported by the diff. The message is too vague and misrepresents the actual changes, making it insufficient for a clear understanding of what was done.","The commit message 'add missing import' is accurate and reflects the change, as the import was indeed updated from 'base import Base' to 'from .base import Base'. However, the message is overly vague and lacks context—such as why the import was needed or what the change improves. A more detailed message (e.g., 'Fix import path to use relative import for Base class') would be better. Thus, it is functional but not excellent.","The commit message 'fix: rectification failed' is extremely vague and provides no meaningful context about what was fixed or why. It does not indicate the actual change (which is a module import update from `base import Base` to `from .base import Base`), nor does it explain the purpose or impact of the change. A good commit message should clearly describe the problem and the solution. This message fails to meet even basic standards for clarity and usefulness."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/timezone.py,"@@ -2,8 +2,8 @@
 # coding: utf8
 
 import time
-from base import Base
-from location import Location
+from .base import Base
+from .location import Location
 
 
 class Timezone(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was not properly resolved, which is a corrective action to address a defect.",2.0,2.0,2.0,"The commit message is incomplete and lacks clarity. While it mentions Python 3 support and some changes (2to3, tabs, encoding), it fails to specify what exactly was changed or why. The reference to 'weird encode('utf-8') removed in 3 lines' is vague and not directly tied to the diff, which only shows imports being updated to use relative imports (from .base import Base). The message does not reflect the actual changes in the diff, which are solely about import paths and indentation style. Therefore, it is too generic and lacks meaningful detail to be considered good.","The commit message 'add missing import' is too vague and provides no context about what was changed or why. While the diff shows that relative imports were used (from .base import Base, from .location import Location), the message fails to indicate the significance of the change—such as improving modularity, fixing a broken import, or aligning with a codebase standard. A better message would specify the nature of the change (e.g., 'Update imports to use relative paths for better module structure'). Thus, it earns a score of 2 for being technically correct but lacking clarity and context.","The commit message 'fix: rectification failed' is vague and lacks specificity. It does not clearly describe what was fixed, why it was necessary, or how it resolves the issue. While it uses the correct 'fix:' prefix, the term 'rectification failed' is ambiguous and does not provide context about the actual change or problem. The diff shows a simple update of import paths using relative imports (from .base import Base), which suggests a refactoring or adjustment for module structure, but this is not reflected in the commit message. A better message would explain the import change and its purpose (e.g., 'fix: update imports to use relative paths for better module structure'). Therefore, the message is minimally informative and receives a score of 2."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/tomtom.py,"@@ -1,8 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from keys import tomtom_key
+from .base import Base
+from .keys import tomtom_key
 
 class Tomtom(Base):
     """"""
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and needs fixing, which aligns with a corrective change.",2.0,3.0,2.0,"The commit message mentions Python 3 support and lists three changes, but the diff shows only a simple module import update (using relative imports with '.'). The changes described (2to3, tabs, utf-8 encoding removal) are not evident in the diff. The message lacks specific details about what was actually changed or why, and the claim about 'weird encode('utf-8')' is not supported by the diff. Therefore, the message is vague and does not accurately reflect the actual changes, resulting in a low score.","The commit message 'add missing import' is vague and lacks context. While it correctly identifies that imports were added, it does not explain why the imports were necessary, what changed in functionality, or how this improvement affects the codebase. The diff shows a simple change in import paths (using relative imports with .), which suggests a refactoring or improvement in module organization, but the message fails to convey that. A better message would specify the change (e.g., 'Update imports to use relative paths for better module structure'). Therefore, it is functional but insufficiently detailed, earning a moderate score.","The commit message 'fix: rectification failed' is vague and lacks context. It does not clearly explain what was fixed, why it was necessary, or what issue it resolves. While it is formatted correctly with 'fix:', the term 'rectification failed' is ambiguous and does not convey the actual change or problem addressed. The diff shows a simple module import update (using relative imports), which suggests a refactoring or improvement in import structure, but the commit message fails to reflect that. A better message would describe the change, e.g., 'fix: update imports to use relative paths for base and keys modules'. Therefore, the message is only minimally adequate, earning a score of 2."
9946a4374d83daa77ecaf2d164a04055439bd9c7,"Python 3 support:
1. 2to3.
2. Tabs indentation fixed.
3. Weird encode('utf-8') removed in 3 lines.",geocoder/yahoo.py,"@@ -1,7 +1,7 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
+from .base import Base
 
 
 class Yahoo(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now requires fixing, which aligns with a corrective change.",2.0,3.0,2.0,"The commit message is partially relevant but lacks specificity and clarity. While it mentions Python 3 support and some changes (2to3, tabs, UTF-8 encoding), it does not clearly link these changes to the actual diff. The diff only shows a change in import path from `base import Base` to `from .base import Base`, which relates to module resolution and possibly package structure, not directly to 2to3 or UTF-8 encoding. The claim about removing 'weird encode('utf-8')' is not supported by the diff. Therefore, the message is vague and misaligned with the actual changes, resulting in a low score.","The commit message 'add missing import' is accurate and addresses the change, but it lacks specificity. While the diff clearly shows a change from an absolute import (`from base import Base`) to a relative import (`from .base import Base`), the commit message does not explain why the import was changed or what the impact of this change is. A more detailed message, such as 'Update import to use relative path for base class', would be better. Therefore, it is functional but not optimal, earning a moderate score.","The commit message 'fix: rectification failed' is vague and lacks clarity about what was actually fixed or why. While it indicates a fix, the term 'rectification failed' is ambiguous and does not describe the change or its impact. The diff shows a simple import update from 'base import Base' to '.base import Base', which suggests a fix for a relative import issue—likely related to module structure or package organization. A better message would explicitly state the change, such as 'fix: update import to use relative path for Base class'. Therefore, the message is minimally informative and only receives a score of 2."
8d88508f9b40286d1c93ba6312bc9fec0dae4154,Tests: assert city name (to detect bytes/str errors in Python 3),test_geocoder.py,"@@ -7,6 +7,7 @@ import unittest
 
 address = '453 Booth Street, Ottawa'
 location = 'Ottawa, Ontario'
+city = 'Ottawa'
 ip = '74.125.226.99'
 repeat = 3
 ottawa = (45.4215296, -75.6971930)
@@ -48,6 +49,7 @@ def test_maxmind():
 def test_google():
     g = geocoder.google(location)
     assert g.ok
+    assert g.city == city
 
 def test_google_reverse():
     g = geocoder.google(ottawa, method='reverse')
@@ -64,6 +66,7 @@ def test_google_elevation():
 def test_bing():
     g = geocoder.bing(location)
     assert g.ok
+    assert g.city == city
 
 def test_bing_reverse():
     g = geocoder.bing(ottawa, method='reverse')
@@ -72,6 +75,7 @@ def test_bing_reverse():
 def test_opencage():
     g = geocoder.opencage(location)
     assert g.ok
+    assert g.city == city
     
 def test_opencage_reverse():
     g = geocoder.opencage(ottawa, method='reverse')
@@ -80,6 +84,7 @@ def test_opencage_reverse():
 def test_yahoo():
     g = geocoder.yahoo(location)
     assert g.ok
+    assert g.city == city
 
 def test_arcgis():
     g = geocoder.arcgis(location)
@@ -96,20 +101,23 @@ def test_canadapost():
 def test_nokia():
     g = geocoder.nokia(location)
     assert g.ok
+    assert g.city == city
 
 def test_osm():
     g = geocoder.osm(location)
     assert g.ok
+    assert g.city == city
 
 def test_tomtom():
     g = geocoder.tomtom(location)
     assert g.ok
+    assert g.city == city
 
 def test_mapquest():
     g = geocoder.mapquest(location)
     assert g.ok
+    assert g.city == city
 
 def test_geonames():
     g = geocoder.geonames(location)
     assert g.ok
-    
\ No newline at end of file
",add unit tests for reverse geocoder,test: add city assertion for all geocoding services,Semantic,"The new message expands the scope from a specific assertion about city names to include all geocoding services, providing clearer and more comprehensive context about the test's intent.",3.0,3.0,4.0,"The commit message is relevant and identifies the purpose of the changes — ensuring city name accuracy across multiple geocoding services to catch potential bytes/str errors in Python 3. However, it lacks specificity about which services are affected or how the test improves robustness. While the message is clear and on-topic, it could be more detailed (e.g., mentioning the number of services tested or the exact issue being detected). As a result, it is functional but not exceptional, earning a moderate score of 3.","The commit message 'add unit tests for reverse geocoder' is vague and lacks specificity. While the diff shows that multiple geocoding services (Google, Bing, OpenCage, Yahoo, Nokia, OSM, TomTom, MapQuest, GeoNames) now have added assertions to verify the city field in reverse geocoding results, the message does not reflect the breadth or detail of the change. A more precise message like 'add unit tests for city field in reverse geocoding across multiple providers' would be better. Therefore, it's moderately accurate but insufficiently descriptive, warranting a score of 3.","The commit message 'test: add city assertion for all geocoding services' accurately summarizes the change and is concise and relevant. The diff shows that a city assertion (`assert g.city == city`) has been added to every geocoding service test (Google, Bing, OpenCage, Yahoo, Nokia, OSM, TomTom, MapQuest, GeoNames), which aligns with the message. The message is clear, specific, and directly reflects the impact of the change. However, it lacks detail about the test location or the expected city (e.g., Ottawa), which could be useful for context, but this is not required for a good commit message. Overall, it is excellent in scope and clarity, just slightly missing a bit of context for full excellence."
ef68f8c0e05fadcd07b0219da29b460ec4639bc6,"Manually fixed print(x, y)",geocoder/base.py,"@@ -115,10 +115,10 @@ class Base(object):
         for key in self.osm:
             if 'addr:' in key:
                 if self.json.get(key.replace('addr:','')):
-                    print('[x]', key)
+                    print('[x] {0}'.format(key))
                     count += 1
                 else:
-                    print('[ ]', key)
+                    print('[ ] {0}'.format(key))
         print('({0}/{1})'.format(count, len(self.osm) - 2))
         print('')
         print('Attributes')
@@ -126,10 +126,10 @@ class Base(object):
         count = 0
         for attribute in self.attributes:
             if self.json.get(attribute):
-                print('[x]', attribute)
+                print('[x] {0}'.format(attribute))
                 count += 1
             else:
-                print('[ ]',attribute)
+                print('[ ] {0}'.format(attribute))
         print('({0}/{1})'.format(count, len(self.attributes)))
         print('')
         print('URL')
",add some comments to the base class,refactor(base): format print statements to include variable interpolation,Cosmetic,"The change improves code readability and consistency by formatting print statements with variable interpolation, without altering functionality or fixing bugs.",2.0,1.0,3.0,"The commit message 'Manually fixed print(x, y)' is overly vague and does not accurately describe the actual changes. The diff shows a consistent formatting update where string formatting using .format() was applied to print statements to insert variable values (like keys and attributes) into the output. The commit message fails to mention the specific change (formatting print statements with string interpolation), the context (debugging or logging attributes in OSM data), or the scope (two sections in the class). While it indicates a fix, it lacks detail and clarity, making it difficult to understand the intent or impact without reviewing the diff.","The commit message 'add some comments to the base class' is highly inadequate given the actual changes in the code diff. The diff shows only minor formatting changes—replacing bare text like '[x]' and '[ ]' with formatted strings using .format(). These are not comments but syntactic modifications for improved output readability. The message fails to describe what was actually changed, why it was changed, or its impact. A better message would reflect the specific improvement, such as 'improve console output formatting for attribute and address keys in Base class'. Therefore, the commit message is misleading and fails to provide meaningful context, earning a poor score.","The commit message accurately reflects the change — formatting print statements to include variable interpolation — and is concise and relevant. However, it lacks context about why the change was made (e.g., consistency, readability, or avoiding hardcoded strings), which would have made it more informative. While the diff shows a clear, minor refactoring, the message does not highlight any benefit or impact beyond the surface-level change, resulting in a moderate score rather than excellent."
3d0b1e9f4c70ce2b3e305e0f8781a73d9137b4ad,Manually fixed print((...)) -> print(...),geocoder/base.py,"@@ -106,8 +106,8 @@ class Base(object):
         self.json['ok'] = self.ok
 
     def debug(self):
-        print((json.dumps(self.parse, indent=4)))
-        print((json.dumps(self.json, indent=4)))
+        print(json.dumps(self.parse, indent=4))
+        print(json.dumps(self.json, indent=4))
         print('')
         print('OSM Quality')
         print('---------------')
",add debug method to base class,fix(base): remove unnecessary parentheses in debug output,Cosmetic,"The change removes unnecessary parentheses from a debug print statement, improving code readability without altering behavior or semantics.",2.0,2.0,2.0,"The commit message is technically correct in stating that a manual fix was applied to replace print((...)) with print(...), but it lacks context and detail. The change is trivial and obvious from the diff — it only removes unnecessary parentheses around arguments to print(). A better commit message would explain why the parentheses were removed (e.g., 'Removed redundant parentheses around print() arguments for Python 3 compatibility or style consistency'). As it stands, the message is accurate but overly simplistic and fails to provide meaningful context, resulting in a low score.","The commit message 'add debug method to base class' is overly vague and does not convey the actual change or its significance. The diff shows that the debug method already existed and only had a minor formatting change (removal of parentheses around json.dumps calls), which was likely a typo or style fix. The message fails to indicate that the method was already present or that the change was a simple syntax cleanup. A better message would note the removal of redundant parentheses or clarify it was a formatting improvement. Therefore, it receives a score of 2 for being insufficiently descriptive.","The commit message incorrectly states that parentheses were removed, when in fact they were not removed — they were simply omitted (the original had parentheses around the json.dumps calls, which were redundant due to Python's expression evaluation). The change was not a fix for unnecessary parentheses, but rather a removal of redundant parentheses that were not actually needed. The message misrepresents the actual change, leading to a misunderstanding of the commit's intent. Therefore, it is inaccurate and should be scored as 2 (Fair) rather than higher."
835223e270bce6aa2061b48b7e1b27502131a3ee,print() fix,geocoder/google.py,"@@ -197,4 +197,4 @@ if __name__ == '__main__':
     #import json
     #print json.dumps(g.osm, indent=4)
     #g.debug()
-    print g.wkt
+    print(g.wkt)
",update example.py,syntax(s): fix wkt print statement,Corrective,"The new message specifies a fix for syntax in a WKT print statement, indicating a correction of a technical error in the code, which falls under corrective improvements.",2.0,2.0,3.0,"The commit message 'print() fix' is too vague and lacks context. While it correctly identifies a change involving print(), it does not explain what was fixed, why it was necessary, or the impact of the change. The diff shows a change from `print g.wkt` to `print(g.wkt)`, which is a Python 3 compatibility fix, but this detail is missing from the message. A better message would specify the Python version compatibility issue and the reason for the parentheses. Thus, the message is minimally informative and only scores a 2.","The commit message 'update example.py' is overly vague and provides no context about what was changed or why. While the diff shows a simple fix to remove a missing parenthesis in a print statement, the commit message fails to communicate the significance or purpose of the change. A better message would specify the issue (e.g., 'Fix missing parentheses in print statement in example.py') or the impact (e.g., 'Ensure proper syntax in WKT output example'). Therefore, it receives a score of 2 for lacking detail and clarity.","The commit message correctly identifies the issue as a syntax fix for a print statement, which is accurate given the change from `print g.wkt` to `print(g.wkt)`. However, the message is overly brief and lacks context—such as why the change was necessary (e.g., Python 3 compatibility) or what the WKT format represents. While it is technically correct and relevant, it does not provide sufficient detail to be considered excellent. Thus, a score of 3 reflects a basic, accurate but minimal message."
6f2ea5c288e289b1b8fdfca74c0511a728579295,Make changes to Nokia > Here,geocoder/__init__.py,"@@ -34,7 +34,7 @@ __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 # CORE
 from .api import get, yahoo, bing, geonames, google, mapquest
 from .api import nokia, osm, tomtom, geolytica, arcgis, opencage
-from .api import maxmind, freegeoip, ottawa
+from .api import maxmind, freegeoip, ottawa, here
 
 # EXTRAS
 from .api import timezone, elevation, ip, canadapost, reverse
",add missing imports,add(services): add Here geolocation service,Semantic,"The new message provides a more precise and meaningful description of the change by specifying the type of change (addition of a service) and the component (geolocation service), enhancing clarity and context compared to the vague 'Make changes to Nokia > Here'.",2.0,3.0,4.0,"The commit message 'Make changes to Nokia > Here' is vague and lacks context. It does not clearly explain what was changed, why it was changed, or the impact of the change. The diff shows a simple replacement of 'nokia' with 'here' in an import statement, which is a minor update. A better message would specify the replacement and its purpose, such as 'Replace Nokia with Here API support in the import list'. The current message fails to communicate the significance or rationale, resulting in a low score.","The commit message 'add missing imports' is accurate and reflects the change, as the diff shows the addition of 'here' to the imports list. However, it is vague and lacks context—such as why the import was needed or what 'here' refers to (e.g., HERE Geolocation API). A more detailed message (e.g., 'Add HERE geolocation API import to support new geolocation provider') would be better. Given that the message correctly identifies the action but lacks specificity, it receives a moderate score.","The commit message is clear and relevant, indicating the addition of the Here geolocation service. It follows the expected format for a service addition in a services-related context. However, it could be slightly more precise by specifying that 'here' was added to the list of geolocation providers, as the change only modifies an import statement. Still, the message is accurate, concise, and sufficient for understanding the change."
6f2ea5c288e289b1b8fdfca74c0511a728579295,Make changes to Nokia > Here,geocoder/api.py,"@@ -4,7 +4,7 @@
 from .keys import *
 from .osm import Osm
 from .bing import Bing
-from .nokia import Nokia
+from .here import Here
 from .yahoo import Yahoo
 from .tomtom import Tomtom
 from .google import Google
@@ -37,7 +37,8 @@ def get(location, **kwargs):
     method = kwargs.get('method','').lower().strip()
     options = {
         'osm': {'geocode': Osm},
-        'nokia': {'geocode': Nokia},
+        'here': {'geocode': Here},
+        'nokia': {'geocode': Here},
         'yahoo': {'geocode': Yahoo},
         'tomtom': {'geocode': Tomtom},
         'arcgis': {'geocode': Arcgis},
@@ -155,14 +156,23 @@ def arcgis(location, **kwargs):
     """"""
     return get(location, provider='arcgis', **kwargs)
 
+def here(location, **kwargs):
+    """"""HERE Provider
+    
+    :param location: Your search location you want geocoded.
+    :param app_code: (optional) use your own Application Code from HERE.
+    :param app_id: (optional) use your own Application ID from HERE.
+    """"""
+    return get(location, provider='here', **kwargs)
+
 def nokia(location, **kwargs):
-    """"""Nokia Provider
+    """"""HERE Provider
     
     :param location: Your search location you want geocoded.
-    :param app_code: (optional) use your own Application Code from Nokia.
-    :param app_id: (optional) use your own Application ID from Nokia.
+    :param app_code: (optional) use your own Application Code from HERE.
+    :param app_id: (optional) use your own Application ID from HERE.
     """"""
-    return get(location, provider='nokia', **kwargs)
+    return get(location, provider='here', **kwargs)
 
 def tomtom(location, **kwargs):
     """"""TomTom Provider
",add missing docstrings,feat(provider): add HERE geocoding support,Semantic,"The new message provides a clearer, more descriptive semantic meaning by specifying the feature (geocoding support) and the affected component (provider), whereas the old message is vague and lacks context.",2.0,2.0,3.0,"The commit message ""Make changes to Nokia > Here"" is overly vague and misleading. It suggests a direct replacement of Nokia functionality with Here, but the actual changes involve removing the Nokia module and replacing both the Nokia provider and its documentation with Here, while also updating the app_code and app_id references to point to HERE. The message fails to convey the scope, direction, or impact of the change. A better message would clarify that the Nokia provider has been replaced with Here, including the reason (e.g., 'Replace Nokia with Here due to deprecation and better integration'). As such, it receives a score of 2 for being technically incorrect and insufficiently descriptive.","The commit message 'add missing docstrings' is vague and does not accurately reflect the actual changes. While docstrings were added for the HERE provider and updated in the nokia function, the message fails to convey the specific nature of the change — namely, that Nokia's functionality was redirected to HERE and the docstrings were updated to reflect HERE's API. The term 'missing' is misleading because the docstrings weren't truly missing; they were either replaced or restructured. A more accurate message would specify the replacement of Nokia with HERE and the corresponding docstring updates. Therefore, the message is technically correct in intent but lacks precision and context, warranting a score of 2.","The commit message 'feat(provider): add HERE geocoding support' is concise and correctly identifies the type of change (feature) and the scope (provider). However, it lacks detail about the specific impact — for example, it does not mention that the Nokia provider was deprecated or that the HERE provider now handles both the old Nokia parameters and the new HERE-specific ones. The diff shows a full replacement of Nokia with Here, which implies a significant change in provider behavior and API integration. A better message would clarify that the Nokia provider was replaced with HERE support, and that the functionality was migrated with updated parameter documentation. As such, while the message is accurate in intent, it is incomplete in scope and context, warranting a score of 3 rather than 4 or 5."
6f2ea5c288e289b1b8fdfca74c0511a728579295,Make changes to Nokia > Here,geocoder/base.py,"@@ -153,10 +153,6 @@ class Base(object):
                     if isinstance(value, dict):
                         self._build_tree(value, last=key)
                     else:
-                        if key == 'town':
-                            print(value)
-
-                            exit()
                         if last:
                             self.parse[last][key] = value
                         else:
",add missing exit statement,fix(base): remove debug print and exit for town key,Corrective,"The change removes debug prints and exits on a town key, which addresses a potential bug or unintended behavior, improving the correctness and stability of the code.",1.0,1.0,3.0,"The commit message 'Make changes to Nokia > Here' is highly irrelevant and uninformative. It does not describe what was actually changed, why it was changed, or the impact of the changes. The diff shows a removal of a debug print statement and an exit condition related to the 'town' key, which suggests a debugging or conditional logic adjustment. The commit message fails to reflect this actual change and provides no context, making it poor for tracking or understanding code changes.","The commit message 'add missing exit statement' is highly inaccurate and misleading. The diff shows the removal of a print and exit statement related to the 'town' key, not the addition of one. The message fails to reflect the actual change (removal, not addition), and does not describe the purpose or context of the change. A correct message would indicate the removal of a debug exit for the 'town' key, which was likely part of a debugging step. Therefore, the commit message is poor, misleading, and does not match the actual diff.","The commit message accurately reflects the change by indicating the removal of a debug print and exit for the 'town' key. However, it lacks context about why the debug was removed (e.g., production issue, code cleanup, performance concern) and does not mention the broader impact or intent behind the change. While the action is correct and clearly stated, the message is minimal and could be more informative for maintainers. Thus, it is functional but not excellent."
6f2ea5c288e289b1b8fdfca74c0511a728579295,Make changes to Nokia > Here,geocoder/here.py,"@@ -5,7 +5,7 @@ from .base import Base
 from .keys import app_id, app_code
 
 
-class Nokia(Base):
+class Here(Base):
     """"""
     HERE Geocoding REST API
     =======================
@@ -48,7 +48,7 @@ class Nokia(Base):
     [x] status
     [x] street
     """"""
-    provider = 'nokia'
+    provider = 'here'
     method = 'geocode'
 
     def __init__(self, location, **kwargs):
",add missing docstrings,refactor(api): rename nokia to here geocoding provider,Semantic,"The new message provides a more precise and descriptive semantic meaning by specifying the nature of the change (refactor), the affected area (api), and the exact intent (rename nokia to here geocoding provider), improving clarity and context compared to the vague old message.",2.0,1.0,4.0,"The commit message 'Make changes to Nokia > Here' is overly vague and lacks specificity. It does not indicate what exactly was changed, why, or the impact of the change. While it correctly identifies the class name change from Nokia to Here, it fails to convey the context or purpose of the change. A better message would explain the transition, such as 'Rename Nokia class to Here to reflect correct provider name and update provider identifier.'","The commit message 'add missing docstrings' is highly misleading and inaccurate given the diff. The diff shows a class name change from `Nokia` to `Here` and a corresponding update to the `provider` attribute, which indicates a refactoring or renaming of the class, not the addition of docstrings. There is no evidence of missing docstrings being added—instead, the code's documentation comments are already present and only the class name and provider value are updated. Therefore, the commit message does not accurately reflect the actual changes, making it poor and potentially confusing.","The commit message accurately reflects the change — renaming the Nokia class to Here for the geocoding provider — and includes the relevant context (refactor, API, provider). It is clear, concise, and directly relates to the diff. However, it could be slightly improved by mentioning the specific API or functionality (e.g., 'geocoding') more explicitly to better align with the technical scope. Still, it is well-written and meaningful for a code reviewer, warranting a strong score."
6f2ea5c288e289b1b8fdfca74c0511a728579295,Make changes to Nokia > Here,test_geocoder.py,"@@ -17,7 +17,7 @@ def test_entry_points():
     geocoder.ip
     geocoder.osm
     geocoder.bing
-    geocoder.nokia
+    geocoder.here
     geocoder.yahoo
     geocoder.google
     geocoder.tomtom
@@ -98,8 +98,8 @@ def test_canadapost():
     g = geocoder.canadapost(address)
     assert g.ok
 
-def test_nokia():
-    g = geocoder.nokia(location)
+def test_here():
+    g = geocoder.here(location)
     assert g.ok
     assert g.city == city
 
",add missing test cases,feat(geocoder): replace nokia with here,Semantic,"The new message provides a more precise and meaningful description of the change by specifying the type of feature (geocoder) and clearly stating the replacement action, improving clarity and intent over the vague original.",2.0,2.0,3.0,"The commit message 'Make changes to Nokia > Here' is overly vague and lacks detail. While it correctly indicates a change from Nokia to Here, it does not specify what was changed, why, or the impact. A better message would mention the replacement of the geocoder service and the associated test updates. The diff shows a clear substitution in both imports and test functions, but the commit message fails to communicate that effectively, resulting in a low score.","The commit message 'add missing test cases' is overly vague and lacks specificity. While it correctly identifies that tests were added, it does not explain what was added, why it was necessary, or which functionality is being tested. The diff shows a clear replacement of 'nokia' with 'here' in both entry points and test cases, indicating a migration from Nokia to Here. A better message would specify this change, such as 'Replace Nokia with Here geocoder in test suite'. As it stands, the message provides minimal context and fails to communicate the actual change or its significance, earning a score of 2.","The commit message 'feat(geocoder): replace nokia with here' is concise and indicates a feature change, which is appropriate. However, it lacks context about why the change was made, what the impact is, or how it affects functionality. While it correctly identifies the replacement, it does not explain the rationale or any potential implications, which is important for maintainability and onboarding. Therefore, it is functional but not detailed enough to be considered excellent."
d77b1f8fe18299a8a62d54b052f30301cd4835cd,"Version change 1.1.1

Removed Encoding utf-8 not compatible with Python3",geocoder/__init__.py,"@@ -27,7 +27,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.1.0'
+__version__ = '1.1.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a failure in rectification, suggesting a bug was resolved, which aligns with a corrective improvement.",2.0,1.0,1.0,"The commit message is incomplete and misleading. It states 'Version change 1.1.1' which is correct, but then incorrectly claims 'Removed Encoding utf-8 not compatible with Python3' — this is false, as the diff shows only a version bump, with no changes to encoding or Python 3 compatibility. There is no removal of UTF-8 encoding in the code. The message fails to accurately describe the actual change, making it misleading and unhelpful for understanding the commit's purpose. A score of 2 reflects a basic attempt at describing a version update, but with significant factual inaccuracy.","The commit message 'add missing docstrings' is highly misleading given the actual diff. The diff shows only a version bump from '1.1.0' to '1.1.1', not the addition of any docstrings. Therefore, the commit message does not accurately reflect the changes made, making it incorrect and untrustworthy. A proper message would have reflected the version update, such as 'Bump version to 1.1.1'. This misalignment severely undermines the transparency and clarity of the commit, resulting in a poor score.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.1.0' to '1.1.1', which is a minor version update, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what issue it resolves. A proper commit message should clearly describe the change and its purpose. Therefore, the message is poor and misleading."
d77b1f8fe18299a8a62d54b052f30301cd4835cd,"Version change 1.1.1

Removed Encoding utf-8 not compatible with Python3",geocoder/base.py,"@@ -150,9 +150,6 @@ class Base(object):
         if content:
             if isinstance(content, dict):
                 for key, value in content.items():
-                    # Store String values with encoding (default='utf-8')
-                    if isinstance(value, (str, unicode)):
-                        value = value.encode(self.encoding)
                     # Rebuild the tree if value is a dictionary
                     if isinstance(value, dict):
                         self._build_tree(value, last=key)
",update base.py,fix(base): remove string encoding when building tree,Corrective,"The change removes string encoding that was incompatible with Python 3, addressing a fundamental compatibility issue in the codebase.",2.0,1.0,3.0,"The commit message is overly vague and lacks technical detail about the actual change. While it mentions a version change and a removal related to encoding, it does not clearly explain what was removed, why it was removed (especially in the context of Python 3), or how it affects the code. The diff shows only a removal of a line that encodes string values to UTF-8, which is indeed incompatible with Python 3 (as Python 3 uses Unicode by default), but the message fails to convey this technical context. A better message would explicitly state that string encoding was removed to improve Python 3 compatibility. Therefore, the message is partially accurate but insufficiently informative.","The commit message 'update base.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a removal of a string encoding line, which suggests a change in how string values are handled (specifically, the removal of encoding when storing strings). A meaningful commit message should reflect this change, such as 'Remove string encoding in Base class when storing values, to avoid implicit encoding issues'. Without such context, the message fails to inform developers about the significance of the change, making it poor for code review and maintainability.","The commit message is clear and identifies the change as a fix related to string encoding removal in the base class. However, it lacks context about why the encoding was removed (e.g., whether it was a bug, a security issue, or a design change), and does not mention the impact on functionality or potential side effects. The message is accurate and concise but insufficiently detailed to fully convey the reasoning or significance of the change, which limits its completeness."
d77b1f8fe18299a8a62d54b052f30301cd4835cd,"Version change 1.1.1

Removed Encoding utf-8 not compatible with Python3",setup.py,"@@ -13,7 +13,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
-version = '1.1.0'
+version = '1.1.1'
 requires = ['requests>=2.3.0', 'ratelim>=0.1.4']
 
 with open('README.rst') as f:
",add version to setup.py,chore(version): bump version from 1.1.0 to 1.1.1,Cosmetic,"The change only updates the version number and does not affect functionality, behavior, or code logic; it is a minor, non-functional update for versioning purposes.",2.0,2.0,5.0,"The commit message incorrectly states that 'Encoding utf-8 not compatible with Python3' was removed, which is not supported by the diff. The diff only shows a version bump from '1.1.0' to '1.1.1' and contains no changes related to encoding or Python 3 compatibility. The message is therefore factually inaccurate and misleading. While it correctly identifies the version change, the added detail is false and detracts from credibility. A score of 2 reflects a partially relevant but incorrect message.","The commit message 'add version to setup.py' is too vague and does not convey the actual change made. The diff shows an update from version '1.1.0' to '1.1.1', which is a minor version bump. A more descriptive message such as 'Bump version to 1.1.1 in setup.py' would better reflect the change and its significance. As it stands, the message lacks specificity and context, resulting in a score of 2.","The commit message accurately reflects the change in the code (bumping the version from 1.1.0 to 1.1.1) and uses the appropriate 'chore(version)' label to indicate it is a version update, which is a standard convention in commit messages. It is concise, clear, and follows conventional commit guidelines, making it excellent for readability and maintainability."
9d0e548f91b7db3c947f70050d0ed817e03743a1,#108 Fixed Encoding with Google/Bing/ArcGIS,geocoder/arcgis.py,"@@ -91,7 +91,7 @@ class Arcgis(Base):
         if self.address:
             expression = r'(\d{5}(-\d{4})?)|([ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1}( *\d{1}[A-Z]{1}\d{1})?)'
             pattern = re.compile(expression)
-            match = pattern.search(self.address.upper())
+            match = pattern.search(str(self.address.upper()))
             if match:
                 return match.group(0)
 
",add support for arcgis,fix(address): ensure address is string when searching for postal code,Corrective,"The new message indicates a specific fix to ensure address data is properly typed as a string, which prevents potential issues in postal code search functionality, addressing a logical or data-type error.",2.0,2.0,4.0,"The commit message is vague and does not accurately reflect the change made in the code diff. The diff shows a change from `self.address.upper()` to `str(self.address.upper())`, which is a trivial and redundant addition since `self.address.upper()` is already a string. The message claims to fix 'Encoding with Google/Bing/ArcGIS', but there is no mention of encoding issues or related services in the code change. The actual change is minimal and unrelated to encoding. Therefore, the commit message is misleading and lacks specificity, warranting a low score.","The commit message 'add support for arcgis' is overly vague and does not describe the actual change or its significance. The diff shows a small modification: converting `self.address` to `str(self.address.upper())` to ensure string type safety during regex matching. This change is likely to prevent potential issues with non-string inputs, but the commit message fails to communicate that. A better message would specify the fix (e.g., 'Ensure string type safety when parsing Canadian postal codes in ArcGIS'). As such, the message is technically relevant but lacks detail and context, resulting in a score of 2.","The commit message is clear and relevant to the change. It correctly identifies the issue (ensuring the address is a string when searching for a postal code) and the context (address parsing). The fix addresses a potential type issue by converting the address to a string using `str()`, which is safe and appropriate. While the message could be slightly more detailed (e.g., mentioning why string conversion is necessary), it is still accurate, concise, and meaningful. Therefore, it earns a strong 4 rather than 5, as it lacks minor elaboration on the rationale or impact."
9d0e548f91b7db3c947f70050d0ed817e03743a1,#108 Fixed Encoding with Google/Bing/ArcGIS,geocoder/base.py,"@@ -147,27 +147,30 @@ class Base(object):
 
     def tree(self): return defaultdict(self.tree)
 
+    def _encode(self, value):
+        # Encoding Value to for Python2/3 (default='utf-8')
+        if value:
+            if sys.version_info.major == 2:
+                if isinstance(value, (str, unicode)):
+                    return value.encode(self.encoding)
+
+            if sys.version_info.major == 3:
+                if isinstance(value, (str)):
+                    return value.encode(self.encoding)
+        return value
+
     def _build_tree(self, content, last=''):
         if content:
             if isinstance(content, dict):
                 for key, value in content.items():
-                    # Encoding Value to for Python2/3 (default='utf-8')
-                    if sys.version_info.major == 2:
-                        if isinstance(value, (str, unicode)):
-                            value = value.encode(self.encoding)
-
-                    if sys.version_info.major == 3:
-                        if isinstance(value, (str, bytes)):
-                            value = value.encode(self.encoding)
-
                     # Rebuild the tree if value is a dictionary
                     if isinstance(value, dict):
                         self._build_tree(value, last=key)
                     else:
                         if last:
-                            self.parse[last][key] = value
+                            self.parse[last][key] = self._encode(value)
                         else:
-                            self.parse[key] = value
+                            self.parse[key] = self._encode(value)
     @property
     def status(self):
         if self.ok:
",create base class,feat(base): add encoding support for Python 2/3 string values,Semantic,"The new message provides a more precise and descriptive title that reflects the actual feature addition (encoding support for Python 2/3 strings) and includes a semantic tag 'feat' indicating it's a new feature, whereas the old message was vague and focused on a specific tool (Google/Bing/ArcGIS) without clarifying the nature of the change.",2.0,1.0,3.0,"The commit message '#108 Fixed Encoding with Google/Bing/ArcGIS' is overly vague and does not accurately reflect the actual changes in the diff. The diff introduces a new `_encode` method and uses it to handle string encoding for Python 2 and 3, but the commit message fails to mention encoding, Python version handling, or the specific purpose of the method. It also incorrectly implies the fix is related to Google/Bing/ArcGIS, which is not evident from the code changes. A better message would describe the actual change—such as 'Added encoding support for strings in Python 2/3 using UTF-8'—making it more precise and meaningful.","The commit message 'create base class' is extremely vague and does not reflect the actual changes made in the diff. The diff introduces a new `_encode` method for handling string encoding across Python 2 and 3, modifies the `_build_tree` method to use this encoding, and improves encoding consistency in dictionary processing. A meaningful commit message should describe these specific changes, such as 'Add encoding support for Python 2/3 strings in tree building and value serialization'. The current message provides no context about what was added, why, or how it improves functionality, making it poor for clarity and usefulness.","The commit message accurately identifies the feature as adding encoding support for Python 2/3 string values, which is relevant to the diff. However, it lacks detail about the scope of the change (e.g., only strings, specific encoding handling, or impact on tree building), and does not clearly explain the motivation or the problem it solves. The implementation introduces a new `_encode` method and modifies `_build_tree` to use it, but the message doesn't convey the full context or why this was necessary. It's informative but somewhat superficial, hence a score of 3 rather than 4 or 5."
9d0e548f91b7db3c947f70050d0ed817e03743a1,#108 Fixed Encoding with Google/Bing/ArcGIS,geocoder/bing.py,"@@ -101,7 +101,7 @@ class Bing(Base):
         if self.street:
             expression = r'\d+'
             pattern = re.compile(expression)
-            match = pattern.search(self.street)
+            match = pattern.search(str(self.street))
             if match:
                 return int(match.group(0))
 
",update bing.py,fix(bing): ensure street value is string when searching for numbers,Corrective,"The new message specifies a bug fix that ensures proper data type handling (string) for street values during searches, which addresses a potential error in functionality, making it a corrective improvement.",2.0,2.0,5.0,"The commit message is vague and does not accurately reflect the change made in the code diff. The diff shows a simple fix where `self.street` is converted to a string using `str(self.street)` before searching with a regex pattern. This change likely prevents potential issues with non-string inputs (e.g., None or other types), but the commit message 'Fixed Encoding with Google/Bing/ArcGIS' is misleading — there is no mention of encoding, and the change is not related to encoding at all. The message fails to describe the actual fix, making it unclear what was fixed or why. A better message would specify the fix (e.g., 'Fixed potential TypeError when searching street number with regex'). Therefore, the score is 2 — it's somewhat relevant but poorly worded and inaccurate.","The commit message 'update bing.py' is overly vague and provides no context about what was changed or why. While the diff shows a small but relevant change—converting `self.street` to `str(self.street)` to ensure safe string conversion—this improvement is not clearly communicated. A better message would specify the change, such as 'Ensure street input is a string before regex search to prevent potential TypeError'. The current message fails to convey the purpose or impact of the change, resulting in a low score.","The commit message is clear, concise, and directly addresses the change in the code. The diff shows a change from `self.street` to `str(self.street)` in a regex search, which ensures that the street value is converted to a string before searching for numbers. The commit message accurately reflects this change and explains the purpose—ensuring the street value is a string when searching for numbers. This is exactly what the change achieves, making it excellent documentation of the fix."
9d0e548f91b7db3c947f70050d0ed817e03743a1,#108 Fixed Encoding with Google/Bing/ArcGIS,geocoder/google.py,"@@ -88,8 +88,8 @@ class Google(Base):
             # Parse address components with short & long names
             for item in self.parse['address_components']:
                 for category in item['types']:
-                    self.parse[category]['long_name'] = item['long_name']
-                    self.parse[category]['short_name'] = item['short_name']
+                    self.parse[category]['long_name'] = self._encode(item['long_name'])
+                    self.parse[category]['short_name'] = self._encode(item['short_name'])
 
     @property
     def lat(self):
",update google.py,fix(address_components): encode long_name and short_name,Corrective,"The new message specifies a precise fix to a particular function or property (address_components) and indicates encoding of specific fields (long_name and short_name), addressing a technical issue rather than just changing appearance or semantics.",3.0,2.0,3.0,"The commit message is too vague and lacks specific details about what was fixed or why. While it mentions 'Fixed Encoding', the diff shows a clear change in encoding the long_name and short_name fields using a private method _encode(), which is not explicitly stated in the message. The reference to 'Google/Bing/ArcGIS' is misleading as the diff only shows changes for Google. A better message would specify that encoding was added to address components for Google geocoding. Therefore, it's partially accurate but lacks precision and context, resulting in a moderate score.","The commit message 'update google.py' is overly vague and provides no information about what was changed or why. The diff shows a clear modification where the long_name and short_name values are now encoded using a private method _encode(), which is a significant functional change. A better commit message would specify this encoding update, such as 'Encode address component names in Google geocoding response'. Since the message lacks context and technical detail, it only scores a 2 — it indicates a change occurred but fails to communicate its purpose or impact.","The commit message correctly identifies the change as encoding the long_name and short_name fields in address components, which aligns with the diff. However, it lacks context about why the encoding is needed (e.g., for URL safety, data integrity, or compliance) and does not mention the specific method used (_encode). While the message is accurate and concise, it is somewhat minimal and could be improved with more detail to fully explain the impact. Thus, it is functional but not excellent."
9d0e548f91b7db3c947f70050d0ed817e03743a1,#108 Fixed Encoding with Google/Bing/ArcGIS,test_geocoder.py,"@@ -7,7 +7,7 @@ import unittest
 
 address = '453 Booth Street, Ottawa'
 location = 'Ottawa, Ontario'
-city = 'Ottawa'
+city = b'Ottawa'
 ip = '74.125.226.99'
 repeat = 3
 ottawa = (45.4215296, -75.6971930)
",add test case for,bug(cleanup): replaced string with bytes for city variable,Corrective,"The change replaces a string with bytes for the city variable, which addresses a potential encoding issue, indicating a fix for a correctness problem in data handling.",1.0,1.0,1.0,"The commit message '#108 Fixed Encoding with Google/Bing/ArcGIS' is highly misleading and incorrect given the code diff. The change modifies `city = 'Ottawa'` to `city = b'Ottawa'`, which converts a string to a bytes object. This is not a fix for encoding issues in the context of Google, Bing, or ArcGIS APIs — it's actually a potential bug that could break string handling in the application. The message fails to accurately describe what was changed or why. Furthermore, it implies a fix when the change is likely a mistake or at least poorly documented. Therefore, the commit message is poor, misleading, and does not reflect the actual change.","The commit message 'add test case for' is extremely vague and provides no context about what was changed, why it was changed, or what functionality is being tested. The diff shows a change from a string 'Ottawa' to a byte string b'Ottawa', which is a significant type change and could break functionality or cause runtime errors. A proper commit message should explain this change and its implications. The current message fails to convey any meaningful information about the change or its purpose, making it poor and unhelpful for code review or understanding.","The commit message is incorrect and potentially harmful. It claims to 'replace a string with bytes' for the city variable, but the diff shows a change from `city = 'Ottawa'` to `city = b'Ottawa'`, which is not a valid or safe operation in most contexts—especially in a Python script where string values are expected for city names. Using bytes for a city name would break string operations, cause runtime errors, and likely introduce a bug. The message misrepresents the change and fails to indicate the actual issue or intent. Therefore, the commit message is poor, misleading, and could lead to confusion or errors in the codebase."
20732ba53777169b5fb476252c3972fdb5ec8edb,Version Change,geocoder/__init__.py,"@@ -27,7 +27,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.1.1'
+__version__ = '1.1.2'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue (rectification failed) that was previously not addressed, suggesting a fix for a bug or failure scenario, which falls under corrective improvement.",2.0,1.0,1.0,"The commit message 'Version Change' is overly vague and provides no context about what was changed or why. While it correctly indicates a version update, it lacks specific details such as the version bump (from 1.1.1 to 1.1.2) or any associated improvements, fixes, or rationale. A better message would include the version number and a brief description of the change, such as 'Bump version to 1.1.2 with consistent JSON responses across providers.'","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.1.1' to '1.1.2', not any addition of docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and incorrect. A proper message would have been something like 'Bump version to 1.1.2'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows a simple version bump from '1.1.1' to '1.1.2', which is a routine update and not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what issue it resolves, making it inadequate and misleading for a commit message. A proper message should describe the actual change and its purpose."
20732ba53777169b5fb476252c3972fdb5ec8edb,Version Change,setup.py,"@@ -13,7 +13,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
-version = '1.1.1'
+version = '1.1.2'
 requires = ['requests>=2.3.0', 'ratelim>=0.1.4']
 
 with open('README.rst') as f:
",add version to setup.py,chore(version): bump version from 1.1.1 to 1.1.2,Semantic,"The new message provides a clear, standardized semantic description of the change (a version bump) with context (from 1.1.1 to 1.1.2), improving readability and intent compared to the vague 'Version Change'.",2.0,2.0,5.0,"The commit message 'Version Change' is overly vague and provides no context about what was changed, why it was changed, or the impact of the version update. While it correctly indicates a version change, it lacks specificity (e.g., from 1.1.1 to 1.1.2), which is essential for understanding the significance of the change. A better message would include the version bump and possibly a brief reason, such as 'Bump version to 1.1.2 to include bug fixes and new features.'","The commit message 'add version to setup.py' is too vague and does not accurately reflect the change. The diff shows an update from version '1.1.1' to '1.1.2', which is a version bump, not an addition. A more precise message such as 'Bump version to 1.1.2 in setup.py' would better describe the change. Therefore, the message is minimally informative and lacks specificity, resulting in a score of 2.","The commit message clearly and concisely indicates a version bump, specifying the type of change ('chore'), the exact version update (from 1.1.1 to 1.1.2), and the nature of the change (version update). It is accurate, relevant to the diff, and follows a standard commit message format (e.g., 'chore(version): ...'). The message directly reflects the change in the code, making it excellent for clarity and maintainability."
9d1ce989b4c02ac8162329369491ad64971fa5b1,#107 Fix URL duplicate in Kwargs,geocoder/osm.py,"@@ -55,7 +55,7 @@ class Osm(Base):
     method = 'geocode'
 
     def __init__(self, location, **kwargs):
-        self.url = kwargs.get('url', 'http://nominatim.openstreetmap.org/search')
+        self.url = kwargs.pop('url', 'http://nominatim.openstreetmap.org/search')
         self.location = location
         self.params = {
             'q': location,
",update openstreetmap.py,fix(osm): use pop instead of get for url parameter,Corrective,"The change replaces get with pop to properly remove and handle the URL parameter, addressing a potential logic issue in how kwargs are processed, thus correcting a bug related to URL handling.",2.0,2.0,4.0,"The commit message 'Fix URL duplicate in Kwargs' is vague and does not clearly describe what was fixed or why. The diff shows that `kwargs.pop('url')` was used instead of `kwargs.get('url')`, which changes how the URL is handled—specifically, it removes the URL from kwargs instead of just retrieving it. This is not a 'duplicate' issue, but rather a change in behavior (removing the key). The message fails to explain the actual change or its impact, making it unclear and potentially misleading. A better message would describe the intent, such as 'Fix URL handling by removing URL from kwargs instead of just retrieving it.'","The commit message 'update openstreetmap.py' is extremely vague and provides no context about what was changed or why. While the diff shows a change from using .get() to .pop() for the 'url' parameter, which is a meaningful modification (potentially for better parameter handling), the commit message fails to communicate the significance of this change. A better message would specify the change (e.g., 'Use kwargs.pop() to remove url parameter after use') and its purpose (e.g., 'improve parameter handling and ensure url is consumed'). Therefore, it receives a score of 2 for being technically accurate but lacking clarity and context.","The commit message is clear and relevant to the change, correctly identifying that `pop` is being used instead of `get` for the URL parameter. This is a meaningful improvement as `pop` removes the key from kwargs, which may prevent unintended reuse or confusion. However, the message lacks context on why `pop` was preferred over `get` (e.g., to avoid leaving the URL in kwargs, or to ensure it's consumed). While accurate and concise, it could be slightly improved with a brief rationale. Overall, it's good but not excellent."
edffc5132a43ed0543eb02bf8446d2d7dd2b9cde,#112 Change housenumber back to String,geocoder/bing.py,"@@ -107,7 +107,7 @@ class Bing(Base):
             pattern = re.compile(expression)
             match = pattern.search(str(self.street))
             if match:
-                return int(match.group(0))
+                return match.group(0)
 
     @property
     def street(self):
",add missing return statement,fix(bing): return street match group instead of converted int,Corrective,"The change addresses a bug by returning the street match group (preserving original string data) instead of converting it to an integer, which ensures accurate street data representation and fixes a data transformation error.",3.0,2.0,3.0,"The commit message indicates a change from returning an integer to a string for the house number, which aligns with the code diff. However, the message is vague and lacks context—such as why the change was made, what the original intent was, or any impact on functionality. While it correctly identifies the change, it does not provide sufficient detail to be considered excellent. Thus, it earns a moderate score of 3.","The commit message 'add missing return statement' is vague and lacks specificity. While it correctly identifies that a return statement was missing, it does not explain what was changed, why it was necessary, or the impact of the change. The diff shows that an integer conversion was removed (from `int(match.group(0))` to `match.group(0)`), which could lead to incorrect behavior if the street value is expected to be numeric. A better message would clarify that a type conversion was removed, potentially causing a bug, and explain the context or reasoning. Therefore, the message is technically accurate but insufficiently detailed, warranting a score of 2.","The commit message is clear and relevant to the change, indicating a fix in the Bing class where the street match group is returned instead of being converted to an integer. However, it lacks context about why the int conversion was problematic or what the original intent was. The message is accurate but slightly superficial. A higher score would require more detail on the reasoning or impact, so it is moderately good but not excellent."
edffc5132a43ed0543eb02bf8446d2d7dd2b9cde,#112 Change housenumber back to String,geocoder/google.py,"@@ -135,12 +135,7 @@ class Google(Base):
 
     @property
     def housenumber(self):
-        housenumber = self.parse['street_number'].get('short_name')
-        # Convert to Integer if possible
-        try:
-            return int(housenumber)
-        except:
-            return housenumber 
+        return self.parse['street_number'].get('short_name')
 
     @property
     def street(self):
",add missing try/except,fix(street): remove unnecessary integer conversion for housenumber,Corrective,"The change removes an unnecessary integer conversion that could introduce bugs or type inconsistencies, addressing a potential correctness issue in street address handling.",2.0,2.0,3.0,"The commit message is insufficiently informative. While it states that the housenumber was changed back to a string, it does not explain why the change was made, what the original behavior was, or what the impact of the change is. The diff shows a removal of type conversion (int) logic, which implies a regression or a design decision, but the commit message fails to provide context. A better message would include the reason (e.g., 'revert int conversion to preserve string values for consistency with street data') and reference any related issues or discussions. Thus, the message is technically correct but lacks depth and context, earning a score of 2.","The commit message 'add missing try/except' is inaccurate and misleading. The diff shows the removal of a try/except block, not its addition. The original code had a try/except to convert the street number to an integer if possible, which was removed. The commit message incorrectly suggests that a try/except was added when in fact it was removed. This misrepresents the change and could mislead developers about the intent and impact of the change. Therefore, the message is poor and deserves a low score.","The commit message correctly identifies the change as removing an unnecessary integer conversion for the housenumber property. However, it lacks context about why the conversion was originally present or whether the property's behavior was affected by removing it. While the message is accurate and concise, it does not fully explain the reasoning or impact, which limits its completeness. Therefore, it is adequately clear but not excellent."
edffc5132a43ed0543eb02bf8446d2d7dd2b9cde,#112 Change housenumber back to String,geocoder/here.py,"@@ -92,11 +92,7 @@ class Here(Base):
 
     @property
     def housenumber(self):
-        housenumber = self.parse['Address'].get('HouseNumber')
-        try:
-            return int(housenumber)
-        except:
-            return housenumber 
+        return self.parse['Address'].get('HouseNumber')
 
     @property
     def street(self):
",add missing try/except,fix(Here): remove unnecessary int conversion for housenumber,Corrective,"The change removes an unnecessary integer conversion for the housenumber, which likely fixes a potential type-related issue or incorrect data handling, thus correcting a semantic or logical error in the code.",2.0,2.0,4.0,"The commit message is vague and lacks context. While it mentions changing the housenumber back to a string, it does not explain why the change was necessary, what the original behavior was, or how this affects functionality. The diff shows a removal of a try-except block that attempted to convert the value to an integer, suggesting the intent was to revert a type conversion. However, the commit message fails to communicate the reasoning or impact, making it insufficient for understanding the change's purpose. A better message would include context like 'Reverted housenumber parsing to string to preserve original data type and avoid unintended type coercion.'","The commit message 'add missing try/except' is inaccurate and misleading. The diff shows the removal of a try/except block, not its addition. The original code attempted to convert the house number to an integer, and the commit removes that conversion, which is the opposite of adding a try/except. The message does not reflect the actual change, leading to confusion. While the change is small, the commit message is factually wrong and thus deserves a low score.","The commit message accurately identifies the change as removing an unnecessary integer conversion for the housenumber property. The fix is relevant and directly tied to the code diff, which removes a try-except block that was attempting to convert the house number to an integer. However, the message could be slightly more precise by mentioning that the conversion was redundant or unsafe (e.g., 'int() conversion was unnecessary and could lead to errors on invalid input'), which would improve clarity. Overall, it is clear, relevant, and appropriately scoped, making it a strong but not perfect commit message."
edffc5132a43ed0543eb02bf8446d2d7dd2b9cde,#112 Change housenumber back to String,geocoder/yahoo.py,"@@ -97,7 +97,6 @@ class Yahoo(Base):
     def street(self):
         return self.parse.get('street')
 
-
     @property
     def neighborhood(self):
         return self.parse.get('neighborhood')
",add missing annotation to yahoo class,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug or error was resolved, which aligns with a corrective improvement.",1.0,2.0,1.0,"The commit message '#112 Change housenumber back to String' is highly misleading and irrelevant to the code diff. The diff shows the removal of a line that was previously present (a comment or a method definition), and there is no mention of 'housenumber' or any change to its type. The message suggests a change to a property or type of 'housenumber', which is not reflected in the diff. Therefore, the commit message does not accurately describe what was changed, making it poor and potentially confusing.","The commit message 'add missing annotation to yahoo class' is vague and does not clearly describe what was changed or why. The diff shows the removal of a line comment (the dash and comment line) rather than the addition of an annotation. The term 'annotation' is ambiguous—was it a type hint, a docstring, or something else? Since the change appears to be the removal of a comment, not the addition of an annotation, the message is misleading and misrepresents the actual change. Therefore, it receives a low score.","The commit message 'fix: rectification failed' is highly vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what the change addresses. The diff shows the removal of a line comment (a trailing dash) and a property definition, but the commit message fails to convey any meaningful context. A good commit message should clearly explain the purpose of the change. This message lacks specificity, clarity, and actionable insight, making it poor for understanding or maintaining the codebase."
3f170c6b500bfd2cb1ffefcec976234fa1da7d8d,#113 Change attributes to fieldnames,geocoder/base.py,"@@ -10,12 +10,12 @@ from .haversine import haversine
 
 
 class Base(object):
-    _exclude = ['parse', 'json', 'url', 'attributes', 'help', 'debug', 'short_name',
+    _exclude = ['parse', 'json', 'url', 'fieldnames', 'help', 'debug', 'short_name',
                 'api', 'content', 'params', 'status_code', 'street_number', 'method',
                 'api_key', 'key', 'id', 'x', 'y', 'latlng', 'headers', 'timeout',
                 'geometry', 'wkt','locality', 'province','rate_limited_get', 'osm',
                 'route', 'properties','geojson','tree','error', 'proxies', 'road']
-    attributes = []
+    fieldnames = []
     error = None
     status_code = None
     headers = {}
@@ -99,7 +99,7 @@ class Base(object):
     def _json(self):
         for key in dir(self):
             if bool(not key.startswith('_') and key not in self._exclude):
-                self.attributes.append(key)
+                self.fieldnames.append(key)
                 value = getattr(self, key)
                 if value:
                     self.json[key] = value
@@ -123,16 +123,16 @@ class Base(object):
                     print('- [ ] {0}'.format(key))
         print('({0}/{1})'.format(count, len(self.osm) - 2))
         print('')
-        print('Attributes')
+        print('Fieldnames')
         print('----------')
         count = 0
-        for attribute in self.attributes:
-            if self.json.get(attribute):
-                print('- [x] {0}'.format(attribute))
+        for fieldname in self.fieldnames:
+            if self.json.get(fieldname):
+                print('- [x] {0}'.format(fieldname))
                 count += 1
             else:
-                print('- [ ] {0}'.format(attribute))
-        print('({0}/{1})'.format(count, len(self.attributes)))
+                print('- [ ] {0}'.format(fieldname))
+        print('({0}/{1})'.format(count, len(self.fieldnames)))
         print('')
         print('URL')
         print('---')
",add docs for osm.py,refactor(base): replace attributes with fieldnames in class,Semantic,"The new message indicates a refactoring change that replaces attributes with fieldnames, which alters the semantic meaning of the code by improving clarity and alignment with Python's fieldname conventions, rather than just cosmetic or trivial changes.",2.0,1.0,3.0,"The commit message ""#113 Change attributes to fieldnames"" is overly vague and lacks context. While it correctly identifies the general change (renaming 'attributes' to 'fieldnames'), it does not explain why the change was made, what the impact is, or how it improves the code. A better message would include the reason (e.g., to align with field naming conventions), the scope (e.g., in Base class), and the effect (e.g., improves clarity in output). As it stands, the message is minimally informative and fails to provide meaningful insight into the change's purpose or significance.","The commit message 'add docs for osm.py' is highly misleading and irrelevant to the actual changes in the diff. The diff shows a code modification where the class attribute `_exclude` is updated and `attributes` is replaced with `fieldnames`, along with corresponding changes in method logic and output messages (e.g., 'Attributes' → 'Fieldnames'). These are implementation changes, not documentation additions. There is no mention of documentation, and the code changes affect internal behavior and naming. Therefore, the commit message does not accurately reflect the work done, making it poor and misleading.","The commit message 'refactor(base): replace attributes with fieldnames in class' is technically accurate and identifies the type of change (refactor) and the scope (base class). However, it lacks detail about why the change was made, what the impact is, and how it improves the code. The diff shows a simple renaming of `attributes` to `fieldnames` and a corresponding update in documentation and output labels, which suggests a terminology shift for clarity. While the message is clear and concise, it does not explain the rationale or benefit of the change, which reduces its completeness. Therefore, it is functional but not excellent."
9e9b698bb0a1d6f123cb8da2a1eae715b8cf2b00,1.1.3 Version Change,geocoder/__init__.py,"@@ -27,7 +27,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.1.2'
+__version__ = '1.1.3'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a failure in rectification, suggesting a bug or issue was resolved, which falls under corrective improvements.",2.0,1.0,1.0,"The commit message '1.1.3 Version Change' is overly generic and provides no context about what changed beyond the version number. While it correctly indicates a version update, it lacks details about the actual improvements, fixes, or changes that justify the version bump. A better message would explain the significance of the update (e.g., 'Consistent JSON responses across providers in 1.1.3'). As such, it falls short of being informative or meaningful for developers reviewing the commit history.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.1.2' to '1.1.3', not any addition of docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and incorrect. A proper message would have been something like 'Bump version to 1.1.3'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.1.2' to '1.1.3', which is a minor version update, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what issue it resolves. A proper commit message should clearly describe the change and its purpose, making this message inadequate and misleading."
9e9b698bb0a1d6f123cb8da2a1eae715b8cf2b00,1.1.3 Version Change,setup.py,"@@ -13,7 +13,7 @@ if sys.argv[-1] == 'publish':
     os.system('python setup.py sdist bdist_wheel upload')
     sys.exit()
 
-version = '1.1.2'
+version = '1.1.3'
 requires = ['requests>=2.3.0', 'ratelim>=0.1.4']
 
 with open('README.rst') as f:
",add version to setup.py,chore(version): bump version to 1.1.3,Semantic,"The new message provides a clearer, more descriptive context by indicating the type of change (chore) and specifying the version bump, improving semantic clarity and intent compared to the generic 'Version Change'.",2.0,2.0,5.0,"The commit message '1.1.3 Version Change' is accurate in indicating a version update but lacks detail. It does not specify why the version was incremented (e.g., bug fixes, new features), nor does it provide context about the changes in the code or the impact of the update. While it correctly identifies the version bump, it is too minimal to be considered informative or meaningful for a team reviewing the commit history. A better message would include context such as 'Bump version to 1.1.3 to include bug fixes and improved error handling'.","The commit message 'add version to setup.py' is overly vague and does not accurately reflect the change. The diff shows a version bump from '1.1.2' to '1.1.3', not the addition of a version field. A more precise message such as 'Bump version to 1.1.3 in setup.py' would better describe the change. Therefore, the message is minimally informative and lacks specificity, warranting a score of 2.","The commit message accurately reflects the change in the code, specifically the version bump from '1.1.2' to '1.1.3'. It uses the appropriate 'chore(version)' label to indicate a version update, which is a standard convention in commit messages (e.g., in conventional commits). The message is concise, clear, and directly related to the diff, making it excellent for readability and maintainability."
6833b13e3554f2d8328e654d5b62934e4ecb2dda,Fixed broken issues,geocoder/opencage.py,"@@ -67,7 +67,7 @@ class OpenCage(Base):
         self.url = 'http://api.opencagedata.com/geocode/v1/json'
         self.location = location
         self.params = {
-            'q': location,
+            'query': location,
             'key': kwargs.get('key', opencage_key),
         }
         self._initialize(**kwargs)
",add missing class attribute,fix(api): use query parameter instead of q,Corrective,"The change addresses a specific bug by replacing the use of a deprecated or incorrect parameter ('q') with the proper query parameter, fixing a functional issue in the API behavior.",2.0,2.0,5.0,"The commit message 'Fixed broken issues' is vague and uninformative. It does not specify what was actually fixed, why it was necessary, or what the impact of the change is. While the diff shows a simple parameter name change from 'q' to 'query' in the OpenCage class, the commit message fails to convey this detail. A better message would explicitly state the change, such as 'Changed parameter name from 'q' to 'query' to match OpenCage API documentation for consistency.' Therefore, the message is only minimally informative and receives a score of 2.","The commit message 'add missing class attribute' is overly vague and does not clearly describe what was changed or why. The diff shows a simple replacement of 'q' with 'query' in the params dictionary, which is a parameter name change, not the addition of a missing attribute. The term 'missing class attribute' is misleading — no new class attribute was added, only a parameter key was renamed. A better message would specify the change (e.g., 'rename parameter key from q to query') and clarify the context. Thus, the message is technically incorrect and lacks specificity, warranting a score of 2.","The commit message is concise, relevant, and clearly indicates the change made. It specifies the context ('api'), the type of change ('use query parameter instead of q'), and the reason (correcting parameter name). This is sufficient and appropriate for a small, focused change in the code, and aligns well with conventional commit message standards."
6833b13e3554f2d8328e654d5b62934e4ecb2dda,Fixed broken issues,setup.py,"@@ -1,5 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
+import sys
+import os
+
 
 try:
     from setuptools import setup
@@ -43,7 +46,7 @@ setup(
     setup_requires=setup_requires,
     install_requires=install_requires,
     zip_safe=False,
-    keywords='geocoder arcgis tomtom opencage google bing mapquest nokia osm lat lng location addxy',
+    keywords='geocoder arcgis tomtom opencage google bing here',
     classifiers=(
         'Development Status :: 5 - Production/Stable',
         'Intended Audience :: Developers',
",add missing setup.py file,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed') rather than a vague fix, providing clearer diagnostic information about the issue being addressed.",2.0,2.0,1.0,"The commit message 'Fixed broken issues' is extremely vague and provides no detail about what was actually fixed. The diff shows a clear change in the keywords list from including 'here' to removing 'tomtom', 'opencage', 'google', 'bing', 'mapquest', 'nokia', 'osm', 'lat lng location addxy' — suggesting a reevaluation or correction of supported services. However, the commit message fails to explain the reason for the change, which makes it difficult to understand the intent or impact. While it's not completely wrong, it lacks specificity and context, resulting in a low score.","The commit message 'add missing setup.py file' is highly inaccurate and misleading. The diff shows modifications to an existing setup.py file, not the addition of a missing file. The changes include importing sys and os, and updating the keywords from 'here' to exclude 'mapquest nokia osm lat lng location addxy'. The commit message fails to reflect these actual changes, which involve updates and refinements rather than adding a missing file. Therefore, it is poorly descriptive and does not accurately represent the work done.","The commit message 'fix: rectification failed' is highly inadequate given the actual changes in the diff. The diff shows a modification to the `keywords` field in the setup.py file, replacing 'mapquest nokia osm lat lng location addxy' with 'here', and adding imports for `sys` and `os`. There is no mention of 'rectification' or any error related to it. The message is vague, technically incorrect, and does not describe what was actually fixed or why. A proper commit message should reflect the actual change, such as 'fix: update keywords to include here and remove outdated geocoding services'. Therefore, the commit message is poor and misrepresents the changes."
6833b13e3554f2d8328e654d5b62934e4ecb2dda,Fixed broken issues,test_geocoder.py,"@@ -136,5 +136,5 @@ def test_mapquest():
 
 
 def test_geonames():
-    g = geocoder.geonames(location)
+    g = geocoder.geonames(city)
     assert g.ok
",add failing test for,fix(geonames): update location to city in geonames test,Corrective,"The new message specifies a precise, actionable fix for a particular issue (updating location to city in Geonames test), indicating a correction to a specific bug or behavior, rather than a cosmetic or trivial change.",2.0,2.0,3.0,"The commit message 'Fixed broken issues' is overly vague and provides no specific information about what was fixed or why. The diff shows a simple change: replacing 'location' with 'city' in the geonames test function, which suggests a specific bug related to parameter name mismatch. A better message would specify the exact change, such as 'Fixed geonames test to use city parameter instead of location'. Since the message lacks detail and context, it only scores a 2.","The commit message 'add failing test for' is extremely vague and provides no context about what is being tested or why. While it correctly indicates a test was added, it lacks specificity about the functionality, the expected behavior, or the issue being addressed. The diff shows a change from testing 'location' to 'city' in the geonames function, which suggests a bug or misalignment in the test parameters. A better message would clarify that a test was added for geonames with a city parameter, and that it is currently failing due to a mismatch in input. Thus, the message is minimally informative and falls short of being useful for understanding the change or its intent.","The commit message correctly identifies the change as a fix in the geonames test and specifies the parameter update from 'location' to 'city'. However, it lacks context about why the change was made—such as whether this was due to a mismatch in expected input or a bug in the test logic. While the message is clear and accurate, it is minimal and does not fully explain the impact or intent behind the change, which reduces its completeness. Therefore, it is neither poor nor excellent, but moderately adequate."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/api.py,"@@ -132,21 +132,21 @@ def bing(location, **kwargs):
 
 def yahoo(location, **kwargs):
     """"""Yahoo Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     """"""
     return get(location, provider='yahoo', **kwargs)
 
 def geolytica(location, **kwargs):
     """"""Geolytica (Geocoder.ca) Provider
-    
+
     :param location: Your search location you want geocoded.
     """"""
     return get(location, provider='geolytica', **kwargs)
 
 def opencage(location, **kwargs):
     """"""Opencage Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     :param ``key``: (optional) use your own API Key from OpenCage.
     """"""
@@ -154,14 +154,14 @@ def opencage(location, **kwargs):
 
 def arcgis(location, **kwargs):
     """"""ArcGIS Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     """"""
     return get(location, provider='arcgis', **kwargs)
 
 def here(location, **kwargs):
     """"""HERE Provider
-    
+
     :param location: Your search location you want geocoded.
     :param app_code: (optional) use your own Application Code from HERE.
     :param app_id: (optional) use your own Application ID from HERE.
@@ -173,7 +173,7 @@ def here(location, **kwargs):
 
 def nokia(location, **kwargs):
     """"""HERE Provider
-    
+
     :param location: Your search location you want geocoded.
     :param app_code: (optional) use your own Application Code from HERE.
     :param app_id: (optional) use your own Application ID from HERE.
@@ -185,7 +185,7 @@ def nokia(location, **kwargs):
 
 def tomtom(location, **kwargs):
     """"""TomTom Provider
-    
+
     :param location: Your search location you want geocoded.
     :param key: (optional) use your own API Key from TomTom.
     """"""
@@ -193,7 +193,7 @@ def tomtom(location, **kwargs):
 
 def mapquest(location, **kwargs):
     """"""MapQuest Provider
-    
+
     :param location: Your search location you want geocoded.
     :param key: (optional) use your own API Key from MapQuest.
     :param method: (default=geocode) Use the following:
@@ -204,7 +204,7 @@ def mapquest(location, **kwargs):
 
 def osm(location, **kwargs):
     """"""OSM Provider
-    
+
     :param location: Your search location you want geocoded.
     :param url: Custom OSM Server URL location (ex: http://nominatim.openstreetmap.org/search)
     """"""
@@ -236,7 +236,7 @@ def ip(location, **kwargs):
 
 def canadapost(location, **kwargs):
     """"""CanadaPost Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     :param ``key``: (optional) use your own API Key from CanadaPost Address Complete.
     """"""
@@ -244,7 +244,7 @@ def canadapost(location, **kwargs):
 
 def postal(location, **kwargs):
     """"""CanadaPost Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     :param ``key``: (optional) use your own API Key from CanadaPost Address Complete.
     """"""
@@ -252,7 +252,7 @@ def postal(location, **kwargs):
 
 def geonames(location, **kwargs):
     """"""GeoNames Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     :param ``username``: (required) needs to be passed with each request.
     """"""
",add missing docstrings,docs(geocoding): update function parameter documentation for consistency and clarity,Semantic,"The new message provides specific context about the change—updating documentation for consistency and clarity—indicating a semantic improvement in meaning and usability, rather than just a cosmetic or trivial change.",1.0,5.0,5.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes in the diff. While the diff shows a consistent removal of empty lines and trailing whitespace in docstring comments (e.g., removing empty lines after docstrings), the change is not merely about trailing whitespace—it involves cleaning up formatting in documentation comments across multiple functions. A more descriptive message such as 'Standardized and cleaned up docstring formatting and removed redundant blank lines' would better reflect the scope and intent. The current message fails to provide context about what was changed or why, making it insufficient for understanding the impact of the commit.","The commit message 'add missing docstrings' accurately reflects the change made in the diff. The diff shows that multiple function docstrings were updated or added, particularly in the form of consistent parameter descriptions and formatting (e.g., adding `:param` entries, fixing spacing, and improving clarity). Although the content of the docstrings is minimal and repetitive, they are now properly structured and aligned with Python docstring conventions. The change is focused, clear, and directly addresses the issue of missing or incomplete documentation. Therefore, the commit message is appropriate and sufficient for the change.","The commit message accurately reflects the changes in the code diff, which consists of uniformly removing empty lines after function docstrings and standardizing parameter documentation formatting (e.g., consistent use of backticks, clearer parameter descriptions, and improved consistency across providers). The changes are focused solely on documentation clarity and consistency, aligning with the commit message's intent. The diff shows no functional or structural changes, only formatting and documentation improvements, making the message both precise and relevant. This is an excellent example of a clear, specific, and appropriately scoped commit message."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/arcgis.py,"@@ -107,4 +107,4 @@ class Arcgis(Base):
 
 if __name__ == '__main__':
     g = Arcgis('453 Booth, Ottawa, ON')
-    g.debug()
\ No newline at end of file
+    g.debug()
",update arcgis.py,fix(backend): add missing debug call in main,Corrective,"The new message indicates a fix for a missing debug call, which addresses a functional or logical issue in the code, rather than a cosmetic change.",1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is misleading and inaccurate. The diff shows no trailing whitespace changes—only a missing newline at the end of the file, which is not the same as trailing whitespace. The fix adds a line ending, not removes trailing spaces. A more accurate message would reflect the actual change, such as 'Fix missing newline at end of file.' Therefore, the commit message is factually incorrect and does not properly describe the change, resulting in a poor score.","The commit message 'update arcgis.py' is overly vague and provides no context about what was changed or why. While the diff shows a simple addition of a missing `g.debug()` call, the commit message fails to convey the significance of the change. A better message would specify the addition of a debug call to enable debugging output when initializing an ArcGIS instance. Thus, it scores a 2 for lacking specificity and context.","The commit message correctly identifies the issue as a missing debug call and references the backend component, which is appropriate. However, it lacks context about why the debug call was necessary or what the expected outcome was. The fix is small and straightforward, so the message is accurate but minimal in detail. It does not fully explain the impact or rationale, which limits its completeness. Thus, it is functional but not excellent."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/base.py,"@@ -40,15 +40,15 @@ class Base(object):
     def __repr__(self):
         if self.address:
             return ""<[{0}] {1} - {2} [{3}]>"".format(
-                self.status, 
-                self.provider.title(), 
-                self.method.title(), 
+                self.status,
+                self.provider.title(),
+                self.method.title(),
                 self.address
             )
         else:
             return ""<[{0}] {1} - {2}>"".format(
-                self.status, 
-                self.provider.title(), 
+                self.status,
+                self.provider.title(),
                 self.method.title()
             )
 
@@ -62,9 +62,9 @@ class Base(object):
         self.proxies = kwargs.get('proxies', '')
         try:
             r = self.rate_limited_get(
-                self.url, 
-                params=self.params, 
-                headers=self.headers, 
+                self.url,
+                params=self.params,
+                headers=self.headers,
                 timeout=self.timeout,
                 proxies=self.proxies
             )
@@ -198,7 +198,7 @@ class Base(object):
         # GeoJSON bbox
         self.westsouth = [west, south]
         self.eastnorth = [east, north]
-        
+
         if bool(south and east and north and west):
             bbox = {
                 'northeast': [north, east],
@@ -295,7 +295,7 @@ class Base(object):
     def wkt(self):
         if self.ok:
             return 'POINT({x} {y})'.format(x=self.x, y=self.y)
-        return '' 
+        return ''
 
     @property
     def latlng(self):
",add missing docstrings,fix(base): remove redundant lines and fix formatting,Cosmetic,"The change focuses on removing redundant lines and improving formatting, which are stylistic adjustments rather than functional or semantic changes.",1.0,1.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows no actual trailing whitespace changes—instead, it contains consistent formatting improvements like removing redundant lines, fixing formatting of string interpolations, and removing empty lines. These are not trivial whitespace fixes but meaningful code formatting and consistency improvements. The commit message fails to accurately reflect the actual changes made, thus misrepresenting the work done. A more accurate message would describe the actual changes, such as 'Fixed formatting and consistency in string formatting and removed redundant lines in Base class.'","The commit message 'add missing docstrings' is highly misleading given the diff. The diff shows no actual docstrings being added — instead, it contains redundant or duplicated lines in formatting (e.g., repeated code with identical content) and whitespace changes. There are no docstrings present or added in the code. The message implies a change that did not occur. Therefore, the commit message is inaccurate and does not reflect the actual changes, making it poor.","The commit message 'fix(base): remove redundant lines and fix formatting' is generally accurate and appropriately scoped. It correctly identifies the type of change (fix) and the affected component (base). However, the message is vague about what was actually fixed — it mentions 'remove redundant lines' and 'fix formatting', but the diff shows only minimal changes (mostly redundant or duplicated lines removed, with consistent formatting improvements). While the changes are valid, the message lacks specificity (e.g., no mention of the exact issue, like duplicated code or inconsistent formatting), which reduces its clarity and usefulness for future developers. Therefore, it's functional but not excellent."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/bing.py,"@@ -88,7 +88,7 @@ class Bing(Base):
     def lat(self):
         coord = self.parse['point']['coordinates']
         if coord:
-            return coord[0] 
+            return coord[0]
 
     @property
     def lng(self):
@@ -149,4 +149,4 @@ class Bing(Base):
 if __name__ == '__main__':
     #g = Bing('1552 Payette dr, Ottawa ON')
     g = Bing('Ottawa ON')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing property in bing.py,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which falls under corrective changes rather than cosmetic or trivial updates.",2.0,2.0,2.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes. The diff shows only a minor correction of a trailing newline and a redundant line in a return statement (which is a duplicate line), not a general 'trailing whitespace fix'. The message fails to describe the specific changes made, the context, or their impact. A better message would specify the actual changes, such as 'Fixed redundant return statement and added missing newline in debug call.' Therefore, it receives a score of 2 for being technically incorrect and insufficiently descriptive.","The commit message 'add missing property in bing.py' is vague and does not accurately reflect the changes in the diff. The diff shows a typo fix (redundant return statement) and a missing newline at the end of a file, not the addition of a missing property. The message misrepresents the actual changes, making it misleading and insufficient for understanding the purpose of the commit. A better message would describe the fix of a redundant return statement and the correction of a missing newline, which are the actual changes.","The commit message 'fix: rectification failed' is vague and does not accurately describe the actual changes in the diff. The diff shows trivial fixes—such as removing a redundant line break and correcting a typo in a return statement (redundant `return coord[0]` with a typo in the original). There is no mention of 'rectification' or any actual failure in the code. The message fails to explain what was fixed or why, making it unclear and unhelpful for understanding the change's purpose. A better message would describe the actual fix, such as 'fix: removed redundant return statement in lat() method'."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/bing_reverse.py,"@@ -43,4 +43,4 @@ class BingReverse(Bing, Base):
 
 if __name__ == '__main__':
     g = BingReverse([45.4049053, -75.7077965])
-    g.debug()
\ No newline at end of file
+    g.debug()
",update bing_reverse.py,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which falls under corrective changes rather than cosmetic or trivial updates.",1.0,2.0,2.0,"The commit message 'Trailing whitespace fixes.' is highly misleading and inaccurate given the diff. The diff shows a line added with a trailing newline, not a trailing whitespace fix. There is no trailing whitespace being removed or fixed—instead, a missing newline is being added. The message does not reflect the actual change and misrepresents the nature of the modification. A more accurate message would describe the addition of a newline or the correction of a missing newline, not a 'trailing whitespace fix'. Therefore, the commit message is poor and does not match the actual change.","The commit message 'update bing_reverse.py' is extremely vague and provides no context about what was changed or why. The diff shows a simple addition of a missing newline after the debug() call, which is a minor formatting fix. A better message would specify the change (e.g., 'Fix missing newline in debug() call') and its impact. As it stands, the message fails to communicate the nature or significance of the change, resulting in a low score.","The commit message 'fix: rectification failed' is vague and does not clearly describe the actual change or problem being addressed. The diff shows a simple fix: adding a missing newline after the `g.debug()` call, which is likely a formatting issue. However, 'rectification failed' is not a meaningful or descriptive term in this context and does not indicate what was fixed or why. A better message would specify the issue, such as 'fix: missing newline in debug call'. Therefore, the message is technically correct in being a 'fix' but lacks clarity and specificity, resulting in a low score."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/canadapost.py,"@@ -51,7 +51,7 @@ class Canadapost(Base):
     """"""
     provider = 'canadapost'
     method = 'geocode'
-    
+
     def __init__(self, location, **kwargs):
         self.url = 'https://ws1.postescanada-canadapost.ca/AddressComplete'
         self.url += '/Interactive/RetrieveFormatted/v2.00/json3ex.ws'
@@ -64,7 +64,7 @@ class Canadapost(Base):
         if not self.key:
             self._retrieve_key()
         self._retrieve_id()
-        
+
         # Define parameters
         self.params = {
             'Key': self.key,
@@ -115,7 +115,7 @@ class Canadapost(Base):
             items = None
             self.status_code = 404
             self.error = 'ERROR - URL Connection'
-    
+
         if items:
             items = items[0]
             item_id = items['Id']
@@ -174,4 +174,4 @@ class Canadapost(Base):
 
 if __name__ == '__main__':
     g = Canadapost(""453 Booth Street, Ottawa"")
-    g.debug()
\ No newline at end of file
+    g.debug()
",update canadapost.py,fix(geocode): remove empty lines and add missing debug call,Corrective,"The change removes empty lines and adds a missing debug call, which addresses a functional gap in the geocode logic, improving correctness rather than just appearance.",1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows only whitespace changes (spaces and newlines) at the end of lines, but these are not actual trailing whitespace fixes—rather, they appear to be formatting adjustments or accidental line endings. More importantly, the changes are minimal and do not represent a meaningful code change or fix. A better commit message would reflect the actual intent, such as 'Remove trailing whitespace and fix missing newline in debug call.' The message fails to convey any real technical impact, and the changes themselves are trivial. Therefore, it is poor in both clarity and relevance.","The commit message 'update canadapost.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the changes. While the diff shows that whitespace (empty lines) and a missing newline at the end of the file were removed, these are minor formatting changes. A better commit message would specify the nature of the changes, such as 'Remove empty lines and fix missing newline in canadapost.py for consistency'. As it stands, the message offers no actionable insight and fails to convey the purpose or significance of the update, making it poorly informative.","The commit message accurately reflects the changes in the diff: it removes empty lines and adds a missing `debug()` call. However, it lacks specific context about why the debug call was necessary or what the issue was prior to this fix. While the message is clear and concise, it does not provide enough detail to fully explain the impact or intent of the change, which limits its completeness. Therefore, it is functional but not excellent."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/cli.py,"@@ -33,7 +33,7 @@ def cli():
     for item in input:
         item = item.strip()
         g = get(item, provider=args.provider)
-        
+
         if args.geojson:
             output = g.geojson
         elif args.osm:
@@ -45,5 +45,5 @@ def cli():
             params = {'indent': 4}
         else:
             params = {}
-        
-        args.outfile.write(""{}\n"".format(json.dumps(output, **params)))
\ No newline at end of file
+
+        args.outfile.write(""{}\n"".format(json.dumps(output, **params)))
",add osm support to the command line,fix(cli): remove empty lines and fix json output writing,Corrective,The change addresses specific issues in CLI behavior—removing empty lines and fixing JSON output writing—indicating functional correctness rather than just appearance or minor adjustments.,1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading and inaccurate given the diff. The diff shows only a removal of empty lines (newlines) and a fix to a missing newline at the end of the file, not trailing whitespace. There is no evidence of trailing whitespace being removed in the code itself. The message fails to describe the actual change, which is a missing newline at the end of the file, and incorrectly attributes the change to 'trailing whitespace'. This misrepresentation makes the commit message poor and unhelpful for understanding the actual change.","The commit message 'add osm support to the command line' is too vague and does not accurately reflect the actual changes in the code. The diff shows that the code already had OSM support and the change is simply removing empty lines and fixing formatting — not adding new OSM functionality. The message misrepresents the scope of the change, making it misleading. A better message would reflect the actual code modification (e.g., 'remove redundant blank lines and fix formatting in CLI output'). Therefore, the score is 2 for being technically incorrect and lacking specificity.","The commit message correctly identifies the intent of the changes—removing empty lines and fixing JSON output writing—but lacks specificity. While it mentions 'fix' and the relevant areas (cli, empty lines, json output), it does not clearly explain what was fixed or why. The diff shows only the removal of empty lines and a minor formatting fix in the output write statement, which is minimal. A better message would specify the exact issue (e.g., 'fix empty lines in cli function and ensure consistent JSON output writing'). As such, the message is accurate but vague, warranting a moderate score."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/elevation.py,"@@ -73,11 +73,11 @@ class Elevation(Base):
     @property
     def elevation(self):
         return self.parse.get('elevation')
-        
+
     @property
     def resolution(self):
         return self.parse.get('resolution')
 
 if __name__ == '__main__':
     g = Elevation([45.123, -76.123])
-    g.debug()
\ No newline at end of file
+    g.debug()
",add resolution property to elevation,fix(elevation): add debug call to test elevation parsing,Semantic,"The new message provides specific context about the change (debug call for elevation parsing) and the affected feature (elevation), indicating a semantic improvement by clarifying the purpose and scope of the fix, rather than just addressing formatting.",1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading and inaccurate. The diff shows no trailing whitespace changes; instead, it removes empty lines and a comment line, and adds a missing newline at the end of the file. The actual changes are about removing empty lines and fixing a missing newline, not trailing whitespace. Therefore, the commit message does not accurately reflect the changes made, making it poor and misleading.","The commit message 'add resolution property to elevation' is too vague and does not accurately reflect the changes in the diff. While a resolution property was added, the diff also shows that an existing elevation property was preserved and a debug call was included. The message misses context about the property being added, the existing structure, and the purpose of the change. A better message would specify that a resolution property was added to the Elevation class, and that a debug call was included for testing. As it stands, the message is incomplete and lacks clarity, warranting a score of 2.","The commit message is relevant and identifies the fix (adding a debug call), but it lacks context about why the debug call was added or what the original issue was. The diff shows a simple addition of a debug call, which suggests it's a test or validation addition, but the message doesn't clearly explain the purpose or the problem being solved. While it correctly uses the 'fix' prefix and includes the component ('elevation'), it is somewhat vague and could be more precise. Therefore, it's functional but not excellent."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/freegeoip.py,"@@ -10,14 +10,14 @@ class FreeGeoIP(Base):
     """"""
     FreeGeoIP.net
     =============
-    freegeoip.net provides a public HTTP API for software developers to 
-    search the geolocation of IP addresses. It uses a database of IP addresses 
-    that are associated to cities along with other relevant information like 
+    freegeoip.net provides a public HTTP API for software developers to
+    search the geolocation of IP addresses. It uses a database of IP addresses
+    that are associated to cities along with other relevant information like
     time zone, latitude and longitude.
 
-    You're allowed up to 10,000 queries per hour by default. Once this 
-    limit is reached, all of your requests will result in HTTP 403, 
-    forbidden, until your quota is cleared. 
+    You're allowed up to 10,000 queries per hour by default. Once this
+    limit is reached, all of your requests will result in HTTP 403,
+    forbidden, until your quota is cleared.
 
     API Reference
     -------------
",add missing quotas,docs(freegeoip): update API description for clarity and consistency,Semantic,"The change updates the API description to improve clarity and consistency, which alters the meaning or intent of the documentation in a more meaningful way than a cosmetic fix.",1.0,1.0,5.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the actual diff. The diff shows only formatting changes—specifically, removal of extra spaces at the end of lines—yet the commit message does not accurately reflect the scope or content of the change. It fails to indicate that the change is purely about formatting and does not describe any functional or structural modification. A more accurate message would have been something like 'Fix formatting in docstring for FreeGeoIP class.' Therefore, the message is poor in terms of clarity, relevance, and transparency, warranting a score of 1.","The commit message 'add missing quotas' is highly vague and does not accurately reflect the actual change. The diff shows a formatting cleanup—removing extra whitespace and line breaks—rather than adding any new quota-related functionality or documentation. The message fails to describe what was actually changed, why it was changed, or how it relates to quotas. A proper commit message should clearly convey the nature and impact of the change. Therefore, it is poor and deserves a score of 1.","The commit message is concise, relevant, and accurately reflects the changes made. The diff shows only formatting improvements—removing extra whitespace and maintaining consistent punctuation and line breaks—without altering content or structure. The message 'docs(freegeoip): update API description for clarity and consistency' correctly identifies the scope (documentation), the component (freegeoip), and the purpose (clarity and consistency). These changes enhance readability and adherence to style, which aligns perfectly with the actual diff. Thus, the commit message is excellent in terms of specificity, accuracy, and relevance."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/geolytica.py,"@@ -94,4 +94,4 @@ class Geolytica(Base):
 
 if __name__ == '__main__':
     g = Geolytica('1552 Payette dr., Ottawa')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at the end of file,fix(geolytica): add missing debug call,Corrective,"The new message indicates a missing debug call that was likely causing issues in the code flow, suggesting a functional or logical fix rather than a cosmetic or trivial change.",1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows a missing newline at the end of the file, not trailing whitespace. Trailing whitespace is typically found at the end of lines, not in the absence of a newline. This commit message misrepresents the actual change, leading to confusion. Therefore, it is poor and should receive a score of 1.","The commit message correctly identifies the issue—a missing newline at the end of the file—but it lacks context about why this matters or how it affects the codebase. While the fix is technically valid and minor, the message is overly simplistic and does not convey the significance or impact of the change. A better message would explain that this is a formatting standard (e.g., 'enforces consistent file endings per project guidelines'), which would improve clarity and usefulness for other developers.","The commit message correctly identifies the issue as a missing debug call and specifies the affected component (geolytica). However, it lacks context about why the debug call was necessary or what the expected behavior was. The fix is straightforward, but the message could be more informative (e.g., explaining the purpose of the debug call or the impact of the change). Therefore, it is functional but not fully detailed, earning a moderate score."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/geonames.py,"@@ -85,7 +85,7 @@ class Geonames(Base):
     @property
     def lng(self):
         return self.parse.get('lng')
-    
+
     @property
     def address(self):
         return self.parse.get('name')
@@ -116,4 +116,4 @@ class Geonames(Base):
 
 if __name__ =='__main__':
     g = Geonames('Ottawa, Ontario')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing docstring,fix(geonames): add missing debug call in main,Corrective,"The new message indicates a fix for a missing debug call, which addresses a functional or logical issue in the code, rather than a cosmetic or trivial change.",1.0,1.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading and inaccurate given the diff. The diff shows no trailing whitespace changes—only a line ending adjustment (removal of a newline) and a comment removal (the comment line with 'g.debug()' was previously present and now is restored). The change is not about trailing whitespace, which would involve whitespace at the end of lines. The commit message fails to describe the actual change, misrepresents the diff, and does not reflect the real purpose of the update. Therefore, it is poor and should receive a score of 1.","The commit message 'add missing docstring' is highly misleading given the actual changes in the diff. The diff shows the removal of empty lines and the addition of a line to call `g.debug()` at the end of the script, not the addition of any docstrings. There is no documentation or comment added, and the change is unrelated to docstrings. Therefore, the commit message does not accurately reflect the changes and is therefore poor.","The commit message correctly identifies the issue and provides a concise summary of the fix: adding a missing debug call in the main block. However, it lacks context about why the debug call was missing or what the expected behavior is. While the fix is small and relevant, the message could be more informative (e.g., mentioning that the debug call was previously omitted or that it aids in testing). It is accurate and clear enough to be understandable, but not fully detailed or explanatory, which limits its completeness."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/google_reverse.py,"@@ -40,4 +40,4 @@ class GoogleReverse(Google, Base):
 
 if __name__ == '__main__':
     g = GoogleReverse([45.4049053, -75.7077965])
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at end of file,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that needs to be addressed, which falls under corrective changes rather than cosmetic or trivial updates.",1.0,2.0,2.0,"The commit message 'Trailing whitespace fixes.' is misleading and inaccurate. The diff shows no trailing whitespace being removed; instead, a line is added missing a newline at the end, which is not a trailing whitespace issue. The change appears to be adding a missing newline after the debug() call, not fixing trailing whitespace. Therefore, the commit message does not accurately reflect the actual change, making it poor and misleading.","The commit message correctly identifies the issue—a missing newline at the end of the file—but fails to provide context about why it matters or how it affects the codebase. While the fix is technically accurate, the message is overly minimal and lacks any indication of the impact or relevance of the change. A better message would explain that the newline is required for consistent formatting or to avoid issues with certain tools or versions of Python. Thus, it's only marginally sufficient, earning a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe the actual change or problem being addressed. The diff shows a simple fix: adding a missing newline at the end of a line in a debug call, which is a minor formatting issue. The term 'rectification failed' is ambiguous and does not indicate what was broken or why the fix was needed. A better message would specify the issue (e.g., 'fix: missing newline in debug call') and the context. Therefore, it receives a score of 2 for being technically incorrect and lacking clarity."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/here.py,"@@ -9,8 +9,8 @@ class Here(Base):
     """"""
     HERE Geocoding REST API
     =======================
-    Send a request to the geocode endpoint to find an address 
-    using a combination of country, state, county, city, 
+    Send a request to the geocode endpoint to find an address
+    using a combination of country, state, county, city,
     postal code, district, street and house number.
 
     API Reference
",add missing docstring,docs(here): update geocoding api description,Semantic,"The new message provides specific context about updating a documentation entry for the geocoding API, which changes the semantic meaning by clarifying what was modified, unlike the generic 'trailing whitespace fixes'.",1.0,3.0,3.0,"The commit message 'Trailing whitespace fixes.' is overly generic and does not accurately reflect the actual changes in the diff. The diff shows a removal of trailing spaces in a docstring, but the commit message fails to specify what was changed or why. It also lacks context about the impact or scope of the change. A better message would describe the specific improvement, such as 'Removed trailing whitespace from docstring for clarity and consistency.' Therefore, the message is poor in specificity and usefulness.","The commit message 'add missing docstring' is accurate and relevant to the change, as the diff shows a docstring being updated to fix formatting and consistency (removing extra spaces and improving readability). However, it lacks detail about what was actually changed or why it matters. While it correctly identifies the nature of the change, it does not provide context about the improvement in clarity or structure, which would make it more valuable for understanding the intent. Thus, it is functional but not fully descriptive.","The commit message is relevant and indicates a documentation update, which aligns with the change in the code. However, it is somewhat generic and lacks specific details about what was changed or why. While it correctly identifies the scope ('docs(here): update geocoding api description'), it does not clearly convey the nature of the update (e.g., formatting, clarity, content changes). The diff shows a minor formatting cleanup (removal of extra spaces), so the message could be more precise. Therefore, it is adequate but not excellent."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/here_reverse.py,"@@ -9,8 +9,8 @@ class HereReverse(Base):
     """"""
     HERE Geocoding REST API
     =======================
-    Send a request to the geocode endpoint to find an address 
-    using a combination of country, state, county, city, 
+    Send a request to the geocode endpoint to find an address
+    using a combination of country, state, county, city,
     postal code, district, street and house number.
 
     API Reference
",add missing docstring,docs(here_reverse): update geocoding endpoint description,Semantic,"The new message provides specific context about the change (updating a geocoding endpoint description in documentation) and identifies the affected file, which adds semantic clarity and purpose compared to the generic 'Trailing whitespace fixes'.",1.0,3.0,3.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes in the code diff. The diff shows a minor formatting change—removal of trailing spaces in a docstring—yet the commit message fails to specify what was changed or why. A better message would describe the specific improvement, such as 'Fixed trailing whitespace in docstring for HereReverse class.' Given the lack of detail and misalignment with the actual change, the message is poor and warrants a score of 1.","The commit message 'add missing docstring' is accurate and relevant to the change, as the diff shows a docstring being updated to remove redundant whitespace and improve formatting. However, it lacks detail about what was actually changed or why — for example, it doesn't specify that the docstring was cleaned up or that redundant spaces were removed. A better message would include more context about the improvement (e.g., 'fix formatting in docstring for consistency'). Thus, while the message is correct in intent, it is minimal and could be more informative, resulting in a moderate score.","The commit message is relevant and indicates a documentation update, which aligns with the diff showing a minor formatting improvement in the docstring. However, it lacks specificity—such as which part was changed or why the update matters. While it correctly identifies the file and type of change, it does not fully capture the nature of the improvement (e.g., removing redundant spaces or improving clarity). A more detailed message would have been better, so it earns a moderate score rather than excellent."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/location.py,"@@ -61,7 +61,7 @@ class Location(object):
             lng = self._convert_float(location[1])
             condition_1 = isinstance(lat, float)
             condition_2 = isinstance(lng, float)
-            
+
             # Check if input are Floats
             if bool(condition_1 and condition_2):
                 condition_3 = lat <= 90 and lat >= -90
",update location.py,fix(location): remove unnecessary empty line,Cosmetic,"The change removes an unnecessary empty line, which is a formatting adjustment rather than a functional or semantic change.",1.0,2.0,2.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows a removal of a blank line (a newline) and a comment block, not trailing whitespace. There is no evidence of trailing whitespace being removed. The message does not accurately reflect the changes made, making it incorrect and unhelpful. Therefore, it receives a low score.","The commit message 'update location.py' is extremely vague and provides no information about what was changed or why. While the diff shows a minor formatting change (removal of a blank line), the commit message fails to convey the actual significance of the update. A better message would describe the change, such as 'Remove unnecessary blank line and tighten latitude/longitude validation logic in Location class'. Therefore, it receives a score of 2 for lacking specificity and context.","The commit message 'fix(location): remove unnecessary empty line' is technically accurate in that it describes a minor formatting change. However, it lacks context about why the line was removed or what the original code looked like, which makes it insufficient for understanding the change's impact. While the diff shows a simple removal of an empty line, the commit message does not clearly explain the reasoning or the intent behind the change, which is essential for maintainability. Therefore, it is only moderately informative and deserves a score of 2."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/mapquest.py,"@@ -12,8 +12,8 @@ class Mapquest(Base):
     MapQuest
     ========
     The geocoding service enables you to take an address and get the
-    associated latitude and longitude. You can also use any latitude 
-    and longitude pair and get the associated address. Three types of 
+    associated latitude and longitude. You can also use any latitude
+    and longitude pair and get the associated address. Three types of
     geocoding are offered: address, reverse, and batch.
 
     API Reference
",mapquest docs,docs(geocoding): fix typo in address and longitude description,Corrective,"The change corrects a typo in the documentation, which improves accuracy and clarity of the geocoding description, addressing a factual error.",1.0,2.0,4.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows a minor correction of formatting (removing a space after 'latitude' and 'longitude'), which is not a trailing whitespace fix but a small grammatical or stylistic adjustment. Trailing whitespace fixes typically involve removing spaces at the end of lines, which is not evident here. Additionally, the change is a subtle text correction, not a significant code or functionality change. Therefore, the commit message fails to accurately describe the actual change, making it poor and misleading.","The commit message 'mapquest docs' is overly vague and provides no details about the specific changes or context. While it indicates a documentation-related change, it lacks information on what was updated, why, or how it improves the documentation. A better message would specify the nature of the change (e.g., 'updated Mapquest class documentation to clarify geocoding types') and the impact. Therefore, it receives a score of 2 for being minimally informative but insufficiently detailed.","The commit message correctly identifies the nature of the change as a documentation fix and specifically mentions a typo in the geocoding description. The message is clear, concise, and relevant to the diff, which shows a minor grammatical correction (removing unnecessary space and improving flow in the description). However, it could be slightly more precise by specifying exactly what was changed (e.g., 'removed extra space after 'and'') to demonstrate deeper attention to detail. Overall, it is accurate and useful, earning a strong 4."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/mapquest_reverse.py,"@@ -12,14 +12,14 @@ class MapquestReverse(Mapquest, Base):
     MapQuest
     ========
     The geocoding service enables you to take an address and get the
-    associated latitude and longitude. You can also use any latitude 
-    and longitude pair and get the associated address. Three types of 
+    associated latitude and longitude. You can also use any latitude
+    and longitude pair and get the associated address. Three types of
     geocoding are offered: address, reverse, and batch.
 
     API Reference
     -------------
     http://www.mapquestapi.com/geocoding/
-    
+
     """"""
     provider = 'mapquest'
     method = 'reverse'
",add mapquestreverse documentation,docs(scope): update reverse geocoding description,Semantic,"The new message provides more specific and meaningful context about the change by indicating it updates documentation related to reverse geocoding, which improves clarity and intent compared to the vague 'trailing whitespace fixes'.",1.0,3.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the actual diff. The diff shows only a minor formatting change: removal of a line break and a dash after 'You can also use any latitude' and 'Three types of'. There is no actual trailing whitespace being fixed. The message does not accurately reflect the changes made, which makes it misleading and unhelpful. A proper commit message should describe the actual change in meaningful terms. Therefore, the score is 1 (Poor).","The commit message 'add mapquestreverse documentation' is vague and lacks detail about what was actually changed or improved. While it correctly identifies the action (adding documentation), it does not specify the scope, content, or significance of the change. The diff shows only minor formatting improvements and corrections in documentation text (e.g., fixing spacing, punctuation, and consistency), which are more substantial than a simple 'add documentation' statement. A better message would mention specific fixes or enhancements, such as 'fix formatting and grammar in MapquestReverse class documentation'. Therefore, the message is accurate but under-specific, earning a moderate score.","The commit message is relevant and identifies the scope (documentation) and the specific change (updating reverse geocoding description). However, it lacks detail about what exactly was changed—such as the specific wording or improvements made. While it correctly identifies the type of change and scope, it does not fully convey the nature or impact of the update, which limits its completeness. A score of 3 reflects a generally adequate but somewhat vague message."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/opencage.py,"@@ -27,7 +27,7 @@ class OpenCage(Base):
     [x] addr:state
     [x] addr:country
     [x] addr:postal
-    
+
     Attributes (27/29)
     ------------------
     [x] DMS
@@ -89,7 +89,7 @@ class OpenCage(Base):
         licenses = self.parse['licenses']
         if licenses:
             self.parse['licenses'] = licenses[0]
-    
+
     @property
     def lat(self):
         return self.parse['geometry'].get('lat')
",add missing comments,fix(OpenCage): remove empty lines and fix property documentation,Corrective,"The change removes empty lines and fixes property documentation, which addresses clarity and correctness in the code's documentation, improving maintainability and accuracy.",1.0,2.0,2.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows only whitespace changes (line endings and empty lines), but the actual changes are minimal and do not involve any functional or structural fixes. The message implies a significant code improvement or fix, when in reality, it's just formatting adjustments. A more accurate message would reflect the nature of the change, such as 'Fixed trailing whitespace in OpenCage class documentation and property definitions.' Since the message fails to accurately describe the actual change and gives a false impression of impact, it is poor.","The commit message 'add missing comments' is vague and does not provide specific details about what was changed or why. While the diff shows that several empty lines (comments) were removed or replaced, the actual content of the comments was not added — instead, the code had blank lines that were simply removed. A better message would specify the intent, such as 'remove redundant blank lines in docstrings and attribute descriptions to improve code clarity.' Since the message fails to convey meaningful context or impact, it is only minimally informative and thus scores a 2.","The commit message is technically accurate in stating that empty lines were removed and a property documentation was fixed, but it lacks specificity and context. It does not explain what was actually changed, why it was necessary, or how it improves the code. The changes in the diff show only line deletions (empty lines), which suggests a simple formatting cleanup, but the message fails to convey the significance or impact. A better message would clarify that empty lines were removed for code formatting consistency, and that the `lat` property documentation was improved for clarity. As such, the message is minimally informative and lacks meaningful detail, warranting a score of 2."
533b8d7b24cf6d760fc44879b2bf2419470e7bb4,Trailing whitespace fixes.,geocoder/ottawa.py,"@@ -14,7 +14,7 @@ class Ottawa(Base):
     address to those present in the reference material. Addresses come in many forms,
     ranging from the common address format of a house number followed by the street name
     and succeeding information to other location descriptions such as postal zone
-    or census tract. An address includes any type of information that distinguishes a place. 
+    or census tract. An address includes any type of information that distinguishes a place.
 
     API Reference
     -------------
@@ -60,7 +60,7 @@ class Ottawa(Base):
             'SingleLine': location.replace(', Ottawa, ON',''),
             'f': 'json',
             'outSR': 4326,
-        } 
+        }
         self._initialize(**kwargs)
 
     def _exceptions(self):
",add missing docstring to ottawa,fix(docs): fix typo in address description,Cosmetic,"The change corrects a typo in documentation, which is a minor cosmetic improvement rather than a functional or structural fix.",2.0,3.0,3.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes. While the diff shows only minor formatting changes (like fixing a trailing comma and removing a space), the message fails to specify what was actually changed or why. A better message would indicate the specific fix (e.g., 'Fix trailing comma and whitespace in docstring and API parameters'). Since the commit message lacks detail and context, it earns a score of 2 — barely sufficient but not clear or meaningful.","The commit message 'add missing docstring to ottawa' is accurate and relevant to the changes, as the diff shows a minor correction to a docstring (a space issue in a comment line). However, it is overly generic and does not specify what exactly was fixed or why it matters. A more detailed message (e.g., 'fix minor whitespace in docstring for Ottawa class address description') would be better. Thus, it is functional but lacks precision, earning a mid-level score.","The commit message correctly identifies the change as a documentation fix and specifically mentions a typo in the address description. However, the message is very minimal and lacks context—such as which file, line, or exact nature of the typo—making it difficult to understand the scope of the change. While it is accurate in stating the intent, it does not provide enough detail to be considered excellent. It is not poor, as the core intent is clear, but it falls short of being comprehensive or actionable for a reviewer."
bc582424c5c884da2e966f5de39d5c920e6a1dbb,Some PEP 8 fixes.,geocoder/api.py,"@@ -34,8 +34,8 @@ def get(location, **kwargs):
     :param ``reverse``: Use True to apply a reverse geocoding to a LatLng input.
     """"""
     kwargs.setdefault('method', 'geocode')
-    provider = kwargs.get('provider','').lower().strip()
-    method = kwargs.get('method','').lower().strip()
+    provider = kwargs.get('provider', '').lower().strip()
+    method = kwargs.get('method', '').lower().strip()
     options = {
         'osm': {'geocode': Osm},
         'here': {
",update geocoding.py,fix(utils): normalize provider and method to lowercase,Semantic,"The change normalizes provider and method names to lowercase, which alters the semantic meaning and behavior of the code (e.g., consistency in naming), making it more predictable and standardized across the codebase.",2.0,2.0,3.0,"The commit message 'Some PEP 8 fixes.' is overly vague and does not accurately reflect the actual changes. The diff shows only minor, redundant changes (duplicated or redundant empty string defaults) with no actual PEP 8 violations. The changes are trivial and stylistic, but the message fails to specify what was actually fixed or why. A more descriptive message, such as 'Fixed redundant default values in kwargs for provider and method to improve consistency and readability', would be more accurate and useful.","The commit message 'update geocoding.py' is extremely vague and provides no information about what was actually changed or why. While the diff shows minor, redundant changes (duplicate lines with identical content), the message fails to convey the significance or context of the update. A better message would specify the nature of the change, such as 'Fix redundant default value assignments in geocoding.py' or 'Standardize string handling in geocoding parameters'. As it stands, the message offers no actionable insight, resulting in a low score.","The commit message is accurate and relevant to the changes in the code, as it correctly identifies that the provider and method values are being normalized to lowercase. However, it lacks context about why this change was necessary (e.g., consistency, handling edge cases, or compatibility), and does not mention the specific issue it resolves. While the message is clear and concise, it is somewhat minimalistic and does not fully convey the significance or intent behind the change, which limits its completeness."
bc582424c5c884da2e966f5de39d5c920e6a1dbb,Some PEP 8 fixes.,geocoder/base.py,"@@ -10,11 +10,12 @@ from .haversine import haversine
 
 
 class Base(object):
-    _exclude = ['parse', 'json', 'url', 'fieldnames', 'help', 'debug', 'short_name',
-                'api', 'content', 'params', 'status_code', 'street_number', 'method',
-                'api_key', 'key', 'id', 'x', 'y', 'latlng', 'headers', 'timeout',
-                'geometry', 'wkt','locality', 'province','rate_limited_get', 'osm',
-                'route', 'properties','geojson','tree','error', 'proxies', 'road']
+    _exclude = ['parse', 'json', 'url', 'fieldnames', 'help', 'debug',
+                'short_name', 'api', 'content', 'params', 'status_code',
+                'street_number', 'method', 'api_key', 'key', 'id', 'x', 'y',
+                'latlng', 'headers', 'timeout', 'geometry', 'wkt', 'locality',
+                'province', 'rate_limited_get', 'osm', 'route',
+                'properties', 'geojson', 'tree', 'error', 'proxies', 'road']
     fieldnames = []
     error = None
     status_code = None
@@ -116,7 +117,7 @@ class Base(object):
         count = 0
         for key in self.osm:
             if 'addr:' in key:
-                if self.json.get(key.replace('addr:','')):
+                if self.json.get(key.replace('addr:', '')):
                     print('- [x] {0}'.format(key))
                     count += 1
                 else:
",add docs for osm/route.py,fix(base): remove missing comma from _exclude list,Cosmetic,"The change removes a missing comma in a list, which is a minor formatting issue and does not affect functionality or semantics, aligning with PEP 8 style guidelines.",2.0,1.0,2.0,"The commit message 'Some PEP 8 fixes' is overly vague and does not accurately reflect the actual changes. The diff shows a minor correction to a list of excluded attributes, which is not a PEP 8 issue (PEP 8 relates to code style, not attribute exclusion). Additionally, there is no actual PEP 8 violation being fixed—only a formatting inconsistency in the list (a missing comma) that could be considered a style issue. However, the message fails to specify what was actually changed or why. A more accurate message would describe the specific change, such as 'Fixed missing comma in _exclude list to maintain consistent formatting.' Therefore, the message is misleading and lacks clarity, warranting a score of 2.","The commit message 'add docs for osm/route.py' is highly misleading and does not reflect the actual changes in the code diff. The diff shows a minor correction to a list of excluded attributes in the Base class and a small change in a loop condition, with no documentation additions. There is no mention of documentation, and the changes are purely code-level adjustments. Therefore, the commit message is inaccurate and irrelevant to the actual work done, making it poor.","The commit message is technically correct in that it addresses a missing comma in the `_exclude` list, but it is overly simplistic and lacks context. The diff shows that the comma was actually removed, not added — the original list had a missing comma after 'road' (before the closing bracket), and the fix correctly removes it. However, the message fails to mention that this was a syntax fix for a list, and it does not clarify why this matters (e.g., preventing a syntax error or improving code readability). A better message would explicitly state 'fix syntax error: missing comma in _exclude list'. As such, while the message is accurate, it is insufficiently detailed or precise, warranting a score of 2."
bc582424c5c884da2e966f5de39d5c920e6a1dbb,Some PEP 8 fixes.,geocoder/cli.py,"@@ -13,14 +13,23 @@ def peek(iterable):
 
 def cli():
     parser = argparse.ArgumentParser(description=""Geocode an arbitrary number of strings from Command Line."")
-    parser.add_argument('input', type=str, nargs=""*"", help=""Filename(s) or strings to be geocoded"")
-    parser.add_argument('-p', '--provider', help=""provider (choose from: bing,""+\
-	""geonames, google, mapquest, nokia, osm, tomtom, geolytica, arcgis, yahoo)"", default='bing')
-    parser.add_argument('-o', '--outfile', help=""Output file (default stdout)"", default=sys.stdout)
-    parser.add_argument('--geojson', help=""GeoJSON output format (default json)"", action=""store_true"")
-    parser.add_argument('--json', help=""JSON output format (default json)"", action=""store_true"")
-    parser.add_argument('--osm', help=""OSM output format (default json)"", action=""store_true"")
-    parser.add_argument('--pretty', help=""Prettify JSON output"", action=""store_true"")
+    parser.add_argument('input', type=str, nargs=""*"",
+                        help=""Filename(s) or strings to be geocoded"")
+    parser.add_argument('-p', '--provider',
+                        help=""provider (choose from: bing,""
+	                     ""geonames, google, mapquest, nokia, osm, tomtom, ""
+                             ""geolytica, arcgis, yahoo)"",
+                        default='bing')
+    parser.add_argument('-o', '--outfile', help=""Output file (default stdout)"",
+                         default=sys.stdout)
+    parser.add_argument('--geojson', help=""GeoJSON output format (default json)"",
+                        action=""store_true"")
+    parser.add_argument('--json', help=""JSON output format (default json)"",
+                        action=""store_true"")
+    parser.add_argument('--osm', help=""OSM output format (default json)"",
+                        action=""store_true"")
+    parser.add_argument('--pretty', help=""Prettify JSON output"",
+                        action=""store_true"")
     args = parser.parse_args()
 
     try:
",add support for --pretty and --geojson,docs(cli): improve argument help formatting and consistency,Cosmetic,"The change focuses on improving the formatting and consistency of argument help text in documentation, which is a presentation-level enhancement rather than a functional or semantic change.",2.0,3.0,2.0,"The commit message 'Some PEP 8 fixes.' is overly vague and does not accurately reflect the actual changes. While the code changes involve formatting improvements (like consistent spacing and line breaks), they are not strictly PEP 8 violations—many of these are stylistic enhancements (e.g., line wrapping, indentation, and spacing) that go beyond mere PEP 8 compliance. Additionally, the changes do not represent a minimal or focused fix, and the message fails to specify what was actually improved. A better message would describe the actual changes, such as 'Improved argument parser formatting and consistency with PEP 8 guidelines.' Therefore, the message is under-precise and lacks meaningful detail, warranting a score of 2.","The commit message 'add support for --pretty and --geojson' is partially accurate but lacks context and completeness. While it correctly identifies the addition of two new arguments (--pretty and --geojson), it omits the fact that other arguments (like --json, --osm) were also preserved or updated in the same change, and it does not mention that the argument formatting was improved (e.g., line breaks for readability). A better message would include more detail about the scope of changes. Therefore, it is informative but insufficiently comprehensive, warranting a moderate score.","The commit message claims to improve 'argument help formatting and consistency', but the diff shows only minor whitespace and line break improvements (e.g., better line spacing and alignment in help text). There is no actual change in content or structure that reflects a meaningful improvement in formatting or consistency—only cosmetic adjustments. The message overstates the impact of the changes. Therefore, it is only mildly accurate and lacks specificity or technical depth, warranting a score of 2."
bc582424c5c884da2e966f5de39d5c920e6a1dbb,Some PEP 8 fixes.,geocoder/geonames.py,"@@ -114,6 +114,6 @@ class Geonames(Base):
     def population(self):
         return self.parse.get('population')
 
-if __name__ =='__main__':
+if __name__ == '__main__':
     g = Geonames('Ottawa, Ontario')
     g.debug()
",update geonames.py,fix(core): fix string comparison in if condition,Corrective,"The change addresses a logical error in string comparison within an if condition, which is a bug fix rather than a cosmetic or semantic improvement.",2.0,2.0,1.0,"The commit message 'Some PEP 8 fixes.' is overly vague and does not accurately reflect the actual change. The diff shows only a fix for a string comparison in the if statement (changing `'Ottawa, Ontario'` to `== '__main__'`), which is not a PEP 8 issue. PEP 8 concerns syntax, naming, and formatting, but this change is a typo correction in a string literal (missing quotes), not a formatting fix. Therefore, the message misrepresents the change, making it inaccurate and unhelpful for understanding the actual work done.","The commit message 'update geonames.py' is overly vague and provides no context about what was changed or why. While the diff shows a minor fix in a string comparison (fixing '==' to '=='), the message fails to communicate the actual improvement or purpose of the change. A better message would indicate the fix of a syntax error in the if statement. Therefore, it scores a 2 for lacking specificity and technical context.","The commit message 'fix(core): fix string comparison in if condition' is highly inaccurate and misleading. The diff shows a simple fix of a syntax error (missing underscore in '==' comparison) in the if statement, not a string comparison issue. There is no string comparison being fixed — the original code had a syntax error due to single quotes vs double quotes in the string literal. The commit message fails to describe the actual change, which is a syntax fix, not a string comparison issue. Therefore, it is poor and does not reflect the actual work done."
bc582424c5c884da2e966f5de39d5c920e6a1dbb,Some PEP 8 fixes.,geocoder/mapquest.py,"@@ -58,7 +58,7 @@ class Mapquest(Base):
         self.url = 'http://www.mapquestapi.com/geocoding/v1/address'
         self.location = location
         self.headers = {
-            'referer':'http://www.mapquestapi.com/geocoding/',
+            'referer': 'http://www.mapquestapi.com/geocoding/',
             'host': 'www.mapquestapi.com',
         }
         self.params = {
@@ -150,4 +150,4 @@ class Mapquest(Base):
 
 if __name__ == '__main__':
     g = Mapquest('1552 Payette dr., Ottawa Ontario')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing docstrings,fix(geocoding): correct referer header spacing,Corrective,"The change addresses a specific issue with the referer header spacing, which is a formatting or structural error in the geocoding functionality, thus correcting a bug or inconsistency rather than merely improving appearance or semantics.",2.0,1.0,3.0,"The commit message 'Some PEP 8 fixes.' is overly vague and does not accurately reflect the actual changes. The diff shows only a minor whitespace adjustment (trailing space removal in the 'referer' header) and a missing newline at the end of the file, which are not substantial PEP 8 issues. Additionally, the change is trivial and does not involve any real PEP 8 compliance improvements (e.g., consistent spacing, naming, or formatting). A more descriptive message such as 'Fixed trailing space in headers and added newline to file' would be more accurate and informative. Therefore, the message is misleading and lacks specificity, warranting a low score.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only minor formatting changes—such as fixing a trailing whitespace in the 'referer' header value and adding a missing newline at the end of the file—none of which involve adding or fixing docstrings. The change is purely syntactic and cosmetic, not related to documentation. Therefore, the commit message is misleading and does not reflect the actual changes made, making it poor.","The commit message correctly identifies the issue as a spacing fix in the referer header, which is accurate based on the diff. However, it lacks context about why the spacing matters (e.g., potential impact on API requests or validation), and the change is minimal and trivial. While the message is clear and relevant, it does not fully convey the significance or broader implications of the fix, which limits its completeness. Therefore, it is neither poor nor excellent, but adequately descriptive for a small, straightforward change."
bc582424c5c884da2e966f5de39d5c920e6a1dbb,Some PEP 8 fixes.,geocoder/mapquest_reverse.py,"@@ -28,7 +28,7 @@ class MapquestReverse(Mapquest, Base):
         self.url = 'http://www.mapquestapi.com/geocoding/v1/address'
         self.location = Location(location).latlng
         self.headers = {
-            'referer':'http://www.mapquestapi.com/geocoding/',
+            'referer': 'http://www.mapquestapi.com/geocoding/',
             'host': 'www.mapquestapi.com',
         }
         self.params = {
@@ -43,5 +43,5 @@ class MapquestReverse(Mapquest, Base):
         return bool(self.quality)
 
 if __name__ == '__main__':
-    g = MapquestReverse([45.50,-76.05])
-    g.debug()
\ No newline at end of file
+    g = MapquestReverse([45.50, -76.05])
+    g.debug()
",update mapquest_reverse.py,fix(geocoding): fix typo in latlng coordinate format,Corrective,"The change addresses a specific typo in the latlng coordinate format, which is a functional error affecting correctness, not just appearance or style.",2.0,2.0,2.0,"The commit message 'Some PEP 8 fixes' is overly vague and does not accurately reflect the actual changes. While the diff shows a minor formatting change (removing a missing space in a coordinate), the change is not a full PEP 8 fix—it's a single whitespace adjustment. Additionally, the commit message fails to specify what exactly was fixed, which makes it unhelpful for understanding the purpose of the change. A better message would explicitly state the change, such as 'Fixed missing space in coordinate input for MapquestReverse class.' Thus, the message is minimally accurate but lacks detail and specificity, warranting a score of 2.","The commit message 'update mapquest_reverse.py' is extremely vague and provides no information about what was actually changed or why. While the diff shows minor formatting changes (e.g., adding a space in a coordinate and fixing a newline), these are trivial and contextually insignificant. A better message would specify the nature of the change, such as 'Fix spacing in coordinate input and ensure consistent formatting in MapquestReverse class'. As it stands, the message offers no actionable insight, resulting in a low score.","The commit message correctly identifies a typo in the code (missing space in the coordinate list), but it incorrectly frames the change as a 'fix in latlng coordinate format'. The actual change is a simple whitespace correction in a list literal, not a formatting fix for latlng coordinates. The term 'latlng coordinate format' is misleading and overstates the nature of the change. While the fix is valid, the commit message lacks precision and context, making it less informative than it could be."
bc582424c5c884da2e966f5de39d5c920e6a1dbb,Some PEP 8 fixes.,geocoder/maxmind.py,"@@ -61,7 +61,7 @@ class Maxmind(Base):
             'Referer': 'https://www.maxmind.com/en/geoip_demo',
             'Host': 'www.maxmind.com',
         }
-        self.params = {'demo': 1,}
+        self.params = {'demo': 1}
         self.url = 'https://www.maxmind.com/geoip/v2.0/city_isp_org/{0}'.format(self.location)
         self._initialize(**kwargs)
         self._maxmind_catch_errors()
@@ -145,4 +145,4 @@ class Maxmind(Base):
 
 if __name__ == '__main__':
     g = Maxmind('me')
-    g.debug()
\ No newline at end of file
+    g.debug()
",update maxmind.py,fix(utils): remove unnecessary trailing comma in params dictionary,Cosmetic,"The change removes a trailing comma in a dictionary parameter, which is a minor formatting adjustment and does not affect functionality or semantics.",2.0,2.0,3.0,"The commit message 'Some PEP 8 fixes.' is overly vague and does not accurately reflect the actual changes. The diff shows only minor formatting changes—removing a trailing comma in a dictionary and adding a missing newline at the end of a file—which are not significant PEP 8 violations. PEP 8 specifically does not require trailing commas to be removed in dictionaries (they are allowed and often used in modern Python), and the newline addition is a formatting detail, not a real PEP 8 issue. Therefore, the message misrepresents the scope and nature of the changes. A more accurate message would specify the actual changes, such as 'Fixed trailing comma in params dict and added missing newline to file.'","The commit message 'update maxmind.py' is overly vague and provides no information about what was changed or why. While the diff shows minor fixes—such as removing a trailing comma in a dictionary and adding a missing newline—it would be helpful to know the purpose (e.g., fixing linting, improving consistency, or resolving a bug). A more descriptive message like 'Fix trailing comma and add missing newline in Maxmind.py for code consistency' would be significantly better. As it stands, the message lacks context and technical detail, making it only marginally informative.","The commit message accurately identifies the change as removing a trailing comma in a dictionary, which is a valid and minor code fix. However, it lacks context about why the comma was unnecessary or the impact of the change (e.g., potential linting issues, style consistency). While the fix is correct and the message is clear, it is overly minimal and does not convey the significance or broader implications of the change, which limits its completeness. A score of 3 reflects a generally accurate but under-explained message."
bc582424c5c884da2e966f5de39d5c920e6a1dbb,Some PEP 8 fixes.,geocoder/ottawa.py,"@@ -57,7 +57,7 @@ class Ottawa(Base):
         self.url += 'compositeLocator/GeocodeServer/findAddressCandidates'
         self.location = location
         self.params = {
-            'SingleLine': location.replace(', Ottawa, ON',''),
+            'SingleLine': location.replace(', Ottawa, ON', ''),
             'f': 'json',
             'outSR': 4326,
         }
@@ -116,4 +116,4 @@ class Ottawa(Base):
 
 if __name__ == '__main__':
     g = Ottawa('1552 Payette dr.')
-    g.debug()
\ No newline at end of file
+    g.debug()
",update ottawa.py,fix(geocoding): remove redundant space in address input,Cosmetic,"The change removes a redundant space in address input, which is a minor formatting adjustment rather than a functional or semantic change.",1.0,2.0,3.0,"The commit message 'Some PEP 8 fixes' is overly vague and does not accurately reflect the actual changes. The diff shows only a minor formatting change (removing a newline at the end of a file) and a redundant space removal in a string replacement — neither of which are PEP 8 violations. The change is trivial and unrelated to PEP 8 formatting. Additionally, the commit message fails to describe what was actually changed, making it uninformative. A better message would specify the actual modification, such as 'Fixed trailing newline in debug call and removed redundant space in location string.' Therefore, the message is poor and misrepresents the change.","The commit message 'update ottawa.py' is extremely vague and provides no information about what was changed or why. While the diff shows a minor correction (removing a newline at the end of a file and ensuring consistent string replacement), the message fails to convey the actual impact or context of the changes. A better message would specify the nature of the change, such as 'Fix trailing newline in ottawa.py and ensure consistent string formatting in geocoding parameters.' Therefore, the message is insufficient and only receives a score of 2 for minimal clarity.","The commit message is relevant to the change, as it addresses a potential issue in the address input by removing a redundant space. However, it is slightly misleading because the change is not removing a space — it's replacing a comma followed by 'Ottawa, ON' with the same string, which is identical. The diff shows no actual space removal, only a redundant whitespace in the string replacement. The message implies a fix for a space, but the actual change is trivial and syntactically identical. Thus, it's not entirely accurate or precise, warranting a moderate score rather than excellent."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/api.py,"@@ -132,21 +132,21 @@ def bing(location, **kwargs):
 
 def yahoo(location, **kwargs):
     """"""Yahoo Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     """"""
     return get(location, provider='yahoo', **kwargs)
 
 def geolytica(location, **kwargs):
     """"""Geolytica (Geocoder.ca) Provider
-    
+
     :param location: Your search location you want geocoded.
     """"""
     return get(location, provider='geolytica', **kwargs)
 
 def opencage(location, **kwargs):
     """"""Opencage Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     :param ``key``: (optional) use your own API Key from OpenCage.
     """"""
@@ -154,14 +154,14 @@ def opencage(location, **kwargs):
 
 def arcgis(location, **kwargs):
     """"""ArcGIS Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     """"""
     return get(location, provider='arcgis', **kwargs)
 
 def here(location, **kwargs):
     """"""HERE Provider
-    
+
     :param location: Your search location you want geocoded.
     :param app_code: (optional) use your own Application Code from HERE.
     :param app_id: (optional) use your own Application ID from HERE.
@@ -173,7 +173,7 @@ def here(location, **kwargs):
 
 def nokia(location, **kwargs):
     """"""HERE Provider
-    
+
     :param location: Your search location you want geocoded.
     :param app_code: (optional) use your own Application Code from HERE.
     :param app_id: (optional) use your own Application ID from HERE.
@@ -185,7 +185,7 @@ def nokia(location, **kwargs):
 
 def tomtom(location, **kwargs):
     """"""TomTom Provider
-    
+
     :param location: Your search location you want geocoded.
     :param key: (optional) use your own API Key from TomTom.
     """"""
@@ -193,7 +193,7 @@ def tomtom(location, **kwargs):
 
 def mapquest(location, **kwargs):
     """"""MapQuest Provider
-    
+
     :param location: Your search location you want geocoded.
     :param key: (optional) use your own API Key from MapQuest.
     :param method: (default=geocode) Use the following:
@@ -204,7 +204,7 @@ def mapquest(location, **kwargs):
 
 def osm(location, **kwargs):
     """"""OSM Provider
-    
+
     :param location: Your search location you want geocoded.
     :param url: Custom OSM Server URL location (ex: http://nominatim.openstreetmap.org/search)
     """"""
@@ -236,7 +236,7 @@ def ip(location, **kwargs):
 
 def canadapost(location, **kwargs):
     """"""CanadaPost Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     :param ``key``: (optional) use your own API Key from CanadaPost Address Complete.
     """"""
@@ -244,7 +244,7 @@ def canadapost(location, **kwargs):
 
 def postal(location, **kwargs):
     """"""CanadaPost Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     :param ``key``: (optional) use your own API Key from CanadaPost Address Complete.
     """"""
@@ -252,7 +252,7 @@ def postal(location, **kwargs):
 
 def geonames(location, **kwargs):
     """"""GeoNames Provider
-    
+
     :param ``location``: Your search location you want geocoded.
     :param ``username``: (required) needs to be passed with each request.
     """"""
",add missing docstrings,docs(update): fix parameter documentation formatting for geocoding providers,Semantic,"The change updates parameter documentation formatting, which improves clarity and correctness of the API documentation, representing a semantic improvement in how the functionality is described.",1.0,5.0,5.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes in the diff. While the diff shows a consistent removal of empty lines and trailing whitespace in docstring comments (e.g., removing empty lines after docstring headers and fixing formatting), the message fails to indicate the scope or impact of the change. A better message would specify the nature of the change (e.g., 'Standardized docstring formatting and removed trailing whitespace across all geocoding provider functions'). As the change is minor and the message provides no actionable or meaningful context, it is poorly written and lacks clarity, warranting a score of 1.","The commit message 'add missing docstrings' accurately reflects the change made in the diff. The diff shows that multiple function docstrings were added or corrected, replacing empty lines with proper parameter descriptions and formatting. While the content of the docstrings is minimal and repetitive, the change is consistent and clearly addresses the absence of documentation. The commit message is concise, truthful, and directly relevant to the diff, making it excellent for a code change of this nature.","The commit message accurately reflects the changes made in the diff. The diff shows a consistent removal of empty lines and formatting inconsistencies (such as extra blank lines and inconsistent use of backticks) in the parameter documentation across multiple geocoding provider functions. The commit message clearly states that it's a documentation update focused on fixing formatting, which aligns precisely with the changes observed. The scope is well-defined, the action is specific, and the message is concise and relevant. Therefore, it is an excellent commit message."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/arcgis.py,"@@ -107,4 +107,4 @@ class Arcgis(Base):
 
 if __name__ == '__main__':
     g = Arcgis('453 Booth, Ottawa, ON')
-    g.debug()
\ No newline at end of file
+    g.debug()
",update arcgis.py,fix(arcgis): add missing debug call,Corrective,"The new message indicates a missing debug call that was likely causing issues in the ArcGIS module, suggesting a functional fix rather than a cosmetic or trivial change.",1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows a missing newline at the end of the file, not trailing whitespace. Trailing whitespace typically refers to spaces or tabs at the end of lines, which is not present here. The change is actually a missing newline, which is a different issue. Therefore, the commit message does not accurately reflect the actual change, making it poor and misleading.","The commit message 'update arcgis.py' is overly vague and provides no information about what was changed or why. While the diff shows a simple addition of a missing `g.debug()` call, the commit message fails to convey the specific improvement or context. A better message would indicate the change (e.g., 'Add debug call to Arcgis main example'). Therefore, it receives a score of 2 for lacking detail and clarity.","The commit message correctly identifies the issue as a missing debug call and specifies the affected component (arcgis). However, it lacks context about why the debug call was necessary or what the expected outcome was. The fix is minimal and straightforward, so the message is accurate but not particularly informative. It meets basic standards but doesn't demonstrate a clear understanding of the impact or intent behind the change, which limits its completeness."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/base.py,"@@ -40,15 +40,15 @@ class Base(object):
     def __repr__(self):
         if self.address:
             return ""<[{0}] {1} - {2} [{3}]>"".format(
-                self.status, 
-                self.provider.title(), 
-                self.method.title(), 
+                self.status,
+                self.provider.title(),
+                self.method.title(),
                 self.address
             )
         else:
             return ""<[{0}] {1} - {2}>"".format(
-                self.status, 
-                self.provider.title(), 
+                self.status,
+                self.provider.title(),
                 self.method.title()
             )
 
@@ -62,9 +62,9 @@ class Base(object):
         self.proxies = kwargs.get('proxies', '')
         try:
             r = self.rate_limited_get(
-                self.url, 
-                params=self.params, 
-                headers=self.headers, 
+                self.url,
+                params=self.params,
+                headers=self.headers,
                 timeout=self.timeout,
                 proxies=self.proxies
             )
@@ -198,7 +198,7 @@ class Base(object):
         # GeoJSON bbox
         self.westsouth = [west, south]
         self.eastnorth = [east, north]
-        
+
         if bool(south and east and north and west):
             bbox = {
                 'northeast': [north, east],
@@ -295,7 +295,7 @@ class Base(object):
     def wkt(self):
         if self.ok:
             return 'POINT({x} {y})'.format(x=self.x, y=self.y)
-        return '' 
+        return ''
 
     @property
     def latlng(self):
",add missing docstrings,fix(base): remove redundant lines and fix wkt return,Corrective,"The change removes redundant lines and fixes a WKT return issue, which addresses a functional or structural problem in the code, not just a cosmetic change.",1.0,1.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows no actual trailing whitespace changes; instead, it contains redundant or duplicated lines that appear to be copy-paste errors or formatting inconsistencies (e.g., duplicated lines with identical content, missing newlines). The changes are not about whitespace removal, but rather about redundant or duplicated code that could indicate a mistake in commit or editing process. A proper commit message should reflect the actual changes made. Therefore, the message is inaccurate and does not match the diff, resulting in a poor score.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff shows only minor formatting changes (removal of redundant lines, consistent spacing, and minor whitespace adjustments), with no actual addition of docstrings. The code appears to be cleaned up for consistency, not documented. Therefore, the commit message does not accurately reflect the changes and is therefore poor.","The commit message correctly identifies the intent of the changes—removing redundant lines and fixing the wkt return—though it lacks specificity. The diff shows only minimal changes: redundant lines removed (e.g., empty lines, duplicated formatting), and a minor fix in the wkt method where an empty string was returned consistently. However, the message does not clarify what 'redundant lines' specifically refers to or why the wkt return was considered incorrect. It also omits context about the impact or scope. While the message is accurate and relevant, it is too vague to be considered excellent, and thus deserves a moderate score."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/bing.py,"@@ -88,7 +88,7 @@ class Bing(Base):
     def lat(self):
         coord = self.parse['point']['coordinates']
         if coord:
-            return coord[0] 
+            return coord[0]
 
     @property
     def lng(self):
@@ -149,4 +149,4 @@ class Bing(Base):
 if __name__ == '__main__':
     #g = Bing('1552 Payette dr, Ottawa ON')
     g = Bing('Ottawa ON')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing property in bing.py,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that needs fixing, which aligns with a corrective improvement rather than a cosmetic or trivial change.",2.0,2.0,2.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes. The diff shows only a minor change: a redundant newline removal and a typo in the return statement (duplicate `return coord[0]` with a typo in the original). The message fails to describe the actual content of the changes, such as the correction of a duplicate return statement or the removal of a trailing newline. While trailing whitespace is mentioned, the fix is not just about whitespace—there's a duplicated line and a missing newline. A better message would specify the actual issue, such as 'Fixed duplicate return statement and added missing newline in Bing class.' Therefore, the message is poorly descriptive and misleading, warranting a score of 2.","The commit message 'add missing property in bing.py' is vague and does not accurately reflect the changes in the diff. The diff shows a redundant line (duplicate return statement) and a missing newline at the end of a file, neither of which involves adding a missing property. The actual changes are trivial and syntactic, not a property addition. Therefore, the message is misleading and fails to describe the real impact of the changes, resulting in a low score.","The commit message 'fix: rectification failed' is vague and does not accurately describe the actual changes made. The diff shows a simple fix of a typo (redundant return statement) and a missing newline at the end of a file, which is not related to 'rectification'. The term 'rectification' is unclear and not contextually relevant. A better message would describe the actual changes, such as 'fix: remove redundant return and fix trailing newline'. Therefore, the message is technically a fix but lacks clarity and relevance, warranting a score of 2."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/bing_reverse.py,"@@ -43,4 +43,4 @@ class BingReverse(Bing, Base):
 
 if __name__ == '__main__':
     g = BingReverse([45.4049053, -75.7077965])
-    g.debug()
\ No newline at end of file
+    g.debug()
",update bing_reverse.py,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs to be addressed, which falls under corrective changes rather than cosmetic or trivial updates.",1.0,2.0,2.0,"The commit message 'Trailing whitespace fixes.' is highly misleading and inaccurate. The diff shows no trailing whitespace changes—only a missing newline at the end of the file, which is not related to trailing whitespace. The fix actually adds a missing newline, not removes trailing whitespace. The commit message fails to describe the actual change and misrepresents the nature of the diff, making it poor and potentially confusing for other developers.","The commit message 'update bing_reverse.py' is overly vague and provides no information about what was changed or why. The diff shows a simple addition of a missing newline at the end of a line, which is a minor formatting fix. A better message would specify the change, such as 'Fix missing newline in debug call in bing_reverse.py'. Since the message lacks context and detail, it receives a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple addition of a missing newline at the end of a line in a debug call, which is a minor formatting issue. The term 'rectification failed' is ambiguous and does not relate to the actual change. A better message would specify the issue (e.g., 'fix: missing newline in debug call') and the context. Therefore, it receives a score of 2 for being technically incorrect and lacking clarity."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/canadapost.py,"@@ -51,7 +51,7 @@ class Canadapost(Base):
     """"""
     provider = 'canadapost'
     method = 'geocode'
-    
+
     def __init__(self, location, **kwargs):
         self.url = 'https://ws1.postescanada-canadapost.ca/AddressComplete'
         self.url += '/Interactive/RetrieveFormatted/v2.00/json3ex.ws'
@@ -64,7 +64,7 @@ class Canadapost(Base):
         if not self.key:
             self._retrieve_key()
         self._retrieve_id()
-        
+
         # Define parameters
         self.params = {
             'Key': self.key,
@@ -115,7 +115,7 @@ class Canadapost(Base):
             items = None
             self.status_code = 404
             self.error = 'ERROR - URL Connection'
-    
+
         if items:
             items = items[0]
             item_id = items['Id']
@@ -174,4 +174,4 @@ class Canadapost(Base):
 
 if __name__ == '__main__':
     g = Canadapost(""453 Booth Street, Ottawa"")
-    g.debug()
\ No newline at end of file
+    g.debug()
",update canadapost.py,fix(canadapost): add missing debug call in main,Corrective,"The change adds a missing debug call, which addresses a functional gap in the code and improves observability, indicating a corrective fix rather than a cosmetic or trivial change.",1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes. The diff shows only line ending whitespace changes (removal of blank lines and trailing spaces), but the commit message fails to mention any actual functionality changes or context. Moreover, the changes are minimal and purely cosmetic, and the message does not clearly indicate what was fixed or why. A better message would specify the nature of the change (e.g., 'Removed trailing whitespace and blank lines for consistency'). Therefore, the message is poor in specificity and usefulness, warranting a score of 1.","The commit message 'update canadapost.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the changes. While the diff shows that line endings and empty lines were adjusted (removing redundant blank lines), the commit message fails to convey any meaningful context. A better message would specify the nature of the changes, such as 'Remove redundant blank lines and fix formatting in canadapost.py for consistency'. Since the change is minor and purely cosmetic, the message is technically correct but lacks clarity and usefulness, resulting in a low score.","The commit message accurately identifies the issue and the fix — adding a missing `debug()` call in the main block. The message is clear and relevant to the diff, which shows that the `debug()` call was omitted and now restored. However, it lacks context about why the debug call was important or what the expected behavior was, which slightly limits its completeness. It is not overly verbose or missing key details, so it's functional but not excellent in terms of completeness or explanatory value."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/cli.py,"@@ -33,7 +33,7 @@ def cli():
     for item in input:
         item = item.strip()
         g = get(item, provider=args.provider)
-        
+
         if args.geojson:
             output = g.geojson
         elif args.osm:
@@ -45,5 +45,5 @@ def cli():
             params = {'indent': 4}
         else:
             params = {}
-        
-        args.outfile.write(""{}\n"".format(json.dumps(output, **params)))
\ No newline at end of file
+
+        args.outfile.write(""{}\n"".format(json.dumps(output, **params)))
",add osm support to the command line,fix(cli): remove redundant empty lines and fix output writing,Cosmetic,"The change removes redundant empty lines and improves output formatting, which is a stylistic refinement rather than a functional fix.",1.0,2.0,4.0,"The commit message 'Trailing whitespace fixes.' is highly misleading and inaccurate given the diff. The diff shows only a removal of empty lines (newlines) and does not involve any trailing whitespace. The changes are minimal and consist of removing empty lines (which are not trailing whitespace), and the commit message fails to reflect the actual changes. A more accurate message would describe the removal of empty lines or the formatting cleanup. Therefore, the message is not only incorrect but also fails to convey the true nature of the change, resulting in a poor score.","The commit message 'add osm support to the command line' is too vague and does not accurately reflect the actual changes in the code. The diff shows that the functionality for handling OSM output was already present and only the formatting (removal of empty lines and proper indentation) was adjusted. The change is not about adding OSM support, but rather about fixing or cleaning up existing code. Therefore, the commit message misrepresents the actual work done, making it only minimally accurate and lacking clarity or context.","The commit message accurately reflects the changes in the diff: it removes redundant empty lines and correctly fixes the output writing logic (which was previously missing a newline and had an empty line before the write statement). The message is concise and relevant, though it could be slightly more specific about what was fixed (e.g., 'fix missing newline in output write'). Still, it is clear, correct, and adequately descriptive for a typical code review context, warranting a strong score."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/elevation.py,"@@ -73,11 +73,11 @@ class Elevation(Base):
     @property
     def elevation(self):
         return self.parse.get('elevation')
-        
+
     @property
     def resolution(self):
         return self.parse.get('resolution')
 
 if __name__ == '__main__':
     g = Elevation([45.123, -76.123])
-    g.debug()
\ No newline at end of file
+    g.debug()
",add resolution property to elevation,fix(elevation): add debug call to test elevation parsing,Semantic,"The new message provides specific context about the change (debug call for elevation parsing) and indicates a functional intent, moving beyond a cosmetic fix to describe a semantic improvement in behavior or testing.",1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading and inaccurate. The diff shows no trailing whitespace changes—only a removal of empty lines and a minor formatting adjustment (removing a blank line after a comment and adding a newline after a call to debug()). The change is not about trailing whitespace, and the message does not reflect the actual content of the diff. Therefore, the commit message is factually incorrect and fails to describe what was actually changed, making it poor and potentially confusing.","The commit message 'add resolution property to elevation' is too vague and incomplete. While it correctly identifies the addition of a property, it fails to mention that the property is already present (as shown in the diff, the resolution property was already there and only the comment or formatting was adjusted). Additionally, the diff shows a minor code cleanup (removing empty lines and fixing a missing newline), not just adding a property. The message does not reflect the actual changes made, which include removing empty lines and fixing a debug call. Therefore, it is inaccurate and lacks context, warranting a low score.","The commit message is relevant and identifies the fix (adding a debug call), but it lacks context about why the debug call was added or what the original issue was. The diff shows a simple addition of a debug() call, which suggests it's a minor testing addition, not a critical bug fix. While the message is accurate and includes the right component ('elevation') and action ('add debug call'), it does not clearly explain the purpose or the problem it solves, making it somewhat vague. Therefore, it's functional but not excellent."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/freegeoip.py,"@@ -10,14 +10,14 @@ class FreeGeoIP(Base):
     """"""
     FreeGeoIP.net
     =============
-    freegeoip.net provides a public HTTP API for software developers to 
-    search the geolocation of IP addresses. It uses a database of IP addresses 
-    that are associated to cities along with other relevant information like 
+    freegeoip.net provides a public HTTP API for software developers to
+    search the geolocation of IP addresses. It uses a database of IP addresses
+    that are associated to cities along with other relevant information like
     time zone, latitude and longitude.
 
-    You're allowed up to 10,000 queries per hour by default. Once this 
-    limit is reached, all of your requests will result in HTTP 403, 
-    forbidden, until your quota is cleared. 
+    You're allowed up to 10,000 queries per hour by default. Once this
+    limit is reached, all of your requests will result in HTTP 403,
+    forbidden, until your quota is cleared.
 
     API Reference
     -------------
",add missing quotas,docs(freegeoip): fix whitespace and formatting in documentation,Cosmetic,"The change focuses on improving the appearance of documentation through whitespace and formatting, without altering functionality or semantics.",1.0,1.0,5.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes in the diff. While the diff shows a cleanup of whitespace (removing extra spaces and line breaks), the change is not just about trailing whitespace—it also involves formatting improvements like removing unnecessary spaces in sentences and line breaks. A more accurate commit message would describe the actual content changes, such as 'Improved documentation formatting and consistency in FreeGeoIP class description.' The current message fails to convey the nature or impact of the change, making it misleading and insufficient for understanding the purpose of the commit.","The commit message 'add missing quotas' is highly inadequate given the actual diff. The diff shows a cleanup of whitespace and formatting (removing extra spaces and line breaks) in the documentation, not the addition of any new quota information. The message fails to describe what was actually changed, why it was changed, or what the impact is. It is vague, misleading, and does not reflect the actual content of the diff. A proper commit message would describe the formatting improvement, such as 'fix formatting in documentation for clarity and consistency'. Therefore, the message is poor and scores a 1.","The commit message accurately reflects the changes made in the diff, which involves only minor whitespace and formatting improvements in the documentation. The change is specific, relevant, and clearly scoped to documentation formatting. The message is concise, descriptive, and follows the expected format for documentation-related changes. No functional or structural changes are introduced, which aligns with the nature of the diff. Thus, the commit message is excellent in clarity, relevance, and precision."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/geolytica.py,"@@ -94,4 +94,4 @@ class Geolytica(Base):
 
 if __name__ == '__main__':
     g = Geolytica('1552 Payette dr., Ottawa')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at the end of file,fix(geolytica): add missing debug call,Corrective,"The new message indicates a missing debug call that was likely causing issues in the code, suggesting a fix for a functional deficiency rather than a cosmetic or trivial change.",1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows a missing newline at the end of the file, not trailing whitespace. There is no indication of trailing whitespace being removed. The message does not accurately reflect the actual change, which is a missing newline, not whitespace. Therefore, the commit message is inaccurate and fails to describe the actual change, making it poor.","The commit message correctly identifies the issue — a missing newline at the end of the file — which is a valid and minor fix. However, it lacks context about why this matters (e.g., formatting standards, linting rules, or tool expectations) and does not explain the impact or intent beyond the technical fix. While accurate, it is overly minimal and fails to provide meaningful context for a reviewer, resulting in a modest score.","The commit message correctly identifies the issue as a missing debug call and specifies the affected component (geolytica). However, it lacks context about why the debug call was necessary or what the expected behavior was. The fix is straightforward and the message is accurate, but it is minimal and does not provide sufficient detail for a full understanding of the change's purpose or impact, which limits its completeness."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/geonames.py,"@@ -85,7 +85,7 @@ class Geonames(Base):
     @property
     def lng(self):
         return self.parse.get('lng')
-    
+
     @property
     def address(self):
         return self.parse.get('name')
@@ -116,4 +116,4 @@ class Geonames(Base):
 
 if __name__ =='__main__':
     g = Geonames('Ottawa, Ontario')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing docstring,fix(geonames): add missing debug call in main,Corrective,"The new message indicates a fix for a missing debug call, which addresses a functional or logical issue in the code, rather than a cosmetic change.",1.0,1.0,3.0,"The commit message 'Trailing whitespace fixes.' is misleading and inaccurate. The diff shows no trailing whitespace changes—only a line break added after 'g.debug()' and a removed blank line. The actual change is a missing newline at the end of the file and a minor formatting adjustment, not trailing whitespace. Additionally, the commit message fails to describe the actual change clearly or accurately, which makes it poor for communication and transparency. Therefore, it receives a low score.","The commit message 'add missing docstring' is highly misleading given the actual changes in the diff. The diff shows the removal of empty lines and the addition of a line to call `g.debug()` at the end of the main block, not the addition of any docstrings. There is no evidence of missing docstrings being added. Therefore, the commit message does not accurately reflect the changes, making it poor and misleading.","The commit message correctly identifies the issue as a missing debug call in the main block and specifies the affected component (geonames). However, it lacks context about why the debug call is important or what the expected behavior is. The diff shows a simple addition of a missing `g.debug()` call, which is straightforward, but the message could be more precise or descriptive (e.g., mentioning that it enables debugging output). Given that the fix is small and the message is accurate but minimal, a score of 3 reflects a decent but basic commit message."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/google_reverse.py,"@@ -40,4 +40,4 @@ class GoogleReverse(Google, Base):
 
 if __name__ == '__main__':
     g = GoogleReverse([45.4049053, -75.7077965])
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at end of file,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which falls under corrective changes rather than cosmetic or trivial updates.",1.0,2.0,1.0,"The commit message 'Trailing whitespace fixes.' is highly misleading and inaccurate. The diff shows no trailing whitespace being removed — instead, a line is added with a missing newline at the end, which is not a trailing whitespace issue. The change appears to be adding a missing newline after the debug() call, not fixing trailing whitespace. The message does not reflect the actual change, making it factually incorrect and therefore poor.","The commit message correctly identifies the issue—a missing newline at the end of the file—but it lacks context about why this matters or how it affects the codebase. While the fix is technically accurate, the message is overly minimal and does not convey the significance or impact of the change. A more detailed message (e.g., 'Fix missing trailing newline in main script to ensure consistent file formatting') would be more informative and aligned with typical commit message standards. Therefore, it is only moderately adequate.","The commit message 'fix: rectification failed' is vague, unclear, and does not describe what was actually fixed or why. The diff shows a simple addition of a missing newline at the end of a line, which is a formatting issue, not a 'rectification failure'. The term 'rectification failed' is ambiguous and does not reflect the actual change. A proper commit message should clearly state the nature of the change (e.g., 'fix: add missing newline to debug call'). Therefore, the message is poor in clarity, specificity, and relevance to the change."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/here.py,"@@ -9,8 +9,8 @@ class Here(Base):
     """"""
     HERE Geocoding REST API
     =======================
-    Send a request to the geocode endpoint to find an address 
-    using a combination of country, state, county, city, 
+    Send a request to the geocode endpoint to find an address
+    using a combination of country, state, county, city,
     postal code, district, street and house number.
 
     API Reference
",add missing docstring,docs(Here): update geocoding endpoint description,Semantic,"The new message provides specific context about updating a documentation entry for a geocoding endpoint, which changes the semantic meaning by clarifying what was modified and where, unlike the generic 'trailing whitespace fixes'.",1.0,3.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows a removal of trailing commas in a docstring, not trailing whitespace. Trailing whitespace is not present in the diff, and the change is a formatting adjustment related to commas, not whitespace. Therefore, the commit message is inaccurate and does not reflect the actual changes made, making it poor and misleading.","The commit message 'add missing docstring' is accurate and relevant to the change, as the diff shows a docstring being updated to remove redundant line breaks and improve formatting. However, it lacks detail about what was actually changed or why—such as the improvement in clarity or consistency. A better message would specify the nature of the change (e.g., 'refined docstring formatting for clarity and consistency'). As it is, the message is minimally informative and technically correct but not fully descriptive, resulting in a moderate score.","The commit message is relevant and identifies the file and change type (documentation update), which is good. However, it lacks specificity about what exactly was changed in the description—such as the removal of redundant or inconsistent formatting (e.g., the extra spaces and line breaks). A more detailed message would highlight the improvement in clarity or consistency, which is missing here. Thus, it's functional but not fully descriptive or precise, warranting a moderate score."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/here_reverse.py,"@@ -9,8 +9,8 @@ class HereReverse(Base):
     """"""
     HERE Geocoding REST API
     =======================
-    Send a request to the geocode endpoint to find an address 
-    using a combination of country, state, county, city, 
+    Send a request to the geocode endpoint to find an address
+    using a combination of country, state, county, city,
     postal code, district, street and house number.
 
     API Reference
",add missing docstring,docs(here_reverse): update geocoding description,Semantic,"The new message provides specific context about the change (updating geocoding description in documentation) and identifies the affected file or feature, indicating a semantic improvement in clarity and intent.",1.0,3.0,3.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the diff. The diff shows a removal of trailing commas after 'country, state, county, city' and 'postal code, district, street and house number', which is not a trailing whitespace issue but rather a formatting change (comma placement). The commit message does not accurately describe the actual change, and the diff suggests a more significant formatting adjustment. Therefore, the message is poor and does not reflect the actual content of the change.","The commit message 'add missing docstring' is accurate and relevant to the change, as the diff shows a missing or incomplete docstring being corrected. However, it lacks detail about what was fixed or why it matters. A better message would specify the exact improvement (e.g., 'fix missing docstring for HereReverse class to clarify geocoding parameters'). As it is, the message is minimal and technically correct but lacks context or value for a broader audience, resulting in a moderate score.","The commit message is relevant and indicates a documentation update, which aligns with the diff showing a minor refinement to the docstring. However, it lacks specificity about what exactly was changed or why — for example, it doesn't mention the removal of redundant spaces or the improved clarity in phrasing. While it correctly identifies the scope ('docs(here_reverse)'), it could be more descriptive to highlight the improvement in readability or structure. Thus, it is functional but not optimal."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/location.py,"@@ -61,7 +61,7 @@ class Location(object):
             lng = self._convert_float(location[1])
             condition_1 = isinstance(lat, float)
             condition_2 = isinstance(lng, float)
-            
+
             # Check if input are Floats
             if bool(condition_1 and condition_2):
                 condition_3 = lat <= 90 and lat >= -90
",update location.py,fix(location): remove unnecessary empty line,Cosmetic,"The change removes an unnecessary empty line, which is a formatting adjustment rather than a functional or semantic change, improving code readability without altering behavior.",1.0,2.0,2.0,"The commit message 'Trailing whitespace fixes.' is highly misleading given the code diff. The diff shows the removal of a blank line (a newline) after a comment, not trailing whitespace. There is no indication of trailing whitespace being removed, and the change is minimal and unrelated to whitespace. The message does not accurately describe the actual change, making it incorrect and unhelpful for understanding the commit's purpose.","The commit message 'update location.py' is extremely vague and provides no information about what was changed or why. While the diff shows a minor change—removing a blank line—the message fails to convey the actual impact or context of the update. A better message would specify the change, such as 'Remove unnecessary blank line in location validation logic' or 'Fix float validation condition formatting'. Therefore, it receives a score of 2 for lacking detail and clarity.","The commit message 'fix(location): remove unnecessary empty line' is technically accurate in that it describes a minor formatting change. However, it lacks context about why the empty line was removed or its impact on code readability or structure. A better commit message would explain the reasoning (e.g., 'remove empty line to improve code alignment and reduce visual noise'). As a result, while the message is correct in intent, it is overly minimal and lacks meaningful detail, earning a score of 2."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/mapquest.py,"@@ -12,8 +12,8 @@ class Mapquest(Base):
     MapQuest
     ========
     The geocoding service enables you to take an address and get the
-    associated latitude and longitude. You can also use any latitude 
-    and longitude pair and get the associated address. Three types of 
+    associated latitude and longitude. You can also use any latitude
+    and longitude pair and get the associated address. Three types of
     geocoding are offered: address, reverse, and batch.
 
     API Reference
",mapquest docs,docs(geocoding): update description for Mapquest class,Semantic,"The new message provides specific documentation updates related to the Mapquest class, indicating a change in meaning or intent rather than just formatting or syntax.",1.0,2.0,4.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes in the diff. The diff shows a minor correction of formatting (removing a space after 'latitude' and 'longitude'), which is not a 'trailing whitespace fix' in the typical sense—especially since no trailing whitespace was removed. The message fails to describe the actual change, the context, or the impact, making it uninformative and misleading. A better message would specify the exact change, such as 'Fixed spacing in geocoding documentation for clarity.'","The commit message 'mapquest docs' is extremely vague and provides no details about the specific changes, context, or impact. While it indicates a documentation-related change, it lacks specificity about what was modified, why, or how it improves the documentation. A better message would include details such as 'updated Mapquest class documentation to clarify geocoding types and fix formatting issues'. Given the minimal information, the message falls short of being useful for understanding the change, warranting a score of 2.","The commit message is relevant and clearly indicates that documentation for the Mapquest class has been updated. It specifies the type of change ('docs') and the exact scope ('geocoding' for Mapquest class), which is helpful. However, it lacks detail about what specifically changed in the description (e.g., minor grammar fixes or content adjustments), which could have made it more informative. Still, it is clear, concise, and follows a standard format, earning a solid 4."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/mapquest_reverse.py,"@@ -12,14 +12,14 @@ class MapquestReverse(Mapquest, Base):
     MapQuest
     ========
     The geocoding service enables you to take an address and get the
-    associated latitude and longitude. You can also use any latitude 
-    and longitude pair and get the associated address. Three types of 
+    associated latitude and longitude. You can also use any latitude
+    and longitude pair and get the associated address. Three types of
     geocoding are offered: address, reverse, and batch.
 
     API Reference
     -------------
     http://www.mapquestapi.com/geocoding/
-    
+
     """"""
     provider = 'mapquest'
     method = 'reverse'
",add mapquestreverse documentation,docs(scope): update reverse geocoding description,Semantic,"The new message provides clearer context by specifying the scope and content of the change (updating documentation for reverse geocoding), which improves semantic clarity compared to the vague 'trailing whitespace fixes'.",1.0,3.0,3.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes in the diff. The diff shows a minor correction of formatting (removing a line break and fixing inconsistent spacing in a docstring), but the commit message fails to describe the specific change or its impact. A more descriptive message, such as 'Fix inconsistent spacing in MapquestReverse docstring', would be more meaningful and useful for understanding the change.","The commit message 'add mapquestreverse documentation' is vague and lacks specificity. While it correctly identifies the action (adding documentation), it does not convey what was added, where, or why. The diff shows only minor text adjustments to improve clarity and grammar in the documentation, such as fixing spacing and sentence structure. A better message would specify the improvement (e.g., 'improved MapquestReverse class documentation for clarity and consistency'). As such, the message is minimally informative but not completely useless, warranting a moderate score.","The commit message is relevant and identifies the scope (documentation) and the specific change (updating reverse geocoding description). However, it lacks detail about what exactly was changed—such as specific wording corrections or improvements—making it somewhat vague. While it correctly identifies the scope and type of change, it doesn't fully convey the nature or impact of the update. A more detailed message would have been better, so it earns a moderate score rather than excellent."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/opencage.py,"@@ -27,7 +27,7 @@ class OpenCage(Base):
     [x] addr:state
     [x] addr:country
     [x] addr:postal
-    
+
     Attributes (27/29)
     ------------------
     [x] DMS
@@ -89,7 +89,7 @@ class OpenCage(Base):
         licenses = self.parse['licenses']
         if licenses:
             self.parse['licenses'] = licenses[0]
-    
+
     @property
     def lat(self):
         return self.parse['geometry'].get('lat')
",add missing comments,fix(OpenCage): remove empty lines and fix property lat,Corrective,"The change removes empty lines and fixes a property (lat), which addresses a structural or data correctness issue in the code, not just formatting.",1.0,2.0,3.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes in the diff. The diff shows only line ending whitespace changes (specifically, removal of empty lines and trailing whitespace in comments), but the commit message fails to indicate what was actually changed, why it matters, or which parts of the code were affected. A meaningful commit message should describe the intent or impact of the change, not just state a type of formatting fix. Therefore, the message is poor and misleading in context.","The commit message 'add missing comments' is vague and lacks specificity. While the diff shows that several empty lines and comments were removed or replaced (e.g., empty lines between list items and attribute descriptions), the actual change is not clearly tied to the message. The message does not indicate what was added, why it was added, or which parts of the code were affected. A better message would specify, for example, 'Add missing documentation comments to OpenCage class attributes and methods.' Therefore, the message is minimally informative and fails to provide context, resulting in a low score.","The commit message correctly identifies the change as fixing empty lines and the lat property, which aligns with the diff showing removal of empty lines and a property definition. However, it lacks context about why the changes were made (e.g., improving readability or fixing a bug), and the term 'fix property lat' is vague without specifying if it was a typo, a missing definition, or a formatting issue. While the message is accurate and minimal, it does not provide sufficient detail to be considered excellent. Thus, a score of 3 reflects a basic, functional but incomplete message."
bb607d5cb62c6c8fcc9a6abfdc51ba86dea37309,Trailing whitespace fixes.,geocoder/ottawa.py,"@@ -14,7 +14,7 @@ class Ottawa(Base):
     address to those present in the reference material. Addresses come in many forms,
     ranging from the common address format of a house number followed by the street name
     and succeeding information to other location descriptions such as postal zone
-    or census tract. An address includes any type of information that distinguishes a place. 
+    or census tract. An address includes any type of information that distinguishes a place.
 
     API Reference
     -------------
@@ -60,7 +60,7 @@ class Ottawa(Base):
             'SingleLine': location.replace(', Ottawa, ON',''),
             'f': 'json',
             'outSR': 4326,
-        } 
+        }
         self._initialize(**kwargs)
 
     def _exceptions(self):
",add missing docstring to ottawa,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which falls under corrective changes rather than cosmetic or trivial updates.",2.0,2.0,1.0,"The commit message 'Trailing whitespace fixes.' is overly vague and does not accurately reflect the actual changes. While the diff shows only minor formatting changes (like a trailing comma and whitespace), the message fails to specify what was fixed, where, or why. A better message would indicate the specific change (e.g., 'Fixed trailing whitespace in docstring and API parameters'). As such, it lacks detail and context, resulting in a low score despite the change being minor.","The commit message 'add missing docstring to ottawa' is vague and lacks specificity. While it correctly identifies the action (adding a docstring), it does not indicate which part of the code or what exactly was changed. The diff shows only minor formatting fixes (trailing whitespace and a missing closing brace), not a significant docstring addition. Therefore, the message is technically accurate but insufficiently detailed to convey the actual change's impact or scope, warranting a low score.","The commit message 'fix: rectification failed' is extremely vague and provides no context about what was actually fixed, why it was necessary, or what issue it resolves. The diff shows only minor formatting changes (like fixing a missing closing brace and a trailing comma), which are likely trivial typos or linting fixes. A meaningful commit message should describe the change and its purpose. This message fails to do so, making it poor and unhelpful for understanding the intent or impact of the change."
6b07ed47d8dd2faf059b79a3db9797622fa534b3,Change Geocoder slogan,setup.py,"@@ -1,7 +1,5 @@
 #!/usr/bin/python
 # coding: utf8
-import sys
-import os
 from setuptools import setup
 
 __version__ = '1.1.3'
@@ -17,7 +15,8 @@ except(IOError, ImportError):
 setup(
     name='geocoder',
     version=__version__,
-    description=""A complete Python Geocoding module made easy."",
+    description=""Geocoder is a geocoding library, written in python,""
+                "" simple and consistent."",
     long_description=long_description,
     author='Denis Carriere',
     author_email='carriere.denis@gmail.com',
",add missing setup.py file,fix: rectification failed,Corrective,"The new message indicates a specific error ('rectification failed'), suggesting a bug fix rather than a cosmetic or semantic change, thus classifying it as corrective.",2.0,1.0,1.0,"The commit message 'Change Geocoder slogan' is too vague and lacks detail about what was changed, why it was changed, or the impact of the change. While the diff shows a modification to the description in the setup.py file, the commit message does not reflect the actual content or context of the change. A better message would specify the new description and perhaps the rationale. Therefore, it receives a score of 2 for being minimally informative but insufficiently descriptive.","The commit message 'add missing setup.py file' is highly inaccurate and misleading. The diff shows that the setup.py file already exists and is being modified—specifically, two imports (sys and os) are being removed, and the description is being updated. The commit does not add a new setup.py file; instead, it refactors and improves an existing one. Therefore, the commit message fails to reflect the actual changes and misrepresents the nature of the update.","The commit message 'fix: rectification failed' is highly inadequate as it does not describe what was actually fixed or why. The diff shows a removal of two import statements (sys and os) and a change in the description of the package, which is a meaningful update to the setup configuration. The commit message fails to reflect the actual changes made, providing no context about the fix or its purpose. It is vague, technically incorrect (no 'rectification' is mentioned in the code), and completely unrelated to the changes. A proper commit message should clearly explain the nature and impact of the change, which is entirely missing here."
38bec3cf8e56adf565f7e57330759aa91e360f2d,Version change to 1.1.4,geocoder/__init__.py,"@@ -2,11 +2,10 @@
 # coding: utf8
 
 """"""
-Geocoder: Simple JSON
-~~~~~~~~~~~~~~~~~~~~~
+Geocoder
+~~~~~~~~
 
-Geocoder is a MIT Licensed Geocoding library, written in Python,
-simple and consistant.
+Geocoder is a geocoding library, written in python, simple and consistent.
 
 Many online providers such as Google & Bing have geocoding services,
 these providers do not include Python libraries and have different
@@ -27,7 +26,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.1.3'
+__version__ = '1.1.4'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,build(version): update version to 1.1.4,Semantic,"The new message provides more context by indicating the type of change (build) and specifying the action (update version), making the commit's purpose clearer and more meaningful than the original.",2.0,2.0,3.0,"The commit message 'Version change to 1.1.4' is technically accurate but lacks context and detail. While it correctly indicates a version update, it does not explain why the version was incremented, what changes were made, or how this affects users. A better message would include the version bump and a brief note on the changes (e.g., 'Bumped version to 1.1.4 with improvements to JSON consistency and documentation updates'). As it stands, the message is minimal and insufficient for understanding the significance of the change, warranting a low-to-mid score.","The commit message 'add missing docstrings' is vague and does not accurately reflect the actual changes. The diff shows that only a few docstring lines were updated, and the message fails to specify what was changed or why. While it's true that some docstrings were added or modified, the message lacks detail about the scope and impact of the change. A better message would mention specific changes, such as 'update docstrings for module description and version info'. Therefore, the message is minimally informative and falls short of being clear or useful for a code review.","The commit message correctly indicates a version update and is formatted appropriately with the 'build(version)' prefix, which aligns with common commit message conventions. However, it lacks context about why the version was incremented (e.g., features, fixes, breaking changes) and does not mention the specific change in the documentation (e.g., updated description or restructured README). While it is accurate and minimal, it is somewhat limited in providing meaningful insight into the change's impact. Therefore, it is functional but not detailed or informative enough to be considered excellent."
38bec3cf8e56adf565f7e57330759aa91e360f2d,Version change to 1.1.4,setup.py,"@@ -2,7 +2,7 @@
 # coding: utf8
 from setuptools import setup
 
-__version__ = '1.1.3'
+__version__ = '1.1.4'
 requirements_file = ""requirements.txt""
 requirements = [pkg.strip() for pkg in open(requirements_file).readlines()]
 
",update missing version,chore(version): update version to 1.1.4,Semantic,"The new message provides context by indicating the type of change ('chore') and clarifies the action ('update version'), making the commit more meaningful and easier to understand in a version control history.",3.0,2.0,5.0,"The commit message accurately reflects the change (version update from 1.1.3 to 1.1.4) and is clear and concise. However, it lacks additional context such as why the version was incremented (e.g., bug fixes, new features) or any related changes (e.g., dependency updates). While it meets the minimum requirement for clarity, it is somewhat minimal and could be improved with more detail to fully justify the version bump.","The commit message 'update missing version' is vague and lacks specificity. While it correctly indicates a version update, it does not clarify which version was updated, why the update was necessary, or what impact it might have. The diff shows a clear change from '1.1.3' to '1.1.4', but the message fails to communicate the significance or context of the change. A better message would specify 'Bump version to 1.1.4' or 'Update version to 1.1.4 for new release'. Thus, it receives a score of 2 for being minimally informative but lacking clarity and context.","The commit message is concise, relevant, and follows the standard format for version updates in a chore category. It clearly indicates the type of change ('chore'), the specific action ('update version'), and the new version number ('1.1.4'). The diff confirms the version was correctly incremented, and the message accurately reflects the change without unnecessary details. This is an excellent commit message."
2ff316d402b375a5b91a06fda043a028606a842a,version Change again,geocoder/__init__.py,"@@ -26,7 +26,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.1.4'
+__version__ = '1.1.5'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue (rectification failed) that was previously not addressed, suggesting a fix for a functional problem rather than a cosmetic or trivial change.",2.0,1.0,1.0,"The commit message 'version Change again' is overly vague and lacks specificity. While it correctly indicates a version update, it does not mention the version number, the reason for the change, or any impact. A better message would include the new version (e.g., 'Bump version to 1.1.5') and context (e.g., 'to fix JSON response consistency across providers'). As it stands, the message provides minimal value and fails to communicate meaningful information to developers or reviewers.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.1.4' to '1.1.5', not any addition of docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and incorrect. A proper message would have been something like 'Bump version to 1.1.5'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.1.4' to '1.1.5', which is a simple update to the version number, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what problem it resolves, making it inadequate and misleading for a commit message."
2ff316d402b375a5b91a06fda043a028606a842a,version Change again,setup.py,"@@ -2,7 +2,7 @@
 # coding: utf8
 from setuptools import setup
 
-__version__ = '1.1.4'
+__version__ = '1.1.5'
 requirements_file = ""requirements.txt""
 requirements = [pkg.strip() for pkg in open(requirements_file).readlines()]
 
",update missing version,chore(version): update version to 1.1.5,Semantic,"The new message provides a clear, standardized commit message format with a type ('chore(version)') and a descriptive purpose, improving semantic clarity and adherence to conventional commit standards.",2.0,2.0,5.0,"The commit message 'version Change again' is overly vague and lacks specificity. While it correctly indicates a version update, it does not mention the version number, the reason for the change, or any related context (e.g., bug fixes, features, or release notes). A better message would include the new version and a brief explanation, such as 'Bump version to 1.1.5 for bug fixes and compatibility updates'. As it stands, the message provides minimal value and fails to communicate meaningful information about the change.","The commit message 'update missing version' is vague and lacks specificity. While it correctly indicates a version update, it does not clarify which version was updated, why the update was necessary, or what impact it has. The diff shows a simple version bump from '1.1.4' to '1.1.5', but the message fails to convey context or intent. A better message would specify 'Bump version to 1.1.5 to reflect latest changes' or similar. Therefore, it receives a score of 2 for being minimally informative but lacking clarity and context.","The commit message is clear, concise, and follows the standard format for version updates in a chore change. It explicitly states the type of change ('chore'), the action ('update version'), and the new version number ('1.1.5'). This provides sufficient context for other developers to understand the purpose of the change without needing to look at the diff, making it excellent for maintainability and team collaboration."
77d8f941ab6d2a9e0508013ca0bc68af1321b0f4,Fixed Baidu testing,geocoder/api.py,"@@ -43,7 +43,7 @@ def get(location, **kwargs):
             'reverse': HereReverse,
         },
         'nokia': {'geocode': Here},
-        'baidu': {'geocode': Baidu}
+        'baidu': {'geocode': Baidu},
         'yahoo': {'geocode': Yahoo},
         'tomtom': {'geocode': Tomtom},
         'arcgis': {'geocode': Arcgis},
",add nokia geocoders,fix(geocode): fix baidu geocode entry formatting,Corrective,"The change addresses a specific bug in Baidu geocode entry formatting, correcting a functional issue rather than improving appearance or semantics.",2.0,1.0,3.0,"The commit message 'Fixed Baidu testing' is too vague and does not clearly describe what was actually changed or why. The diff shows only a minor formatting change — adding a comma after the Baidu entry — which is likely a typo or formatting inconsistency, not a functional fix. The message fails to convey the actual nature of the change, making it unclear whether it's a bug fix, formatting update, or something else. A better message would specify the change (e.g., 'Added trailing comma to Baidu geocode entry for consistency'). Thus, the message is insufficiently descriptive and only receives a score of 2.","The commit message 'add nokia geocoders' is inaccurate and misleading. The diff shows that the 'nokia' entry was already present and only the 'baidu' entry was corrected with a missing comma, not added. The message incorrectly implies a new addition of Nokia geocoders when no such change was made. Furthermore, the fix was a syntax fix (adding a comma), not a new feature or addition. Therefore, the commit message is factually wrong and does not reflect the actual change, resulting in a poor score.","The commit message correctly identifies the issue as a formatting fix for the Baidu geocode entry, which is relevant to the diff showing a missing comma. However, it lacks context about why the comma was necessary (e.g., consistency with other entries) or the impact of the fix. While it is accurate and specific, it is somewhat minimal in explaining the significance of the change, which limits its completeness. Thus, it is functional but not excellent."
77d8f941ab6d2a9e0508013ca0bc68af1321b0f4,Fixed Baidu testing,test_geocoder.py,"@@ -51,7 +51,7 @@ def test_maxmind():
 
 
 def test_baidu():
-    g = geocoder.maxmind(china)
+    g = geocoder.baidu(china)
     assert g.ok
 
 
",add regression test for,refactor(geocoder): replace maxmind with baidu for china geocoding,Corrective,"The change replaces MaxMind with Baidu for China geocoding, addressing a functional issue by using a more appropriate geocoding service for the region, which improves accuracy and reliability in China-specific geolocation.",3.0,2.0,3.0,"The commit message 'Fixed Baidu testing' is vague and lacks detail about what was actually changed or why. While it correctly indicates a change related to Baidu, it does not specify that the test was updated from MaxMind to Baidu, nor does it mention the context or impact of the change. A better message would clarify the nature of the fix (e.g., 'Updated Baidu geocoding test to use geocoder.baidu() instead of geocoder.maxmind()'). As such, the message is minimally accurate but insufficiently informative, warranting a moderate score.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it was added, or which feature or behavior it targets. While it correctly identifies that a test is being added, the lack of context makes it insufficient for understanding the change's purpose. A better message would specify the feature (e.g., 'add regression test for Baidu geocoding') or the intent (e.g., 'add test to verify Baidu geocoding works for China'). Thus, it receives a score of 2 for being minimally relevant but lacking clarity and detail.","The commit message indicates a refactoring change from using maxmind to baidu for China geocoding, which is accurate and relevant to the diff. However, it lacks context about why the change was made (e.g., performance, accuracy, availability), and does not mention any potential impact or testing scope. While the action is correctly described, the message is minimal and could be more informative. Thus, it is functional but not excellent."
fb6876a9f8911175dc504a48a33f2714fafc2a68,Python3 relative import error,geocoder/baidu.py,"@@ -1,8 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
 
-from base import Base
-from keys import baidu_key
+from .base import Base
+from .keys import baidu_key
 
 
 class Baidu(Base):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a fix for a failure (rectification failed), suggesting it addresses a bug or error, which aligns with a corrective improvement rather than just a cosmetic or trivial change.",2.0,2.0,2.0,"The commit message 'Python3 relative import error' is too vague and lacks context. While the diff shows a change from absolute to relative imports (which is a common Python 3 practice), the message does not explain why the change was made, what problem it solved, or how it improves the code. A better message would describe the fix, such as 'Fix relative imports for Python 3 compatibility by using . from module imports'. Thus, it receives a score of 2 for being technically relevant but insufficiently descriptive.","The commit message 'add missing import' is overly vague and lacks specific details about what was changed or why. While the diff shows a change in import paths (using relative imports with .), the message does not explain the context or the reason for the change. A better message would specify the nature of the change (e.g., 'update imports to use relative paths for better module organization') and the benefit or intent. Therefore, it is only minimally informative and receives a score of 2.","The commit message 'fix: rectification failed' is vague and lacks specificity. It does not clearly indicate what was fixed, why it was necessary, or the impact of the change. While the diff shows a simple update of import paths (using relative imports with `.`), the message fails to communicate the actual intent or problem. A better message would describe the change, such as 'fix: update import paths to use relative imports for base and keys modules'. Thus, the message is minimally informative and receives a score of 2."
06ceb4bb50a5713f1ca66b2b0faa7911170d1b81,Fixed some issues with Canadapost & updated docs,geocoder/api.py,"@@ -301,8 +301,7 @@ def canadapost(location, **kwargs):
     """"""CanadaPost Provider
 
     :param ``location``: Your search location you want geocoded.
-    :param ``key``: (optional) use your own API Key from
-                               CanadaPost Address Complete.
+    :param ``key``: (optional) API Key from CanadaPost Address Complete.
     """"""
     return get(location, provider='canadapost', **kwargs)
 
",update canadapost.py,docs(canadapost): update key parameter description,Semantic,"The new message provides a more specific and precise description of the change by indicating the exact documentation update (key parameter description), improving clarity and semantic accuracy compared to the vague 'updated docs' in the old message.",2.0,2.0,3.0,"The commit message is vague and lacks specific details about the changes made. While it mentions 'fixed some issues' and 'updated docs', the diff shows only a minor change in documentation — removing a full sentence and replacing it with a more concise version. The message does not specify what was fixed, why it was changed, or what the original issue was. A better message would explicitly state the change, such as 'Updated CanadaPost documentation to remove redundant URL reference and improve clarity.' As it stands, the message is too generic and provides little value for understanding the change's impact.","The commit message 'update canadapost.py' is overly vague and provides no information about what was actually changed or why. While the diff shows a minor improvement in the documentation (removing redundant text and improving clarity in the key parameter description), the commit message fails to reflect this specific change. A better message would indicate the nature of the update, such as 'improved documentation for key parameter in canadapost provider'. As it stands, the message offers no actionable insight, resulting in a low score.","The commit message accurately reflects the change — updating the description of the `key` parameter in the documentation. However, it is minimal and lacks context about why the change was made or what was improved (e.g., fixing a typo, improving clarity). While the message is correct and relevant, it does not provide sufficient detail to fully convey the significance or intent of the change, which limits its completeness. Therefore, it is neither poor nor excellent, but moderately adequate."
06ceb4bb50a5713f1ca66b2b0faa7911170d1b81,Fixed some issues with Canadapost & updated docs,geocoder/canadapost.py,"@@ -5,49 +5,25 @@ import re
 import requests
 from .base import Base
 from .keys import canadapost_key
-from .location import Location
 
 
 class Canadapost(Base):
     """"""
     Addres Complete API
     =======================
-    The next generation of address finders, AddressComplete uses intelligent, fast
-    searching to improve data accuracy and relevancy. Simply start typing a business
-    name, address or Postal Code and AddressComplete will suggest results as you go.
+    The next generation of address finders, AddressComplete uses
+    intelligent, fast searching to improve data accuracy and relevancy.
+    Simply start typing a business name, address or Postal Code
+    and AddressComplete will suggest results as you go.
+
+    Params
+    ------
+    :param ``location``: Your search location you want geocoded.
+    :param ``key``: (optional) API Key from CanadaPost Address Complete.
 
     API Reference
     -------------
     https://www.canadapost.ca/pca/
-
-    OSM Quality (6/6)
-    -----------------
-    [x] addr:housenumber
-    [x] addr:street
-    [x] addr:city
-    [x] addr:state
-    [x] addr:country
-    [x] addr:postal
-
-    Attributes (13/17)
-    ------------------
-    [x] accuracy
-    [x] address
-    [ ] bbox
-    [x] city
-    [ ] confidence
-    [x] country
-    [x] housenumber
-    [ ] lat
-    [ ] lng
-    [x] location
-    [x] ok
-    [x] postal
-    [x] provider
-    [x] quality
-    [x] state
-    [x] status
-    [x] street
     """"""
     provider = 'canadapost'
     method = 'geocode'
@@ -59,24 +35,31 @@ class Canadapost(Base):
         self.key = kwargs.get('key', canadapost_key)
         self.timeout = kwargs.get('timeout', 5.0)
         self.proxies = kwargs.get('proxies', '')
+        self.id = ''
+        self.key = ''
 
         # Connect to CanadaPost to retrieve API key if none are provided
         if not self.key:
             self._retrieve_key()
         self._retrieve_id()
 
-        # Define parameters
-        self.params = {
-            'Key': self.key,
-            'Id': self.id,
-            'Source': '',
-        }
-
         if bool(self.key and self.id):
+            self.params = {
+                'Key': self.key,
+                'Id': self.id,
+                'Source': '',
+            }
             self._initialize(**kwargs)
+        else:
+            self.json = dict()
+            self.parse = self.tree()
+            self._json()
 
     def __repr__(self):
-        return ""<[{0}] {1} [{2} - {3}]>"".format(self.status, self.provider, self.postal, self.address)
+        return ""<[{0}] {1} [{2} - {3}]>"".format(self.status,
+                                                self.provider,
+                                                self.postal,
+                                                self.address)
 
     def _retrieve_key(self):
         url = 'http://www.canadapost.ca/cpo/mc/personal/postalcode/fpc.jsf'
@@ -105,10 +88,12 @@ class Canadapost(Base):
             'SearchTerm': self.location,
         }
 
-        url = 'https://ws1.postescanada-canadapost.ca/AddressComplete'
-        url += '/Interactive/Find/v2.00/json3ex.ws'
+        url = 'https://ws1.postescanada-canadapost.ca/AddressComplete' \
+              '/Interactive/Find/v2.00/json3ex.ws'
         try:
-            r = requests.get(url, params=params, timeout=self.timeout, proxies=self.proxies)
+            r = requests.get(url, params=params,
+                             timeout=self.timeout,
+                             proxies=self.proxies)
             items = r.json().get('Items')
             self.status_code = 200
         except:
",add docs for canadapost,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed') that addresses a bug or issue in the system, suggesting a corrective action taken to fix a problem encountered during processing.",0.0,5.0,0.0,,add doc for canadapost,
a413b689f21c939b9dfeb0c277123f4648ae7c81,Pep 8 fixes,geocoder/base.py,"@@ -146,7 +146,8 @@ class Base(object):
     def _exceptions(self):
         pass
 
-    def tree(self): return defaultdict(self.tree)
+    def tree(self):
+        return defaultdict(self.tree)
 
     def _encode(self, value):
         # Encoding Value to for Python2/3 (default='utf-8')
@@ -170,6 +171,7 @@ class Base(object):
                             self.parse[last][key] = self._encode(value)
                         else:
                             self.parse[key] = self._encode(value)
+
     @property
     def status(self):
         if self.ok:
@@ -213,16 +215,15 @@ class Base(object):
         if self.bbox:
             # Units are measured in Kilometers
             distance = haversine(self.northeast, self.southwest)
-            for score, maximum in [
-                (10, 0.25),
-                (9, 0.5),
-                (8, 1),
-                (7, 5),
-                (6, 7.5),
-                (5, 10),
-                (4, 15),
-                (3, 20),
-                (2, 25)]:
+            for score, maximum in [(10, 0.25),
+                                   (9, 0.5),
+                                   (8, 1),
+                                   (7, 5),
+                                   (6, 7.5),
+                                   (5, 10),
+                                   (4, 15),
+                                   (3, 20),
+                                   (2, 25)]:
                 if distance < maximum:
                     return score
                 if distance >= 25:
@@ -331,4 +332,3 @@ class Base(object):
     @property
     def route(self):
         return self.street
-
",add missing docstrings,fix(base): correct tree method indentation and fix distance scoring logic,Corrective,"The new message indicates specific fixes to tree method indentation and distance scoring logic, which are functional issues, not just style changes. This addresses logical or structural errors in the code, making it a corrective improvement.",2.0,2.0,3.0,"The commit message 'Pep 8 fixes' is overly vague and does not accurately reflect the actual changes. While the diff includes some formatting improvements (like consistent parentheses and spacing), the changes are not purely about PEP 8 compliance—some lines are restructured for readability, and the code formatting is more about consistency and clarity than strict adherence to PEP 8. Additionally, the changes include a formatting adjustment in a list comprehension and a minor indentation fix, which are not typical 'PEP 8 fixes' in the strict sense. A more descriptive message (e.g., 'Improved code formatting and consistency in tree and status methods') would be more accurate and useful. Therefore, the score is 2: the message is somewhat relevant but lacks specificity and accuracy.","The commit message 'add missing docstrings' is vague and misleading. The diff shows no actual docstrings being added—instead, it contains formatting changes (like line breaks in tuples and indentation adjustments) and minor code restructuring. There are no new docstrings introduced, so the message does not accurately reflect the changes. While the message is not entirely wrong, it fails to convey the actual nature of the changes, which were primarily formatting and code clarity improvements, not documentation. Thus, it earns a low score for inaccuracy.","The commit message correctly identifies two key changes: fixing the indentation of the `tree` method and correcting the distance scoring logic. However, it lacks specificity about what was actually fixed in the distance scoring logic (e.g., whether it was a syntax error, a logical flaw, or a formatting issue). The mention of 'correct tree method indentation' is vague — the diff shows a simple addition of a newline, not a real indentation correction. The message is accurate but lacks depth and technical precision. Therefore, it is functional but not excellent."
64d86177dd3784058496054cdfe28f075e4023e6,#118 Error handling for bbox,geocoder/base.py,"@@ -187,13 +187,10 @@ class Base(object):
 
     def _get_bbox(self, south, west, north, east):
         # South Latitude, West Longitude, North Latitude, East Longitude
-        try:
-            self.south = float(south)
-            self.west = float(west)
-            self.north = float(north)
-            self.east = float(east)
-        except:
-            pass
+        self.south = south
+        self.west = west
+        self.north = north
+        self.east = east
 
         # Bounding Box Corners
         self.northeast = [self.north, self.east]
",add missing try/except in base.py,fix(base): remove float conversion and add direct assignment to bbox coordinates,Corrective,"The change removes a float conversion and directly assigns bbox coordinates, which fixes a potential error in handling bbox values and improves accuracy.",1.0,1.0,3.0,"The commit message '#118 Error handling for bbox' is highly misleading given the actual changes in the code. The diff removes error handling (try-except block) and replaces it with direct assignments, which means the error handling is being removed, not added. The commit message incorrectly suggests that error handling is being implemented when, in fact, it is being stripped away. This misrepresentation makes the commit message inaccurate and potentially confusing for other developers. Therefore, it receives a poor score.","The commit message 'add missing try/except in base.py' is incorrect and misleading. The diff shows the removal of a try/except block, not the addition. The original code had a try/except to handle potential float conversion errors, which was removed in this change. The commit message falsely suggests a missing try/except was added, when in fact it was removed. This misrepresentation makes the message inaccurate and potentially confusing, especially for code review or audit purposes. Therefore, the score is 1 (Poor).","The commit message is mostly accurate and highlights the intended change—removing float conversion and directly assigning values to bbox coordinates. However, it lacks context about why the float conversion was removed (e.g., safety, type consistency, or input validation concerns), which makes it less informative. Additionally, the change could have introduced bugs if the input values are not already valid types, so a more complete message would explain the reasoning or risk assessment. As a result, it's functional but not fully clear or thorough, warranting a mid-range score."
64d86177dd3784058496054cdfe28f075e4023e6,#118 Error handling for bbox,geocoder/yandex.py,"@@ -78,7 +78,13 @@ class Yandex(Base):
         if self.parse['Envelope']:
             east, north = self.parse['Envelope'].get('upperCorner').split(' ')
             west, south = self.parse['Envelope'].get('lowerCorner').split(' ')
-            return self._get_bbox(south, west, north, east)
+            try:
+                return self._get_bbox(float(south),
+                                      float(west),
+                                      float(north),
+                                      float(east))
+            except:
+                pass
 
     @property
     def quality(self):
",add quality property to yandex,fix(yandex): handle bbox coordinates as floats,Corrective,"The change addresses a specific error in handling bbox coordinates by ensuring they are processed as floats, which is a bug fix related to data type handling.",2.0,1.0,3.0,"The commit message '#118 Error handling for bbox' is too vague and does not clearly convey the scope or nature of the change. While the diff shows added error handling for float conversion in bbox coordinates, the message lacks specifics about what was fixed, why it was needed, or how it improves reliability. A better message would mention the addition of try-except blocks for float parsing and the purpose (e.g., preventing crashes on invalid input). As it stands, the message is insufficiently descriptive and provides minimal context for reviewers or future developers.","The commit message 'add quality property to yandex' is highly inaccurate and irrelevant to the actual changes in the code diff. The diff shows a modification to handle bounding box parsing with proper type conversion (float) in the _get_bbox call, and includes a try-except block to handle potential conversion errors. This change is related to robustness in parsing geographic coordinates, not the addition of a 'quality' property. The commit message does not reflect the actual content of the change, making it misleading and unhelpful for understanding the purpose of the commit.","The commit message accurately reflects the intent of the change—handling bbox coordinates as floats—which is relevant to the code modification. However, it lacks detail about why the change was necessary (e.g., potential issues with string parsing or type errors) and does not mention the exception handling added in the code. The fix is meaningful, but the message is overly simplistic and does not fully convey the scope or context of the improvement. A better message would include a brief explanation of the problem (e.g., 'prevent TypeError when parsing string coordinates'). Thus, it is functional but not excellent."
d2c4faa72f9ed47023f03308000e5c2394c02cbe,#114 Fixing piping issue & refactored CLI,geocoder/__init__.py,"@@ -26,7 +26,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.2.0'
+__version__ = '1.2.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a correction is needed, which aligns with a corrective improvement to address a defect or issue.",2.0,1.0,1.0,"The commit message does not accurately reflect the changes in the diff. The diff only shows a version bump from '1.2.0' to '1.2.1', which is a minor version update, not a fix for a piping issue or CLI refactoring. The commit message is therefore misleading and out of alignment with the actual code changes, resulting in a low score.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.2.0' to '1.2.1', not the addition of any docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and incorrect. A proper message would have been something like 'Bump version to 1.2.1'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.2.0' to '1.2.1', which is a minor update and not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what issue it resolves, making it poor and misleading."
d2c4faa72f9ed47023f03308000e5c2394c02cbe,#114 Fixing piping issue & refactored CLI,geocoder/cli.py,"@@ -1,83 +1,43 @@
-import argparse
-import fileinput
-import itertools
+#!/usr/bin/python
+# coding: utf8
+
+import click
 import json
+import geocoder
 import sys
-from .api import get
+import os
+
 
+providers = ['google', 'bing', 'osm', 'here', 'w3w', 'opencage']
+methods = ['geocode', 'reverse', 'elevation', 'timezone']
+outputs = ['json', 'osm', 'geojson', 'wkt']
 
-def peek(iterable):
-    iterator = iter(iterable)
-    item = next(iterator)
-    new_iterator = itertools.chain([item], iterator)
-    return item, new_iterator
 
+@click.command()
+@click.argument('location', nargs=-1)
+@click.option('--provider', '-p', default='bing', type=click.Choice(providers))
+@click.option('--method', '-m', default='geocode', type=click.Choice(methods))
+@click.option('--output', '-o', default='json', type=click.Choice(outputs))
+def cli(location, provider, method, output):
+    ""Geocode an arbitrary number of strings from Command Line.""
 
-def cli():
-    parser = argparse.ArgumentParser(description=""Geocode an arbitrary number""
-                                     "" of strings from Command Line."")
-    parser.add_argument('input',
-                        type=str,
-                        nargs=""*"",
-                        help=""Filename(s) or strings to be geocoded"")
-    parser.add_argument('-p', '--provider',
-                        help=""provider (choose from: bing,""
-                        ""geonames, google, mapquest, nokia, osm, tomtom, ""
-                        ""geolytica, arcgis, yahoo, ottawa)"",
-                        default='bing')
-    parser.add_argument('-m', '--method',
-                        type=str,
-                        help=""Output type (choose from: geocode, reverse)"",
-                        default='geocode')
-    parser.add_argument('-o', '--outfile',
-                        help=""Output file (default stdout)"",
-                        default=sys.stdout)
-    parser.add_argument('-t', '--type',
-                        type=str,
-                        help=""Output type (choose from: json, osm, geojson)"",
-                        default='json')
-    parser.add_argument('--pretty',
-                        help=""Prettify JSON output"",
-                        action=""store_true"")
-    args = parser.parse_args()
+    # Read multiple files & user input location
+    locations = []
+    for item in location:
+        if os.path.exists(item):
+            with open(item, 'rb') as f:
+                locations += f.read().splitlines()
+        else:
+            locations.append(item)
 
-    # User input data
-    if args.input:
+    # Geocode results from user input
+    for location in locations:
+        g = geocoder.get(location.strip(), provider=provider, method=method)
         try:
-            sys.argv = [sys.argv[1]] + args.input
-            input = fileinput.input()
-            _, input = peek(input)
+            click.echo(json.dumps(g.__getattribute__(output)))
         except IOError:
-            input = args.input
-    else:
-        print('[ERROR] Please include a location or a <File Path>.\n'
-              '$ geocode ""Ottawa ON\n""'
-              '$ geocode ""textfile.txt""')
-        sys.exit()
-
-    for item in input:
-        item = item.strip()
-        g = get(item, provider=args.provider, method=args.method)
-
-        # User input output
-        args.type = args.type.lower()
-        type_lookup = {
-            'json': g.json,
-            'geojson': g.geojson,
-            'osm': g.osm,
-        }
-        if args.type in type_lookup:
-            output = type_lookup.get(args.type.lower(), '')
-        else:
-            print('[ERROR] Please provide a valid type.\n'
-                  'Ex: geojson, osm,  json\n'
-                  '$ geocode ""Ottawa ON"" --type geojson')
+            # When invalid command is entered a broken pipe error occurs
             sys.exit()
 
-        # User define Pretty output
-        if args.pretty:
-            params = {'indent': 4}
-        else:
-            params = {}
-
-        args.outfile.write(""{}\n"".format(json.dumps(output, **params)))
+if __name__ == '__main__':
+    cli()
",add command line options and add commands,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was not properly resolved, which is a corrective action to address a problem in the code or process.",0.0,0.0,0.0,,,
d2c4faa72f9ed47023f03308000e5c2394c02cbe,#114 Fixing piping issue & refactored CLI,setup.py,"@@ -2,7 +2,7 @@
 # coding: utf8
 from setuptools import setup
 
-__version__ = '1.2.0'
+__version__ = '1.2.1'
 requirements_file = ""requirements.txt""
 requirements = [pkg.strip() for pkg in open(requirements_file).readlines()]
 
",add missing version,chore(version): update version to 1.2.1,Cosmetic,"The change only updates the version number in the CLI, which is a routine maintenance task with no functional impact, making it a cosmetic update.",2.0,2.0,5.0,"The commit message does not accurately reflect the changes in the diff. The diff only shows a version bump from '1.2.0' to '1.2.1' in the __version__ variable, which is a minor version update. The message mentions fixing a 'piping issue' and refactoring the CLI, neither of which is evident in the diff. There is no mention of CLI refactoring or piping issues in the code changes. Therefore, the commit message is misleading and does not align with the actual changes, resulting in a low score.","The commit message 'add missing version' is too vague and lacks context. While it correctly identifies that a version was updated, it does not specify what was changed, why it was changed, or the impact of the update. A better message would include the version number and clarify that it was a patch update (e.g., 'Bump version to 1.2.1'). The message is minimally informative but not clear or actionable for a reviewer.","The commit message is concise, relevant, and follows the conventional format for version updates ('chore(version): update version to 1.2.1'). It clearly indicates the type of change (chore), the specific action (updating the version), and the new version number, which aligns perfectly with the diff showing the version bump from '1.2.0' to '1.2.1'. This is an excellent commit message for version updates."
053aba3df160726380e67bbe8a423cc5dfe1e75a,#118 Error handling list when using geocode as method,geocoder/api.py,"@@ -46,7 +46,6 @@ def get(location, **kwargs):
             'geocode': Here,
             'reverse': HereReverse,
         },
-        'nokia': {'geocode': Here},
         'baidu': {'geocode': Baidu},
         'yahoo': {'geocode': Yahoo},
         'tomtom': {'geocode': Tomtom},
@@ -84,6 +83,10 @@ def get(location, **kwargs):
             'elevation': Elevation,
         },
     }
+    if isinstance(location, (list, dict)) and method == 'geocode':
+        print('[ERROR] Please provide a string as the location.\n'
+              '>>> g = geocoder.get(""Ottawa ON"", provider=""google"")')
+        sys.exit()
     if not provider in options:
         print('[ERROR] Please provide a correct provider\n'
               'Ex: google, bing, osm, here, opencage, tomtom, mapquest\n'
",add missing code,BUG(core): Validate location input type for geocode method,Corrective,"The new message identifies a specific validation issue in the geocode method, indicating a bug fix focused on input type validation, which addresses a functional defect rather than a stylistic or minor change.",3.0,2.0,4.0,"The commit message correctly identifies the issue addressed (error handling when using a list or dict as location with the 'geocode' method) and references the issue number (#118). However, it is overly brief and lacks context about the change's scope or impact. It does not mention the specific fix (e.g., the added validation and error message), nor does it explain why this is important or how it improves the user experience. A more detailed message would have been better, but the message is still actionable and relevant, warranting a moderate score.","The commit message 'add missing code' is overly vague and lacks specificity. While the diff shows the removal of a 'nokia' entry and the addition of a validation check for list/dict inputs in geocode, the message does not indicate what was actually added or fixed. A better message would describe the change, such as 'Add input validation for geocode with non-string locations and remove deprecated Nokia provider'. The current message fails to convey the actual scope or purpose of the change, making it poor for communication and code review.","The commit message accurately identifies the issue and its scope: validating the input type for the geocode method when location is a list or dict. It correctly labels it as a bug in the core functionality and specifies the context (geocode method). However, it lacks detail about the exact problem (e.g., why list/dict are invalid) or how the fix improves robustness. The message is clear and relevant, but could be slightly more specific about the user impact or edge cases. Overall, it's solid and appropriate for a core validation fix, earning a strong 4."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/__init__.py,"@@ -1,6 +1,19 @@
 #!/usr/bin/python
 # coding: utf8
 
+# TODO: Move imports to specific modules that need them
+
+# CORE
+from .api import get, yahoo, bing, geonames, google, mapquest  # noqa
+from .api import nokia, osm, tomtom, geolytica, arcgis, opencage  # noqa
+from .api import maxmind, freegeoip, ottawa, here, baidu, w3w, yandex  # noqa
+
+# EXTRAS
+from .api import timezone, elevation, ip, canadapost, reverse  # noqa
+
+# CLI
+from .cli import cli  # noqa
+
 """"""
 Geocoder
 ~~~~~~~~
@@ -29,14 +42,3 @@ __author_email__ = 'carriere.denis@gmail.com'
 __version__ = '1.2.2'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
-
-# CORE
-from .api import get, yahoo, bing, geonames, google, mapquest
-from .api import nokia, osm, tomtom, geolytica, arcgis, opencage
-from .api import maxmind, freegeoip, ottawa, here, baidu, w3w, yandex
-
-# EXTRAS
-from .api import timezone, elevation, ip, canadapost, reverse
-
-# CLI
-from .cli import cli
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that was previously masked or unaddressed, which is a corrective action to address a functional issue rather than a cosmetic or semantic change.",1.0,1.0,1.0,"The commit message 'Fix pep8 errors' is highly misleading given the actual changes in the diff. The diff shows a complete reorganization of imports, with all old import statements removed and new, grouped imports added. This is not a PEP8 fix—it's a refactoring of the code structure to improve readability and maintainability by grouping imports by module type (CORE, EXTRAS, CLI). The commit message fails to describe the actual change, which is a structural improvement, not a PEP8 error fix. Therefore, it is inaccurate and does not reflect the work done, warranting a low score.","The commit message 'add missing docstrings' is completely inconsistent with the actual changes in the diff. The diff shows a refactoring of import statements, moving imports into categorized sections and removing old ones, not adding docstrings. There are no docstrings added or modified in the code. The message misrepresents the change, making it misleading and inaccurate. Therefore, the score is 1 (Poor).","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual changes in the diff. The diff shows a refactoring of imports, organizing them into core, extras, and CLI sections with comments, which is a code organization improvement, not a fix for a 'rectification failed' issue. The message provides no context about what was fixed, why, or what problem it solves. It fails to describe the actual change, making it misleading and unhelpful for understanding the commit's purpose."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/api.py,"@@ -87,14 +87,14 @@ def get(location, **kwargs):
         print('[ERROR] Please provide a string as the location.\n'
               '>>> g = geocoder.get(""Ottawa ON"", provider=""google"")')
         sys.exit()
-    if not provider in options:
+    if provider not in options:
         print('[ERROR] Please provide a correct provider\n'
               'Ex: google, bing, osm, here, opencage, tomtom, mapquest\n'
               '$ geocode ""Ottawa ON"" --provider google\n'
               '>>> g = geocoder.get(""Ottawa ON"", provider=""google"")')
         sys.exit()
     else:
-        if not method in options[provider]:
+        if method not in options[provider]:
             print('[ERROR] Please provide a correct method\n'
                   'Ex: geocode, reverse, timezone, elevation\n'
                   '$ geocode ""45.68, -75.15"" --method reverse\n'
",improve error message,fix(geocoder): validate provider and method availability,Semantic,"The new message provides specific context about the change (validation of provider and method availability) and associates it with a feature area (geocoder), making the intent and scope clearer than the generic 'Fix pep8 errors'.",1.0,2.0,5.0,"The commit message incorrectly claims to fix 'PEP8 errors', but the diff shows no PEP8-related changes—only a logical correction in conditionals (`in` vs `not in`). The actual change is a bug fix for a logic error in provider/method validation, not a formatting issue. The commit message is therefore misleading and does not accurately reflect the changes made. This misrepresentation significantly reduces its credibility and usefulness, warranting a low score.","The commit message 'improve error message' is overly vague and provides no detail about what was actually improved or why. While the code diff shows a small but meaningful change—changing `if not provider in options` to `if provider not in options`—this is a syntactic correction that improves readability and correctness. However, the commit message fails to convey the specific improvement, the context, or the impact. A better message would mention the exact change (e.g., 'fix comparison logic in provider validation') or clarify that the error message was made more precise. Thus, it earns a score of 2: it acknowledges a change but lacks specificity and technical detail.","The commit message accurately reflects the changes in the code diff. It clearly states that the validation for both provider and method availability has been fixed, which directly corresponds to the modification of the conditional checks (`provider not in options` and `method not in options`). The use of 'fix' indicates a bug correction, and the context 'geocoder' correctly identifies the affected module. The message is concise, relevant, and sufficiently descriptive for understanding the change's purpose."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/geolytica.py,"@@ -3,6 +3,7 @@
 
 from .base import Base
 
+
 class Geolytica(Base):
     """"""
     Geocoder.ca
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that was previously masked or unaddressed, implying a corrective action is needed.",1.0,3.0,1.0,"The commit message claims to fix 'PEP8 errors', but the code diff shows only the addition of a new class definition and no actual PEP8 violations or fixes. There is no evidence of code formatting issues being corrected, and the change is purely structural (adding a class). The message is therefore misleading and does not accurately reflect the change. As a result, it is poor and deserves a score of 1.","The commit message 'add missing import' is brief and technically accurate, as the diff shows a new import statement being added. However, it lacks context—such as why the import was needed or what the class Geolytica does—which would help other developers understand the purpose. While it correctly identifies the action, it does not provide sufficient detail to be considered excellent. Thus, it is functional but not comprehensive.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was actually fixed, why it was necessary, or what issue it resolves. It does not describe the change in the code (which is merely adding a class definition), nor does it indicate the problem it addresses. A good commit message should clearly explain the intent and impact of the change. Given the lack of specificity and relevance to the actual code diff, this message is poor."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/haversine.py,"@@ -5,6 +5,7 @@ from math import radians, cos, sin, asin, sqrt
 
 AVG_EARTH_RADIUS = 6371  # in km
 
+
 def haversine(point1, point2, miles=False):
     """""" Calculate the great-circle distance bewteen two points on the Earth surface.
 
",add miles to haversine function,feat(utils): add haversine distance calculation,Semantic,"The new message describes a feature addition (haversine distance calculation) with a semantic meaning, indicating a functional enhancement rather than a style or error fix.",1.0,2.0,3.0,"The commit message 'Fix pep8 errors' is vague and does not accurately reflect the actual changes in the diff. The diff shows the addition of a docstring and a comment, not any PEP8 errors being fixed. Additionally, the commit does not address any actual PEP8 violations (such as missing spaces, incorrect indentation, or naming issues), and the change is more about improving documentation than fixing code style. Therefore, the commit message is misleading and lacks specificity, resulting in a low score.","The commit message 'add miles to haversine function' is too vague and lacks detail. While it correctly indicates a change related to the haversine function, it does not specify what exactly was added (e.g., a boolean parameter to toggle between km and miles), why it was added, or how it improves the function. A better message would include context about the parameter's purpose and impact. Thus, it scores a 2 for being minimally relevant but insufficiently informative.","The commit message 'feat(utils): add haversine distance calculation' is clear and follows the conventional format (feat, scope, description). It correctly identifies the feature and the utility module. However, it lacks detail about the purpose or context—such as why this function was added or how it improves the system. While it is accurate and appropriately categorized, it does not provide enough context to fully justify the change, especially without knowing the use case or impact. Thus, it is functional but not excellent."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/here.py,"@@ -152,4 +152,4 @@ class Here(Base):
 
 if __name__ == '__main__':
     g = Here('New York City')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add newline at the end of the file,fix(Here): add missing debug call,Cosmetic,"The change introduces a debug call but does not fix a bug or alter behavior; it's a minor, stylistic addition to improve traceability during development.",2.0,2.0,3.0,"The commit message incorrectly claims to fix 'PEP8 errors', but the diff shows only a missing newline at the end of a file, which is not a PEP8 issue. PEP8 specifically governs code style (like whitespace, naming, etc.), and a trailing newline is not part of PEP8. The change is minimal and technically valid, but the commit message is misleading and inaccurate. Therefore, it receives a score of 2 for being technically off but not completely absent of value.","The commit message 'add newline at the end of the file' is technically accurate and addresses the change, but it is overly vague and lacks context. The diff shows a simple newline addition at the end of a file, which is a common formatting fix. While the action is correct, the message does not explain why it matters (e.g., for consistency, linters, or style guides), nor does it provide any insight into the broader impact. A better message would explain the purpose (e.g., 'Ensure file ends with newline to comply with style guide'). Therefore, it receives a score of 2 — acceptable but lacking depth and context.","The commit message correctly identifies the issue as a missing debug call and specifies the affected file and class. However, it lacks context about why the debug call was necessary or what behavior it enables, which limits its usefulness for understanding the intent behind the change. The fix is small and straightforward, so the message is accurate but not detailed enough to be considered excellent. A score of 3 reflects that it is clear and relevant but lacks depth or context."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/here_reverse.py,"@@ -5,6 +5,7 @@ from .base import Base
 from .keys import app_id, app_code
 from .location import Location
 
+
 class HereReverse(Base):
     """"""
     HERE Geocoding REST API
@@ -69,4 +70,4 @@ class HereReverse(Base):
 
 if __name__ == '__main__':
     g = HereReverse([45.4049053, -75.7077965])
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing docstring,feat(here-reverse): add support for reverse geocoding with debug output,Semantic,"The new message describes a new feature (reverse geocoding with debug output) and clearly indicates its purpose and scope, providing meaningful context beyond just fixing formatting or errors.",2.0,2.0,3.0,"The commit message incorrectly claims to fix PEP8 errors, but the diff shows only a newline addition at the end of a file, which is not a PEP8 issue. PEP8 violations typically involve formatting, spacing, or naming issues, and this change is a trivial newline fix. The message is misleading and does not accurately reflect the actual change. While the change itself is minor and technically valid, the commit message fails to provide context or correctly identify the nature of the change, reducing its quality.","The commit message 'add missing docstring' is vague and does not accurately reflect the actual changes. The diff shows that a class (HereReverse) is being added with a proper docstring, and the debug call is fixed to have a newline. The message fails to mention the addition of the class or the fix to the debug call. While it correctly identifies a missing docstring, it omits critical context about what was added or fixed, making it insufficiently descriptive for a clear understanding of the change.","The commit message correctly identifies the feature addition (reverse geocoding) and mentions debug output, which is relevant to the code change. However, it lacks specificity about what exactly was added or how it improves functionality. The diff shows a simple addition of a class and a debug call, but the message does not clearly convey the scope or impact. It is accurate but overly generic, missing technical detail or context that would make it more informative for developers reviewing the change."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/maxmind.py,"@@ -77,7 +77,7 @@ class Maxmind(Base):
         if subdivisions:
             self.content['subdivision'] = subdivisions[0]
 
-        #Grab all names in [en] and place them in self.parse
+        # Grab all names in [en] and place them in self.parse
         for key, value in self.content.items():
             if isinstance(value, dict):
                 for minor_key, minor_value in value.items():
",update maxmind.py,style(core): fix spacing in comment,Cosmetic,"The change only addresses spacing in a comment, which is a formatting issue without altering functionality or behavior.",2.0,2.0,3.0,"The commit message correctly identifies a PEP8-related fix (specifically, fixing a missing space before a comment), but it is overly vague and lacks context. While the code diff shows a simple formatting change (adding a space before 'Grab'), the commit message does not explain what was fixed or why it matters. A better message would specify the exact issue (e.g., 'Fix missing space in comment for consistency with PEP8') and provide context. Therefore, it is only minimally adequate, earning a score of 2.","The commit message 'update maxmind.py' is extremely vague and provides no information about what was changed or why. While the diff shows a minor stylistic change (fixing a missing space in a comment), the message fails to convey the actual impact or context of the change. A better message would specify the nature of the change, such as 'Fix spacing in comment for readability in maxmind.py'. Therefore, it receives a score of 2 for lacking specificity and context.","The commit message accurately reflects the change — it addresses a style issue involving spacing in a comment. However, it lacks context about why the change was made or what the original issue was (e.g., inconsistent spacing, PEP8 violation). While the message is correct and relevant, it is minimal and does not fully convey the impact or intent of the change, which limits its completeness. A score of 3 reflects a decent but basic commit message that meets the minimum standard for style fixes."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/opencage.py,"@@ -204,4 +204,4 @@ class OpenCage(Base):
 
 if __name__ == '__main__':
     g = OpenCage('1552 Payette dr., Ottawa')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at the end of file,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that was previously masked or unaddressed, which is a corrective action to address a problem rather than a cosmetic or trivial change.",2.0,2.0,2.0,"The commit message incorrectly claims to fix 'PEP8 errors', but the diff shows only a missing newline at the end of a file, which is not a PEP8 issue. PEP8 specifically addresses Python code style, and a trailing newline is not a PEP8 violation (though it's a best practice). The change is minimal and likely unrelated to PEP8. The message is misleading and does not accurately reflect the actual change, so it receives a low score despite the small fix.","The commit message correctly identifies the issue—a missing newline at the end of the file—but it lacks context about why this matters or how it affects the codebase. While the fix is technically accurate, the message is overly minimal and does not convey the significance or impact of the change. A better message would explain that the missing newline could cause issues with file parsing or version control tools, or reference a style guide. As such, it is functional but not comprehensive, warranting a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple addition of a missing `g.debug()` call, which is a straightforward code correction. However, the term 'rectification failed' is ambiguous and does not convey the actual change or its purpose. A better message would specify the issue, such as 'fix: added missing debug call in main execution'. Therefore, while the message indicates a fix, it lacks clarity and context, resulting in a low score."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/opencage_reverse.py,"@@ -49,4 +49,4 @@ class OpenCageReverse(OpenCage, Base):
 
 if __name__ == '__main__':
     g = OpenCageReverse([45.4049053, -75.7077965])
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at the end of file,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that was previously masked or unaddressed, implying a corrective action is needed.",2.0,3.0,1.0,"The commit message incorrectly claims to fix 'PEP8 errors', but the diff shows only a missing newline at the end of a file, which is not a PEP8 issue. PEP8 specifically addresses Python code style, and a trailing newline is not considered a PEP8 violation. The change is minor and trivial, but the commit message is misleading and lacks specificity about what was actually fixed. Therefore, it receives a score of 2 — insufficient accuracy and context for the actual change.","The commit message accurately reflects the change made — adding a missing newline at the end of the file. However, it is overly simplistic and lacks context about why this matters (e.g., adherence to coding standards, tooling requirements, or impact on file parsing). While correct, it does not provide enough detail to be considered excellent. It is factual and relevant, but lacks depth or explanation, resulting in a moderate score.","The commit message 'fix: rectification failed' is highly vague and does not accurately describe the actual change. The diff shows a simple addition of a missing newline at the end of a print statement (g.debug()), which is a formatting issue, not a 'rectification failure'. The term 'rectification' is unrelated to the context and suggests a misunderstanding of the change. A clear, descriptive message such as 'fix: add missing newline to debug call' would be appropriate. Therefore, the commit message is poor in clarity, relevance, and technical accuracy."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/osm.py,"@@ -161,4 +161,4 @@ class Osm(Base):
 
 if __name__ == '__main__':
     g = Osm('1552 Payette dr, Ottawa ON')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at the end of file,fix(oss): add missing g.debug() call,Corrective,"The new message indicates a missing debug call that was likely causing a runtime issue or missing logging, which is a functional deficiency rather than a style or cosmetic change.",2.0,3.0,3.0,"The commit message incorrectly claims to fix 'PEP8 errors', but the diff shows only a missing newline at the end of a file, which is not a PEP8 issue. PEP8 specifically addresses Python code style, and adding a newline is not a PEP8 violation. The change is minimal and unrelated to PEP8, making the commit message misleading and inaccurate. While the change itself is valid, the message fails to reflect the actual nature of the fix, resulting in a low score.","The commit message correctly identifies the issue — a missing newline at the end of the file — which is a valid and minor code formatting change. However, it lacks context about why this matters (e.g., style guidelines, tooling requirements) or the impact on code quality or build processes. While accurate and technically correct, it is overly minimal and does not convey the significance or broader implications of the change, which limits its completeness. Therefore, it receives a moderate score.","The commit message correctly identifies the issue as a missing call to `g.debug()` and labels it as a fix. However, it uses 'oss' instead of 'osm' (likely a typo), which could cause confusion. The message is clear and relevant to the diff, but the incorrect acronym reduces precision. Overall, it's functional but not perfectly accurate, hence a score of 3."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/timezone.py,"@@ -73,4 +73,4 @@ class Timezone(Base):
 
 if __name__ == '__main__':
     g = Timezone([45.5375801, -75.2465979])
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at the end of the file,fix(utility): add missing debug call in timezone example,Corrective,"The new message indicates a specific bug fix—adding a missing debug call—which corrects a functional issue in the timezone example, moving beyond mere style or formatting.",2.0,3.0,3.0,"The commit message incorrectly claims to fix 'PEP8 errors', but the diff shows only a missing newline at the end of a file, which is not a PEP8 issue. PEP8 specifically addresses code style, such as indentation, whitespace, and naming, and a trailing newline is not one of them. The change is trivial and likely unrelated to PEP8. The message is misleading and does not accurately reflect the actual change, so it receives a low score despite the small patch size.","The commit message accurately reflects the change made — adding a missing newline at the end of the file. However, it is somewhat generic and lacks context about why this matters (e.g., formatting standards, linting rules, or tooling requirements). While correct and technically accurate, it doesn't provide enough detail to be considered excellent. Therefore, a score of 3 is appropriate: it's clear and relevant but lacks depth or broader significance.","The commit message correctly identifies the issue as a missing debug call and specifies the context (timezone example). However, it lacks detail about why the debug call was necessary or what impact its addition had. The term 'fix(utility)' is slightly misleading since the change is not a utility function fix but a small behavioral addition in an example. The message is clear and relevant but could be more precise and informative."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/tomtom.py,"@@ -4,6 +4,7 @@
 from .base import Base
 from .keys import tomtom_key
 
+
 class Tomtom(Base):
     """"""
     Geocoding API
@@ -113,4 +114,4 @@ class Tomtom(Base):
 
 if __name__ == '__main__':
     g = Tomtom('1552 Payette dr., Ottawa')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing docstring to tomtom,feat(api): add Tomtom geocoding class with debug functionality,Semantic,"The new message provides a clear semantic description of the change (adding a new API class with debug functionality), indicating a functional enhancement rather than just fixing style or errors.",2.0,1.0,3.0,"The commit message incorrectly claims to fix 'PEP8 errors', but the diff shows only a newline addition at the end of a file and a missing newline in a print statement (which is not a PEP8 issue). The actual change is a simple formatting fix (adding a newline), not a PEP8 compliance fix. The message is misleading and does not accurately reflect the changes made. While the change is minor and technically valid, the commit message is inaccurate and lacks specificity, resulting in a low score.","The commit message 'add missing docstring to tomtom' is highly inaccurate and misleading. The diff shows that a class (Tomtom) is being defined and a docstring is added to it, not a missing docstring in a module or function. Additionally, the commit adds a line to call `g.debug()` in the main block, which is unrelated to documentation. The message fails to reflect the actual changes made. Therefore, it is poor and does not accurately describe the commit's purpose.","The commit message correctly identifies the feature as adding a Tomtom geocoding class and mentions debug functionality, which is accurate based on the diff. However, it lacks specificity about the implementation changes (e.g., no mention of the key handling or the actual debug method usage) and could be more precise in describing the impact. The message is clear and relevant but not detailed enough to be considered excellent. Thus, a score of 3 reflects a decent but somewhat generic commit message."
7b12e1dcafed4044e1b1afce7b8995f7a765bb01,"Fix pep8 errors

Signed-off-by: Thanh Ha <thanh.ha@alumni.carleton.ca>",geocoder/yahoo.py,"@@ -135,4 +135,4 @@ class Yahoo(Base):
 
 if __name__ == '__main__':
     g = Yahoo('1552 Payette dr., Ottawa, ON')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at the end of file,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that was previously masked or unaddressed, implying a corrective action is needed.",2.0,2.0,1.0,"The commit message incorrectly claims to fix PEP8 errors, but the diff shows only a missing newline at the end of a file, which is not a PEP8 issue. PEP8 specifically addresses code style, not trailing newlines (which are typically handled by linters or formatters). The change is minimal and technically a formatting issue, but the commit message misrepresents the nature of the fix. Therefore, the message is inaccurate and lacks specificity, resulting in a low score.","The commit message accurately reflects the change — adding a missing newline at the end of the file — which is a valid and minor fix. However, it lacks context about why this matters (e.g., adherence to formatting guidelines, potential impact on tools like git or linters), and does not explain the broader significance. While technically correct, it is overly minimal and fails to provide meaningful context for a reviewer, resulting in a moderate score.","The commit message 'fix: rectification failed' is vague, unclear, and does not describe what was actually fixed or why. The diff shows a simple addition of a missing line (`g.debug()`) after a comment, which suggests a missing call to a debug method. A meaningful commit message should clearly state the change and its purpose, such as 'fix: add missing debug call to print location details'. The term 'rectification failed' is ambiguous and not descriptive of the actual issue or fix, making it poor communication for code review or future developers."
659799fc990b354a1fabe63f25f9803d8acedfe4,Version change 1.2.3,geocoder/__init__.py,"@@ -26,7 +26,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.2.2'
+__version__ = '1.2.3'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a specific issue (rectification failed), suggesting a bug correction rather than a cosmetic or trivial change.",2.0,1.0,1.0,"The commit message 'Version change 1.2.3' is overly brief and lacks context. While it correctly indicates a version update, it does not explain why the version was incremented, what changes were made, or how this affects users or functionality. A more meaningful message would include a brief description of the changes, such as 'Updated version to 1.2.3 with consistent JSON responses across providers.' This would better inform developers and maintainers about the significance of the change.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.2.2' to '1.2.3', not the addition of any docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and irrelevant. A correct message would have been something like 'Bump version to 1.2.3'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows a simple version bump from '1.2.2' to '1.2.3', which is a version update, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what issue it resolves. It fails to meet basic expectations for clarity and relevance, making it poor for communication and tracking."
659799fc990b354a1fabe63f25f9803d8acedfe4,Version change 1.2.3,setup.py,"@@ -2,7 +2,7 @@
 # coding: utf8
 from setuptools import setup
 
-__version__ = '1.2.2'
+__version__ = '1.2.3'
 requirements_file = ""requirements.txt""
 requirements = [pkg.strip() for pkg in open(requirements_file).readlines()]
 
",add missing version,chore(version): update version to 1.2.3,Semantic,"The new message provides clearer context by indicating the type of change (chore) and specifying the action (update version), making the commit's purpose more semantically meaningful than the generic 'Version change 1.2.3'.",3.0,2.0,5.0,"The commit message 'Version change 1.2.3' is accurate and indicates the version update, but it lacks context such as why the version was incremented (e.g., bug fixes, new features) or any related changes. While it correctly reflects the version bump, it is minimal and does not provide sufficient detail for a complete understanding of the change's significance. A more detailed message would include the reason for the version update, which would improve clarity and usefulness for team members or maintainers.","The commit message 'add missing version' is vague and does not clearly convey the change or its significance. While the diff shows an update from version '1.2.2' to '1.2.3', the message fails to indicate that a version was incremented, which is a more precise and meaningful description. A better message would specify 'Bump version to 1.2.3' or 'Update package version to 1.2.3'. Therefore, the message is minimally informative and lacks clarity, warranting a score of 2.","The commit message is clear, concise, and follows the conventional format for version updates (""chore(version): update version to 1.2.3""). It accurately reflects the change in the code (updating __version__ from 1.2.2 to 1.2.3) and is appropriately categorized under 'chore' as it is a maintenance change unrelated to functionality. The message is specific and provides sufficient context without being overly verbose."
836f817baedb984340505e95b3ccd00b20bfbe68,Fixed broken URL issue with OSM,geocoder/base.py,"@@ -90,7 +90,7 @@ class Base(object):
     def _initialize(self, **kwargs):
         # Remove extra URL from kwargs
         if 'url' in kwargs:
-            kwargs.remove('url')
+            kwargs.pop('url')
         self.json = dict()
         self.parse = self.tree()
         self.content = None
",base.py,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a fix for a previously identified issue, thus representing a corrective action.",2.0,1.0,1.0,"The commit message 'Fixed broken URL issue with OSM' is too vague and does not accurately reflect the actual change. The diff shows a fix for removing a key ('url') from kwargs using `pop()` instead of `remove()`, which is a valid Python operation but not related to a 'broken URL' issue. The message lacks context about what was broken, why it was fixed, or the impact. While it correctly identifies a bug fix, the description is misleading and insufficient for understanding the change's purpose.","The commit message 'base.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. A meaningful commit message should describe the specific modification and its purpose. In this case, the diff shows a fix from using `kwargs.remove('url')` (which is invalid syntax) to `kwargs.pop('url')`, a critical correction in Python dictionary handling. The commit message fails to convey this important change, making it useless for understanding the intent or context of the update.","The commit message 'fix: rectification failed' is extremely vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what problem it solved. The diff shows a simple correction of `kwargs.remove('url')` to `kwargs.pop('url')`, which is a valid Python fix, but the commit message fails to communicate this change or its significance. A meaningful commit message should explain the intent and impact, not just use vague terms like 'rectification failed'."
836f817baedb984340505e95b3ccd00b20bfbe68,Fixed broken URL issue with OSM,geocoder/osm.py,"@@ -19,11 +19,13 @@ class Osm(Base):
     method = 'geocode'
 
     def __init__(self, location, **kwargs):
-        url = kwargs.pop('url', '')
-        if not url:
+        url = kwargs.get('url', '')
+        if url:
+            self.url = url
+        elif url.lower() == 'localhost':
+            self.url = 'http://localhost/nominatim/search'
+        else:
             self.url = 'http://nominatim.openstreetmap.org/search'
-        if url.lower() == 'localhost':
-            self.url = 'http://localhost/nominatim/'
 
         self.location = location
         self.params = {
",update osm.py,fix(osm): set default URL and handle localhost case,Corrective,"The new message indicates a specific fix addressing a broken URL issue by setting a default URL and handling the localhost case, which resolves a functional defect rather than just altering wording or appearance.",2.0,2.0,3.0,"The commit message 'Fixed broken URL issue with OSM' is too vague and does not accurately reflect the changes made. The diff shows that the URL handling was improved with better default behavior and a specific case for 'localhost', but the message fails to mention these improvements or the actual fix. It lacks specificity about what was broken and how it was fixed, making it insufficient for understanding the change's impact. A better message would describe the logic changes, such as handling the 'localhost' case or improving URL fallbacks.","The commit message 'update osm.py' is overly vague and provides no information about what was changed or why. The diff shows a significant update to the URL handling logic, including conditional assignment of the URL based on input values and adding a localhost-specific fallback. A better commit message would describe the change, such as 'Add localhost URL support and improve URL configuration in Osm class'. Since the current message offers no context or value, it receives a score of 2 (barely sufficient but insufficiently informative).","The commit message 'fix(osm): set default URL and handle localhost case' is concise and indicates a fix related to URL handling. However, it lacks detail about the actual changes made—such as the use of .get() instead of .pop() and the new logic for localhost—making it unclear what was fixed or why. While it correctly identifies the issue domain, it does not fully reflect the technical improvements or the specific behavior changes (e.g., fallback to localhost URL, proper handling of empty values). A better message would explicitly mention the use of .get(), the default URL fallback, and the localhost handling. Thus, it is partially accurate but insufficiently descriptive for a clear understanding of the change."
725795059fda03a3006deca6c349c78273feffac,Version change 1.2.4,geocoder/__init__.py,"@@ -26,7 +26,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.2.3'
+__version__ = '1.2.4'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a specific failure (rectification failed), suggesting a bug correction rather than a cosmetic or trivial change.",2.0,1.0,1.0,"The commit message 'Version change 1.2.4' is technically accurate but lacks detail and context. It does not explain why the version was incremented, what changes were made, or how this affects users or functionality. While it correctly identifies the version update, it fails to provide meaningful information for developers or maintainers reviewing the change. A better message would include a brief description of the changes or improvements, such as 'Updated version to 1.2.4 with consistent JSON responses across providers.'","The commit message 'add missing docstrings' is highly misleading given the actual diff. The diff shows only a version bump from '1.2.3' to '1.2.4', not any addition of docstrings. Therefore, the commit message does not accurately reflect the changes made, making it incorrect and unhelpful. This misalignment significantly reduces its usefulness and credibility, warranting a poor score.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows a simple version bump from '1.2.3' to '1.2.4', which is a routine update, not a fix for a rectification failure. The message lacks context, specificity, and technical clarity, making it misleading and unhelpful for understanding the purpose of the commit."
725795059fda03a3006deca6c349c78273feffac,Version change 1.2.4,setup.py,"@@ -2,7 +2,7 @@
 # coding: utf8
 from setuptools import setup
 
-__version__ = '1.2.3'
+__version__ = '1.2.4'
 requirements_file = ""requirements.txt""
 requirements = [pkg.strip() for pkg in open(requirements_file).readlines()]
 
",add missing version,fix: rectification failed,Corrective,"The new message indicates a fix for a specific issue (rectification failed), suggesting a bug correction rather than a cosmetic or trivial change.",3.0,2.0,1.0,"The commit message 'Version change 1.2.4' is accurate and indicates the version update, but it lacks context such as why the version was changed, whether it includes new features, bug fixes, or other relevant details. While it correctly identifies the change, it is minimal and does not provide sufficient information for a complete understanding of the update's impact. A better message would include a brief description of the changes or improvements.","The commit message 'add missing version' is too vague and does not clearly communicate the change or its significance. While the diff shows an update from version '1.2.3' to '1.2.4', the message fails to indicate that a version was incremented, nor does it explain why this change matters. A better message would specify the version update and possibly the reason (e.g., 'Bump version to 1.2.4 for bug fix and new features'). As it stands, the message lacks detail and context, making it only minimally informative.","The commit message 'fix: rectification failed' is highly vague and lacks clarity. It does not describe what was actually fixed, why the fix was necessary, or what 'rectification failed' refers to. The diff shows a simple version bump from '1.2.3' to '1.2.4', which is a routine update, not a bug fix. A meaningful commit message should clearly state the change and its purpose. This message fails to provide any actionable or informative context, making it poor for tracking or understanding changes."
0fe99bc2ffbc60d136ac7b138ed2060cc45e3b41,#125 Fixing encoding issues,geocoder/base.py,"@@ -156,10 +156,12 @@ class Base(object):
         # Encoding Value to for Python2/3 (default='utf-8')
         if value:
             if sys.version_info.major == 2:
-                pass
+                if isinstance(value, (str, unicode)):  # noqa
+                    return value.encode('utf-8')
 
-            if sys.version_info.major == 3:
-                pass
+            elif sys.version_info.major == 3:
+                if isinstance(value, str):
+                    return value.encode('utf-8')
         return value
 
     def _build_tree(self, content, last=''):
",update base.py,fix(base): handle string encoding for Python 2 and 3,Corrective,"The new message specifies a base fix for handling string encoding across Python 2 and 3, indicating a bug fix or correction to ensure proper encoding behavior, which is a corrective improvement.",2.0,2.0,3.0,"The commit message ""#125 Fixing encoding issues"" is overly vague and provides no detail about what was actually fixed or why. The code diff shows a specific change: adding encoding logic for Python 2 and 3 strings to UTF-8, which addresses encoding of string values based on Python version. A better commit message would specify the exact behavior change, such as 'Add UTF-8 encoding for string values in Python 2 and 3'. As it stands, the message lacks technical detail and context, making it insufficient for understanding the change's impact.","The commit message 'update base.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a significant modification to the encoding logic for Python 2 and 3, specifically handling string encoding to UTF-8 based on the Python version. A meaningful commit message should reflect this change, such as 'Add UTF-8 encoding for string values in Python 2 and 3'. As it stands, the message offers no context or value to developers reviewing the change, resulting in a low score.","The commit message 'fix(base): handle string encoding for Python 2 and 3' is accurate in indicating a fix related to string encoding across Python versions. However, it lacks detail about the actual change—such as how the encoding is handled differently in Python 2 vs 3 or why the fix was necessary. The diff shows that the code now encodes strings to UTF-8 in both Python 2 and 3, but the commit message does not clearly convey the scope or intent of the change. While it correctly identifies the type of fix and the affected component, it is too vague to be considered excellent. Thus, a score of 3 reflects a decent but insufficiently detailed message."
0fe99bc2ffbc60d136ac7b138ed2060cc45e3b41,#125 Fixing encoding issues,geocoder/location.py,"@@ -112,4 +112,3 @@ class Location(object):
 
 if __name__ == '__main__':
     l = Location([])
-    print l
",update location.py,fix(LOCATION): remove unused print statement,Cosmetic,"The change removes an unused print statement, which is a minor code cleanup with no functional impact, improving code readability and maintainability without altering behavior.",1.0,2.0,5.0,"The commit message '#125 Fixing encoding issues' is highly misleading and irrelevant to the actual change in the diff. The diff only removes a print statement, which is a trivial code cleanup, not related to encoding issues. There is no mention of encoding, file handling, or character sets in the change. Therefore, the commit message does not accurately reflect the work done, making it poor and potentially confusing for other developers.","The commit message 'update location.py' is extremely vague and provides no information about what was changed or why. While it indicates a file was modified, it lacks context such as the nature of the change (e.g., removed a print statement), the reason for the change, or its impact. The diff shows a removal of a print statement, which is a minor but meaningful change, but the commit message fails to reflect that. A better message would describe the change explicitly, such as 'Remove print statement from Location class initialization for cleaner output.' Therefore, the message is only minimally informative and scores a 2.","The commit message is concise, relevant, and clearly indicates the change made. It specifies the type of change ('fix'), the component affected ('LOCATION'), and the reason ('remove unused print statement'). The diff confirms that the print statement was indeed removed, and the message accurately reflects the change without unnecessary details. This is an excellent commit message that follows standard conventions."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/api.py,"@@ -9,26 +9,26 @@ from .here import Here
 from .yahoo import Yahoo
 from .baidu import Baidu
 from .tomtom import Tomtom
-from .google import Google
 from .arcgis import Arcgis
 from .ottawa import Ottawa
 from .yandex import Yandex
+from .google import Google
 from .maxmind import Maxmind
 from .location import Location
 from .opencage import OpenCage
 from .geonames import Geonames
 from .mapquest import Mapquest
-from .timezone import Timezone
 from .haversine import haversine
-from .elevation import Elevation
 from .geolytica import Geolytica
 from .freegeoip import FreeGeoIP
 from .canadapost import Canadapost
 from .w3w_reverse import W3WReverse
 from .here_reverse import HereReverse
 from .bing_reverse import BingReverse
-from .google_reverse import GoogleReverse
 from .yandex_reverse import YandexReverse
+from .google_timezone import Timezone
+from .google_elevation import Elevation
+from .google_reverse import GoogleReverse
 from .mapquest_reverse import MapquestReverse
 from .opencage_reverse import OpenCageReverse
 
",add missing imports,"add(services): import Google, GoogleReverse, GoogleTimeZone, GoogleElevation",Cosmetic,"The new message focuses on listing imported services rather than describing a format change or correction, making it more concise and action-oriented without altering semantics or functionality.",2.0,3.0,3.0,"The commit message is unclear and misrepresents the actual changes. The commit does not mention or involve NamedTuples or any format change for location. Instead, it appears to be about enabling or re-enabling reverse geocode providers (e.g., Google, GoogleReverse, etc.), which were previously disabled. The message falsely claims a format change for location and incorrectly attributes the changes to 'namedtuples'. This misalignment between the commit message and the actual diff significantly reduces its clarity and accuracy, warranting a low score.","The commit message 'add missing imports' is vague and lacks specificity. While it correctly identifies that imports were added, it does not explain which imports were missing, why they were needed, or what functionality they enable. The diff shows that several imports were restored (e.g., Google, GoogleReverse, Timezone, Elevation), suggesting a broader context—such as a feature reintegration or dependency restoration—was involved. A better message would specify, for example, 'Restore Google and related geolocation services imports after removal during refactoring.' As it stands, the message is technically accurate but insufficiently informative for understanding the purpose or impact of the change.","The commit message is generally clear and identifies the type of change ('add(services)') and the affected services. However, it uses slightly inaccurate or inconsistent naming: the commit mentions 'GoogleTimeZone' and 'GoogleElevation', but the actual changes in the diff are 'Timezone', 'Elevation', and 'GoogleReverse' — which are imported under different module names (e.g., 'google_timezone', 'google_elevation'). The message also misrepresents the scope by implying a new Google service is being added, when the change is simply re-importing previously excluded modules. This leads to a minor misalignment between the message and the actual diff. Thus, it's understandable but not fully accurate, warranting a moderate score."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/bing_reverse.py,"@@ -25,9 +25,9 @@ class BingReverse(Bing, Base):
     method = 'reverse'
 
     def __init__(self, location, **kwargs):
+        self.location = Location(location)
         self.url = 'http://dev.virtualearth.net/' \
-                   'REST/v1/Locations/{0}'.format(Location(location))
-        self.location = location
+                   'REST/v1/Locations/{0}'.format(self.location)
         self.params = {
             'o': 'json',
             'key': kwargs.get('key', bing_key),
",update bing_reverse.py,feat(bing-reverse): use Location object for URL and location parameter,Semantic,"The new message introduces a more specific and meaningful change by indicating the use of a Location object in the URL and location parameter, which reflects a semantic improvement in how the functionality is described, moving beyond just format changes to clarify the actual implementation.",2.0,2.0,4.0,"The commit message is unclear and misleading. It claims to 'change the format for location to give NamedTuples', but the diff shows only a change from a string to a Location object (likely a wrapper or validator), not the use of NamedTuples. There is no mention of NamedTuples in the code. Additionally, the message states 'corrections of the reverse geocode providers had to be applied', which is vague and not supported by the diff. The commit message fails to clearly describe what was changed, why, and how it affects functionality. Thus, it is only minimally informative and deserves a low score.","The commit message 'update bing_reverse.py' is extremely vague and provides no information about what was changed or why. While the diff shows a clear update to the location handling (using Location(location) instead of raw string and updating the URL accordingly), the commit message fails to convey the significance of the change, such as improved validation, type safety, or consistency. A better message would specify the improvement, e.g., 'Use Location class for location input to ensure proper formatting in Bing reverse geocoding URL'. Thus, it receives a score of 2 for lacking detail and context.","The commit message accurately reflects the change: it highlights the use of a Location object for both the URL and the location parameter. The message is clear, concise, and relevant to the diff, which shows the replacement of raw string formatting with an object instance. However, it could be slightly more detailed about the benefit (e.g., type safety, consistency, or validation), which would make it excellent. As it stands, it's well-written and appropriate for the change, just not fully exhaustive."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/freegeoip.py,"@@ -22,38 +22,6 @@ class FreeGeoIP(Base):
     API Reference
     -------------
     http://freegeoip.net/
-
-    OSM Quality (4/6)
-    -----------------
-    [ ] addr:housenumber
-    [ ] addr:street
-    [x] addr:city
-    [x] addr:state
-    [x] addr:country
-    [x] addr:postal
-
-    Attributes (13/20)
-    ------------------
-    [ ] accuracy
-    [x] address
-    [ ] bbox
-    [x] city
-    [ ] confidence
-    [ ] continent
-    [x] country
-    [ ] housenumber
-    [x] ip
-    [x] lat
-    [x] lng
-    [x] location
-    [x] ok
-    [x] postal
-    [x] provider
-    [ ] quality
-    [x] state
-    [x] status
-    [ ] street
-    [x] time_zone
     """"""
     provider = 'freegeoip'
     method = 'geocode'
",add missing docstrings,docs(implementation): remove OSM quality and attributes notes from FreeGeoIP class,Cosmetic,"The change removes documentation notes from a class, which is a minor formatting or documentation cleanup rather than a functional or semantic improvement.",2.0,1.0,5.0,"The commit message is vague and does not accurately reflect the diff. The diff shows the removal of OSM quality and attributes comments, not a change to location format using NamedTuples. The message mentions 'Changed the format for location to give NamedTuples' which is not supported by the diff, and the second sentence about 'corrections of the reverse geocode providers' is unrelated to the actual changes. The message fails to clearly describe what was actually changed, making it misleading and lacking specificity. Therefore, it receives a score of 2 (Fair) for being somewhat relevant but inaccurate and incomplete.","The commit message 'add missing docstrings' is overly vague and does not accurately reflect the actual changes. The diff shows that the commit removes a large section of documentation (OSM Quality and Attributes tables) rather than adding docstrings. This suggests the message is misleading or incorrect. A proper commit message should describe the actual change, such as 'remove outdated OSM quality and attributes documentation', which would better reflect the diff. Therefore, the commit message is poor and does not match the actual diff.","The commit message accurately and concisely reflects the change made in the code diff. It clearly states that the OSM quality and attributes notes have been removed from the FreeGeoIP class documentation. The message is specific, relevant, and follows the expected format for a documentation-related change (using 'docs(implementation)' as a prefix). The diff confirms that the commented-out sections were indeed removed, aligning perfectly with the commit message. This is an excellent, precise, and actionable commit message."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/geolytica.py,"@@ -13,35 +13,6 @@ class Geolytica(Base):
     API Reference
     -------------
     http://geocoder.ca/?api=1
-
-    OSM Quality (5/6)
-    -----------------
-    [x] addr:housenumber
-    [x] addr:street
-    [x] addr:city
-    [x] addr:state
-    [ ] addr:country
-    [x] addr:postal
-
-    Attributes (12/17)
-    ------------------
-    [ ] accuracy
-    [x] address
-    [ ] bbox
-    [x] city
-    [ ] confidence
-    [ ] country
-    [x] housenumber
-    [x] lat
-    [x] lng
-    [x] location
-    [x] ok
-    [x] postal
-    [x] provider
-    [ ] quality
-    [x] state
-    [x] status
-    [x] street
     """"""
     provider = 'geolytica'
     method = 'geocode'
",add missing docstrings,docs(geolytica): remove OSM quality and attributes checklist,Cosmetic,"The change removes a documentation checklist, which is a minor formatting or presentation update rather than a functional or semantic improvement.",2.0,2.0,4.0,"The commit message is incomplete and lacks clarity. It mentions a format change for location using NamedTuples, which is not clearly linked to the diff shown—where the only change is the removal of a commented-out OSM Quality and Attributes section, not a change to location format. The second sentence about 'corrections of the reverse geocode providers' is vague and not supported by the diff. There is no mention of NamedTuples or any actual code change related to location formatting. Therefore, the message is misleading and does not accurately reflect the actual changes in the diff, resulting in a low score.","The commit message 'add missing docstrings' is vague and does not accurately reflect the actual change. The diff shows that the commit removes a large section of documentation (OSM Quality and Attributes tables) rather than adding docstrings. The removal of these detailed documentation sections contradicts the claim of adding docstrings. Therefore, the message is misleading and fails to convey the true nature of the change, warranting a low score.","The commit message accurately reflects the change by indicating that OSM quality and attributes checklists were removed from the documentation. It is concise and clearly scoped to the file and action. However, it lacks detail about why the checklists were removed (e.g., outdated, redundant, or no longer relevant), which slightly limits its completeness. Overall, it is clear, relevant, and appropriately scoped, making it a strong but not perfect commit message."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/geonames.py,"@@ -15,40 +15,6 @@ class Geonames(Base):
     API Reference
     -------------
     http://www.geonames.org/export/web-services.html
-
-    OSM Quality (3/7)
-    -----------------
-    [ ] addr:housenumber
-    [ ] addr:street
-    [ ] addr:city
-    [x] addr:state
-    [x] addr:country
-    [ ] addr:postal
-    [x] population
-
-    Attributes (13/21)
-    ------------------
-    [ ] accuracy
-    [x] address
-    [ ] bbox
-    [ ] city
-    [x] code
-    [ ] confidence
-    [x] country
-    [x] description
-    [x] geonames_id
-    [ ] housenumber
-    [x] lat
-    [x] lng
-    [x] location
-    [x] ok
-    [x] population
-    [ ] postal
-    [x] provider
-    [ ] quality
-    [x] state
-    [x] status
-    [ ] street
     """"""
     provider = 'geonames'
     method = 'geocode'
",add missing doc blocks,docs(geonames): remove OSM quality and attributes checklist,Cosmetic,"The change removes a checklist from documentation, which is a minor formatting or presentation update rather than a functional or semantic improvement.",2.0,2.0,4.0,"The commit message is vague and does not accurately reflect the changes in the code diff. The diff shows the removal of a commented section about OSM quality and attributes, not a change to the format of 'location' to NamedTuples. The message claims a change to 'location' format and mentions corrections to reverse geocode providers, which are not evident in the diff. This misalignment between the message and the actual changes reduces its clarity and relevance, resulting in a low score.","The commit message 'add missing doc blocks' is vague and does not accurately reflect the actual changes. The diff shows that the commit removes a large section of commented OSM quality and attributes metadata, which was previously present in the docstring. This suggests the change is not about adding doc blocks, but rather removing or refactoring existing ones. The message misrepresents the change, leading to confusion about the intent. While it's technically not entirely false (some doc blocks were removed), the phrasing is misleading and lacks specificity. A better message would describe the removal of outdated or redundant quality and attributes metadata. Thus, the score is 2 for being inaccurate and overly generic.","The commit message accurately reflects the change: removing OSM quality and attributes checklists from the Geonames class documentation. It is concise, relevant, and clearly indicates the scope of the change. However, it lacks context about why the checklists were removed (e.g., deprecated, outdated, or redundant), which slightly limits its completeness. Overall, it is clear and appropriate for a documentation update, earning a strong 4."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/google_elevation.py,"@@ -18,24 +18,13 @@ class Elevation(Base):
     API Reference
     -------------
     https://developers.google.com/maps/documentation/elevation/
-
-    Attributes
-    ----------
-    [x] elevation
-    [x] feet
-    [x] location
-    [x] meters
-    [x] ok
-    [x] provider
-    [x] resolution
-    [x] status
     """"""
     provider = 'google'
     method = 'elevation'
 
     def __init__(self, location, **kwargs):
         self.url = 'https://maps.googleapis.com/maps/api/elevation/json'
-        self.location = Location(location).latlng
+        self.location = Location(location)
         self.params = {
             'locations': self.location,
         }
@@ -49,6 +38,14 @@ class Elevation(Base):
         if self.parse['results']:
             self._build_tree(self.parse['results'][0])
 
+    @property
+    def lat(self):
+        return self.location.lat
+
+    @property
+    def lng(self):
+        return self.location.lng
+
     @property
     def status(self):
         if self.elevation:
",add google elevation api docs,feat(elevation): add lat and lng properties,Semantic,"The new message introduces a new feature (lat and lng properties for elevation) with a clear semantic change, indicating a functional addition rather than a formatting or correction update.",2.0,1.0,4.0,"The commit message is partially relevant but inaccurate. The diff shows a change from using a Location object with latlng to using a Location object directly, and adds lat/lng properties via @property, which is not about converting to NamedTuples. The claim that 'the format for location to give NamedTuples' is incorrect based on the code. Additionally, the mention of 'corrections of the reverse geocode providers' is not supported by the diff, which only involves elevation and location handling. The message lacks specificity and contains false claims, making it poorly aligned with the actual changes.","The commit message 'add google elevation api docs' is highly inaccurate and irrelevant to the actual changes in the code diff. The diff shows modifications to the Elevation class, including the addition of lat and lng properties, changes to the location handling, and removal of old attribute documentation. There is no addition of API documentation as suggested in the commit message. Instead, the changes involve code logic and property additions. The message fails to reflect the actual work done, making it misleading and unhelpful for understanding the commit's purpose.","The commit message accurately reflects the change: adding lat and lng properties to the Elevation class. It is specific, concise, and clearly indicates the feature addition. However, it lacks context about why these properties were added (e.g., for better access to coordinates) or any potential impact on usage. While it meets the basic requirements for a good commit message, a slightly more detailed justification (e.g., 'to enable direct access to latitude and longitude from elevation results') would make it excellent. Thus, it is strong but not perfect."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/google_reverse.py,"@@ -17,18 +17,17 @@ class GoogleReverse(Google, Base):
     API Reference
     -------------
     https://developers.google.com/maps/documentation/geocoding/
-
     """"""
     provider = 'google'
     method = 'reverse'
 
     def __init__(self, location, **kwargs):
         self.url = 'https://maps.googleapis.com/maps/api/geocode/json'
-        self.location = location
+        self.location = Location(location)
         self.short_name = kwargs.get('short_name', True)
         self.params = {
             'sensor': 'false',
-            'latlng': Location(location),
+            'latlng': self.location,
             'key': kwargs.get('key', ''),
         }
         self._initialize(**kwargs)
",add short_name to google_reverse,refactor(google-reverse): use Location class for location handling,Semantic,"The new message indicates a refactoring effort to use a Location class, which implies a more structured and semantic approach to location handling, shifting from NamedTuples to a dedicated class, thus improving clarity and intent.",2.0,1.0,5.0,"The commit message is unclear and misleading. It claims to 'change the format for location to give NamedTuples', but the diff shows a simple replacement of `Location(location)` with `Location(location)` (no actual change in type or structure). There's no mention of NamedTuples or any actual formatting change. Additionally, the justification about 'corrections of the reverse geocode providers' is vague and not supported by the diff. The message fails to accurately reflect the actual change, making it poor communication of what was done.","The commit message 'add short_name to google_reverse' is highly inaccurate and misleading. The diff shows no addition or modification related to 'short_name'—instead, it shows a change in how the location is handled, with a new `Location(location)` instantiation and a parameter update. The `short_name` parameter was already present in the code and is merely being retrieved from kwargs. The message does not reflect the actual changes made, which involve location handling and object instantiation, not adding short_name. Therefore, the commit message is irrelevant and fails to describe the real work done.","The commit message clearly and concisely communicates the refactoring effort, specifying the scope ('google-reverse') and the exact change ('use Location class for location handling'). It accurately reflects the diff, where the `location` parameter is wrapped in a `Location` instance both in `__init__` and in the `params` dictionary. The message is specific, relevant, and provides sufficient context for understanding the change without unnecessary detail."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/google_timezone.py,"@@ -17,25 +17,13 @@ class Timezone(Base):
     API Reference
     -------------
     https://developers.google.com/maps/documentation/timezone/
-
-    Attributes
-    ----------
-    [x] location
-    [x] ok
-    [x] provider
-    [x] status
-    [x] status_description
-    [x] timestamp
-    [x] timezone
-    [x] timezone_id
-    [x] utc
     """"""
     provider = 'google'
     method = 'timezone'
 
     def __init__(self, location, **kwargs):
         self.url = 'https://maps.googleapis.com/maps/api/timezone/json'
-        self.location = Location(location).latlng
+        self.location = Location(location)
         self.timestamp = kwargs.get('timestamp', time.time())
         self.params = {
             'location': self.location,
@@ -51,6 +39,14 @@ class Timezone(Base):
         if self.parse['results']:
             self._build_tree(self.parse['results'][0])
 
+    @property
+    def lat(self):
+        return self.location.lat
+
+    @property
+    def lng(self):
+        return self.location.lng
+
     @property
     def ok(self):
         return bool(self.timeZoneName)
",add google timezone api docs,"add(lat, lng)(timezone): expose latitude and longitude as properties",Semantic,"The new message provides a clearer, more intuitive API exposure by describing the method signature and properties directly, improving understanding of how location data is accessed without altering the underlying format.",2.0,1.0,3.0,"The commit message is misleading and does not accurately reflect the changes in the code. The diff shows that the location format was not changed to NamedTuples, but rather the `location` attribute is now a `Location` object (presumably a class instance), and new `lat` and `lng` properties are added for convenience. The message claims a change to 'NamedTuples' which is not present. Additionally, the mention of 'corrections of the reverse geocode providers' is unrelated to the actual changes and appears to be a false or incorrect addition. The message lacks clarity, accuracy, and context, resulting in a low score.","The commit message 'add google timezone api docs' is highly inaccurate and irrelevant to the actual changes in the code diff. The diff shows modifications to the Timezone class, including the addition of lat and lng properties, changes to the location handling, and removal of several attribute comments. There is no documentation added, and the changes are implementation-level, not documentation-related. The commit message fails to reflect the real content of the change, making it misleading and unhelpful for understanding the purpose of the commit.","The commit message 'add(lat, lng)(timezone): expose latitude and longitude as properties' is somewhat unclear and lacks precision. While it correctly indicates that lat and lng properties are being added, the phrasing 'add(lat, lng)' is ambiguous and doesn't clearly convey that these are properties derived from a Location object. Additionally, the message misses context about why these properties are being exposed or how they improve usability. A better message would specify that latitude and longitude are now accessible via properties from the Location object. The change is technically valid and relevant, so it earns a mid-level score rather than excellent or poor."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/here.py,"@@ -16,40 +16,6 @@ class Here(Base):
     API Reference
     -------------
     https://developer.here.com/rest-apis/documentation/geocoder
-
-    OSM Quality (6/6)
-    -----------------
-    - [x] addr:housenumber
-    - [x] addr:street
-    - [x] addr:city
-    - [x] addr:state
-    - [x] addr:country
-    - [x] addr:postal
-
-    Attributes (22/22)
-    ------------------
-    - [x] accuracy
-    - [x] address
-    - [x] bbox
-    - [x] city
-    - [x] confidence
-    - [x] country
-    - [x] country_name
-    - [x] county
-    - [x] encoding
-    - [x] housenumber
-    - [x] lat
-    - [x] lng
-    - [x] location
-    - [x] neighborhood
-    - [x] ok
-    - [x] postal
-    - [x] provider
-    - [x] quality
-    - [x] road
-    - [x] state
-    - [x] state_long
-    - [x] status
     """"""
     provider = 'here'
     method = 'geocode'
",add missing jsdoc tags,CHORE(s): remove OSM quality and attributes checklist from Here geocoder class documentation,Cosmetic,"The change removes a checklist from documentation, which is a minor, non-functional update with no impact on behavior or semantics, purely affecting presentation.",2.0,2.0,5.0,"The commit message is vague and lacks clarity about the actual changes made. It mentions a format change for 'location' to NamedTuples, but does not specify what was changed or why. The second sentence about 'corrections of the reverse geocode providers' is unclear and appears to be a misstatement or confusion with unrelated work. There is no clear connection between the message and the diff, which only shows the removal of OSM quality and attributes sections. The message fails to explain the significance or impact of the change, making it insufficient for understanding the commit's purpose.","The commit message 'add missing jsdoc tags' is vague and does not accurately reflect the actual change. The diff shows that the OSM Quality and Attributes sections—previously present as commented-out lists—are being removed, not jsdoc tags being added. There is no evidence of JSDoc comments being introduced. The message misrepresents the change, making it unclear and potentially misleading. While the change involves documentation, it's not about adding jsdoc tags, so the message is inaccurate and lacks specificity.","The commit message is clear, concise, and accurately reflects the change made in the code diff. It explicitly states that the OSM quality and attributes checklist has been removed from the Here geocoder class documentation, which aligns perfectly with the diff showing the deletion of those sections. The use of 'CHORE(s)' appropriately indicates it's a maintenance task unrelated to new features or bugs. The message is specific, relevant, and provides sufficient context for understanding the change."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/here_reverse.py,"@@ -23,9 +23,9 @@ class HereReverse(Base):
 
     def __init__(self, location, **kwargs):
         self.url = 'http://reverse.geocoder.cit.api.here.com/6.2/reversegeocode.json'
-        self.location = location
+        self.location = Location(location)
         self.params = {
-            'prox': Location(location),
+            'prox': self.location,
             'app_id': kwargs.get('app_id', app_id),
             'app_code': kwargs.get('app_code', app_code),
             'mode': 'retrieveAddresses',
",add missing url and params,refactor(geocoder): use Location class for location handling,Semantic,"The new message reflects a more precise and modern approach by introducing a dedicated Location class, indicating a structural and conceptual improvement in how location data is handled, rather than just formatting changes.",2.0,2.0,4.0,"The commit message is unclear and misleading. It claims to 'change the format for location to give NamedTuples', but the diff shows a simple instantiation of a `Location` class (likely a wrapper or model), not a NamedTuple. There's no mention of NamedTuples at all. Additionally, the justification about 'corrections of the reverse geocode providers' is vague and not supported by the diff. The message fails to explain the actual change or its purpose, making it difficult to understand the intent. A score of 2 reflects poor clarity and inaccuracy.","The commit message 'add missing url and params' is vague and inaccurate. The diff shows a change in the initialization of `self.location` and the `prox` parameter, where `Location(location)` is used instead of just `location`, and `self.location` is used instead of `Location(location)` in the params. The message does not reflect the actual change, which is a type conversion and proper object instantiation, not the addition of URL or params. It fails to describe what was actually modified or why. Therefore, it is poorly written and misleading.","The commit message accurately reflects the change: it refactors the code to use the Location class for location handling, which is consistent with the diff showing the replacement of raw location values with Location(location) instances. The message is concise, relevant, and appropriately categorized with 'refactor(geocoder)'. However, it lacks detail about why the refactor was necessary (e.g., better validation, type safety, or consistency), which slightly limits its completeness. Still, it clearly communicates the intent and scope, making it solid but not outstanding."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/location.py,"@@ -1,6 +1,7 @@
 #!/usr/bin/python
 # coding: utf8
 import re
+from collections import namedtuple
 
 
 class Location(object):
@@ -18,13 +19,6 @@ class Location(object):
         else:
             return False
 
-    @property
-    def status(self):
-        if self.ok:
-            return 'OK'
-        elif self.error:
-            return self.error
-
     def _convert_float(self, number):
         try:
             return float(number)
@@ -95,14 +89,16 @@ class Location(object):
         condition1 = isinstance(self.lat, float)
         condition2 = isinstance(self.lng, float)
         if bool(condition1 and condition2):
-            return [self.lat, self.lng]
+            latlng = namedtuple('LatLng', ['lat', 'lng'])
+            return latlng(self.lat, self.lng)
 
     @property
     def xy(self):
         condition1 = isinstance(self.lat, float)
         condition2 = isinstance(self.lng, float)
         if bool(condition1 and condition2):
-            return [self.lng, self.lat]
+            xy = namedtuple('XY', ['x', 'y'])
+            return xy(self.lng, self.lat)
 
     def __str__(self):
         if self.ok:
",add missing docstrings,add(namedtuple): support latlng and xy coordinates,Semantic,"The new message clearly indicates the addition of namedtuple support for latlng and xy coordinates, providing more precise and meaningful information about the change compared to the old message, which focused on corrections and format changes without specifying the actual addition or intent.",2.0,1.0,3.0,"The commit message mentions a change to use NamedTuples for location data, which is accurate and partially relevant to the diff. However, it incorrectly states that 'corrections of the reverse geocode providers had to be applied' — this is not supported by the diff, which shows only a structural change in the Location class (introducing NamedTuples for lat/lng and xy properties), with no reference to reverse geocoding or provider corrections. The message is misleading and lacks context about the actual changes. Therefore, it is only minimally clear and technically inaccurate, warranting a score of 2.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff does not add any docstrings; instead, it introduces the use of `namedtuple` to return structured data (LatLng and XY) in place of simple lists. The change is a code refactoring involving data representation, not documentation. Therefore, the commit message misrepresents the actual changes made, making it misleading and incorrect. This significantly reduces its usefulness and credibility.","The commit message 'add(namedtuple): support latlng and xy coordinates' is somewhat accurate and captures the main change — using namedtuples for latlng and xy coordinates. However, it lacks context about why namedtuples were introduced (e.g., for better readability, type safety, or API clarity) and does not mention the removal of the deprecated `status` property or the change in return types (from lists to namedtuples). While the message is concise and technically correct, it is minimal and could be improved with more detail to reflect the full scope of changes. Thus, it earns a moderate score of 3."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/mapquest.py,"@@ -19,37 +19,6 @@ class Mapquest(Base):
     API Reference
     -------------
     http://www.mapquestapi.com/geocoding/
-
-    OSM Quality (5/6)
-    -----------------
-    [ ] addr:housenumber
-    [x] addr:street
-    [x] addr:city
-    [x] addr:state
-    [x] addr:country
-    [x] addr:postal
-
-    Attributes (14/19)
-    ------------------
-    [ ] accuracy
-    [x] address
-    [ ] bbox
-    [x] city
-    [ ] confidence
-    [x] country
-    [x] county
-    [ ] housenumber
-    [x] lat
-    [x] lng
-    [x] location
-    [ ] neighborhood
-    [x] ok
-    [x] postal
-    [x] provider
-    [x] quality
-    [x] state
-    [x] status
-    [x] street
     """"""
     provider = 'mapquest'
     method = 'geocode'
",add missing docstrings,fix(osm-quality): update OSM quality assessment for address fields,Corrective,"The new message indicates a fix to improve OSM quality assessment, specifically addressing address fields, which suggests a correction to ensure data accuracy, aligning with a corrective improvement.",2.0,2.0,3.0,"The commit message is partially relevant but lacks clarity and context. While it mentions a format change for location using NamedTuples, it does not clearly link this change to the diff, which shows the removal of OSM quality and attributes comments—indicating a code cleanup or refactoring, not just a format change. The second sentence about 'corrections of reverse geocode providers' is vague and not supported by the diff. The message fails to explain the actual impact or why the change was necessary. It is more descriptive than informative, thus earning a low mid-range score.","The commit message 'add missing docstrings' is vague and does not accurately reflect the actual changes. The diff shows the removal of OSM quality and attributes sections, which were previously present in the docstring, not the addition of docstrings. Therefore, the message misrepresents the change. While it is technically true that some docstrings were removed, the phrase 'add missing' implies addition where in fact content was deleted. This leads to a misunderstanding of the commit's intent, warranting a low score.","The commit message indicates a change related to OSM quality assessment for address fields, which aligns with the diff showing the removal of OSM quality checkboxes for certain address fields (like addr:housenumber). However, the message is vague and lacks specific details about which fields were updated or why. It does not clearly convey the scope or impact of the change, such as which fields were marked or unmarked, or what the rationale was. While it correctly identifies the context (OSM quality), it fails to provide enough detail to be considered excellent. Thus, a score of 3 reflects a partially adequate but insufficiently informative message."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/mapquest_reverse.py,"@@ -26,14 +26,14 @@ class MapquestReverse(Mapquest, Base):
 
     def __init__(self, location, **kwargs):
         self.url = 'http://www.mapquestapi.com/geocoding/v1/address'
-        self.location = location
+        self.location = Location(location)
         self.headers = {
             'referer': 'http://www.mapquestapi.com/geocoding/',
             'host': 'www.mapquestapi.com',
         }
         self.params = {
             'key': kwargs.get('key', mapquest_key),
-            'location': Location(location),
+            'location': self.location,
             'maxResults': 1,
         }
         self._initialize(**kwargs)
",add mapquestreverse class,refactor(mapquest): use Location class for location handling,Semantic,"The new message reflects a more specific and structured refactoring using a Location class, indicating a shift in implementation approach with clearer semantics compared to the old message, which focused on format changes and corrections.",2.0,2.0,4.0,"The commit message is unclear and misleading. It claims to have 'changed the format for location to give NamedTuples', but the diff shows a change from a simple string location to a Location object (likely a class or wrapper), not a NamedTuple. There is no mention of NamedTuples at all. Additionally, the justification about 'corrections of the reverse geocode providers' is vague and not supported by the diff. The message fails to explain the actual change, its purpose, or why it was necessary. While there is a minor improvement in code structure, the message does not accurately reflect the change, reducing its quality to a basic level.","The commit message 'add mapquestreverse class' is overly vague and does not reflect the actual changes made. The diff shows a modification to the MapquestReverse class where the location is wrapped in a Location object and the params use self.location instead of a direct Location(location). This change implies a structural or type-related improvement, which is not captured in the commit message. A better message would describe the change, such as 'Wrap location in Location object for consistent type handling in MapquestReverse.' Therefore, the message is insufficiently descriptive and lacks technical detail, warranting a score of 2.","The commit message accurately reflects the change: it indicates a refactoring to use the Location class for location handling, which is consistent with the diff showing the replacement of raw location strings with Location(location) instances in both self.location and self.params. The message is concise, relevant, and clearly communicates the intent. However, it lacks detail about why this refactoring was done (e.g., for consistency, type safety, or validation), which could have made it more comprehensive. Still, it is clear and appropriate for a refactoring commit, earning a solid 4."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/maxmind.py,"@@ -16,41 +16,6 @@ class Maxmind(Base):
     API Reference
     -------------
     https://www.maxmind.com/en/geolocation_landing
-
-    OSM Quality (4/6)
-    -----------------
-    [ ] addr:housenumber
-    [ ] addr:street
-    [x] addr:city
-    [x] addr:state
-    [x] addr:country
-    [x] addr:postal
-
-    Attributes (17/23)
-    ------------------
-    [ ] accuracy
-    [x] address
-    [ ] bbox
-    [x] city
-    [ ] confidence
-    [x] continent
-    [x] country
-    [x] domain
-    [ ] housenumber
-    [x] ip
-    [x] isp
-    [x] lat
-    [x] lng
-    [x] location
-    [x] metro_code
-    [x] ok
-    [x] postal
-    [x] provider
-    [ ] quality
-    [x] state
-    [x] status
-    [ ] street
-    [x] timezone
     """"""
     provider = 'maxmind'
     method = 'geocode'
",add docs for maxmind api,docs(update): remove OSM quality and attributes checklist,Cosmetic,"The change involves removing a documentation item (checklist) related to OSM quality and attributes, which is a minor, non-functional update with no impact on behavior or semantics, purely affecting documentation presentation.",2.0,2.0,4.0,"The commit message is partially relevant but lacks clarity and context. It mentions a format change for location using NamedTuples, which is not clearly linked to the diff shown—where the only visible change is the removal of OSM quality and attributes comments, not a structural change to location. The second sentence about 'corrections of reverse geocode providers' is vague and not supported by the diff. The message fails to explain what was changed, why, or how it impacts functionality. While there is a minor hint of a change, the message is insufficient and could mislead. Thus, it receives a score of 2 (Fair) due to lack of specificity and accuracy.","The commit message 'add docs for maxmind api' is overly vague and does not accurately reflect the actual changes in the diff. The diff shows the removal of a section about OSM quality and attributes, which suggests that documentation was being removed or revised, not added. The message fails to indicate that content was deleted or restructured, and thus misrepresents the change. While it mentions 'docs', it lacks specificity and context, making it only minimally informative. A better message would clarify that documentation was updated or removed, especially given the significant changes in the doc structure.","The commit message accurately reflects the change: removing OSM quality and attributes checklists from the documentation. It is clear, concise, and directly related to the diff, which shows the removal of those sections. However, it lacks context about why the checklists were removed (e.g., deprecated, outdated, or no longer relevant), which slightly limits its completeness. Still, it correctly identifies the action and scope, making it a solid and useful commit message."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/opencage_reverse.py,"@@ -26,9 +26,9 @@ class OpenCageReverse(OpenCage, Base):
 
     def __init__(self, location, **kwargs):
         self.url = 'http://api.opencagedata.com/geocode/v1/json'
-        self.location = location
+        self.location = Location(location)
         self.params = {
-            'query': Location(location),
+            'query': self.location,
             'key': kwargs.get('app_id', opencage_key),
         }
         self._initialize(**kwargs)
",update opencage_reverse.py,refactor(api): use Location class for location handling,Semantic,"The new message reflects a more precise and modern approach by introducing a dedicated Location class, indicating a shift in abstraction and design intent, rather than just formatting changes.",2.0,2.0,4.0,"The commit message is partially relevant but lacks clarity and precision. While it mentions a change to 'NamedTuples' (which is not explicitly stated in the diff), the diff shows a simple wrapper of the location input using the `Location(location)` constructor, not necessarily a NamedTuple transformation. The message also incorrectly states 'Corrections of the reverse geocode providers had to be applied'—this is not evident from the diff. The change is minimal and the justification is vague and misleading. Therefore, it scores a 2: it addresses a minor change but with inaccurate and unclear reasoning.","The commit message 'update opencage_reverse.py' is overly vague and provides no information about what was changed or why. While the diff shows a clear update where the location is wrapped in a Location class and the query parameter now uses the instance's location, the commit message fails to convey the significance of the change—such as improved type safety, better encapsulation, or correct handling of location data. A more descriptive message like 'Use Location class for location and query parameters to ensure proper type handling' would be much more informative and useful for code review and maintenance.","The commit message accurately reflects the change: it highlights the refactoring of location handling to use the Location class, which is consistent with the diff showing the replacement of raw location values with Location(location) instances. The message is concise, relevant, and clearly indicates the nature and scope of the change. However, it lacks detail about why this refactoring was necessary (e.g., for type safety, validation, or consistency), which could have made it more comprehensive. Still, it is clear and appropriate for a refactor, earning a strong score."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/ottawa.py,"@@ -19,35 +19,6 @@ class Ottawa(Base):
     API Reference
     -------------
     http://maps.ottawa.ca/ArcGIS/rest/services/compositeLocator/GeocodeServer/findAddressCandidates
-
-    OSM Quality (5/6)
-    -----------------
-    [x] addr:housenumber
-    [ ] addr:street
-    [x] addr:city
-    [x] addr:state
-    [x] addr:country
-    [x] addr:postal
-
-    Attributes (13/17)
-    ------------------
-    [x] accuracy
-    [x] address
-    [ ] bbox
-    [x] city
-    [ ] confidence
-    [x] country
-    [x] housenumber
-    [x] lat
-    [x] lng
-    [x] location
-    [x] ok
-    [x] postal
-    [x] provider
-    [ ] quality
-    [x] state
-    [x] status
-    [ ] street
     """"""
     provider = 'ottawa'
     method = 'geocode'
",add missing docstrings,docs(ottawa): remove OSM quality and attributes checklist,Cosmetic,"The change removes a checklist from documentation, which is a minor formatting or presentation update rather than a functional or semantic improvement.",2.0,2.0,4.0,"The commit message is vague and does not accurately reflect the changes shown in the diff. The diff shows the removal of OSM quality and attributes comments, not a change in location format to NamedTuples. The message mentions 'changed the format for location' and 'corrections of reverse geocode providers', which are not supported by the diff. There is no mention of NamedTuples or any actual code change related to location formatting. The claim about reverse geocode corrections is also unsupported. While the message attempts to explain context, it lacks specificity and factual alignment with the actual changes, making it only minimally informative.","The commit message 'add missing docstrings' is vague and does not accurately reflect the actual change. The diff shows that existing docstrings were removed (e.g., OSM Quality and Attributes sections) and replaced with a minimal comment, not that docstrings were added. Therefore, the message is misleading and fails to convey the true nature of the change. While it's not entirely wrong, it's insufficiently specific and could mislead reviewers. A score of 2 reflects a basic but inaccurate message.","The commit message accurately reflects the change: removing OSM quality and attributes checklists from the Ottawa class documentation. It is concise, relevant, and clearly indicates the scope of the change. However, it lacks context about why the checklists were removed (e.g., if they were deprecated or outdated), which slightly limits its completeness. Overall, it is clear and appropriate for a documentation update, making it a strong but not exceptional commit message."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/tomtom.py,"@@ -17,36 +17,6 @@ class Tomtom(Base):
     API Reference
     -------------
     http://developer.tomtom.com/products/geocoding_api
-
-    OSM Quality (6/6)
-    -----------------
-    [x] addr:housenumber
-    [x] addr:street
-    [x] addr:city
-    [x] addr:state
-    [x] addr:country
-    [x] addr:postal
-
-    Attributes (15/18)
-    ------------------
-    [ ] accuracy
-    [x] address
-    [ ] bbox
-    [x] city
-    [ ] confidence
-    [x] country
-    [x] geohash
-    [x] housenumber
-    [x] lat
-    [x] lng
-    [x] location
-    [x] ok
-    [x] postal
-    [x] provider
-    [x] quality
-    [x] state
-    [x] status
-    [x] street
     """"""
     provider = 'tomtom'
     method = 'geocode'
",add missing docstrings,docs(omnibus): remove outdated OSM quality and attributes checklist,Cosmetic,"The change removes outdated documentation, which is a maintenance task with no functional impact on the code or behavior, thus classified as cosmetic.",2.0,2.0,5.0,"The commit message is partially relevant but lacks clarity and context. It mentions a format change for 'location' to NamedTuples, which is not clearly linked to the diff shown—where the only visible change is the removal of OSM quality and attributes comments, not a structural change to location. The second sentence about 'reverse geocode providers' is also not supported by the diff. The message is too vague and does not accurately reflect the actual changes in the code. A better commit message would explicitly state that comments related to OSM quality and attributes were removed, not that a format change was made. Thus, it scores a 2 for being somewhat off-topic and misleading.","The commit message 'add missing docstrings' is vague and does not accurately reflect the actual change. The diff shows that existing docstrings were removed (e.g., the OSM Quality and Attributes sections), not just missing ones added. This suggests the commit actually removed documentation rather than adding it. Therefore, the message is misleading and does not correctly describe the change, warranting a low score.","The commit message accurately and concisely describes the change: removing outdated OSM quality and attributes checklists from the documentation. It clearly identifies the scope (docs, omnibus) and the nature of the change (removal of outdated content). The message is specific, relevant, and provides sufficient context for understanding the purpose of the change without unnecessary detail. This is an excellent commit message that aligns well with conventional commit standards."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/w3w_reverse.py,"@@ -35,9 +35,9 @@ class W3WReverse(W3W, Base):
 
     def __init__(self, location, **kwargs):
         self.url = 'http://api.what3words.com/position'
-        self.location = location
+        self.location = Location(location)
         self.params = {
-            'position': Location(location),
+            'position': self.location,
             'key': kwargs.get('key', w3w_key),
         }
         self._initialize(**kwargs)
",add w3wreverse class,refactor(api): use Location class for position handling,Semantic,"The new message reflects a more precise and modern approach by introducing a dedicated Location class, indicating a shift in abstraction and design intent, rather than just formatting changes.",2.0,2.0,4.0,"The commit message is partially relevant but lacks clarity and accuracy. It claims to change the format to 'NamedTuples', but the diff shows a change from `Location(location)` to `Location(location)` in both the instance and params — no NamedTuple usage is indicated. The message also incorrectly states that 'corrections of the reverse geocode providers had to be applied', which is not supported by the diff. The change is actually a simple wrapper of a Location object, not a format change to NamedTuples. The message is misleading and does not accurately reflect the actual change, so it receives a low score.","The commit message 'add w3wreverse class' is overly vague and does not reflect the actual changes made. The diff shows a refinement of the W3WReverse class, specifically updating the location handling by wrapping the input in a Location object and adjusting parameter passing. A better commit message would describe this improvement, such as 'Improve location handling in W3WReverse by wrapping input in Location class'. Since the message fails to convey the technical detail or purpose of the change, it receives a score of 2.","The commit message is clear and relevant, indicating a refactoring effort to use the Location class for position handling. It correctly identifies the scope (api) and the nature of the change (refactor). However, it lacks detail about why the change was made (e.g., type safety, consistency, or error handling), which could have strengthened it. Overall, it is accurate and appropriate for the diff, but could be slightly more informative."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/yahoo.py,"@@ -15,38 +15,6 @@ class Yahoo(Base):
     API Reference
     -------------
     https://developer.yahoo.com/boss/geo/
-
-    OSM Quality (6/6)
-    -----------------
-    [x] addr:housenumber
-    [x] addr:street
-    [x] addr:city
-    [x] addr:state
-    [x] addr:country
-    [x] addr:postal
-
-    Attributes (17/20)
-    ------------------
-    [ ] accuracy
-    [x] address
-    [ ] bbox
-    [x] city
-    [ ] confidence
-    [x] country
-    [x] county
-    [x] hash
-    [x] housenumber
-    [x] lat
-    [x] lng
-    [x] location
-    [x] neighborhood
-    [x] ok
-    [x] postal
-    [x] provider
-    [x] quality
-    [x] state
-    [x] status
-    [x] street
     """"""
     provider = 'yahoo'
     method = 'geocode'
",add docs for yahoo api,docs(yahoo): remove outdated OSM quality and attributes section,Cosmetic,"The change removes outdated documentation content, which is a maintenance task rather than a functional correction. It does not alter behavior or data format, and primarily improves documentation clarity by removing obsolete information.",2.0,2.0,5.0,"The commit message is vague and does not accurately reflect the changes in the diff. The diff shows the removal of a commented-out section about OSM quality and attributes, which suggests the removal of documentation, not a change in location format to NamedTuples. The message claims a change to 'location' format and references 'reverse geocode providers', but these are not present in the diff. There is no mention of NamedTuples or any actual code change related to location formatting. Therefore, the message is misleading and lacks specificity and accuracy, resulting in a low score.","The commit message 'add docs for yahoo api' is overly vague and does not accurately reflect the actual change. The diff shows that the commit removes a large section of documentation about OSM quality and attributes, not adds it. Therefore, the message is misleading and fails to convey the true nature of the change. While it mentions 'docs', it incorrectly implies addition when the change is removal. A more accurate message would reflect the removal of outdated or redundant documentation. Thus, the score is 2 for being technically incorrect and insufficiently descriptive.","The commit message accurately and concisely reflects the change: removing outdated sections about OSM quality and attributes from the documentation. It clearly identifies the file type ('docs'), the component ('yahoo'), and the nature of the change ('remove outdated...'). The message is specific, relevant, and provides sufficient context for understanding the purpose of the change without unnecessary details. This is an excellent commit message that follows conventional standards."
30199c08f98e9373518500a29199a5c3e996260f,"Changed the format for location to give NamedTuples

Corrections of the reverse geocode providers had to be applied for this
new format",geocoder/yandex_reverse.py,"@@ -44,9 +44,9 @@ class YandexReverse(Yandex, Base):
     def __init__(self, location, **kwargs):
         self.url = 'http://geocode-maps.yandex.ru/1.x/'
         location = location
-        self.location = location.xy
+        self.location = Location(location)
         self.params = {
-            'geocode': Location(location),
+            'geocode': '{0}, {1}'.format(self.location.x, self.location.y),
             'lang': kwargs.get('lang', 'en-US'),
             'kind': kwargs.get('kind', ''),
             'format': 'json',
",update yandex.py,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, addressing a specific error that was present in the old message, thus correcting a defect.",2.0,2.0,2.0,"The commit message is unclear and lacks specificity. It mentions 'Changed the format for location to give NamedTuples' which is not accurate based on the diff — the code uses a Location class and converts coordinates to a string format, not NamedTuples. The justification about 'corrections of the reverse geocode providers' is vague and does not explain why the change was necessary. A better message would clarify the actual change and its purpose. Thus, it receives a score of 2 for being partially relevant but poorly worded and technically incorrect.","The commit message 'update yandex.py' is extremely vague and provides no information about what was changed or why. While the diff shows a modification to handle location data using a Location class instead of direct xy access and a string format, the commit message fails to convey the actual change, its purpose, or its impact. A better message would specify the change, such as 'Refactor location handling in YandexReverse to use Location class for proper parsing and formatting'. Therefore, it receives a score of 2 for lacking detail and context.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a change in how the location is handled—specifically, replacing a `Location` object with a string format of coordinates. The message fails to convey the actual improvement or the context of the fix. While it correctly uses the 'fix:' prefix, the content is too generic and lacks technical detail, making it difficult to understand the change's purpose. A better message would specify the issue (e.g., 'fix: properly handle location input by converting to string format') and the impact. Thus, it receives a score of 2 for minimal clarity."
02a8b8b8864a1c4a1004b2f85f5d163ff397973b,1.3.0 Version change,geocoder/__init__.py,"@@ -26,7 +26,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.2.4'
+__version__ = '1.3.0'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a failure in rectification, suggesting a bug or issue was resolved, which falls under corrective improvement.",2.0,1.0,1.0,"The commit message '1.3.0 Version change' is technically correct but lacks detail and context. While it indicates a version update, it does not explain what changed in the version upgrade, why it was made, or what new features, fixes, or improvements were introduced. A better message would include a brief description of the changes (e.g., 'Updated version to 1.3.0 with consistent JSON responses across providers'). As it stands, the message is minimal and provides no value beyond the version number, making it poor for communication and documentation purposes.","The commit message 'add missing docstrings' is highly misleading given the actual change in the diff. The diff shows only a version bump from '1.2.4' to '1.3.0', not the addition of any docstrings. Therefore, the commit message does not accurately reflect the changes made, making it incorrect and unhelpful for understanding the purpose of the commit.","The commit message 'fix: rectification failed' is highly inadequate as it does not describe what was actually fixed or why. The diff shows only a version bump from '1.2.4' to '1.3.0', which is a semantic version update, not a bug fix or rectification. The message is vague, lacks context, and does not reflect the actual change. A proper commit message should explain the nature of the change, especially when it's just a version update. Therefore, it receives a low score."
36eef6fd7ef36541ba264a07074349409c53ac60,"Standard Input errors

Causes errors with the Distance tool
Added Try: Except for now...",geocoder/cli.py,"@@ -32,8 +32,11 @@ def cli(location, **kwargs):
 
     # Read Standard Input
     # $ cat foo.txt | geocode
-    for line in fileinput.input():
-        locations.append(line.strip())
+    try:
+        for line in fileinput.input():
+            locations.append(line.strip())
+    except:
+        pass
 
     # Read multiple files & user input location
     for item in location:
",add missing try/except,fix(input): handle input stream errors gracefully,Corrective,"The new message indicates a fix for input stream errors, addressing a functional issue rather than improving appearance or semantics, which aligns with a corrective improvement.",2.0,2.0,3.0,"The commit message is overly vague and lacks specificity. It mentions 'Standard Input errors' and 'Causes errors with the Distance tool' without clarifying what the actual issue was or how the fix addresses it. The phrase 'Added Try: Except for now...' is incomplete and unprofessional in tone. While the diff shows a try-except block added to handle input errors, the commit message fails to explain the context, the problem, or the impact. A better message would describe the intent (e.g., 'Handle potential input errors when reading from stdin to prevent crashes in the Distance tool'), making it more informative and actionable. Thus, it receives a score of 2 for being minimally relevant but lacking clarity and completeness.","The commit message 'add missing try/except' is technically accurate but lacks detail and context. While it correctly identifies the addition of a try/except block, it does not explain why it was added, what the original issue might have been, or how it improves robustness. A better message would specify the purpose (e.g., 'prevent crash on invalid input when reading stdin') or the risk being mitigated. As such, the message is minimally informative and falls short of being clear or helpful for code review or future developers.","The commit message is relevant and addresses a potential issue with input stream errors, which aligns with the change in the code. However, the exception handling in the diff is overly broad (`except:` without specifying the exception type), which makes the fix potentially unsafe and not robust. A better commit message would specify the intent more precisely (e.g., 'fix(input): gracefully handle input stream errors by wrapping file input in try-except'). Since the message is accurate in intent but lacks technical detail and clarity about the actual improvement, it receives a moderate score."
73d27aaa54cd5004975fe572fde01d08acb5da39,Added Python3 setup file try except setuptools,setup.py,"@@ -1,16 +1,19 @@
 #!/usr/bin/python
 # coding: utf8
-from setuptools import setup
 import os
-import codecs
+from codecs import open
 import re
 
+try:
+    from setuptools import setup
+except ImportError:
+    from distutils.core import setup
 
 def find_version(*file_paths):
     # Open in Latin-1 so that we avoid encoding errors.
     # Use codecs.open for Python 2 compatibility
     here = os.path.abspath(os.path.dirname(__file__))
-    with codecs.open(os.path.join(here, *file_paths), 'r', 'latin1') as f:
+    with open(os.path.join(here, *file_paths), 'r', 'latin1') as f:
         version_file = f.read()
 
     # The version line must have the form
@@ -28,7 +31,7 @@ try:
     import pypandoc
     long_description = pypandoc.convert('README.md', 'rst') + ""\n""
 except(IOError, ImportError):
-    with codecs.open('README.md', encoding='utf-8') as f:
+    with open('README.md', encoding='utf-8') as f:
         long_description = f.read() + ""\n""
 
 setup(
",fix version number in setup.py,fix(setup.py): use open() with codecs for Python 2 and 3 compatibility,Corrective,"The change addresses a compatibility issue by ensuring proper handling of file encoding in Python 2 and 3, fixing potential errors in setup.py when running on different Python versions.",2.0,2.0,2.0,"The commit message is too vague and lacks specificity. While the diff shows a change to improve Python 2/3 compatibility by using `open()` with `codecs.open` and adding a try-except block for setuptools, the message 'Added Python3 setup file try except setuptools' does not clearly explain the purpose, the problem solved, or the impact. It fails to mention the encoding handling, the backward compatibility improvement, or the use of `codecs.open` for Python 2. A better message would describe the change in terms of compatibility and clarity. Thus, it receives a score of 2 for being technically relevant but poorly worded and lacking context.","The commit message 'fix version number in setup.py' is overly vague and does not accurately reflect the changes made. The diff shows that the code is using `open()` instead of `codecs.open()` for file reading, and it includes a try-except block to fallback to `distutils` if `setuptools` is unavailable. These changes are about improving Python 2/3 compatibility and robustness in file handling, not specifically about fixing a version number. Therefore, the commit message is misleading and fails to describe the actual purpose of the changes, warranting a low score.","The commit message claims to fix Python 2 and 3 compatibility by using `open()` with `codecs`, but the diff shows that `codecs.open` is actually being replaced with `open()` directly, which is not correct. In Python 2, `codecs.open` is necessary for proper encoding handling, especially when dealing with different encodings like 'latin1' or 'utf-8'. The change in the diff removes `codecs.open` and uses `open()` with encoding arguments, which may break Python 2 compatibility if not properly handled. Additionally, the commit message is misleading — it suggests a fix for compatibility, but the actual change could introduce regressions. The fix is not well-justified or accurate, so the score is 2 (Fair) for a significant error in the implementation described in the message."
db3415ebd38d4d567aa5c37bf5b0423a6ea09dfb,Correct Pep8 issues,geocoder/osm.py,"@@ -213,7 +213,7 @@ class Osm(Base):
         return self.parse['address'].get('town')
 
     @property
-    def town(self):
+    def island(self):
         """"""place=island
 
         Identifies the coastline of an island (> 1 km2), also consider
",add missing docstrings,method(island): add island property to Osm class,Semantic,"The new message provides specific context about the change (adding an island property to the Osm class within a method), making it more informative and semantically precise compared to the vague 'Correct Pep8 issues'.",1.0,2.0,2.0,"The commit message 'Correct Pep8 issues' is highly misleading and incorrect given the code diff. The diff shows a property renamed from 'town' to 'island', which is a logical change in functionality, not a fix for PEP8 issues. PEP8 issues typically involve formatting, spacing, or naming conventions, but this change is a semantic renaming of a method, not a formatting fix. Therefore, the commit message does not accurately reflect the actual change and is inappropriate.","The commit message 'add missing docstrings' is vague and does not accurately reflect the actual change. The diff shows a property rename from 'town' to 'island', not just the addition of docstrings. The message fails to indicate that a property was renamed, which is a more significant change than merely adding docstrings. Therefore, it is misleading and lacks specificity, warranting a low score.","The commit message is partially accurate but lacks clarity and context. It correctly identifies the method change (from 'town' to 'island') and mentions the addition of an island property, but it is poorly worded ('method(island):') and does not clearly explain the purpose or intent of the change. Additionally, the diff shows a renaming of a property from 'town' to 'island', not the addition of a new property. This ambiguity reduces its effectiveness as a commit message. A better message would clarify that the 'town' property was renamed to 'island' to reflect the intended semantic change."
db3415ebd38d4d567aa5c37bf5b0423a6ea09dfb,Correct Pep8 issues,setup.py,"@@ -9,6 +9,7 @@ try:
 except ImportError:
     from distutils.core import setup
 
+
 def find_version(*file_paths):
     # Open in Latin-1 so that we avoid encoding errors.
     # Use codecs.open for Python 2 compatibility
",add missing import,fix: rectification failed,Regressive,"The new message 'fix: rectification failed' introduces a misleading or incorrect status indicating a failure when no actual issue was present, suggesting a failure where there was none, thus degrading the clarity and accuracy of the original intent.",1.0,2.0,1.0,"The commit message 'Correct Pep8 issues' is vague and misleading. The diff shows no actual code changes that fix PEP8 issues—instead, it adds a function definition and a comment about encoding. There is no evidence of PEP8 violations being corrected. The message does not accurately reflect the changes made, and thus fails to provide meaningful context. A more accurate message would describe the actual addition of a version-finding function or clarify the intent of the change. Therefore, the commit message is poor and deserves a score of 1.","The commit message 'add missing import' is vague and lacks context. While it correctly identifies that an import is being added, it does not specify which import, why it's needed, or what functionality it enables. The diff shows an addition of a function definition and a comment, but the import itself is not explicitly shown in the diff — the 'from distutils.core import setup' line is already present. Thus, the message is misleading or incomplete, suggesting a missing import when the import may already exist. A better message would clarify the intent and context, such as 'Add find_version helper function to locate package version' or 'Add helper function to retrieve version from file paths'. Therefore, the score is 2 for being technically correct but lacking clarity and context.","The commit message 'fix: rectification failed' is highly vague and provides no meaningful information about what was actually fixed or why. It does not describe the change, the issue resolved, or the context. The diff shows the addition of a `find_version` function with encoding considerations, which is unrelated to 'rectification failed'. Therefore, the message is misleading and does not reflect the actual content of the change, making it poor and unhelpful for understanding the commit's purpose."
09ba6241749d78a3d6e1754483c1229f2120c05d,pep8 fixes',geocoder/ottawa_parcels.py,"@@ -24,4 +24,4 @@ if content:
 
     r = requests.get(url, params=params)
     import json
-    print(json.dumps(r.json(), indent=4))
\ No newline at end of file
+    print(json.dumps(r.json(), indent=4))
",add newline at the end of file,fix(utility): print JSON response with indentation,Semantic,"The change introduces a new, meaningful functionality—formatting JSON responses with indentation—altering the behavior and output, which goes beyond cosmetic or trivial fixes and adds semantic value to the utility.",2.0,2.0,3.0,"The commit message 'pep8 fixes' is overly vague and does not accurately describe the actual change. The diff shows a simple line addition (removing a newline), which is not a PEP8 issue. PEP8 concerns include formatting, spacing, and naming, but this change is about line ending, not code style. Additionally, the message lacks specificity about what was fixed or why. A better message would clarify the actual change, such as 'Fixed missing newline at end of file' or 'Ensured consistent line ending for output.' Therefore, the message is misleading and insufficient, warranting a score of 2.","The commit message 'add newline at the end of file' is technically correct but overly vague and lacks context. While the diff shows a missing newline at the end of the file, the message does not explain why it matters or how it affects the codebase. A better message would specify the impact (e.g., 'Fix missing trailing newline to comply with style guidelines'). As such, it is minimally informative and only receives a score of 2.","The commit message is clear and relevant to the change, indicating a fix to improve JSON output readability with indentation. However, it lacks context about why the change was necessary (e.g., prior behavior was not indented, or it was a bug), and the diff shows a minimal change with no newline issue—making the 'fix' slightly misleading. The message is accurate but not detailed enough to fully justify a 4 or 5. Thus, a score of 3 reflects a decent but basic commit message."
18797e8bacc65ac1867a97ce19655a43529ceb92,Fixed missing key for canada post,geocoder/canadapost.py,"@@ -70,7 +70,7 @@ class Canadapost(Base):
             text = ''
             self.error = 'ERROR - URL Connection'
 
-        expression = r'key=(....-....-....-....)'
+        expression = r""'(....-....-....-....)';""
         pattern = re.compile(expression)
         match = pattern.search(text)
         if match:
",update canadapost.py,fix(backend): update regex pattern to match token format,Corrective,"The new message indicates a backend fix addressing a regex pattern issue, which resolves a functional problem in token matching, moving beyond a simple missing key to a more substantial correction in the system's behavior.",2.0,2.0,3.0,"The commit message 'Fixed missing key for canada post' is vague and does not accurately reflect the actual change. The diff shows a modification in a regular expression pattern from matching 'key=(....-....-....-....)' to 'key=(....-....-....-....);', which changes the syntax and likely affects how the key is extracted. The message fails to describe the actual change (a syntax update in regex), the purpose (e.g., to handle semicolon-delimited strings), or the impact. It also incorrectly suggests a 'missing key' fix when the change is actually a regex pattern adjustment. Therefore, it is insufficiently descriptive and technically inaccurate.","The commit message 'update canadapost.py' is extremely vague and provides no context about what was changed or why. The diff shows a specific change in a regular expression pattern from matching 'key=(....-....-....-....)' to 'key=(....-....-....-....)' with a quote and semicolon, suggesting a potential typo or syntax error. A better message would indicate the nature of the change (e.g., 'Fix regex pattern to properly extract UUID from response') and its impact. As it stands, the message offers no actionable insight, resulting in a low score.","The commit message indicates a fix to a regex pattern, which is relevant to the code change. However, it lacks specific details about why the change was made—such as the original issue, what the old pattern did incorrectly, or why the new pattern with single quotes and semicolon is appropriate. The message is accurate in stating the type of change ('fix') and the component ('backend'), but it is vague and does not provide enough context to fully explain the fix's intent or impact. Therefore, it is functional but not excellent."
18797e8bacc65ac1867a97ce19655a43529ceb92,Fixed missing key for canada post,test_geocoder.py,"@@ -101,8 +101,6 @@ def test_location():
     assert g.ok
     g = geocoder.location([45.4215296, -75.6971931])
     assert g.ok
-    g = geocoder.location('Ottawa, ON')
-    assert g.ok
 
 """"""
 Bing causing issues
",add regression test for,"fix(geocoder): remove Ottawa, ON test due to Bing issues",Corrective,"The change addresses a specific issue (Bing geocoding problems) by removing a failing test, which fixes a root cause of failure rather than just improving appearance or semantics.",2.0,2.0,4.0,"The commit message 'Fixed missing key for canada post' is inaccurate and does not reflect the actual changes in the code diff. The diff shows the removal of a test case for geocoding 'Ottawa, ON', not a fix for a missing API key. The message misrepresents the change and lacks context or technical detail. While it is somewhat relevant to a location-related issue, the claim about a 'missing key' is not supported by the diff. Therefore, it receives a score of 2 — unclear and misleading but not completely off-topic.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what exactly is being tested, why it's important, or which issue it addresses. While it correctly identifies the addition of a test, the message fails to provide context or clarity about the test's purpose or the problem it addresses. A better message would specify the feature or behavior being tested (e.g., 'add regression test for geocoder.location with city string input'). Given the minimal information, the message is only partially useful and thus receives a score of 2.","The commit message clearly identifies the issue (Bing causing problems), specifies the change (removing the Ottawa, ON test), and provides context about why the change was made. It follows a concise and actionable format typical in good commit messages. However, it could be slightly more detailed about the impact or the exact nature of the Bing issues (e.g., error type, failure mode) to be considered excellent. As such, it is strong but not perfect."
04ed668259fa4d27a4c52492e7059bca2480cc48,#131 Fixed HERE provider,geocoder/here.py,"@@ -28,16 +28,18 @@ class Here(Base):
             'app_id': kwargs.get('app_id', app_id),
             'app_code': kwargs.get('app_code', app_code),
             'gen': 8,
+            'language': kwargs.get('language', 'en')
         }
         self._initialize(**kwargs)
 
     def _exceptions(self):
         # Build intial Tree with results
-        response = self.parse['Response']['View']
-        if response:
-            if response[0]['Result']:
-                self._build_tree(response[0]['Result'][0])
-        for item in self.parse['Address']['AdditionalData']:
+        view = self.parse['Response']['View']
+        if view:
+            result = view[0]['Result']
+            if result:
+                self._build_tree(result[0])
+        for item in self.parse['Location']['Address']['AdditionalData']:
             self.parse[item['key']] = self._encode(item['value'])
 
     @property
@@ -66,11 +68,11 @@ class Here(Base):
 
     @property
     def neighborhood(self):
-        return self.parse['Address'].get('District')
+        return self.district
 
     @property
     def district(self):
-        return self.neighborhood
+        return self.parse['Address'].get('District')
 
     @property
     def city(self):
@@ -84,18 +86,10 @@ class Here(Base):
     def state(self):
         return self.parse['Address'].get('State')
 
-    @property
-    def state_long(self):
-        return self.parse.get('StateName')
-
     @property
     def country(self):
         return self.parse['Address'].get('Country')
 
-    @property
-    def country_name(self):
-        return self.parse.get('CountryName')
-
     @property
     def quality(self):
         return self.parse.get('MatchLevel')
@@ -104,10 +98,6 @@ class Here(Base):
     def accuracy(self):
         return self.parse.get('MatchType')
 
-    @property
-    def AdminInfo(self):
-        return self.parse.get('AdminInfo')
-
     @property
     def bbox(self):
         south = self.parse['BottomRight'].get('Latitude')
",add more information to address.py,feat(Here): add language support and fix district/state/country property mappings,Semantic,"The new message provides more detailed information about the changes (language support and property mappings) beyond just fixing a provider, indicating a broader functional enhancement with clearer semantic meaning.",2.0,2.0,4.0,"The commit message '#131 Fixed HERE provider' is extremely vague and provides no information about what was actually changed or why. The diff shows multiple structural and logical changes—such as adding a 'language' parameter, correcting property references (e.g., neighborhood ↔ district), and removing unused properties like state_long, country_name, and AdminInfo. A meaningful commit message should reflect these changes, e.g., 'Fix property mapping and remove deprecated HERE fields; add language support'. As it stands, the message fails to convey the scope or impact of the changes, making it inadequate for clarity or future reference.","The commit message 'add more information to address.py' is overly vague and provides no detail about what was actually changed or why. The diff shows a significant reorganization of properties and a change in how certain address fields (like neighborhood, district, state, country) are accessed, including a swap of district and neighborhood definitions and removal of several properties (e.g., state_long, country_name, AdminInfo). The message fails to convey the scope, purpose, or impact of the changes, making it difficult to understand the intent. A better message would specify, for example, 'Fix district/neighborhood property mapping and remove deprecated fields in address.py'. Thus, the message is only minimally informative and deserves a score of 2.","The commit message accurately reflects the main changes: adding language support via the new 'language' parameter in the initializer and fixing property mappings for district, state, and country. The message correctly identifies the feature ('feat') and the scope of the changes. However, it omits the removal of deprecated properties like `state_long`, `country_name`, and `AdminInfo`, which were also part of the diff — these are significant refactors that affect API consistency. While the message is clear and concise, it lacks completeness in describing the full scope of the changes, especially the removal of outdated properties. Thus, it's not 'excellent' but is still 'good' and reasonably accurate for a feature commit."
04ed668259fa4d27a4c52492e7059bca2480cc48,#131 Fixed HERE provider,geocoder/here_reverse.py,"@@ -4,9 +4,10 @@
 from .base import Base
 from .keys import app_id, app_code
 from .location import Location
+from .here import Here
 
 
-class HereReverse(Base):
+class HereReverse(Here, Base):
     """"""
     HERE Geocoding REST API
     =======================
@@ -23,7 +24,7 @@ class HereReverse(Base):
 
     def __init__(self, location, **kwargs):
         self.url = 'http://reverse.geocoder.cit.api.here.com/6.2/reversegeocode.json'
-        self.location = Location(location)
+        self.location = '%f,%f' % tuple(Location(location).latlng)
         self.params = {
             'prox': self.location,
             'app_id': kwargs.get('app_id', app_id),
",add docs for nowreverse,feat(location): use Here base class and simplify location format,Semantic,"The new message provides more context about the change by specifying the feature (location), introducing the use of a base class, and highlighting simplification of the format, which reflects a meaningful improvement in functionality and structure beyond a simple fix.",2.0,1.0,3.0,"The commit message ""#131 Fixed HERE provider"" is extremely vague and provides no context about what was actually fixed or why. The diff shows a refactoring of the HereReverse class to inherit from Here instead of Base, and a change in how the location is stored (from a Location object to a latlng string). This suggests a change in behavior or data handling, possibly to integrate with HERE's API requirements. The commit message fails to indicate the nature of the change, its impact, or the reason behind it. While it references a task number, it lacks meaningful detail, making it insufficient for understanding the change's purpose or significance.","The commit message 'add docs for nowreverse' is highly inaccurate and irrelevant to the actual changes in the code diff. The diff shows a class inheritance change from `Base` to `Here` and a modification in the `__init__` method that changes how location is stored (from a Location object to a lat-lng string). There is no mention of documentation, and 'nowreverse' is not a valid or referenced term in the code. The message misrepresents the changes and fails to describe what was actually implemented. Therefore, it is poor and should receive a score of 1.","The commit message is somewhat accurate and captures the main change — using the Here base class and simplifying the location format — but it lacks detail about the impact or reasoning. For example, it doesn't explain why the location format was simplified or how this improves functionality or performance. While the message correctly identifies the feature and the key change, it is vague and could be more specific. A score of 3 reflects a basic, partially informative message that meets minimal standards but falls short of being clear or valuable for a full code review context."
10b806e026183c32f2c1b777604c7ff65d54c5e8,Version Change 1.3.1,geocoder/__init__.py,"@@ -26,7 +26,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.3.0'
+__version__ = '1.3.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a specific failure (rectification failed), suggesting a bug correction rather than a cosmetic or trivial change.",2.0,1.0,1.0,"The commit message 'Version Change 1.3.1' is overly generic and provides no context about what changed beyond the version number. While it correctly indicates a version update, it lacks details such as the nature of the change (e.g., bug fixes, feature additions, improvements in JSON responses as mentioned in the diff). A more informative message would highlight the significance of the version bump, especially since the diff shows a simple version update with no other changes, making the message insufficiently descriptive.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.3.0' to '1.3.1', not any addition of docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and irrelevant. A correct message would have been something like 'Bump version to 1.3.1'.","The commit message 'fix: rectification failed' is highly unclear and does not accurately reflect the actual change in the code diff. The diff only shows a version bump from '1.3.0' to '1.3.1', which is a minor version update, not a fix for a rectification failure. The message lacks specificity, context, and technical detail, making it ineffective for understanding the purpose of the commit. A proper message should describe what was fixed and why, such as 'chore: update version to 1.3.1' or 'fix: update version number for new release'. Therefore, the message is poor and does not match the actual change."
165ffe631c908ec09c74b74d5ffacc70554a53a3,Fixed Distance feature,geocoder/distance.py,"@@ -1,8 +1,9 @@
 #!/usr/bin/python
 # coding: utf8
+from __future__ import absolute_import
 import sys
 from math import radians, cos, sin, asin, sqrt
-from .location import Location
+from geocoder.location import Location
 
 AVG_EARTH_RADIUS = 6371  # in km
 
@@ -92,3 +93,7 @@ def haversine(point1, point2, **kwargs):
     else:
         print('[WARNING] Error calculating the following two locations.\n'
               'Points: {0} to {1}'.format(point1.location, point2.location))
+
+if __name__ == '__main__':
+    d = Distance('Ottawa, ON', 'Toronto, ON', 'Montreal, QC')
+    print(d)
\ No newline at end of file
",add location.haversine(),fix: rectification failed,Corrective,"The new message indicates a failure in the rectification process, suggesting a bug or issue that was previously present, thus addressing a functional problem rather than a cosmetic or trivial change.",2.0,2.0,2.0,"The commit message 'Fixed Distance feature' is overly vague and does not accurately reflect the changes made. The diff shows the addition of a `__future__` import, a change in imported module from `location` to `geocoder.location`, a new `if __name__ == '__main__'` block with a usage example, and a minor formatting change. These changes suggest the addition or enhancement of a Distance feature, not a fix. The message fails to indicate what was actually fixed, if anything, and gives no context about the functionality or purpose. A better message would describe the actual changes, such as 'Added Distance class example and updated location import for proper module resolution.' Therefore, the message is insufficient and lacks clarity, warranting a score of 2.","The commit message 'add location.haversine()' is inaccurate and misleading. The diff does not add a new function or module called 'location.haversine()'; instead, it modifies the import of the Location class and adds a simple script example under if __name__. The actual change is a minor update to imports and a demonstration script, not the addition of a haversine function. The message fails to reflect the actual changes, making it poorly descriptive. A better message would reflect the actual changes, such as 'update imports and add example usage of Distance class'. Thus, the score is 2 for being off-target and insufficiently descriptive.","The commit message 'fix: rectification failed' is vague and does not accurately reflect the actual changes in the diff. The diff shows the addition of `absolute_import` and a new `__main__` block with a usage example, along with a minor import update. There is no mention of 'rectification' or any error related to it. The message fails to describe what was actually fixed or why, making it misleading and unhelpful for understanding the change. A better message would clarify the addition of example usage and import improvements. Therefore, it receives a score of 2 for being technically incorrect and lacking context."
165ffe631c908ec09c74b74d5ffacc70554a53a3,Fixed Distance feature,geocoder/location.py,"@@ -44,9 +44,10 @@ class Location(object):
                 self._check_for_list([lat, lng])
             else:
                 # Check for string to Geocode using a provider
-                g = geocoder.get(location, provider=self.kwargs.get('provider', 'bing'))
+                provider = self.kwargs.get('provider', 'osm')
+                g = geocoder.get(location, provider=provider)
                 if g.ok:
-                    self.lat, self.lng = g.latlng
+                    self.lat, self.lng = g.lat, g.lng
 
         # Checking for List of Tuple
         elif isinstance(location, (list, tuple)):
@@ -136,4 +137,5 @@ class Location(object):
         return ''
 
 if __name__ == '__main__':
-    l = Location([])
+    l = Location(""Ottawa, ON"")
+    print(l)
\ No newline at end of file
",update location.py,fix(location): support string location with OSM provider and print result,Corrective,"The update addresses a functional issue by enabling string location input with the OSM provider and adding result printing, which improves correctness and usability of the location handling feature.",1.0,2.0,4.0,"The commit message 'Fixed Distance feature' is highly misleading and irrelevant to the actual changes in the code. The diff shows modifications to location parsing and geocoding logic, specifically changing the default provider from 'bing' to 'osm' and updating a test case to use a string location ('Ottawa, ON'). There is no mention or implementation of a 'Distance feature' at all. The message does not accurately reflect the changes made, thus it fails to provide clarity or context about what was actually fixed or improved. This is a poor commit message.","The commit message ""update location.py"" is extremely vague and provides no information about what was changed, why it was changed, or the impact of the changes. While the diff shows actual modifications—such as updating the default provider from 'bing' to 'osm' and changing the test location from an empty list to a string 'Ottawa, ON'—the commit message fails to reflect these specifics. A better message would indicate the change in default provider and the update to a geocoding example. Therefore, it receives a score of 2 for lacking clarity and context.","The commit message accurately reflects the changes made: it introduces support for string locations using the OSM provider (replacing the default Bing provider), and adds a print statement to display the result. The message is clear, concise, and relevant to the diff. However, it could be slightly improved by mentioning that the provider was changed from 'bing' to 'osm' explicitly, or by noting that the test case was updated from an empty list to a string location. Still, overall, it's well-written and sufficiently descriptive for a code change."
706bfe6469779258fdd672b99338aaf599e15890,Catch errors properly,geocoder/base.py,"@@ -113,6 +113,7 @@ class Base(object):
         self._connect(url=self.url, params=self.params, **kwargs)
         self._build_tree(self.content)
         self._exceptions()
+        self._catch_errors()
         self._json()
 
     def _json(self):
@@ -164,6 +165,9 @@ class Base(object):
     def _exceptions(self):
         pass
 
+    def _catch_errors(self):
+        pass
+
     def tree(self):
         return defaultdict(self.tree)
 
",add missing docstrings,feat(base): add error catching mechanism,Semantic,"The new message provides a more specific and meaningful description of the change by indicating it's a feature addition with a clear purpose (error catching), enhancing understanding of the commit's intent beyond a generic statement.",2.0,1.0,3.0,"The commit message 'Catch errors properly' is too vague and lacks specific details about what errors are being caught, where, or why this change is necessary. While the diff shows the addition of a new `_catch_errors` method, the message does not explain the context, intent, or impact of the change. A more descriptive message (e.g., 'Add error handling mechanism to catch and log parsing exceptions during content processing') would be significantly more informative and useful for understanding the change.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the code diff. The diff shows the addition of two new empty methods: `_catch_errors` and `_exceptions` (which already existed as a pass method), and not any docstrings. There is no evidence of missing docstrings being added. The message does not accurately reflect the changes made, making it incorrect and unhelpful. Therefore, it receives a low score.","The commit message 'feat(base): add error catching mechanism' is reasonably clear and indicates a feature addition, which aligns with the diff showing the introduction of a new `_catch_errors` method. However, the message lacks specific details about what kind of errors are being caught, how the mechanism works, or its impact on the codebase. While the diff shows the method is added and left empty (pass), the commit message does not reflect that the implementation is currently minimal or incomplete. This omission reduces its clarity and usefulness for understanding the actual change. Thus, it is functional but not fully descriptive, earning a moderate score."
706bfe6469779258fdd672b99338aaf599e15890,Catch errors properly,geocoder/bing.py,"@@ -1,8 +1,9 @@
 #!/usr/bin/python
 # coding: utf8
 
-from .base import Base
-from .keys import bing_key
+from __future__ import absolute_import
+from geocoder.base import Base
+from geocoder.keys import bing_key
 import re
 
 
@@ -65,9 +66,8 @@ class Bing(Base):
             'maxResults': 1,
         }
         self._initialize(**kwargs)
-        self._bing_catch_errors()
 
-    def _bing_catch_errors(self):
+    def _catch_errors(self):
         status = self.parse['statusDescription']
         if not status == 'OK':
             self.error = status
",add missing import,refactor(geocoder): replace _bing_catch_errors with _catch_errors,Cosmetic,The change renames a function for better consistency and readability without altering behavior or fixing a bug.,2.0,2.0,3.0,"The commit message 'Catch errors properly' is overly vague and does not clearly describe the change or its significance. While the diff shows a refactoring of error handling from `_bing_catch_errors` to `_catch_errors` with improved naming and structure, the message fails to explain what was changed, why it matters, or how it improves functionality. A better message would specify the renaming and the intent to improve error handling clarity or consistency. Thus, it receives a score of 2 for being insufficiently descriptive.","The commit message 'add missing import' is too vague and does not accurately reflect the changes made. While the diff does show the addition of imports from 'geocoder.base' and 'geocoder.keys', the message fails to mention the renaming of the method from `_bing_catch_errors` to `_catch_errors`, which is a significant change. This omission makes the commit message incomplete and misleading. A better message would note both the import additions and the method rename. Therefore, it receives a score of 2 for being partially accurate but lacking detail and context.","The commit message is concise and identifies the change as a refactor, correctly noting the renaming of a method. However, it lacks context about why the change was made (e.g., improved naming consistency, better abstraction, or alignment with base class patterns). The diff shows a method rename from `_bing_catch_errors` to `_catch_errors`, which suggests a generalization, but the commit message does not explain this improvement. While the message is accurate and relevant, it is minimal in value and could be more informative for maintainers."
706bfe6469779258fdd672b99338aaf599e15890,Catch errors properly,geocoder/cli.py,"@@ -19,7 +19,7 @@ units = ['kilometers', 'miles', 'feet', 'meters']
 
 @click.command()
 @click.argument('location', nargs=-1)
-@click.option('--provider', '-p', default='bing', type=click.Choice(providers))
+@click.option('--provider', '-p', default='osm', type=click.Choice(providers))
 @click.option('--method', '-m', default='geocode', type=click.Choice(methods))
 @click.option('--output', '-o', default='json', type=click.Choice(outputs))
 @click.option('--units', '-u', default='kilometers', type=click.Choice(units))
",add support for --location and --method,config(change): update default provider from bing to osm,Corrective,"The new message specifies a concrete configuration change (updating the default provider from Bing to OSM), which addresses a potential issue or misconfiguration, indicating a corrective improvement to the system behavior.",1.0,2.0,3.0,"The commit message 'Catch errors properly' is highly irrelevant to the actual change in the code diff. The diff shows a simple change in the default value of the '--provider' option from 'bing' to 'osm', not any error handling or exception management. Therefore, the commit message does not accurately describe the change and fails to provide context or purpose, making it poor and misleading.","The commit message incorrectly claims to add support for '--location' and '--method', but the diff shows only a change in the default provider from 'bing' to 'osm'. The '--location' argument was already present and unchanged, and '--method' was also already supported with a default. The message is misleading and does not accurately reflect the actual change. Therefore, it is poorly written and misrepresents the commit's intent, warranting a low score.","The commit message correctly identifies the change as a configuration update and specifies the change in default provider from 'bing' to 'osm'. However, it lacks context about why the change was made (e.g., performance, accuracy, cost, or availability), and does not mention the impact on functionality or users. While it is accurate and concise, it is somewhat minimal in providing value to a reviewer. A score of 3 reflects a basic, correct message that meets minimum standards but lacks depth or motivation."
706bfe6469779258fdd672b99338aaf599e15890,Catch errors properly,geocoder/google.py,"@@ -1,9 +1,10 @@
 #!/usr/bin/python
 # coding: utf8
 
+from __future__ import absolute_import
 import ratelim
 import requests
-from .base import Base
+from geocoder.base import Base
 
 
 class Google(Base):
@@ -40,7 +41,6 @@ class Google(Base):
             'key': kwargs.get('key', ''),
         }
         self._initialize(**kwargs)
-        self._google_catch_errors()
 
     @staticmethod
     @ratelim.greedy(2500, 60 * 60 * 24)
@@ -48,7 +48,7 @@ class Google(Base):
     def rate_limited_get(*args, **kwargs):
         return requests.get(*args, **kwargs)
 
-    def _google_catch_errors(self):
+    def _catch_errors(self):
         status = self.parse.get('status')
         if not status == 'OK':
             self.error = status
@@ -155,3 +155,4 @@ class Google(Base):
 
 if __name__ == '__main__':
     g = Google('11 Wall Street, New York')
+    g.debug()
",add missing docstrings,refactor(google): rename _google_catch_errors to _catch_errors and add debug call,Cosmetic,"The change involves renaming a function and adding a debug call, which is primarily a code style and readability improvement rather than fixing a bug or altering behavior semantically.",2.0,1.0,4.0,"The commit message 'Catch errors properly' is too vague and lacks specific details about the changes made. While the code does rename `_google_catch_errors` to `_catch_errors` and improves error handling by aligning with a more generic error-catch pattern, the commit message fails to convey what was actually fixed, why it matters, or how it improves the system. A better message would specify the change (e.g., 'Renamed _google_catch_errors to _catch_errors to improve error handling consistency and remove hardcoded Google-specific logic'). As such, the message is minimally informative and only scores a 2.","The commit message 'add missing docstrings' is highly inaccurate given the actual changes in the diff. The diff does not add any docstrings; instead, it modifies imports, renames a method (_google_catch_errors → _catch_errors), and adds a debug call. The change involves refactoring and renaming, not documentation. Therefore, the commit message is misleading and does not reflect the true nature of the changes, making it poor.","The commit message accurately reflects the main change: renaming `_google_catch_errors` to `_catch_errors` and adding a debug call. It is concise and relevant to the diff. However, it lacks context about why the method was renamed (e.g., to improve clarity or consistency) or whether the debug call is part of a broader debugging effort. While the message is clear and actionable, a slightly more detailed explanation of the rationale would make it excellent. Therefore, it is rated 4 — good but not fully comprehensive."
706bfe6469779258fdd672b99338aaf599e15890,Catch errors properly,geocoder/here.py,"@@ -1,8 +1,9 @@
 #!/usr/bin/python
 # coding: utf8
 
-from .base import Base
-from .keys import app_id, app_code
+from __future__ import absolute_import
+from geocoder.base import Base
+from geocoder.keys import app_id, app_code
 
 
 class Here(Base):
@@ -42,6 +43,11 @@ class Here(Base):
         for item in self.parse['Location']['Address']['AdditionalData']:
             self.parse[item['key']] = self._encode(item['value'])
 
+    def _catch_errors(self):
+        status = self.parse.get('type')
+        if not status == 'OK':
+            self.error = status
+
     @property
     def lat(self):
         return self.parse['DisplayPosition'].get('Latitude')
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific error condition ('rectification failed') that was previously unaddressed or improperly handled, suggesting a fix for a failure case, which aligns with a corrective improvement.",2.0,1.0,2.0,"The commit message 'Catch errors properly' is overly vague and does not clearly describe what was changed or why. While the diff shows the addition of a `_catch_errors` method that sets an error status when the response type is not 'OK', the commit message fails to explain the context, the impact, or the specific error handling improvement. A better message would specify, for example, 'Add error handling for non-OK responses in Here geocoding service'. As such, the message lacks detail and clarity, resulting in a low score.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff does not add any docstrings at all; instead, it modifies imports, adds a new method `_catch_errors`, and updates property access. There are no docstrings present or added in the code changes. The message misrepresents the actual changes, making it misleading and unhelpful. Therefore, the score is 1 (Poor).","The commit message 'fix: rectification failed' is highly vague and does not clearly describe what was fixed or why. The diff shows a addition of an error-handling method `_catch_errors` and a minor import update, but the commit message provides no context about the issue or the fix. A meaningful commit message should explain the problem and the solution. While it is categorized as a 'fix', the term 'rectification failed' is ambiguous and lacks specificity. Therefore, it receives a score of 2 — insufficient detail to understand the change or its purpose."
d8d029396d0d27607db05ef5c486ad7148318579,Pep8 issues,geocoder/distance.py,"@@ -97,4 +97,4 @@ def haversine(point1, point2, **kwargs):
 
 if __name__ == '__main__':
     d = Distance('Ottawa, ON', 'Toronto, ON', 'Montreal, QC')
-    print(d)
\ No newline at end of file
+    print(d)
",update haversine.py,fix(test): add missing print statement,Corrective,"The new message indicates a bug fix (missing print statement) in a test, which addresses a functional or logical issue rather than a style or cosmetic change.",1.0,2.0,2.0,"The commit message 'Pep8 issues' is highly inadequate as it does not describe the actual change or its impact. The diff shows a simple newline addition at the end of a print statement, which is a formatting fix, not a true Pep8 issue (which typically involves syntax or style violations). Moreover, the commit message fails to provide context—such as what was fixed, why it was needed, or how it improves the code. A proper commit message should be specific and descriptive. Therefore, the message is poorly written and misleading, warranting a low score.","The commit message 'update haversine.py' is overly vague and provides no context about what was actually changed. The diff shows a minor change: adding a print statement in the main block, which is a small fix to improve output visibility. A better message would specify the change, such as 'Add print statement to display distance between cities in haversine.py'. Since the message lacks detail and fails to explain the purpose or impact of the change, it receives a score of 2.","The commit message 'fix(test): add missing print statement' is poorly worded and misleading. The diff shows that a print statement was already present (it was just missing a newline), not that a missing print was added. The term 'add missing print statement' suggests a new print was introduced, but the change is merely fixing a formatting issue (newline). Additionally, the message incorrectly labels it as a 'test' fix. A more accurate message would clarify it's a formatting fix, not a test-related change. Therefore, it's only moderately accurate and lacks clarity, warranting a score of 2."
d8d029396d0d27607db05ef5c486ad7148318579,Pep8 issues,geocoder/location.py,"@@ -139,4 +139,4 @@ class Location(object):
 
 if __name__ == '__main__':
     l = Location(""Ottawa, ON"")
-    print(l.latlng)
\ No newline at end of file
+    print(l.latlng)
",update location.py,"fix(behavior): print latlng for Ottawa, ON location",Corrective,"The new message indicates a specific bug fix related to behavior (printing latlng for Ottawa, ON), which addresses a functional issue rather than a cosmetic or semantic change.",2.0,2.0,3.0,"The commit message 'Pep8 issues' is overly vague and does not accurately reflect the actual change. The diff shows a simple addition of a missing newline at the end of a file, which is not a PEP8 issue (PEP8 primarily concerns code style, such as spacing, naming, and line length). The change is minor and unrelated to PEP8 compliance. A more descriptive message, such as 'Add missing newline to end of file', would be more accurate and useful. Therefore, the message is poorly informed and lacks specificity, resulting in a low score.","The commit message 'update location.py' is extremely vague and provides no information about what was changed or why. While the diff shows a simple addition of a print statement, the commit message fails to convey the purpose or impact of the change. A better message would specify the change, such as 'Add print statement to display latlng for Ottawa, ON location'. Therefore, it receives a score of 2 for lacking detail and context.","The commit message is relevant and identifies the fix as related to behavior, specifically printing latlng for a location. However, it lacks context about why the change was needed (e.g., missing output, debugging, or user expectation) and does not clearly indicate the impact or scope beyond a single test case. The message is accurate but minimal and could be more descriptive to fully convey the intent of the change."
d8d029396d0d27607db05ef5c486ad7148318579,Pep8 issues,geocoder/yandex.py,"@@ -127,4 +127,4 @@ class Yandex(Base):
 
 if __name__ == '__main__':
     g = Yandex('1552 Payette dr., Ottawa')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at the end of file,fix(implementation): add missing debug call in Yandex class,Corrective,"The new message indicates a specific bug fix—adding a missing debug call—which corrects an implementation issue, not just a style or cosmetic change.",2.0,2.0,3.0,"The commit message 'Pep8 issues' is overly vague and does not accurately reflect the actual change. The diff shows a simple addition of a missing newline at the end of a file, which is not a Pep8 issue per se (Pep8 primarily concerns code style, not line endings). While the change might be related to formatting, the message fails to describe what was actually fixed or why. A more specific message like 'Fix missing newline at end of file' would be more informative and accurate, making this commit message only marginally adequate.","The commit message correctly identifies the issue—a missing newline at the end of the file—but it lacks context about why this matters or how it affects the codebase. While the fix is technically accurate, the message is overly minimal and does not convey the significance or impact of the change. A better message would explain that the missing newline could cause issues with version control or formatting tools. Therefore, it receives a score of 2 for being technically correct but insufficiently informative.","The commit message correctly identifies the type of change as a fix in the implementation and accurately describes the issue — adding a missing debug call. However, it lacks context about why the debug call was necessary or what the expected behavior was before and after. While the message is clear and relevant, it does not fully explain the impact or rationale, which limits its completeness. Therefore, it is moderately good but not excellent."
b85abaced42dada5ee16deaa3bd87f4a8b1be438,Version change 1.4.0,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.3.1'
+__version__ = '1.4.0'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a specific issue (rectification failed), suggesting a bug correction rather than a cosmetic or trivial change.",2.0,1.0,1.0,"The commit message 'Version change 1.4.0' is overly brief and provides no context about what changed in the version update. While it correctly identifies the version bump, it lacks details about the improvements, fixes, or features introduced in version 1.4.0, which is essential for understanding the significance of the change. A more meaningful message would include a brief description of what was updated or why the version changed, especially since the diff only shows a version number update with no other code changes.","The commit message 'add missing docstrings' is highly inconsistent with the actual changes in the diff. The diff shows only a version bump from '1.3.1' to '1.4.0', not any addition of docstrings. Therefore, the commit message misrepresents the change, making it misleading and inaccurate. A correct message would have reflected the version update, such as 'Bump version to 1.4.0'. This misalignment severely undermines the clarity and trustworthiness of the commit message.","The commit message 'fix: rectification failed' is highly unclear and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.3.1' to '1.4.0', which is a minor version update, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what problem it solves. It is therefore misleading and fails to convey the actual significance of the change."
b85abaced42dada5ee16deaa3bd87f4a8b1be438,Version change 1.4.0,test_geocoder.py,"@@ -120,6 +120,8 @@ def test_bing_reverse():
     assert g.ok
 """"""
 
+""""""
+Quote Exceeded
 
 def test_opencage():
     g = geocoder.opencage(location)
@@ -129,7 +131,7 @@ def test_opencage():
 def test_opencage_reverse():
     g = geocoder.opencage(ottawa, method='reverse')
     assert g.ok
-
+""""""
 
 def test_yahoo():
     g = geocoder.yahoo(location)
",add test for,fix(geocoder): quote exceeded in opencage test,Corrective,"The new message indicates a bug fix related to a quote exceedance in OpenCage geocoding, addressing a specific issue in functionality, which falls under corrective improvements.",1.0,2.0,3.0,"The commit message 'Version change 1.4.0' is highly inadequate as it does not describe the actual changes in the code diff. The diff shows modifications to test cases, including adding a comment about 'Quote Exceeded' and restructuring test functions, which suggests changes to test behavior or formatting, not a version bump. A proper commit message should reflect the nature of the changes, such as adding or modifying tests, fixing issues, or improving code structure. This message provides no context about what was actually changed, making it irrelevant and unhelpful for understanding the commit's purpose.","The commit message 'add test for' is extremely vague and lacks specificity. It does not indicate which test was added, what functionality it covers, or why it was added. While the diff shows a new test function (test_opencage) being introduced with a comment about 'Quote Exceeded', the commit message fails to reflect this detail. A better message would specify the test added (e.g., 'Add test for OpenCage geocoding reverse lookup'). Thus, it is minimally informative and falls short of being clear or useful for understanding the change.","The commit message correctly identifies the issue as a 'quote exceeded' problem in the opencage test, which aligns with the diff showing a comment added to prevent test failure due to quote limits. However, it lacks context about what exactly was fixed, why it was necessary, or how the fix was implemented. A more detailed message (e.g., specifying that a test was truncated or commented out due to quote length limits) would improve clarity and usefulness. Thus, it is partially accurate and relevant but insufficiently descriptive for an excellent commit message."
868702eaad120bad6a4e452656a32b21c5d4b8bf,pep8 fix,geocoder/base.py,"@@ -311,7 +311,7 @@ class Base(object):
 
     @property
     def latlng(self):
-        if self.ok: 
+        if self.ok:
             return [self.lat, self.lng]
         return []
 
",add missing semicolon,fix(base): remove extra space in latlng property condition,Cosmetic,"The change removes an extra space in a property condition, which is a minor formatting adjustment rather than a functional or semantic change.",2.0,2.0,3.0,"The commit message 'pep8 fix' is overly vague and does not clearly describe the actual change or its significance. While the diff shows a minor whitespace fix (removing a space after 'if'), this is not a full PEP8 violation, and the message fails to convey what was fixed or why. A better message would specify the exact issue, such as 'Remove unnecessary space after if statement in latlng property'. Thus, the message is minimally informative and lacks context, warranting a score of 2.","The commit message 'add missing semicolon' is technically correct in identifying the change, but it is overly minimal and lacks context. The diff shows a whitespace change (a missing space before the semicolon, not a missing semicolon), and the message does not clarify the actual nature of the change or its significance. A better message would describe the intent, such as 'Fix indentation issue in latlng property getter'. Therefore, while accurate, the message is insufficient and lacks clarity, warranting a score of 2.","The commit message is accurate in describing the change — it correctly identifies the removal of an extra space in the condition of the `latlng` property. However, it lacks context about why the space was problematic (e.g., style guideline, linter warning, or code consistency) and does not mention the broader impact or intent of the fix. While the message is clear and technically correct, it is minimal and could be improved with more detail for better code review understanding."
868702eaad120bad6a4e452656a32b21c5d4b8bf,pep8 fix,test_geocoder.py,"@@ -133,6 +133,7 @@ def test_opencage_reverse():
     assert g.ok
 """"""
 
+
 def test_yahoo():
     g = geocoder.yahoo(location)
     assert g.ok
",add regression test for,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which is a corrective action rather than a cosmetic or trivial change.",1.0,2.0,1.0,"The commit message 'pep8 fix' is highly misleading and inaccurate given the code diff. The diff shows the addition of a new test function `test_yahoo()` and a comment, not any PEP8-related changes. There is no formatting, indentation, or style issue that would require a 'PEP8 fix'. The message fails to describe the actual change and provides no context, making it poor and uninformative.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what feature, functionality, or bug the test is targeting. While it correctly identifies that a new test was added, it fails to provide context about the purpose or the component being tested. A better message would specify the geocoder service (e.g., 'add regression test for Yahoo geocoding') or the intended behavior. Thus, it receives a score of 2 for being minimally relevant but lacking clarity and detail.","The commit message 'fix: rectification failed' is highly vague and does not accurately describe the actual change. The diff shows the addition of a new test function `test_yahoo()` for geocoding, which is unrelated to 'rectification' or any failure in that context. There is no mention of a failure or rectification issue. A meaningful commit message should clearly explain what was changed and why. This message fails to provide context, specificity, or relevance to the code change, making it poor."
bc33a56074a0bfffff210efb9e0345d30b479c5a,replace sys.exit with exceptions,geocoder/api.py,"@@ -2,7 +2,7 @@
 # coding: utf8
 
 from __future__ import absolute_import
-import sys
+
 from geocoder.osm import Osm
 from geocoder.w3w import W3W
 from geocoder.bing import Bing
@@ -87,22 +87,15 @@ def get(location, **kwargs):
         },
     }
     if isinstance(location, (list, dict)) and method == 'geocode':
-        print('[ERROR] Please provide a string as the location.\n'
-              '>>> g = geocoder.get(""Ottawa ON"", provider=""google"")')
-        sys.exit()
+        raise ValueError(""Location should be a string"")
+
     if provider not in options:
-        print('[ERROR] Please provide a correct provider\n'
-              'Ex: google, bing, osm, here, opencage, tomtom, mapquest\n'
-              '$ geocode ""Ottawa ON"" --provider google\n'
-              '>>> g = geocoder.get(""Ottawa ON"", provider=""google"")')
-        sys.exit()
+        raise ValueError(""Invalid provider"")
+
     else:
         if method not in options[provider]:
-            print('[ERROR] Please provide a correct method\n'
-                  'Ex: geocode, reverse, timezone, elevation\n'
-                  '$ geocode ""45.68, -75.15"" --method reverse\n'
-                  '>>> g = geocoder.bing([45.68, -75.15], method=""reverse"")')
-            sys.exit()
+            raise ValueError(""Invalid method"")
+
     return options[provider][method](location, **kwargs)
 
 
",add test for provider and method,"fix(geocoder): handle invalid location, provider, and method with proper errors",Corrective,"The new message indicates a fix that properly handles invalid inputs (location, provider, method) with appropriate error handling, which addresses a bug or failure case, making it a corrective improvement.",4.0,1.0,5.0,"The commit message 'replace sys.exit with exceptions' accurately reflects the main change in the code diff, which involves replacing `sys.exit()` calls with `raise ValueError` for error handling. This is a clear and relevant summary of the change. However, it lacks additional context such as the specific error cases (e.g., invalid location, provider, or method) or the rationale for using exceptions over exiting the program. While the message is concise and correct, it could be more informative. Therefore, it is solid but not exceptional, warranting a score of 4.","The commit message 'add test for provider and method' is highly inaccurate and misrepresents the actual changes in the code diff. The diff removes error print statements and replaces them with ValueError exceptions for invalid location types, providers, and methods, which indicates improved error handling and validation, not the addition of tests. There is no mention of tests in the code changes or their implementation. Therefore, the commit message is irrelevant and does not reflect the actual work done.","The commit message accurately reflects the changes in the code diff. It clearly states that the fix addresses invalid location, provider, and method inputs by replacing print errors with proper ValueError exceptions, which improves error handling and user experience. The message is concise, specific, and directly relates to the implemented changes, making it excellent for documentation and code review."
bc33a56074a0bfffff210efb9e0345d30b479c5a,replace sys.exit with exceptions,geocoder/cli.py,"@@ -4,7 +4,6 @@
 import click
 import json
 import geocoder
-import sys
 import os
 import fileinput
 
@@ -50,7 +49,7 @@ def cli(location, **kwargs):
     if kwargs['distance']:
         d = geocoder.distance(locations, **kwargs)
         click.echo(d)
-        sys.exit()
+        return
 
     # Geocode results from user input
     for location in locations:
@@ -59,7 +58,7 @@ def cli(location, **kwargs):
             click.echo(json.dumps(g.__getattribute__(kwargs['output'])))
         except IOError:
             # When invalid command is entered a broken pipe error occurs
-            sys.exit()
+            return
 
 if __name__ == '__main__':
     cli()
",add missing docstring,fix(cli): remove sys.exit() and use return instead,Corrective,"The change replaces a direct process termination (sys.exit) with a controlled return statement, which is a more appropriate and safer practice in function contexts, especially in CLI tools where error handling and flow control are critical.",3.0,1.0,5.0,"The commit message 'replace sys.exit with exceptions' is vague and lacks context. While the diff does replace `sys.exit()` calls with `return` statements, which is a reasonable change in a CLI function, the message does not explain why this change was made, what problem it solves, or how it improves the code. A better message would specify the intent, such as 'Replace sys.exit() with return to allow proper error handling and flow control in CLI function'. As a result, the message is technically correct but insufficiently informative, earning a moderate score.","The commit message 'add missing docstring' is highly inaccurate given the diff. The diff shows removal of `sys.exit()` calls and replacement with `return`, which is a functional change in control flow, not the addition of a docstring. There is no evidence of a missing docstring being added. Therefore, the commit message does not reflect the actual changes made, making it misleading and irrelevant to the code changes.","The commit message accurately and concisely describes the change: replacing `sys.exit()` with `return` in the CLI function. This is a clear, relevant, and precise summary of the diff, directly reflecting the actual code modification. The use of 'fix(cli)' correctly identifies the scope, and the message clearly states what was fixed and why (using return instead of sys.exit for better control flow). The change is minimal but meaningful, and the commit message effectively communicates the intent and impact."
bc33a56074a0bfffff210efb9e0345d30b479c5a,replace sys.exit with exceptions,geocoder/distance.py,"@@ -2,7 +2,6 @@
 # coding: utf8
 
 from __future__ import absolute_import
-import sys
 from math import radians, cos, sin, asin, sqrt
 from geocoder.location import Location
 
@@ -17,9 +16,7 @@ def Distance(*args, **kwargs):
         args = args[0]
 
     if len(args) <= 1:
-        print('[ERROR] Please provide a minimum of two locations\n'
-              '>>> g = geocoder.distance(""Ottawa ON"", ""Toronto ON"")')
-        sys.exit()
+        raise ValueError(""Distance needs at least two locations"")
 
     for location in args:
         if last:
@@ -87,10 +84,8 @@ def haversine(point1, point2, **kwargs):
         if units in lookup_units:
             return units_calculation[lookup_units[units]]
         else:
-            print('[ERROR] Unknown units of measurement.\n'
-                  'Ex: kilometers, miles, meters, feet\n'
-                  '>>> g = geocoder.distance(""Ottawa ON"", ""Toronto ON"", units=""km"")')
-            sys.exit()
+            raise ValueError(""Unknown units of measurement"")
+
     else:
         print('[WARNING] Error calculating the following two locations.\n'
               'Points: {0} to {1}'.format(point1.location, point2.location))
",add haversine and distance functions,fix(geocoder): replace sys.exit with ValueError for invalid inputs,Corrective,"The change replaces a direct program exit with a proper exception (ValueError), making the error handling more robust and allowing the caller to handle invalid inputs gracefully rather than terminating the program abruptly.",5.0,2.0,4.0,"The commit message 'replace sys.exit with exceptions' accurately reflects the change in the code diff, where instances of `sys.exit()` are replaced with `raise ValueError()`. This is a clear, concise, and relevant summary of the change. The diff shows that error handling is being improved by using exceptions instead of exiting the program, which is a best practice in Python for better control flow and error propagation. The message is specific, correct, and directly aligns with the implementation changes, making it excellent.","The commit message 'add haversine and distance functions' is overly vague and does not reflect the actual changes made. The diff shows that existing functions (Distance and haversine) were modified to replace error printing with more appropriate ValueError exceptions, improving error handling and code robustness. The commit does not simply 'add' functions but rather improves their error management and removes print-based error messages. A better commit message would reflect this improvement, such as 'Improve error handling in distance and haversine functions by replacing print errors with ValueError exceptions.' Therefore, the message is poor in specificity and accuracy, warranting a score of 2.","The commit message accurately reflects the change: replacing `sys.exit()` with `ValueError` for invalid inputs in the distance function. This improves error handling by allowing proper exception propagation instead of abruptly terminating the program. The message is concise and relevant to the diff, clearly indicating the fix and its purpose. However, it lacks detail about the specific cases (e.g., missing locations or unknown units), which could have been included for better context. Still, it is clear, accurate, and appropriate for a code change, making it a strong (but not perfect) commit message."
bc33a56074a0bfffff210efb9e0345d30b479c5a,replace sys.exit with exceptions,geocoder/here.py,"@@ -23,7 +23,7 @@ class Here(Base):
     qualified_address = ['city', 'district', 'postal', 'state', 'country']
 
     def __init__(self, location, **kwargs):
-        self.url = kwargs.get('url','http://geocoder.api.here.com/6.2/geocode.json')
+        self.url = kwargs.get('url', 'http://geocoder.api.here.com/6.2/geocode.json')
         self.location = location
         self.params = {
             'searchtext': location,
",add missing class attributes,fix(backend): correct string literal in url initialization,Corrective,"The change addresses a specific bug in the URL initialization by correcting a string literal, which ensures the backend behaves as intended and fixes a logical error.",1.0,2.0,3.0,"The commit message 'replace sys.exit with exceptions' is completely unrelated to the code diff, which only modifies a string literal in a URL default value. There is no mention of sys.exit or exception handling in the code change. The message misrepresents the actual change and does not accurately describe what was modified, making it irrelevant and misleading.","The commit message 'add missing class attributes' is vague and does not accurately describe the change. The diff shows a fix for a missing quote in a string literal (a single quote was missing in the URL default value), not the addition of a class attribute. The change is a syntax fix, not the addition of attributes. Therefore, the message misrepresents the actual change, making it poorly descriptive and misleading.","The commit message correctly identifies the nature of the change as a fix and specifies the component (backend) and the type of issue (string literal in url initialization). However, it lacks context about why the fix was necessary—such as whether there was a syntax error, formatting issue, or potential runtime impact. The change itself is minimal and syntactically correct (adding a missing space), but the message does not clearly communicate the significance or risk of the original issue. Thus, it is accurate but under-explained, earning a moderate score."
bc33a56074a0bfffff210efb9e0345d30b479c5a,replace sys.exit with exceptions,geocoder/location.py,"@@ -65,12 +65,7 @@ class Location(object):
 
         # Result into Error
         else:
-            print('[ERROR] Please provide a correct location\n'
-                  '>>> g = geocoder.location(""Ottawa ON"")\n'
-                  '>>> g = geocoder.location([45.23, -75.12])\n'
-                  '>>> g = geocoder.location(""45.23, -75.12"")\n'
-                  '>>> g = geocoder.location({""lat"": 45.23, ""lng"": -75.12})')
-            sys.exit()
+            raise ValueError(""Unknown location: %s"" % location)
 
     def _check_for_list(self, location):
         # Standard LatLng list or tuple with 2 number values
@@ -92,17 +87,9 @@ class Location(object):
                     self.lng = lng
                     return self.lat, self.lng
                 else:
-                    print(""[ERROR] Coords are not within the world's geographical boundary\n""
-                          'Latitudes must be within -90 to 90 degrees\n'
-                          'Longitude must be within -180 to 180 degrees')
-                    sys.exit()
+                    raise ValueError(""Coords are not within the world's geographical boundary"")
             else:
-                print(""[ERROR] Coordinates must be numbers.\n""
-                      '>>> g = geocoder.location(""Ottawa ON"")\n'
-                      '>>> g = geocoder.location([45.23, -75.12])\n'
-                      '>>> g = geocoder.location(""45.23, -75.12"")\n'
-                      '>>> g = geocoder.location({""lat"": 45.23, ""lng"": -75.12})')
-                sys.exit()
+                raise ValueError(""Coordinates must be numbers"")
 
     def _check_for_dict(self, location):
         # Standard LatLng list or tuple with 2 number values
",add more error messages,fix(location): replace print errors with ValueError for invalid location inputs,Corrective,"The change addresses a bug by replacing error prints with a proper exception (ValueError) for invalid location inputs, improving error handling and program robustness.",4.0,2.0,5.0,"The commit message 'replace sys.exit with exceptions' accurately summarizes the main change in the code diff, which is replacing `print` error messages followed by `sys.exit()` with `raise ValueError` exceptions. This is a clear and relevant summary. However, it lacks detail about the specific error cases handled (e.g., invalid location format, out-of-bounds coordinates, non-numeric values), which could be useful for understanding the full scope. Despite this minor lack of context, the message is concise, correct, and directly reflects the change, making it excellent for a basic commit message. Therefore, a score of 4 is appropriate.","The commit message 'add more error messages' is overly vague and does not accurately reflect the actual changes. The diff shows that error messages were replaced with more structured and consistent `ValueError` exceptions, which is a significant improvement in error handling and code quality. However, the message fails to indicate the nature of the changes (e.g., replacing print statements with exceptions, improving clarity, or enhancing user experience). A better message would specify that 'replaced print error messages with raised ValueError exceptions for better error handling and consistency'. Therefore, while the change is meaningful, the commit message lacks specificity and context, resulting in a score of 2.","The commit message accurately and concisely summarizes the change: replacing print-based error messages with more appropriate ValueError exceptions for invalid location inputs. This aligns perfectly with the diff, which shows consistent replacement of `print()` statements with `raise ValueError(...)`. The message is specific, relevant, and reflects the actual impact of the change, making it excellent for clarity and maintainability."
dd2adecf26ae2871a64e35c8cd9b375d53596329,"Clean up Setupfile

- Change the way it finds the version
- Remove Pandoc creating RST",setup.py,"@@ -1,45 +1,41 @@
 #!/usr/bin/python
 # coding: utf8
 import os
-from codecs import open
 import re
+import sys
+
+from codecs import open
 
 try:
     from setuptools import setup
 except ImportError:
     from distutils.core import setup
 
+if sys.argv[-1] == 'publish':
+    os.system('python setup.py sdist bdist_wheel upload')
+    sys.exit()
 
-def find_version(*file_paths):
-    # Open in Latin-1 so that we avoid encoding errors.
-    # Use codecs.open for Python 2 compatibility
-    here = os.path.abspath(os.path.dirname(__file__))
-    with open(os.path.join(here, *file_paths), 'r', 'latin1') as f:
-        version_file = f.read()
+requires = ['requests', 'ratelim', 'click', 'six']
 
-    # The version line must have the form
-    # __version__ = 'ver'
-    version_match = re.search(r""^__version__ = ['\""]([^'\""]*)['\""]"",
-                              version_file, re.M)
-    if version_match:
-        return version_match.group(1)
-    raise RuntimeError(""Unable to find version string."")
+version = ''
+with open('requests/__init__.py', 'r') as fd:
+    version = re.search(r'^__version__\s*=\s*[\'""]([^\'""]*)[\'""]',
+                        fd.read(), re.MULTILINE).group(1)
 
-install_requires = ['requests', 'ratelim', 'click', 'six']
+if not version:
+    raise RuntimeError('Cannot find version information')
 
-try:
-    import pypandoc
-    long_description = pypandoc.convert('README.md', 'rst') + ""\n""
-except(IOError, ImportError):
-    with open('README.md', encoding='utf-8') as f:
-        long_description = f.read() + ""\n""
+with open('README.rst', 'r', 'utf-8') as f:
+    readme = f.read()
+
+with open('HISTORY.rst', 'r', 'utf-8') as f:
+    history = f.read()
 
 setup(
     name='geocoder',
     version=find_version('geocoder', '__init__.py'),
-    description=""Geocoder is a geocoding library, written in python,""
-                "" simple and consistent."",
-    long_description=long_description,
+    description=""Simple and consistent geocoding library."",
+    long_description=long_description=readme + '\n\n' + history,
     author='Denis Carriere',
     author_email='carriere.denis@gmail.com',
     url='https://github.com/DenisCarriere/geocoder',
",add python 2 compatibility support,feat(geocoder): update version detection and add publish script,Semantic,"The new message introduces a more specific and meaningful change by highlighting a feature update (publish script) and version detection, which adds functional clarity and context beyond mere cleanup, thus representing a semantic improvement.",3.0,1.0,3.0,"The commit message is basic and mentions two changes, but it lacks detail and context. The change in version finding is actually a regression — it now reads the version from `requests/__init__.py` instead of `geocoder/__init__.py`, which is a logical error and could break the build. The removal of Pandoc is mentioned, but the commit diff shows that the long_description is still being constructed from README.md and HISTORY.rst, so the Pandoc removal is not fully accurate. The message fails to highlight the critical bug in version lookup, and the phrasing 'Clean up Setupfile' is vague. While it identifies two actions, it does not reflect the actual impact or correctness of the changes. Therefore, it is only moderately informative and technically inaccurate, warranting a score of 3.","The commit message 'add python 2 compatibility support' is highly misleading given the actual changes in the diff. The diff does not add Python 2 compatibility; instead, it removes code related to version detection and long description handling, and introduces a version extraction method that relies on reading `__init__.py` and uses modern Python features (like `sys.argv[-1] == 'publish'` for publishing). There is no evidence of Python 2-specific fixes or workarounds. Moreover, the changes appear to be more about improving version handling and setup.py configuration than ensuring compatibility with Python 2. The message is therefore inaccurate and does not reflect the actual changes, making it poor.","The commit message 'feat(geocoder): update version detection and add publish script' is somewhat accurate in summarizing the changes, but it lacks detail and precision. The diff shows that the version detection logic was moved from a separate function to directly inside the setup script, and a publish script was added. However, the commit message does not clearly indicate that the version is now extracted from 'geocoder/__init__.py' (which was previously done via a separate `find_version` function), nor does it mention the removal of the old `find_version` function or the changes to `long_description`. Additionally, the message implies a feature addition, but the actual changes are more about refactoring and improving tooling. As a result, while the message is technically correct in broad terms, it is vague and misses key technical details, which reduces its clarity and usefulness for a code review. A score of 3 reflects a partially adequate but insufficient commit message."
29fe79005d372c4f025e62ca0b986c64a6fcf9cc,Setup Fixes & Pep8,geocoder/base.py,"@@ -22,7 +22,7 @@ class Base(object):
                 'properties', 'geojson', 'tree', 'error', 'proxies', 'road',
                 'xy', 'northeast', 'northwest', 'southeast', 'southwest',
                 'road_long', 'city_long', 'state_long', 'country_long',
-                'postal_town_long', 'province_long', 'road_long', 'street_long',]
+                'postal_town_long', 'province_long', 'road_long', 'street_long']
     fieldnames = []
     error = None
     status_code = None
",add missing docstring,fix(geo): correct duplicate field in fieldnames list,Corrective,"The new message specifies a bug fix for a duplicate field in fieldnames, indicating a structural or logical error that was corrected, which falls under corrective improvements.",2.0,1.0,3.0,"The commit message 'Setup Fixes & Pep8' is vague and does not clearly describe the actual change made. The diff shows a simple typo: 'road_long' was duplicated in the list of fields, and the correct version is now used. The message fails to indicate what was fixed, why it matters, or how it relates to setup or PEP8. While 'Pep8' might suggest formatting, the change is not a formatting issue and is actually a duplication error. A better message would specify the fix, such as 'Fix duplicate field entry in fieldnames list for road_long'. Therefore, the message is too generic and lacks clarity, warranting a score of 2.","The commit message 'add missing docstring' is completely irrelevant to the code diff. The diff shows a change in a list of field names in a class, specifically removing a duplicate entry of 'road_long'. There is no docstring added or modified. The message misrepresents the actual change, making it inaccurate and misleading. Therefore, the score is 1 (Poor).","The commit message identifies a fix for a duplicate field in the fieldnames list, which is relevant to the code change. However, the message is vague about what exactly was duplicated or why it was a problem. It correctly references the context (geo) and the nature of the fix, but lacks specificity about the field or the impact. A more detailed message would have improved clarity and usefulness."
29fe79005d372c4f025e62ca0b986c64a6fcf9cc,Setup Fixes & Pep8,geocoder/google.py,"@@ -119,7 +119,7 @@ class Google(Base):
 
     @property
     def road_long(self):
-        return street_long
+        return self.street_long
 
     @property
     def neighborhood(self):
",add missing semicolon,fix(road): correct property access to self.street_long,Corrective,"The new message specifies a precise fix for a property access issue in code, indicating a bug correction related to self.street_long, which is a semantic and functional fix rather than a cosmetic or trivial change.",2.0,2.0,4.0,"The commit message 'Setup Fixes & Pep8' is vague and does not clearly describe the actual change made. The diff shows a simple fix where a property reference was updated from `street_long` to `self.street_long`, which is a minor code clarity improvement. The message fails to specify what was fixed or why, and 'Pep8' is an outdated term (now PEP 8), making it less accurate. While the change is small, the commit message lacks specificity and context, resulting in a low score.","The commit message 'add missing semicolon' is technically incorrect because no semicolon is missing in the code diff. The change replaces a reference to `street_long` with `self.street_long`, which is a proper property access, not a semicolon addition. The message misrepresents the actual change, making it misleading and inaccurate. While the intent may have been to indicate a fix, the content is factually wrong, which reduces its quality. A better message would describe the property access correction, such as 'fix property access to use self.street_long'. Therefore, the score is 2 for being off-target but not completely meaningless.","The commit message is clear and relevant, correctly identifying the fix as a property access issue and specifying the change from `street_long` to `self.street_long`. It uses the appropriate prefix 'fix' and includes context about the component ('road') and the nature of the change. The only minor limitation is that it doesn't explicitly mention the original bug (e.g., potential AttributeError or incorrect property access), but given the diff, the message is accurate and sufficiently descriptive for a developer to understand the intent. It is not excellent because it lacks deeper context about why the change was necessary, but it is still clear and actionable."
29fe79005d372c4f025e62ca0b986c64a6fcf9cc,Setup Fixes & Pep8,geocoder/location.py,"@@ -5,6 +5,7 @@ import re
 import geocoder
 from six import string_types
 
+
 class Location(object):
     """""" Location container """"""
     lat = None
",add missing docstring,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed'), suggesting a bug or error that needs addressing, which falls under corrective improvements.",2.0,2.0,1.0,"The commit message 'Setup Fixes & Pep8' is vague and lacks specificity. It does not clearly indicate what was fixed, why it was necessary, or how it relates to the code changes. The diff shows only the addition of an import and a class definition, which is minimal and does not clearly align with 'setup fixes' or 'PEP8' compliance. A more descriptive message, such as 'Add missing import for geocoder and initialize Location class with lat attribute', would be more appropriate. Therefore, the message is only partially relevant and lacks clarity, warranting a score of 2.","The commit message 'add missing docstring' is vague and provides no context about what was added or why. While it correctly identifies that a docstring was added, it lacks specificity—such as which class or method, or what the docstring describes. In a well-maintained codebase, such messages should explain the impact or purpose. The diff shows a docstring was added to the Location class, but the commit message fails to communicate that. Therefore, it is minimally adequate but insufficiently informative.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was fixed, why it was fixed, or what issue it resolves. It does not describe the actual change in the code (which is merely adding an import and a class definition), nor does it indicate the problem that was addressed. A good commit message should be specific and actionable, such as 'fix: add Location class to support geolocation data'. This message fails to meet even basic standards for clarity and usefulness."
29fe79005d372c4f025e62ca0b986c64a6fcf9cc,Setup Fixes & Pep8,setup.py,"@@ -18,7 +18,7 @@ if sys.argv[-1] == 'publish':
 requires = ['requests', 'ratelim', 'click', 'six']
 
 version = ''
-with open('requests/__init__.py', 'r') as fd:
+with open('geocoder/__init__.py', 'r') as fd:
     version = re.search(r'^__version__\s*=\s*[\'""]([^\'""]*)[\'""]',
                         fd.read(), re.MULTILINE).group(1)
 
@@ -33,9 +33,9 @@ with open('HISTORY.rst', 'r', 'utf-8') as f:
 
 setup(
     name='geocoder',
-    version=find_version('geocoder', '__init__.py'),
+    version=version,
     description=""Simple and consistent geocoding library."",
-    long_description=long_description=readme + '\n\n' + history,
+    long_description=readme + '\n\n' + history,
     author='Denis Carriere',
     author_email='carriere.denis@gmail.com',
     url='https://github.com/DenisCarriere/geocoder',
@@ -49,7 +49,7 @@ setup(
     package_data={'': ['LICENSE', 'README.md']},
     package_dir={'geocoder': 'geocoder'},
     include_package_data=True,
-    install_requires=install_requires,
+    install_requires=requires,
     zip_safe=False,
     keywords='geocoder arcgis tomtom opencage google bing here',
     classifiers=(
",add setup.py for geocoder,fix(package): update package name and dependencies from requests to geocoder,Corrective,"The new message specifies a concrete fix involving updating dependencies, which addresses a functional or technical issue in the package configuration, moving beyond mere formatting or naming.",2.0,2.0,4.0,"The commit message 'Setup Fixes & Pep8' is overly vague and does not accurately reflect the actual changes. The diff shows a clear replacement of 'requests' with 'geocoder' in multiple files (e.g., the version file path and setup.py name), which is a significant change related to project structure and configuration, not just setup fixes or PEP8 compliance. The mention of 'Pep8' is also incorrect as no formatting changes are present. A better message would specify the actual change, such as 'Fix package name and version path to use geocoder instead of requests'.","The commit message 'add setup.py for geocoder' is overly vague and does not accurately reflect the actual changes. The diff shows that the file was already present (setup.py), and the changes involve modifying the version source from 'requests/__init__.py' to 'geocoder/__init__.py' and updating the package name and dependencies accordingly. The commit message fails to mention the key changes, such as correcting the version lookup and updating the package name, making it misleading and insufficient for understanding the actual purpose of the commit. A better message would describe the fix or refactoring of the setup configuration for the geocoder package.","The commit message accurately reflects the main changes: the package name was updated from 'requests' to 'geocoder', and the dependencies were changed from 'requests' to 'geocoder' (specifically 'ratelim', 'click', 'six'). The message is clear and concise, correctly identifying the scope as a package fix. However, it could be slightly more precise by mentioning the file path or version extraction change (e.g., updating the version file from requests to geocoder), which is a related but not fully captured detail. Overall, it's accurate and useful for understanding the change, making it a strong 4 rather than an excellent 5."
d842ddd7f7980c9bed5544d54d626bc164c17c36,"Fix Bing issues, added user-agent",geocoder/bing.py,"@@ -23,35 +23,6 @@ class Bing(Base):
     Get Bing key
     ------------
     https://www.bingmapsportal.com/
-
-    OSM Quality (4/6)
-    -----------------
-    [ ] addr:housenumber
-    [ ] addr:street
-    [x] addr:city
-    [x] addr:state
-    [x] addr:country
-    [x] addr:postal
-
-    Attributes (17/17)
-    ------------------
-    [x] accuracy
-    [x] address
-    [x] bbox
-    [x] city
-    [x] confidence
-    [x] country
-    [x] housenumber
-    [x] lat
-    [x] lng
-    [x] location
-    [x] ok
-    [x] postal
-    [x] provider
-    [x] quality
-    [x] state
-    [x] status
-    [x] street
     """"""
     provider = 'bing'
     method = 'geocode'
@@ -59,12 +30,18 @@ class Bing(Base):
     def __init__(self, location, **kwargs):
         self.url = 'http://dev.virtualearth.net/REST/v1/Locations'
         self.location = location
+        self.headers = {
+            'Referer': ""http://addxy.com/"",
+            'User-agent': 'Mozilla/5.0'
+        }
         self.params = {
             'q': location,
             'o': 'json',
+            'inclnb': 1,
             'key': kwargs.get('key', bing_key),
-            'maxResults': 1,
+            'maxResults': 1
         }
+
         self._initialize(**kwargs)
 
     def _catch_errors(self):
@@ -112,6 +89,10 @@ class Bing(Base):
     def street(self):
         return self.parse['address'].get('addressLine')
 
+    @property
+    def neighborhood(self):
+        return self.parse['address'].get('neighborhood')
+
     @property
     def city(self):
         return self.parse['address'].get('locality')
@@ -146,5 +127,5 @@ class Bing(Base):
             return self._get_bbox(south, west, north, east)
 
 if __name__ == '__main__':
-    g = Bing('Ottawa ON')
-    g.debug()
+    g = Bing('453 Booth Street, Ottawa Ontario')
+    g.debug()
\ No newline at end of file
",add missing docstrings,add(bing): support neighborhood extraction from address response,Semantic,"The new message provides more specific and meaningful context about the change—introducing support for neighborhood extraction from address responses—going beyond a simple fix or cosmetic update, thus representing a semantic improvement in clarity and intent.",2.0,2.0,5.0,"The commit message 'Fix Bing issues, added user-agent' is too vague and does not accurately reflect the actual changes. While a user-agent header was added, the changes also include adding neighborhood support, updating the location query to a more specific address, and removing outdated OSM quality comments. The message fails to mention these significant additions and improvements. It incorrectly implies a bug fix without evidence of a prior issue, and omits key functionality changes. A better message would explicitly state the new features (e.g., 'Add neighborhood property, improve address parsing, and add proper user-agent header'). Therefore, the message is only minimally informative and deserves a score of 2.","The commit message 'add missing docstrings' is inaccurate and misleading given the actual changes in the diff. The diff does not add any docstrings; instead, it removes old OSM quality and attributes documentation and adds new code features like a `neighborhood` property and updates the example location. The changes are not about docstrings but about improving functionality and structure. Therefore, the commit message fails to reflect the actual changes, making it poorly descriptive and misleading.","The commit message accurately reflects the change introduced in the code. The diff shows the addition of a new `neighborhood` property in the Bing class that extracts the neighborhood from the address response, which is clearly stated in the commit message. The change is specific, relevant, and directly tied to the functionality added. Additionally, the example in the main block now uses a more detailed address that includes a neighborhood, suggesting the feature is being used in practice. The message is concise, clear, and properly scoped to the task."
d842ddd7f7980c9bed5544d54d626bc164c17c36,"Fix Bing issues, added user-agent",geocoder/keys.py,"@@ -1,13 +1,14 @@
 #!/usr/bin/python
 # coding: utf8
 
-bing_key = 'AtnSnX1rEHr3yTUGC3EHkD6Qi3NNB-PABa_F9F8zvLxxvt8A7aYdiG3bGM_PorOq'
+bing_key = 'Aj1bcHN7s_wQomMB6-P_n2WM6V5DFJ2aR6HO2DY47Gty5j7tUwx1e7EY9hoTsaqO'
 tomtom_key = '95kjrqtpzv39ujcxfyr57wz3'
-app_id = 'YLMDvKj4nkqCQE9GdfTs'
-app_code = 'xABlZIjdnmmX1KUF7yJxSQ'
+app_id = 'UUB690Wqo8oyEZySnxJb'
+app_code = 'IBDbqNqTi7l_h5CwhSYbvg'
 geonames_username = 'addxy'
 canadapost_key = ''
 opencage_key = '519418b47cfac1f8d435a7f3fda6a7e0'
 mapquest_key = 'Kmjtd|luua2qu7n9,7a=o5-lzbgq'
 baidu_key = 'E4805d16520de693a3fe707cdc962045'
 w3w_key = 'AHWMVNDY'
+mapbox_key = 'sk.eyJ1Ijoicm9ja3NvY2tlciIsImEiOiJ1QXFMbVpNIn0.Qfp_eHbPJUkflGLfInkRlg'
","add app_id, mapbox_key and mapbox_key",fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed'), suggesting a bug fix or error handling improvement, which aligns with a corrective change.",2.0,2.0,1.0,"The commit message 'Fix Bing issues, added user-agent' is misleading and inaccurate given the diff. The diff shows only a replacement of API keys (Bing, TomTom, Mapbox, etc.) with new values, not a fix for Bing issues. There is no mention of a user-agent being added. The change appears to be a key rotation or update, not a bug fix or user-agent addition. Therefore, the commit message does not accurately reflect the actual changes, making it poor and potentially confusing for other developers.","The commit message is incorrect and confusing. It states 'add app_id, mapbox_key and mapbox_key' which duplicates 'mapbox_key' and incorrectly lists 'app_id' as something new when it was already present in the file. The actual change is only the addition of a new key (mapbox_key), not the addition of app_id. The message fails to accurately reflect the change, making it misleading and technically inaccurate. A better message would be 'Add mapbox_key to configuration'. Thus, the quality is low but not completely poor, earning a score of 2.","The commit message 'fix: rectification failed' is highly vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what issue it resolves. The diff shows only a replacement of API keys across multiple services, which suggests a configuration update, not a 'rectification' of a failure. A proper commit message should clearly explain the change and its purpose (e.g., 'fix: update Bing, Mapbox, and TomTom API keys due to access expiration'). The current message fails to provide context, making it difficult to understand the intent or impact of the change."
f6f8331d07f592b2e1f9e26822e780f7d5dfe929,#129 Final fixes for Mapbox,geocoder/__init__.py,"@@ -28,12 +28,12 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.5.0'
+__version__ = '1.5.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
 # CORE
-from geocoder.api import get, yahoo, bing, geonames, mapquest, google  # noqa
+from geocoder.api import get, yahoo, bing, geonames, mapquest, google, mapbox  # noqa
 from geocoder.api import nokia, osm, tomtom, geolytica, arcgis, opencage  # noqa
 from geocoder.api import maxmind, freegeoip, ottawa, here, baidu, w3w, yandex  # noqa
 
",add missing imports,chore(version): update version to 1.5.1 and add mapbox support,Semantic,"The new message provides more specific information about the change (version update and addition of mapbox support) and categorizes it as a chore, improving clarity and context compared to the vague 'Final fixes for Mapbox'.",2.0,3.0,5.0,"The commit message '#129 Final fixes for Mapbox' is vague and does not clearly reflect the actual changes in the diff. While the diff shows the addition of 'mapbox' to the imports, which relates to Mapbox integration, the message lacks specificity about what was fixed or why. The term 'final fixes' implies completion without evidence of prior issues or context. A better message would explicitly state the addition of Mapbox support and its purpose. Therefore, it is only minimally relevant and lacks clarity, warranting a score of 2.","The commit message 'add missing imports' is accurate and concise, reflecting the actual change in the diff. However, it lacks context—such as why the import was needed or what impact it has on functionality. While the message correctly identifies the change, it does not provide sufficient detail to understand the purpose or significance of adding `mapbox` to the imports. A better message would explain that the update ensures consistent JSON response handling across providers by including Mapbox support. As such, the message is functional but under-informed, warranting a moderate score.","The commit message is clear, concise, and accurately reflects the changes in the diff. It correctly identifies the version update from 1.5.0 to 1.5.1 and mentions the addition of mapbox support, which is explicitly shown in the code diff. The use of 'chore(version)' appropriately categorizes the change as a maintenance task related to versioning and feature addition. Both elements are clearly and precisely stated, making it excellent for understanding the purpose of the commit."
f6f8331d07f592b2e1f9e26822e780f7d5dfe929,#129 Final fixes for Mapbox,geocoder/mapbox.py,"@@ -69,7 +69,7 @@ class Mapbox(Base):
 
     @property
     def street(self):
-        return self.parse.get('text')
+        return ''
 
     @property
     def city(self):
@@ -110,5 +110,5 @@ class Mapbox(Base):
             return self._get_bbox(south, west, north, east)
 
 if __name__ == '__main__':
-    g = Mapbox('453 Booth street, Ottawa ON')
+    g = Mapbox('453 Booth street, Ottawa Ontario')
     g.debug()
",add debug property for mapbox,fix(mapbox): update city name format to include correct province,Corrective,"The change addresses a specific error in the city name format by including the correct province, which improves data accuracy and correctness.",2.0,2.0,2.0,"The commit message '#129 Final fixes for Mapbox' is overly vague and provides no detail about what was actually changed or why. The diff shows specific modifications: the 'street' property now returns an empty string instead of parsing 'text', and the address example was updated from 'Ottawa ON' to 'Ottawa Ontario' for consistency. A better commit message would explain these changes, such as 'Fix street property default and address format consistency in Mapbox class'. Since the message lacks context, specificity, and clarity about the impact of the changes, it receives a score of 2 (Fair).","The commit message 'add debug property for mapbox' is vague and does not accurately reflect the changes made. The diff shows modifications to street and city property getters, as well as a change in the input address from 'Ottawa ON' to 'Ottawa Ontario', which suggests a fix or improvement in address parsing rather than adding a debug property. The message fails to describe the actual changes or their purpose, making it unclear and insufficient for understanding the intent of the commit.","The commit message states it fixes the city name format by including the correct province, but the actual code changes do not reflect this. The change in the input string from 'Ottawa ON' to 'Ottawa Ontario' is not a fix to a city name format issue—it's a change in how the address is written, and the code does not parse or use the city property based on province. Additionally, the `street` property is now returning an empty string, which is a significant change with unclear intent. The commit message fails to accurately describe the actual changes and their impact. Therefore, it is only partially relevant and misleading, warranting a score of 2."
f6f8331d07f592b2e1f9e26822e780f7d5dfe929,#129 Final fixes for Mapbox,test_geocoder.py,"@@ -57,7 +57,6 @@ def test_mapbox_reverse():
 def test_mapbox():
     g = geocoder.mapbox(location)
     assert g.ok
-    assert g.city == city
 
 
 def test_yandex():
@@ -88,7 +87,7 @@ def test_baidu():
 def test_google():
     g = geocoder.google(location)
     assert g.ok
-    assert g.city == city
+    assert str(g.city) == city
 
 
 def test_google_reverse():
@@ -149,7 +148,7 @@ def test_opencage_reverse():
 def test_yahoo():
     g = geocoder.yahoo(location)
     assert g.ok
-    assert g.city == city
+    assert str(g.city) == city
 
 
 def test_arcgis():
@@ -184,19 +183,19 @@ def test_here_reverse():
 def test_osm():
     g = geocoder.osm(location)
     assert g.ok
-    assert g.city == city
+    assert str(g.city) == city
 
 
 def test_tomtom():
     g = geocoder.tomtom(location)
     assert g.ok
-    assert g.city == city
+    assert str(g.city) == city
 
 
 def test_mapquest():
     g = geocoder.mapquest(location)
     assert g.ok
-    assert g.city == city
+    assert str(g.city) == city
 
 
 def test_geonames():
",add more tests,fix(tests): ensure city field is properly converted to string in geocoder assertions,Corrective,"The new message specifies a fix for a test assertion that ensures proper string conversion of the city field in geocoder tests, addressing a potential bug or inconsistency in test behavior.",2.0,2.0,5.0,"The commit message '#129 Final fixes for Mapbox' is overly narrow and misleading. The diff shows changes across multiple geocoding services (Mapbox, Google, Yahoo, OSM, Tomtom, Mapquest, etc.), not just Mapbox. The changes involve modifying assertions to use `str(g.city) == city` instead of `g.city == city`, suggesting a broader fix for handling city field types (likely due to non-string values). The commit message fails to reflect the actual scope and impact of the changes, which affects clarity and usefulness for other developers. Therefore, it is only moderately accurate and lacks context, warranting a score of 2.","The commit message 'add more tests' is overly vague and provides no information about what was added, why it was added, or the specific improvements made. While the diff shows that multiple test cases now use `str(g.city) == city` instead of `g.city == city`, this change suggests a fix for potential type mismatches (e.g., city being a string or None), which is more meaningful than just 'adding more tests'. A better message would specify the issue addressed (e.g., 'Fix city comparison type mismatch in geocoder tests'). Therefore, the message is insufficiently descriptive and lacks context, warranting a score of 2.","The commit message accurately reflects the changes in the code diff. Across multiple geocoder tests, the assertion `assert g.city == city` was replaced with `assert str(g.city) == city`, which ensures that the city field is properly converted to a string before comparison. This is a necessary fix when the city value might be an object or non-string type. The commit message is concise, specific, and directly relates to the changes made, clearly indicating the purpose and scope of the fix. It correctly identifies the issue and the resolution, making it excellent for clarity and context."
e4923f34cd147a7bdbc63a8dfaac309a95e358bc,Pep8 fix,geocoder/bing.py,"@@ -128,4 +128,4 @@ class Bing(Base):
 
 if __name__ == '__main__':
     g = Bing('453 Booth Street, Ottawa Ontario')
-    g.debug()
\ No newline at end of file
+    g.debug()
",add missing newline at the end of file,fix(bing): add missing debug call,Corrective,"The new message indicates a specific fix for a missing debug call in a bing-related context, which addresses a functional deficiency rather than a style or formatting issue.",2.0,2.0,3.0,"The commit message 'Pep8 fix' is overly vague and does not accurately describe the change. While the diff shows a missing newline at the end of a file, which could be related to PEP 8 style guidelines, the actual change is simply adding a newline after the debug() call. This is not a full PEP 8 fix, and the message fails to specify what was fixed or why. A more descriptive message like 'Add missing newline at end of file' would be more appropriate. Therefore, the message is minimally informative and lacks clarity, warranting a score of 2.","The commit message correctly identifies the issue—a missing newline at the end of the file—but it lacks context about why this matters or how it affects the codebase. While the fix is technically accurate, the message is overly minimal and does not convey the significance or impact of the change. A better message would explain that the missing newline could cause issues with version control or formatting tools. Therefore, it is only moderately informative.","The commit message correctly identifies the fix as adding a missing debug call and specifies the affected component (bing). However, it lacks context about why the debug call was missing or what the expected behavior is, which limits its completeness. The diff shows a simple addition of a line, so the message is accurate but minimal. It is not poor, but also not detailed enough to be excellent."
842cbb58cef8e4b2a485fb47646a2778f7d1e569,Fix Python 2.6 issue,geocoder/base.py,"@@ -10,7 +10,7 @@ from geocoder.distance import Distance
 
 from six import string_types
 
-is_python2 = sys.version_info.major == 2
+is_python2 = sys.version_info < (3, 0)
 
 
 class Base(object):
",add missing import,fix: rectification failed,Cosmetic,"The new message 'fix: rectification failed' is vague and does not clearly indicate a fix for a Python 2.6 issue, lacking semantic clarity or correctness compared to the original. It appears to be a superficial change in wording without meaningful improvement in meaning or utility.",2.0,1.0,1.0,"The commit message 'Fix Python 2.6 issue' is too vague and does not accurately reflect the change. The diff shows a change from checking `sys.version_info.major == 2` to `sys.version_info < (3, 0)`, which correctly identifies that the code now detects Python versions less than 3.0 (i.e., Python 2.x), including 2.6, 2.7, etc. However, the message fails to specify that it's a general Python 2.x detection fix, not specifically for 2.6. While the change is valid and addresses Python 2.x compatibility, the message lacks technical detail and specificity, making it insufficient for clear understanding of the actual fix. Therefore, it receives a score of 2 — minimally adequate but not clear or precise.","The commit message 'add missing import' is highly inaccurate and misleading given the actual changes in the diff. The diff does not add a missing import—it modifies a conditional check for Python 2/3 compatibility by changing the comparison from `sys.version_info.major == 2` to `sys.version_info < (3, 0)`. This is a logic change, not an import addition. Therefore, the commit message fails to describe the actual work done and misrepresents the change. A more accurate message would be something like 'update Python 2 detection to use version tuple comparison'. Thus, the message is poor and deserves a score of 1.","The commit message 'fix: rectification failed' is highly vague and does not describe what was actually fixed or why. The code diff shows a simple change from checking `sys.version_info.major == 2` to `sys.version_info < (3, 0)`, which is a more accurate and concise way to detect Python 2 vs. Python 3. However, the commit message fails to reflect this actual change, offering no context about the fix, the issue it resolves, or its significance. A meaningful commit message should clearly explain the change and its purpose. Therefore, the message is poor and does not match the actual code modification."
7b8c932980ab320b25464be984f744ae532b3927,#147 #145 Catching SSL Errors & Unresolved,geocoder/base.py,"@@ -90,6 +90,9 @@ class Base(object):
             self.content = r.json()
         except KeyboardInterrupt:
             sys.exit()
+        except requests.exceptions.SSLError:
+            self.status_code = 495
+            self.error = 'ERROR - SSLError'
         except:
             self.status_code = 404
             self.error = 'ERROR - URL Connection'
@@ -199,12 +202,13 @@ class Base(object):
             return 'OK'
         elif self.error:
             return self.error
-        elif self.status_code == 404:
-            return 'ERROR - URL Connection'
-        elif not self.address:
-            return 'ERROR - No results found'
-        elif not (self.lng and self.lat):
-            return 'ERROR - No Geometry'
+
+        if self.status_code == 200:
+            if not self.address:
+                return 'ERROR - No results found'
+            elif not (self.lng and self.lat):
+                return 'ERROR - No Geometry'
+        return 'ERROR - Unhandled Exception'
 
     def _get_bbox(self, south, west, north, east):
         # South Latitude, West Longitude, North Latitude, East Longitude
",improve error message,fix(base): handle SSL error and improve error reporting in response processing,Corrective,"The new message indicates a fix for handling SSL errors and improving error reporting, which addresses a functional issue in the codebase, moving beyond mere description or formatting.",3.0,3.0,4.0,"The commit message '#147 #145 Catching SSL Errors & Unresolved' is somewhat relevant but lacks clarity and specificity. It references two issue numbers, which may or may not be directly related to the changes. The message mentions 'Catching SSL Errors' — which is accurate, as the diff adds handling for `SSLError` — but 'Unresolved' is vague and does not clearly describe the actual change in the error handling flow. The diff also improves error reporting structure, but this is not clearly reflected in the message. Overall, it's partially informative but lacks detail about what was fixed or improved, making it only moderately effective as a commit message.","The commit message 'improve error message' is vague and lacks specificity. While the code changes do enhance error handling by adding more detailed error messages (e.g., for SSLError and specific missing fields), the message does not convey what was improved, why it matters, or the scope of the changes. A more descriptive message like 'Add detailed error handling for SSL and geometry validation' would be more informative. Therefore, it receives a moderate score — sufficient to indicate improvement but lacking in clarity and context.","The commit message accurately reflects the changes made: it adds handling for SSL errors (SSLError) by setting a specific status code and error message, and improves error reporting by restructuring the error return logic to be more explicit and conditional. The message is concise, relevant, and captures the intent of the changes. However, it could be slightly more detailed in explaining the improvement in error reporting (e.g., clarifying that missing address or geometry errors are now properly surfaced). Overall, it is clear and appropriate for the diff, earning a strong 4."
7b8c932980ab320b25464be984f744ae532b3927,#147 #145 Catching SSL Errors & Unresolved,geocoder/yahoo.py,"@@ -33,8 +33,9 @@ class Yahoo(Base):
 
     def _yahoo_catch_errors(self):
         status = self.parse['statusDescription']
-        if not status == 'OK':
-            self.error = status
+        if status:
+            if not status == 'OK':
+                self.error = status
 
     def _exceptions(self):
         # Build intial Tree with results
",add missing semicolon,fix(yahoo): handle non-OK status descriptions,Corrective,"The new message indicates a fix for handling non-OK status responses in Yahoo's API, addressing a specific error handling issue, which is a corrective improvement.",2.0,2.0,3.0,"The commit message '#147 #145 Catching SSL Errors & Unresolved' is vague and does not accurately reflect the actual changes in the code diff. The diff shows a modification to handle error status in the _yahoo_catch_errors method, specifically making the error assignment conditional on status being non-empty and not equal to 'OK'. However, the commit message mentions 'Catching SSL Errors & Unresolved', which is not supported by the code changes. There is no mention of SSL errors or unresolved issues in the diff. Therefore, the message is misleading and fails to describe the actual change, resulting in a low score.","The commit message 'add missing semicolon' is technically incorrect because the diff does not show a missing semicolon. Instead, the change modifies the logic of the `_yahoo_catch_errors` method by adding a conditional check for `status` and reassigning `self.error` only when status is not 'OK'. This is a logical refactoring, not a simple syntax fix. The commit message fails to accurately describe the actual change, which is a structural improvement in error handling, not a semicolon addition. Therefore, it is misleading and under-descriptive, warranting a low score.","The commit message is relevant and identifies the general purpose of the change (handling non-OK status descriptions), which aligns with the diff. However, it lacks specificity about what was fixed or why—such as the fact that the original code only set an error on non-OK status when status was truthy, and the change now properly handles the case where status is falsy (e.g., empty or None). A more detailed message would clarify the intent and impact, such as 'fix(yahoo): ensure error is only set when status is non-OK and non-empty'. As it stands, the message is accurate but under-explained, resulting in a moderate score."
7b8c932980ab320b25464be984f744ae532b3927,#147 #145 Catching SSL Errors & Unresolved,test_geocoder.py,"@@ -132,7 +132,7 @@ def test_bing_reverse():
 """"""
 
 """"""
-Quote Exceeded
+# OpenCage Quota Exceeded
 
 def test_opencage():
     g = geocoder.opencage(location)
@@ -142,13 +142,15 @@ def test_opencage():
 def test_opencage_reverse():
     g = geocoder.opencage(ottawa, method='reverse')
     assert g.ok
-""""""
 
 
+# Yahoo has issues with SSL using Python 2.6
+
 def test_yahoo():
     g = geocoder.yahoo(location)
     assert g.ok
     assert str(g.city) == city
+""""""
 
 
 def test_arcgis():
",add more tests for geocoder,"fix(test_opencage): update error message from ""Quote Exceeded"" to ""OpenCage Quota Exceeded""",Corrective,"The error message was updated to accurately reflect the actual issue ('OpenCage Quota Exceeded' instead of 'Quote Exceeded'), correcting a semantic inaccuracy that could mislead users or developers.",2.0,2.0,3.0,"The commit message '#147 #145 Catching SSL Errors & Unresolved' is vague and does not accurately reflect the actual changes in the diff. The diff shows fixes for quota-related errors (e.g., 'OpenCage Quota Exceeded') and a note about SSL issues with Yahoo on Python 2.6, but the commit message fails to mention these specific issues or the context of the changes. Additionally, 'Catching SSL Errors & Unresolved' is ambiguous and does not clearly indicate what was fixed or why. A better message would explicitly state the issues addressed (e.g., quota errors, SSL compatibility). Therefore, the message is only partially relevant and lacks clarity, earning a score of 2.","The commit message 'add more tests for geocoder' is overly vague and does not reflect the actual changes made. The diff shows specific test updates related to quota issues (OpenCage) and SSL compatibility (Yahoo), which are more precise details. A better message would describe the specific improvements or fixes, such as 'update geocoder tests to address OpenCage quota and Yahoo SSL issues'. As it stands, the message lacks detail and context, making it only minimally informative.","The commit message accurately reflects the change made in the code diff — updating the error message from ""Quote Exceeded"" to ""OpenCage Quota Exceeded"" in the test_opencage function. However, it is narrowly focused and only addresses one part of the diff, which includes additional comments about Yahoo SSL issues and other test functions. The message lacks context about the broader changes or why the fix was necessary. While it is technically correct and clear, it does not fully capture the scope of the diff, making it somewhat limited in completeness and usefulness for a larger codebase."
9d73b84523d1ec9dea01a9b28ac5c356787db720,Change CLI default to JSON instead of GeoJSON,geocoder/cli.py,"@@ -20,7 +20,7 @@ units = ['kilometers', 'miles', 'feet', 'meters']
 @click.argument('location', nargs=-1)
 @click.option('--provider', '-p', default='osm', type=click.Choice(providers))
 @click.option('--method', '-m', default='geocode', type=click.Choice(methods))
-@click.option('--output', '-o', default='geojson', type=click.Choice(outputs))
+@click.option('--output', '-o', default='json', type=click.Choice(outputs))
 @click.option('--units', '-u', default='kilometers', type=click.Choice(units))
 @click.option('--distance', is_flag=True)
 @click.option('--url', default='')
",add support for --geojson and --geourl,fix(commands): default output format to json instead of geojson,Corrective,"The change corrects a discrepancy in the CLI default output format by explicitly setting it to JSON instead of GeoJSON, which is a semantic and functional improvement ensuring consistency and correctness in behavior.",4.0,2.0,5.0,"The commit message is clear and directly addresses the change made in the code diff, which updates the default output format from 'geojson' to 'json' in the CLI. It accurately reflects the impact of the change. However, it could be slightly improved by mentioning why this change was made (e.g., for compatibility, simplicity, or user preference), which would make it more informative. Still, the message is concise, relevant, and correctly identifies the change, earning a strong score.","The commit message is inaccurate and misleading. The diff shows that the default value for the '--output' option is changed from 'geojson' to 'json', not that support for '--geojson' or '--geourl' is added. Additionally, '--geourl' is not mentioned in the diff at all. The message does not reflect the actual changes made, making it poorly descriptive and potentially confusing. A better message would reflect the change in default output format (e.g., 'change default output format from geojson to json'). Therefore, the score is 2 for being factually incorrect and not clearly describing the actual change.","The commit message clearly and concisely communicates the change: it fixes the default output format from 'geojson' to 'json' in the command-line interface. The context ('fix(commands)') indicates the scope, and the specific change is directly reflected in the diff. The message is accurate, relevant, and sufficient for understanding the impact of the change without needing additional context."
3d695a9e3888ba135e2e4492fa2688ded75bd9e2,fixed Python 3 compatibility replacing .iteritems() with .items(),geocoder/google.py,"@@ -48,7 +48,7 @@ class Google(Base):
         self.client_secret = kwargs.get('client_secret', '')
         # turn non-empty params into sorted list in order to maintain signature validity.
         # Requests will honor the order.
-        self.params = sorted([(k.encode('utf8'), v.encode('utf8')) for (k, v) in self.params.iteritems() if v])
+        self.params = sorted([(k.encode('utf8'), v.encode('utf8')) for (k, v) in self.params.items() if v])
         # the signature parameter needs to come in the end of the url
         if self.client_secret:
             self.params.append(self.sign_url(self.url, self.params, self.client_secret))
",update google.py,fix(base): use items() instead of iteritems() for dictionary iteration,Corrective,"The change addresses a Python 2/3 compatibility issue by replacing deprecated .iteritems() with .items(), which is a necessary fix for code to run correctly in Python 3.",5.0,2.0,5.0,"The commit message accurately and concisely describes the change made in the code diff. It correctly identifies the issue (use of .iteritems() in Python 3, which is deprecated and replaced by .items()), and clearly states the fix. The message is specific, relevant, and directly tied to the change observed in the diff. This is an excellent commit message that provides context and clarity for maintainers or future contributors.","The commit message 'update google.py' is extremely vague and provides no information about what was changed or why. While the diff shows a specific change from .iteritems() to .items() (which is relevant for Python 3 compatibility), the commit message fails to convey this context. A better message would mention the Python 3 compatibility fix or the change in dictionary iteration method. Therefore, it receives a score of 2 for lacking specificity and technical detail.","The commit message accurately and concisely describes the change: replacing `iteritems()` with `items()` for Python 3 compatibility. This is a clear, relevant fix that addresses a dictionary iteration method deprecation. The message is specific, correct, and appropriately scoped to the change in the code diff. It reflects the actual change and its intent, making it excellent for a commit message."
bd8aa3194970c11c9e6883cedd7a0111513ef09c,fixed typos in google for work signing,geocoder/google.py,"@@ -51,7 +51,7 @@ class Google(Base):
         self.params = sorted([(k.encode('utf8'), v.encode('utf8')) for (k, v) in self.params.items() if v])
         # the signature parameter needs to come in the end of the url
         if self.client_secret:
-            self.params.append(self.sign_url(self.url, self.params, self.client_secret))
+            self.params.append(self._sign_url(self.url, self.params, self.client_secret))
 
         self._initialize(**kwargs)
 
@@ -81,7 +81,7 @@ class Google(Base):
         import urlparse
 
         # Return if any parameters aren't given
-        if not base_url or not client_secret or not params['client']:
+        if not base_url or not client_secret:
             return None
 
         # assuming parameters will be submitted to Requests in identical order!
",update google.py,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously masked by the old message, thus addressing a functional problem rather than just appearance or wording.",2.0,2.0,1.0,"The commit message 'fixed typos in google for work signing' is highly misleading and inaccurate. The diff shows a change from `sign_url` to `_sign_url`, which is not a typo but a renaming of a method, likely to indicate it's a private method. Additionally, the second change removes a check for `params['client']`, which is a significant functional change, not a typo. The commit message fails to describe the actual changes made and misrepresents the nature of the modifications. While there is a minor naming change, the message does not reflect the real scope or impact of the changes, making it inadequate.","The commit message 'update google.py' is extremely vague and provides no information about what was changed or why. While the diff shows actual code modifications—specifically, a method name change from `sign_url` to `_sign_url` and a parameter check adjustment—it lacks context about the purpose of the changes (e.g., security, consistency, bug fix). A meaningful commit message should reflect the intent and impact of the changes. Therefore, it receives a score of 2 (barely adequate) rather than higher, as it fails to communicate value or rationale.","The commit message 'fix: rectification failed' is extremely vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what issue it resolves. A good commit message should clearly state the problem and the solution. The diff shows a simple renaming of a method (`sign_url` to `_sign_url`) and a minor parameter check change, but the commit message provides no context about these changes or their purpose. This lack of clarity makes it poor for understanding the intent or impact of the change."
027c54bddee0e4875f40fb781ede76d5bd6d5568,fixed typos in google for work signing,geocoder/google.py,"@@ -81,7 +81,7 @@ class Google(Base):
         import urlparse
 
         # Return if any parameters aren't given
-        if not base_url or not client_secret:
+        if not base_url or not client_secret or not dict(params)['client']:
             return None
 
         # assuming parameters will be submitted to Requests in identical order!
",add missing comment,fix(google): validate client parameter in base URL request,Corrective,"The new message indicates a bug fix that validates a client parameter in the base URL request, which addresses a functional issue rather than just typos or style changes.",1.0,2.0,3.0,"The commit message 'fixed typos in google for work signing' is highly inaccurate and misleading. The diff shows a logical change in the condition check: it now includes a check for 'client' in the params dictionary, which is not a typo but a functional change to ensure the client parameter is present. There are no typos in the code, and the change is not about fixing typos. The commit message fails to describe the actual change, misrepresents the nature of the update, and does not reflect the code modification. Therefore, it is poor and should receive a score of 1.","The commit message 'add missing comment' is vague and does not accurately reflect the actual change. The diff shows a logical condition being extended to check for the presence of a 'client' parameter in the params dictionary, which is not a comment but a code modification. A more descriptive message such as 'add validation for client parameter in params dictionary' would better explain the change. Therefore, the commit message is misleading and lacks clarity, warranting a low score.","The commit message correctly identifies the fix as related to validating a client parameter in the Google base URL request, which aligns with the code change. However, it lacks specificity about why the validation is needed or what the impact is. The diff shows that the condition now checks for the 'client' parameter in `params`, which was missing before, so the message could be more precise (e.g., 'add validation for client parameter in params'). As a result, while the message is accurate and relevant, it is somewhat vague and could be improved for clarity and completeness."
82a11a5dfd2aba59a66c7783eda086080002226b,"Update IPInfo.io Provider

- Changed the provider name shorter from ipinfoio > ipinfo
- Added Command line support for ipinfo.
- Parsing lat & lng into floats instead of strings.
- Converted documentation to RST instead of Markdown.
- Catching errors if you enter incorrect IP address.
- Remove ipinfo exceptions, there isn't any.
- Added IPInfo in Index.rst for docs.",geocoder/__init__.py,"@@ -28,14 +28,14 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.5.2'
+__version__ = '1.5.3'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
 # CORE
 from geocoder.api import get, yahoo, bing, geonames, mapquest, google, mapbox  # noqa
 from geocoder.api import nokia, osm, tomtom, geolytica, arcgis, opencage  # noqa
-from geocoder.api import maxmind, ipinfoio, freegeoip, ottawa, here, baidu, w3w, yandex  # noqa
+from geocoder.api import maxmind, ipinfo, freegeoip, ottawa, here, baidu, w3w, yandex  # noqa
 
 # EXTRAS
 from geocoder.api import timezone, elevation, ip, canadapost, reverse, distance, location  # noqa
",add missing imports,chore(version): update version to 1.5.3,Trivial,"The change only updates the version number in the versioning scheme and does not introduce any functional, structural, or behavioral improvements or fixes.",1.0,2.0,5.0,"The commit message does not accurately reflect the actual changes in the code diff. The diff shows only a simple renaming of an import from 'ipinfoio' to 'ipinfo' in the imports section, which is a minor change. However, the commit message lists several unrelated features such as 'Command line support', 'parsing lat & lng into floats', 'converting documentation to RST', 'catching errors', 'removing exceptions', and 'adding IPInfo in Index.rst' — none of which are present or implied in the code change. These additions are either incorrect or entirely unrelated to the actual diff. Therefore, the commit message is misleading, inaccurate, and fails to match the actual code changes, making it poor in both clarity and correctness.","The commit message 'add missing imports' is overly vague and does not accurately reflect the actual change. The diff shows a replacement of 'ipinfoio' with 'ipinfo' in the imports, which is not simply an 'add' but a correction or update. The message fails to indicate that an import was replaced or corrected, and thus misrepresents the nature of the change. A more accurate message would be something like 'Fix import name inconsistency: ipinfoio → ipinfo'. Therefore, the message is insufficiently descriptive and lacks precision, warranting a score of 2.","The commit message is clear, concise, and accurately reflects the change made in the code diff. It correctly identifies the type of change as a chore (version update) and specifies the exact version increment (1.5.3). The diff confirms that only the version number was updated, with no other modifications, making the commit message both relevant and precise."
82a11a5dfd2aba59a66c7783eda086080002226b,"Update IPInfo.io Provider

- Changed the provider name shorter from ipinfoio > ipinfo
- Added Command line support for ipinfo.
- Parsing lat & lng into floats instead of strings.
- Converted documentation to RST instead of Markdown.
- Catching errors if you enter incorrect IP address.
- Remove ipinfo exceptions, there isn't any.
- Added IPInfo in Index.rst for docs.",geocoder/api.py,"@@ -15,8 +15,8 @@ from geocoder.ottawa import Ottawa
 from geocoder.yandex import Yandex
 from geocoder.google import Google
 from geocoder.mapbox import Mapbox
+from geocoder.ipinfo import Ipinfo
 from geocoder.maxmind import Maxmind
-from geocoder.ipinfoio import IpinfoIo
 from geocoder.location import Location
 from geocoder.opencage import OpenCage
 from geocoder.geonames import Geonames
@@ -37,63 +37,66 @@ from geocoder.mapquest_reverse import MapquestReverse
 from geocoder.opencage_reverse import OpenCageReverse
 
 
+options = {
+    'osm': {'geocode': Osm},
+    'here': {
+        'geocode': Here,
+        'reverse': HereReverse,
+    },
+    'baidu': {'geocode': Baidu},
+    'yahoo': {'geocode': Yahoo},
+    'tomtom': {'geocode': Tomtom},
+    'arcgis': {'geocode': Arcgis},
+    'ottawa': {'geocode': Ottawa},
+    'mapbox': {
+        'geocode': Mapbox,
+        'reverse': MapboxReverse,
+    },
+    'maxmind': {'geocode': Maxmind},
+    'ipinfo': {'geocode': Ipinfo},
+    'geonames': {'geocode': Geonames},
+    'freegeoip': {'geocode': FreeGeoIP},
+    'w3w': {
+        'geocode': W3W,
+        'reverse': W3WReverse,
+    },
+    'yandex': {
+        'geocode': Yandex,
+        'reverse': YandexReverse,
+    },
+    'mapquest': {
+        'geocode': Mapquest,
+        'reverse': MapquestReverse,
+    },
+    'geolytica': {'geocode': Geolytica},
+    'canadapost': {'geocode': Canadapost},
+    'opencage': {
+        'geocode': OpenCage,
+        'reverse': OpenCageReverse,
+    },
+    'bing': {
+        'geocode': Bing,
+        'reverse': BingReverse,
+    },
+    'google': {
+        'geocode': Google,
+        'reverse': GoogleReverse,
+        'timezone': Timezone,
+        'elevation': Elevation,
+    },
+}
+
+
 def get(location, **kwargs):
     """"""Get Geocode
 
     :param ``location``: Your search location you want geocoded.
     :param ``provider``: The geocoding engine you want to use.
+
     :param ``method``: Define the method (geocode, method).
     """"""
     provider = kwargs.get('provider', 'bing').lower().strip()
     method = kwargs.get('method', 'geocode').lower().strip()
-    options = {
-        'osm': {'geocode': Osm},
-        'here': {
-            'geocode': Here,
-            'reverse': HereReverse,
-        },
-        'baidu': {'geocode': Baidu},
-        'yahoo': {'geocode': Yahoo},
-        'tomtom': {'geocode': Tomtom},
-        'arcgis': {'geocode': Arcgis},
-        'ottawa': {'geocode': Ottawa},
-        'mapbox': {
-            'geocode': Mapbox,
-            'reverse': MapboxReverse,
-        },
-        'maxmind': {'geocode': Maxmind},
-        'ipinfoio': {'geocode': IpinfoIo},
-        'geonames': {'geocode': Geonames},
-        'freegeoip': {'geocode': FreeGeoIP},
-        'w3w': {
-            'geocode': W3W,
-            'reverse': W3WReverse,
-        },
-        'yandex': {
-            'geocode': Yandex,
-            'reverse': YandexReverse,
-        },
-        'mapquest': {
-            'geocode': Mapquest,
-            'reverse': MapquestReverse,
-        },
-        'geolytica': {'geocode': Geolytica},
-        'canadapost': {'geocode': Canadapost},
-        'opencage': {
-            'geocode': OpenCage,
-            'reverse': OpenCageReverse,
-        },
-        'bing': {
-            'geocode': Bing,
-            'reverse': BingReverse,
-        },
-        'google': {
-            'geocode': Google,
-            'reverse': GoogleReverse,
-            'timezone': Timezone,
-            'elevation': Elevation,
-        },
-    }
     if isinstance(location, (list, dict)) and method == 'geocode':
         raise ValueError(""Location should be a string"")
 
@@ -342,14 +345,14 @@ def maxmind(location='me', **kwargs):
     return get(location, provider='maxmind', **kwargs)
 
 
-def ipinfoio(location='', **kwargs):
-    """"""IpinfoIo Provider
+def ipinfo(location='', **kwargs):
+    """"""IP Info.io Provider
 
     :param location: Your search IP Address you want geocoded.
     :param location: (optional) if left blank will return your
                                 current IP address's location.
     """"""
-    return get(location, provider='ipinfoio', **kwargs)
+    return get(location, provider='ipinfo', **kwargs)
 
 
 def freegeoip(location, **kwargs):
",add missing js files,fix: rectification failed,Corrective,"The new message 'fix: rectification failed' indicates a bug fix related to a failure in rectification, suggesting a corrective action was taken to address an error previously present in the system.",2.0,1.0,1.0,"The commit message contains several inaccuracies and misrepresentations. It claims to have 'added command line support for ipinfo' and 'converted documentation to RST instead of Markdown', which are not evident in the diff. The diff shows only a rename of the provider from 'ipinfoio' to 'ipinfo', and a corresponding update in the function name and docstring. There is no mention of command-line support, no change in documentation format, and no error handling or parsing of lat/lng as floats—those changes are not present in the diff. Additionally, the claim about removing 'ipinfo exceptions' is false since no exception handling is altered. The addition of IPInfo in Index.rst is not visible in the diff. While the rename is accurate, the rest of the message is misleading and overreaches. Thus, the message is partially accurate but significantly overstated and misleading, warranting a score of 2.","The commit message 'add missing js files' is completely unrelated to the actual changes in the diff. The diff shows a Python code update involving imports and a function rename (from `ipinfoio` to `ipinfo`), along with reorganizing provider options in a geocoding library. There is no mention or evidence of JavaScript files being added. The message misrepresents the nature of the changes, making it inaccurate and misleading. Therefore, it receives a poor score.","The commit message 'fix: rectification failed' is highly inadequate. It does not describe what was actually fixed, why it was necessary, or how it impacts the code. The diff shows a clear replacement of 'ipinfoio' with 'ipinfo' in imports and function calls, along with the addition of a new provider ('ipinfo') and removal of the deprecated 'ipinfoio'. A proper commit message should reflect this change, such as 'fix: replace ipinfoio with ipinfo provider and update documentation'. The current message is vague, misleading, and provides no actionable or meaningful context."
82a11a5dfd2aba59a66c7783eda086080002226b,"Update IPInfo.io Provider

- Changed the provider name shorter from ipinfoio > ipinfo
- Added Command line support for ipinfo.
- Parsing lat & lng into floats instead of strings.
- Converted documentation to RST instead of Markdown.
- Catching errors if you enter incorrect IP address.
- Remove ipinfo exceptions, there isn't any.
- Added IPInfo in Index.rst for docs.",geocoder/base.py,"@@ -23,7 +23,7 @@ class Base(object):
                 'xy', 'northeast', 'northwest', 'southeast', 'southwest',
                 'road_long', 'city_long', 'state_long', 'country_long',
                 'postal_town_long', 'province_long', 'road_long',
-                'street_long', 'interpolated']
+                'street_long', 'interpolated', 'method', 'geometry']
     fieldnames = []
     error = None
     status_code = None
@@ -87,7 +87,8 @@ class Base(object):
             )
             self.status_code = r.status_code
             self.url = r.url
-            self.content = r.json()
+            if r.content:
+                self.status_code = 200
         except KeyboardInterrupt:
             sys.exit()
         except requests.exceptions.SSLError:
",add missing class attributes,"add(fieldnames): add street_long, interpolated, method, and geometry to fieldnames",Semantic,"The new message introduces additional fieldnames to the data model, which changes the semantic meaning of the output by adding new, meaningful data fields (street_long, interpolated, method, geometry), indicating a functional expansion rather than a cosmetic or trivial change.",2.0,2.0,2.0,"The commit message is poorly aligned with the actual changes in the code diff. The diff shows only a minor modification to the fieldnames list and a small change in error handling (adding a status code check), but the commit message lists several unrelated tasks like 'Command line support', 'Parsing lat & lng into floats', 'Converted documentation to RST', and 'Catch errors for incorrect IP address' — none of which are present in the code. Additionally, it mentions removing IPInfo exceptions, which is not reflected in the diff. The message is misleading and contains factual inaccuracies. While it includes a few relevant points (like fieldname change and error handling), the overall clarity, accuracy, and relevance are low, warranting a score of 2.","The commit message 'add missing class attributes' is overly vague and does not accurately reflect the actual changes. The diff shows the addition of two new attributes ('method', 'geometry') to the fieldnames list and a change in the content handling logic (setting status_code to 200 if r.content exists), which is not simply about adding missing attributes. The message fails to indicate what was added, why it was added, or the impact of the change. A more descriptive message like 'Add method and geometry fields to fieldnames and update status_code handling on successful response' would be more appropriate. Therefore, the message is only minimally informative and deserves a score of 2.","The commit message is incomplete and misleading. It claims to add fields to 'fieldnames' but the diff shows that 'fieldnames' is a list that is initialized as empty and never modified — the change is only in the list of fieldnames defined in the class, not in the actual fieldnames attribute. Moreover, the actual change is to the list of fieldnames in the class definition, not to a dynamic fieldnames attribute. The message incorrectly states 'add(fieldnames)' and implies a modification to fieldnames, which is not reflected in the code. Additionally, it omits the removal of 'street_long' from the original list, which was not present in the original list, making the message factually incorrect. Thus, the message is inaccurate and fails to reflect the actual change, resulting in a low score."
82a11a5dfd2aba59a66c7783eda086080002226b,"Update IPInfo.io Provider

- Changed the provider name shorter from ipinfoio > ipinfo
- Added Command line support for ipinfo.
- Parsing lat & lng into floats instead of strings.
- Converted documentation to RST instead of Markdown.
- Catching errors if you enter incorrect IP address.
- Remove ipinfo exceptions, there isn't any.
- Added IPInfo in Index.rst for docs.",geocoder/cli.py,"@@ -1,16 +1,16 @@
 #!/usr/bin/python
 # coding: utf8
 
+from __future__ import absolute_import
 import click
 import json
 import geocoder
 import os
 import fileinput
+from geocoder.api import options
 
 
-providers = ['google', 'bing', 'osm', 'here', 'w3w', 'opencage', 'yandex',
-             'arcgis', 'tomtom', 'mapquest', 'maxmind', 'baidu', 'canadapost',
-             'freegeoip', 'geolytica', 'ottawa', 'geonames', 'yahoo', 'mapbox']
+providers = options.keys()
 methods = ['geocode', 'reverse', 'elevation', 'timezone']
 outputs = ['json', 'osm', 'geojson', 'wkt']
 units = ['kilometers', 'miles', 'feet', 'meters']
",add support for geocoding mapbox,refactor(geocoder): use options.keys() for providers list,Semantic,"The new message introduces a more specific and semantic change related to code structure and provider listing using options.keys(), indicating a refactoring that improves clarity and maintainability of the geocoder module, rather than just cosmetic or corrective changes.",1.0,1.0,3.0,"The commit message is highly inconsistent with the actual changes in the code diff. The diff shows a removal of hardcoded provider list and replacement with `options.keys()`, which suggests dynamic provider loading, not a change related to 'IPInfo.io'. The commit message falsely claims updates to 'IPInfo.io' provider, including changes to provider name, command-line support, error handling, and documentation — none of which are reflected in the diff. There is no mention of 'ipinfo' or 'ipinfoio' in the code changes. Additionally, the diff does not show any CLI additions, parsing of lat/lng into floats, or changes to documentation format. The claim that 'there isn't any ipinfo exceptions' is also not supported by the code. Therefore, the commit message is inaccurate, misleading, and does not reflect the actual changes, making it poor.","The commit message 'add support for geocoding mapbox' is highly misleading and does not accurately reflect the changes in the code diff. The diff shows a replacement of a hardcoded list of providers with `options.keys()`, which dynamically retrieves available providers from the geocoder library. This change implies a generalization or dynamic provider loading, not specifically adding support for Mapbox. Moreover, Mapbox is already in the original list of providers, and the change does not introduce new functionality related to Mapbox. The commit message is vague, incorrect, and fails to describe the actual change, making it poor and potentially confusing for other developers.","The commit message accurately reflects the change — replacing a hardcoded list of providers with `options.keys()` — which is a reasonable refactoring. However, it lacks context about why this change was made (e.g., maintainability, dynamic provider discovery, or scalability). While the action is correct and relevant, the message is minimal and does not explain the benefit or rationale, which reduces its completeness. Thus, it is neither poor nor excellent, but moderate in quality."
82a11a5dfd2aba59a66c7783eda086080002226b,"Update IPInfo.io Provider

- Changed the provider name shorter from ipinfoio > ipinfo
- Added Command line support for ipinfo.
- Parsing lat & lng into floats instead of strings.
- Converted documentation to RST instead of Markdown.
- Catching errors if you enter incorrect IP address.
- Remove ipinfo exceptions, there isn't any.
- Added IPInfo in Index.rst for docs.",geocoder/ipinfo.py,"@@ -3,47 +3,39 @@
 
 from __future__ import absolute_import
 from geocoder.base import Base
+from geocoder.location import Location
 
 
-class IpinfoIo(Base):
+class Ipinfo(Base):
     """"""
     API Reference
     -------------
     https://ipinfo.io
     """"""
-    provider = 'ipinfoio'
+    provider = 'ipinfo'
     method = 'geocode'
+
     def __init__(self, location='', **kwargs):
         self.location = location
         self.url = 'http://ipinfo.io/{0}/json'.format(self.location)
         self._initialize(**kwargs)
-        self._ipinfoio_catch_errors()
-
-    def _ipinfoio_catch_errors(self):
-        error = self.content.get('error')
-        if error:
-            code = self.content.get('code')
-            self.error = code
-
-    def _exceptions(self):
-        subdivisions = self.content.get('subdivisions')
-        if subdivisions:
-            self.content['subdivision'] = subdivisions[0]
-
-        # Grab all names in [en] and place them in self.parse
-        for key, value in self.content.items():
-            if isinstance(value, dict):
-                for minor_key, minor_value in value.items():
-                    if minor_key == 'names':
-                        self.parse[key] = minor_value['en']
+
+    def _catch_errors(self):
+        content = self.content
+        if content and self.status_code == 400:
+            self.error = content
 
     @property
     def lat(self):
-        return self.parse.get('loc').split(',')[0]
+        loc = self.parse.get('loc')
+        if loc:
+            return Location(loc).lat
 
     @property
     def lng(self):
-         return self.parse.get('loc').split(',')[1]
+        loc = self.parse.get('loc')
+        if loc:
+            return Location(loc).lng
 
     @property
     def address(self):
@@ -85,5 +77,5 @@ class IpinfoIo(Base):
         return self.parse.get('org')
 
 if __name__ == '__main__':
-    g = IpinfoIo('')
+    g = Ipinfo('8.8.8.8')
     g.debug()
",add api docs for ipinfo api,refactor(ipinfo): update class name and fix error handling and location parsing,Corrective,"The new message indicates fixes to error handling and location parsing, which are functional improvements addressing potential bugs or issues in the original implementation.",2.0,1.0,4.0,"The commit message contains several inaccuracies and misstatements that reduce its credibility and usefulness. For example, it claims to add 'command line support' for ipinfo, but the diff shows no such change—only a different IP address being used in the example. It incorrectly states that parsing lat/lng is now into floats, but the diff shows a use of Location(loc).lat and .lng, which is a class method, not a type conversion to float. The message claims to convert documentation to RST from Markdown, but the diff shows no such change. It falsely states that 'exceptions' were removed, when the diff actually removes a method named _exceptions() that was unrelated to error handling. The error handling change is described as catching errors on 400 status, which is not fully accurate—only a subset of error handling is added. Lastly, the claim about adding IPInfo to Index.rst is not supported by the diff. Overall, the message is misleading and lacks factual alignment with the actual changes, making it poor in accuracy and clarity.","The commit message 'add api docs for ipinfo api' is highly irrelevant to the actual changes in the code diff. The diff shows a refactoring and renaming of the class from `IpinfoIo` to `Ipinfo`, removal of unused methods (`_ipinfoio_catch_errors`, `_exceptions`), updates to error handling and location parsing using a `Location` class, and a change in the test instantiation from an empty string to a specific IP address. None of these changes relate to adding API documentation. The message misrepresents the scope of the commit, making it inaccurate and misleading. Therefore, the score is 1 (Poor).","The commit message accurately reflects the changes made: it updates the class name from `IpinfoIo` to `Ipinfo`, fixes error handling by replacing the old `_ipinfoio_catch_errors` method with a more concise `_catch_errors` method that checks for 400 status and error content, and improves location parsing by using the `Location` class to extract latitude and longitude properly. The message is clear, concise, and covers the key aspects of the refactoring. However, it could be slightly more specific about the improvements in parsing (e.g., 'uses Location class for robust lat/lng extraction') or the removal of redundant logic, which would make it excellent. Still, it's well-written and sufficiently descriptive for a typical refactoring commit."
f6ef17e0300dd0388331036c41ba9baede69ec5d,"Fixed API

- Remove population attribute from OSM if value is NULL
- Default method of `geocoder.ip` is now ipinfo instead of Maxmind
- When <blank> is entered in Maxmind, it will search your own IP address.",geocoder/api.py,"@@ -372,7 +372,7 @@ def ip(location, **kwargs):
     :param location: (optional) if left blank will return your
                                 current IP address's location.
     """"""
-    return get(location, provider='maxmind', **kwargs)
+    return get(location, provider='ipinfo', **kwargs)
 
 
 def canadapost(location, **kwargs):
",add ipinfo provider,feat(ip): switch default provider from maxmind to ipinfo,Corrective,"The change corrects the default behavior of the geocoder by switching from MaxMind to IPInfo, which is a more appropriate and reliable default, especially given the handling of blank inputs and NULL values in the original implementation.",3.0,3.0,5.0,"The commit message partially addresses the changes in the code diff but contains inaccuracies and misses key context. The diff shows a simple change in the default provider from 'maxmind' to 'ipinfo' in the `ip` function, which is correctly noted in the message. However, the message includes an unrelated point about removing a population attribute from OSM, which is not present in the diff and likely refers to a different task. Additionally, the claim that 'when <blank> is entered in Maxmind, it will search your own IP address' is incorrect — the diff shows the provider is changed to ipinfo, not that Maxmind behavior is altered. The message is therefore misleading and mixes unrelated changes. While it correctly identifies the main change, the inaccuracies reduce its clarity and usefulness, resulting in a moderate score.","The commit message 'add ipinfo provider' is concise and indicates a change, but it lacks context about why the change was made, what the impact is, or how it relates to the existing functionality. While it correctly identifies the addition of a new provider, it does not explain the rationale (e.g., why switch from maxmind to ipinfo), potential benefits, or any breaking changes. A more detailed message would include context such as 'switching from maxmind to ipinfo for better accuracy and reduced latency'. As it stands, the message is technically accurate but insufficiently informative for full clarity.","The commit message is clear, concise, and accurately reflects the change made in the code diff. It specifies the type of change ('feat'), the function affected ('ip'), and the exact nature of the change (switching the default provider from maxmind to ipinfo). This aligns perfectly with conventional commit message standards and provides sufficient context for understanding the change without requiring additional code review."
f6ef17e0300dd0388331036c41ba9baede69ec5d,"Fixed API

- Remove population attribute from OSM if value is NULL
- Default method of `geocoder.ip` is now ipinfo instead of Maxmind
- When <blank> is entered in Maxmind, it will search your own IP address.",geocoder/base.py,"@@ -284,7 +284,8 @@ class Base(object):
             if self.postal:
                 osm['addr:postal'] = self.postal
             if hasattr(self, 'population'):
-                osm['population'] = self.population
+                if self.population:
+                    osm['population'] = self.population
         return osm
 
     @property
",update base.py,fix(base): only set population if value is provided,Corrective,"The new message clarifies and corrects the behavior by explicitly stating that population is only set when a value is provided, which aligns with the actual logic (removing population when NULL) and improves accuracy over the old message's ambiguous description.",2.0,2.0,5.0,"The commit message mentions changes related to the population attribute and geocoder defaults, but the code diff only shows a change that adds a condition to set the 'population' field only if self.population is truthy (i.e., not empty or None). However, the commit message claims to 'remove population attribute from OSM if value is NULL' which is misleading — the code does not remove it, it only conditionally sets it. Additionally, the message references changes to `geocoder.ip` and Maxmind behavior that are not present in the diff. These unrelated changes are not reflected in the actual code, making the commit message inaccurate and disconnected from the actual diff. Therefore, the message is only partially relevant and misleading, warranting a score of 2.","The commit message 'update base.py' is extremely vague and provides no information about what was changed or why. While the diff shows a logical change—adding a condition to set the 'population' field only when self.population is truthy—the message fails to convey the significance or context of the change. A better message would specify the modification (e.g., 'only set population field when value is truthy to avoid empty entries'). Thus, it receives a score of 2 for lacking detail and clarity.","The commit message accurately reflects the change in the code: it now only sets the 'population' field in the OSM data if a non-empty value is provided (i.e., if `self.population` is truthy). This prevents setting a population value when it is not actually provided, which improves data integrity. The message is clear, concise, and directly relates to the change, making it excellent for understanding the purpose of the fix."
f6ef17e0300dd0388331036c41ba9baede69ec5d,"Fixed API

- Remove population attribute from OSM if value is NULL
- Default method of `geocoder.ip` is now ipinfo instead of Maxmind
- When <blank> is entered in Maxmind, it will search your own IP address.",geocoder/canadapost.py,"@@ -157,5 +157,5 @@ class Canadapost(Base):
         return self.parse.get('SubBuilding')
 
 if __name__ == '__main__':
-    g = Canadapost(""4 2023 4th Ave W, Vancouver"")
+    g = Canadapost(""453 Booth Street, ON"")
     g.debug()
",add missing import,fix: rectification failed,Cosmetic,"The new message 'fix: rectification failed' is vague and lacks specific details about the change, unlike the old message which clearly described actionable fixes. This indicates a superficial or cosmetic change in communication rather than a meaningful improvement in clarity, correctness, or functionality.",1.0,1.0,2.0,"The commit message is completely unrelated to the code changes in the diff. The diff shows a simple update to the Canadapost class instantiation, changing the address from ""4 2023 4th Ave W, Vancouver"" to ""453 Booth Street, ON"". However, the commit message discusses unrelated changes such as removing a population attribute, changing the default geocoder from MaxMind to ipinfo, and handling blank inputs in MaxMind. There is no mention of the address update or the Canadapost class changes. Therefore, the commit message fails to accurately reflect the actual changes made, making it poor and misleading.","The commit message 'add missing import' is completely irrelevant to the code changes shown in the diff. The diff modifies the input address used in the Canadapost class instantiation and changes the debug call, but there is no import statement added or missing. Therefore, the commit message does not accurately describe the change and is misleading or incorrect.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The code diff shows a change in the address input from '4 2023 4th Ave W, Vancouver' to '453 Booth Street, ON', which appears to be a correction of an invalid or malformed address. However, the commit message fails to explain the intent or the problem (e.g., parsing failure, invalid format), making it difficult to understand the context. A better message would specify the issue (e.g., 'fix: correct invalid address format to enable parsing') and the change made. Therefore, it receives a score of 2 for being technically correct but lacking clarity and context."
f6ef17e0300dd0388331036c41ba9baede69ec5d,"Fixed API

- Remove population attribute from OSM if value is NULL
- Default method of `geocoder.ip` is now ipinfo instead of Maxmind
- When <blank> is entered in Maxmind, it will search your own IP address.",geocoder/maxmind.py,"@@ -21,8 +21,11 @@ class Maxmind(Base):
     provider = 'maxmind'
     method = 'geocode'
 
-    def __init__(self, location='me', **kwargs):
-        self.location = location
+    def __init__(self, location, **kwargs):
+        if location:
+            self.location = location
+        else:
+            self.location = 'me'
         self.headers = {
             'Referer': 'https://www.maxmind.com/en/geoip_demo',
             'Host': 'www.maxmind.com',
@@ -110,5 +113,5 @@ class Maxmind(Base):
         return self.parse['location'].get('metro_code')
 
 if __name__ == '__main__':
-    g = Maxmind('me')
+    g = Maxmind('8.8.8.8')
     g.debug()
",update maxmind.py,fix(maxmind): default location to IP address in geocode initialization,Corrective,"The new message clarifies and corrects the behavior of the geocoder initialization by explicitly stating that the default location is set to the user's IP address when MaxMind is not provided, which aligns with the intended functionality and improves accuracy over the old message's ambiguity.",2.0,2.0,3.0,"The commit message is largely inaccurate and does not reflect the actual changes in the code diff. The diff shows a change in the Maxmind class initialization where an empty location defaults to 'me', and the example in the main block now uses '8.8.8.8' instead of 'me'. However, the commit message claims to fix the API, removes a population attribute from OSM (which is not present in the diff), and states that the default method of `geocoder.ip` is now ipinfo (which is not mentioned in the code). These points are either incorrect or entirely unrelated to the changes. The message also falsely claims that blank input in Maxmind searches your own IP, when the change is more about defaulting to 'me' or a specific IP. The content is misleading and fails to accurately describe the actual changes, resulting in a low score.","The commit message 'update maxmind.py' is overly vague and provides no information about what was changed or why. While the diff shows a meaningful update—changing the default location from 'me' to a specific IP address ('8.8.8.8') and improving the initialization logic—the commit message fails to convey the purpose or impact of the change. A better message would describe the improvement, such as 'Update MaxMind geolocation default to use public IP for more accurate results'. As it stands, the message lacks specificity and context, earning a score of 2.","The commit message is somewhat accurate in stating that the default location is now an IP address, which is a meaningful improvement over the previous default of 'me'. However, it lacks context about why the change was made—such as whether 'me' was ambiguous or if the IP address provides better accuracy. The diff shows that the default location is now set to '8.8.8.8' (a public DNS IP), which is not necessarily a user's actual location, and this choice may not be clearly justified. The message also doesn't explain the reasoning behind using a fixed IP like 8.8.8.8 instead of a more dynamic or user-provided default. Therefore, while the message correctly identifies the change, it is insufficiently detailed or contextualized for a high score."
f6ef17e0300dd0388331036c41ba9baede69ec5d,"Fixed API

- Remove population attribute from OSM if value is NULL
- Default method of `geocoder.ip` is now ipinfo instead of Maxmind
- When <blank> is entered in Maxmind, it will search your own IP address.",geocoder/osm.py,"@@ -323,5 +323,5 @@ class Osm(Base):
 
 
 if __name__ == '__main__':
-    g = Osm('1552 Payette dr, Ottawa ON')
-    g.debug()
+    g = Osm('New York City')
+    print(g.osm)
",add test for osm example,fix(osm): use New York City as location input and print OSM data,Cosmetic,"The new message introduces a specific use case (New York City) and focuses on output (printing OSM data), which is unrelated to the original fixes and does not address functionality, correctness, or semantics. It is a minor change in presentation rather than a functional or logical improvement.",1.0,1.0,3.0,"The commit message is completely unrelated to the code changes shown in the diff. The diff modifies the default location input from '1552 Payette dr, Ottawa ON' to 'New York City' and changes the output from calling `g.debug()` to `print(g.osm)`. However, the commit message talks about removing a population attribute, changing the default geocoder from MaxMind to ipinfo, and handling blank inputs in MaxMind—none of which are reflected in the actual code changes. This misalignment indicates a severe disconnect between the commit message and the actual implementation, making it poor and misleading.","The commit message 'add test for osm example' is highly misleading and inaccurate given the diff. The code change does not introduce a test; instead, it replaces an example location ('1552 Payette dr, Ottawa ON') with 'New York City' and changes the output from calling `debug()` to printing `g.osm`. This is a configuration or example update, not a test addition. The message fails to reflect the actual change and misrepresents the purpose of the commit, making it poor and potentially confusing for other developers.","The commit message is somewhat accurate and addresses the change made in the code, noting the new location input and the addition of printing OSM data. However, it lacks context about why New York City was chosen, whether this is a test or a fix, and does not clearly indicate the purpose or impact of the change. It also omits the removal of the debug() call, which is a significant change in behavior. While it correctly identifies the action, the message is incomplete and could be more informative for understanding the intent behind the change."
41f683a5ed44e2fd6873e4b119700d61eab34170,"Fixing error detection in OpenCage
- Added docs to OpenCage",geocoder/base.py,"@@ -15,7 +15,7 @@ is_python2 = sys.version_info < (3, 0)
 
 class Base(object):
     _exclude = ['parse', 'json', 'url', 'fieldnames', 'help', 'debug',
-                'short_name', 'api', 'content', 'params', 'status_code',
+                'short_name', 'api', 'content', 'params',
                 'street_number', 'api_key', 'key', 'id', 'x', 'y',
                 'latlng', 'headers', 'timeout', 'wkt', 'locality',
                 'province', 'rate_limited_get', 'osm', 'route', 'schema',
",remove unused fields from base class,"remove(support): exclude short_name, api, content, params from Base class",Corrective,"The change removes unnecessary or potentially conflicting properties from the base class, addressing a structural issue in the codebase that could lead to incorrect behavior or unintended inheritance, thus correcting a potential bug or misconfiguration.",2.0,3.0,3.0,"The commit message does not accurately reflect the changes made in the diff. The diff removes entries from the `_exclude` list in the `Base` class, specifically removing 'parse', 'json', 'url', 'fieldnames', 'help', 'debug', 'short_name', 'api', 'content', 'params', 'status_code', 'street_number', 'api_key', 'key', 'id', 'x', 'y', 'latlng', 'headers', 'timeout', 'wkt', 'locality', 'province', 'rate_limited_get', 'osm', 'route', 'schema'. However, the commit message claims to 'Fixing error detection in OpenCage' and mentions 'Added docs to OpenCage', which is not supported by the diff. There is no mention of documentation or error detection. The message is misleading and does not clearly describe the actual change. Therefore, it is only minimally informative and deserves a low score.","The commit message 'remove unused fields from base class' is vague and lacks specificity. While it correctly identifies the action (removing fields), it does not explain why these fields were removed, which fields were removed, or what impact this change has. The diff shows a specific list of fields being removed, but the commit message fails to reflect that detail. A better message would mention the exact fields removed or reference the reason (e.g., 'removing unused fields to reduce clutter and improve maintainability'). Thus, it is partially accurate but insufficiently informative, warranting a mid-range score.","The commit message correctly identifies the change (removing specific attributes from the Base class exclusion list) and specifies the context ('support'). However, it is slightly incomplete because it omits the fact that 'short_name', 'api', 'content', and 'params' were previously excluded and are now removed, which makes the message less precise. It also doesn't fully reflect the broader context of the change—specifically, that several other fields were retained or modified. A more complete message would clarify the intent and scope. Thus, it's accurate but lacks detail, earning a moderate score."
41f683a5ed44e2fd6873e4b119700d61eab34170,"Fixing error detection in OpenCage
- Added docs to OpenCage",geocoder/opencage.py,"@@ -31,15 +31,14 @@ class OpenCage(Base):
             'key': kwargs.get('key', opencage_key),
         }
         self._initialize(**kwargs)
-        self._opencage_catch_errors()
 
-    def _opencage_catch_errors(self):
+    def _catch_errors(self):
         if self.content:
             status = self.content.get('status')
             if status:
-                code = status.get('code')
+                self.status_code = status.get('code')
                 message = status.get('message')
-                if code:
+                if self.status_code:
                     self.error = message
 
     def _exceptions(self):
@@ -164,4 +163,4 @@ class OpenCage(Base):
 
 if __name__ == '__main__':
     g = OpenCage('1552 Payette dr., Ottawa')
-    g.debug()
+    print(g.json['mgrs'])
",add missing class attributes,fix: rectification failed,Corrective,"The new message indicates a fix for a failure in error detection, suggesting a functional correction rather than a cosmetic or trivial change.",2.0,2.0,2.0,"The commit message is overly vague and does not accurately reflect the changes in the code. While the message mentions 'Fixing error detection in OpenCage', the actual changes involve renaming a method (_opencage_catch_errors → _catch_errors) and modifying error handling logic, but this is not clearly stated. Additionally, there is no mention of the removal of the debug call or the change from `g.debug()` to `print(g.json['mgrs'])`, which are significant behavioral changes. The claim of 'Added docs to OpenCage' is completely unsupported by the diff. Therefore, the message fails to provide sufficient context or detail about what was actually changed, making it poor in terms of clarity and accuracy.","The commit message 'add missing class attributes' is overly vague and does not accurately reflect the actual changes. The code modifies method names (_opencage_catch_errors -> _catch_errors), changes attribute assignment (status code to self.status_code), and alters the debug output (from g.debug() to print(g.json['mgrs'])). These changes are not simply about adding missing attributes but involve refactoring, renaming, and changing behavior. The commit message fails to describe the actual impact or purpose of the changes, making it misleading and insufficient for understanding the intent.","The commit message 'fix: rectification failed' is highly vague and does not clearly describe what was fixed or why. The diff shows a refactoring of error handling methods (renaming `_opencage_catch_errors` to `_catch_errors` and updating attribute access), and a change in the main script's output from `g.debug()` to `print(g.json['mgrs'])`. However, the commit message fails to convey the actual changes or their purpose. 'Rectification failed' is not a clear or meaningful description of the fix. A better message would specify the change, such as 'fix: rename error handling method and update debug output to show MGRS coordinates'. Thus, the message is only minimally informative and deserves a low score."
69be0d5587f4d7f3b4f3e2d5fb9a0079e0743cc0,"Error catching
-Replaced the name of the functions for catching errors trigged by base.py",geocoder/geonames.py,"@@ -30,9 +30,8 @@ class Geonames(Base):
             'maxRows': 1,
         }
         self._initialize(**kwargs)
-        self._geonames_catch_errors()
 
-    def _geonames_catch_errors(self):
+    def _catch_errors(self):
         status = self.parse['status-message']
         count = self.parse['totalResultsCount']
         if status:
",add missing docstrings,refactor(geonames): rename _geonames_catch_errors to _catch_errors,Cosmetic,"The change involves renaming a function for consistency and readability without altering functionality or behavior, which is a minor cosmetic improvement.",2.0,2.0,4.0,"The commit message is vague and lacks specificity. It mentions 'Error catching' and a name change, but does not clearly explain what the function was renamed to, why the change was made, or its impact. The reference to 'base.py' is ambiguous and not contextualized. A good commit message should include the what, why, and context of the change. While the diff shows a renaming of `_geonames_catch_errors` to `_catch_errors`, the message fails to communicate this clearly or provide motivation, resulting in a low score.","The commit message 'add missing docstrings' is vague and does not accurately reflect the actual changes in the code. The diff shows a renaming of a method from `_geonames_catch_errors` to `_catch_errors`, along with a removal of a method call. There is no addition of docstrings in the code. Therefore, the commit message is misleading and does not correctly describe the change, resulting in a low score.","The commit message accurately reflects the change: renaming a method from `_geonames_catch_errors` to `_catch_errors`. It includes the appropriate scope (`refactor(geonames)`) and clearly states the action taken. However, it lacks context about why the rename was necessary (e.g., improved reusability, reduced redundancy), which would make it excellent. As it is, it is clear, relevant, and follows conventional commit format, earning a strong 4."
69be0d5587f4d7f3b4f3e2d5fb9a0079e0743cc0,"Error catching
-Replaced the name of the functions for catching errors trigged by base.py",geocoder/maxmind.py,"@@ -33,9 +33,8 @@ class Maxmind(Base):
         self.params = {'demo': 1}
         self.url = 'https://www.maxmind.com/geoip/v2.0/city_isp_org/{0}'.format(self.location)
         self._initialize(**kwargs)
-        self._maxmind_catch_errors()
 
-    def _maxmind_catch_errors(self):
+    def _catch_errors(self):
         error = self.content.get('error')
         if error:
             code = self.content.get('code')
",update maxmind.py,refactor(lib): rename _maxmind_catch_errors to _catch_errors,Cosmetic,"The change involves renaming a function for consistency and readability without altering functionality or behavior, which is a minor cosmetic refinement.",2.0,2.0,3.0,"The commit message is too vague and lacks specific details about the change. While it mentions 'Error catching' and a function name change, it does not explain why the name was changed, what the original function did, or how it affects functionality. The reference to 'base.py' is unclear without context. A better message would specify the exact function rename, its purpose, and the reason for the change (e.g., improved clarity or consistency). As such, the message is minimally informative and falls short of being clear or useful for code review.","The commit message 'update maxmind.py' is extremely vague and provides no information about what was changed or why. While the diff shows a refactoring of a method name from `_maxmind_catch_errors` to `_catch_errors` and the removal of a method call, the commit message fails to convey the significance of the change, such as improved code clarity, reduced redundancy, or better error handling. A meaningful message would describe the change (e.g., 'Rename _maxmind_catch_errors to _catch_errors for consistency and clarity'). As it stands, the message offers no actionable insight, resulting in a low score.","The commit message accurately reflects the change—renaming a method from `_maxmind_catch_errors` to `_catch_errors`—and is appropriately scoped to the library refactoring. However, it lacks context about why the rename was made (e.g., improved naming consistency, reduced redundancy, or better readability). While the action is correct and clearly stated, the message is minimal and does not explain the motivation or impact, which is important for maintainability. Therefore, it is functional but not excellent."
69be0d5587f4d7f3b4f3e2d5fb9a0079e0743cc0,"Error catching
-Replaced the name of the functions for catching errors trigged by base.py",geocoder/yahoo.py,"@@ -29,9 +29,8 @@ class Yahoo(Base):
             'locale': kwargs.get('locale', 'en-CA'),
         }
         self._initialize(**kwargs)
-        self._yahoo_catch_errors()
 
-    def _yahoo_catch_errors(self):
+    def _catch_errors(self):
         status = self.parse['statusDescription']
         if status:
             if not status == 'OK':
",update yahoo.py,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a correction to an error or issue in the code, which aligns with a corrective improvement.",2.0,2.0,1.0,"The commit message is vague and lacks specificity. It mentions 'Error catching' and a name change, but does not clearly explain what was changed, why it was changed, or the impact of the change. The reference to 'base.py' is missing context. While the diff shows a function rename from `_yahoo_catch_errors` to `_catch_errors`, the commit message fails to convey the purpose or rationale behind the renaming. A better message would explain the intent (e.g., to improve consistency or reduce redundancy) and clarify the scope. Thus, it receives a score of 2 for being minimally informative but lacking clarity and context.","The commit message 'update yahoo.py' is extremely vague and provides no information about what was changed or why. While the diff shows a refactoring of a method name from `_yahoo_catch_errors` to `_catch_errors` and the removal of a method call, the commit message fails to convey the significance of the change, such as improved naming clarity or intent. A better message would describe the change in functionality or purpose, e.g., 'Rename _yahoo_catch_errors to _catch_errors for better clarity and consistency'. As such, it receives a score of 2 for lacking detail and context.","The commit message 'fix: rectification failed' is highly vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what the issue was. The term 'rectification failed' is ambiguous and does not clearly relate to the code changes shown, which simply rename a method from `_yahoo_catch_errors` to `_catch_errors` and remove a call to it. A meaningful commit message should explain the change in context, such as 'fix: rename _yahoo_catch_errors to _catch_errors to improve method naming consistency'. As such, the message fails to provide any actionable or useful information for developers reviewing the change."
69be0d5587f4d7f3b4f3e2d5fb9a0079e0743cc0,"Error catching
-Replaced the name of the functions for catching errors trigged by base.py",test_geocoder.py,"@@ -163,10 +163,14 @@ def test_geolytica():
     assert g.ok
 
 
+""""""
+No real API key, removed from testing but it does work!
 def test_canadapost():
     g = geocoder.canadapost(address)
     assert g.ok
 
+""""""
+
 """"""
 License Expired
 
",add test for canadapost,remove(test_canadapost): remove unused API key from test,Corrective,"The change removes an unused API key from a test, addressing a potential security or maintenance issue by eliminating unnecessary and possibly risky configuration.",2.0,2.0,2.0,"The commit message is highly misleading and does not accurately reflect the changes in the code diff. The diff shows the removal of a test function (test_canadapost) and a comment about a removed API key, not an error-catching change or function renaming. The message claims to be about 'error catching' and 'replacing function names', which is not supported by the actual changes. While there is a minor mention of error handling in the context of API keys, the commit message is vague, incorrect, and fails to describe what was actually done. Therefore, it receives a low score.","The commit message 'add test for canadapost' is overly simplistic and does not accurately reflect the changes in the diff. The diff shows that the test for canadapost is already present, and the code includes a commented-out section with a note about a removed API key and license expiration. The message fails to mention the context of the comment, the removal of the API key, or the fact that the test is currently disabled. While it technically references the addition of a test, it lacks detail and context, making it insufficiently informative for a meaningful code review.","The commit message is technically correct in stating that an unused API key was removed, but it lacks clarity and context. The diff shows that the test function `test_canadapost` is not actually removed — it's commented out with a note about the API key being removed. The commit message fails to convey that the test is disabled, not deleted, and does not explain why the key was removed or that the test is still present but inactive. Additionally, the message is misleading as it says 'remove' when the code is only commented out. A better message would clarify that the test was disabled due to a non-functional API key, preserving the test for future use. Thus, it receives a score of 2 for being minimally accurate but lacking precision and context."
876b08200f239d7117bc2cf35daf4d70bd3964f2,Fix access token Mapbox,geocoder/mapbox_reverse.py,"@@ -4,7 +4,7 @@
 from __future__ import absolute_import
 from geocoder.base import Base
 from geocoder.mapbox import Mapbox
-from geocoder.keys import mapbox_key
+from geocoder.keys import mapbox_access_token
 from geocoder.location import Location
 
 
@@ -33,7 +33,7 @@ class MapboxReverse(Mapbox, Base):
         self.url = 'https://api.mapbox.com/v4/geocode/mapbox.places/{lng},{lat}.json'.format(
                    lng=lng, lat=lat)
         self.params = {
-            'access_token': kwargs.get('key', mapbox_key),
+            'access_token': kwargs.get('key', mapbox_access_token),
         }
         self._initialize(**kwargs)
 
",add mapbox reverse example,rename(mapbox): use mapbox_access_token instead of mapbox_key,Semantic,"The change renames the configuration key from mapbox_key to mapbox_access_token, which is a more accurate and semantically appropriate term for the token type, improving clarity and consistency with industry standards.",3.0,1.0,5.0,"The commit message 'Fix access token Mapbox' is vague and lacks specific details about what was fixed or why. While the diff shows a replacement of `mapbox_key` with `mapbox_access_token` in the import and parameter usage, the commit message does not clearly convey the change's significance or context. A better message would specify the correction (e.g., 'Update Mapbox key reference to use mapbox_access_token instead of mapbox_key'). As such, it is minimally informative but not completely meaningless, earning a moderate score of 3.","The commit message 'add mapbox reverse example' is highly misleading and irrelevant to the actual changes in the code diff. The diff simply renames a variable from `mapbox_key` to `mapbox_access_token` in two locations, which is a minor refactoring for clarity and consistency, not the addition of an example. The message does not reflect the nature of the change, fails to indicate what was modified, and provides no context about the purpose or impact. A better message would be something like 'Rename mapbox_key to mapbox_access_token for consistency in Mapbox API usage.'","The commit message is clear, concise, and accurately reflects the change made in the code diff. It specifies the type of change ('rename'), the module ('mapbox'), and the exact update ('use mapbox_access_token instead of mapbox_key'). This provides sufficient context for understanding the change without ambiguity, which is ideal for maintainability and code review."
803eae076481cc1c4f8c2bf3109dce388feae625,Fix Mapquest API key issue,geocoder/mapquest.py,"@@ -54,9 +54,9 @@ class Mapquest(Base):
                 self.error = 'ERROR - Could not retrieve API Key'
                 self.status_code = 404
 
-            expression = r""APP_KEY = '(.+)'""
+            expression = r'APP_KEY = ""([a-zA-Z%0-9-|=,]+)"";'
             pattern = re.compile(expression)
-            match = pattern.search(text)
+            match = pattern.search(str(text))
             if match:
                 return match.group(1)
             else:
",update mapquest.py,refactor(mapquest): update API key regex to support double quotes and string formatting,Corrective,"The change addresses a specific issue with the API key regex by expanding its support for double quotes and string formatting, which likely resolves parsing or validation failures in the existing code.",3.0,2.0,3.0,"The commit message 'Fix Mapquest API key issue' is vague and does not provide specific details about the change or the problem it addresses. While the diff shows a modification to the regex pattern for extracting an API key (changing from single quotes to double quotes and updating the pattern to match a more specific format), the commit message lacks context about why the change was necessary, what the previous issue was, or how it resolves the problem. A better message would specify the exact fix, such as 'Update API key regex to correctly extract double-quoted keys from Mapquest response.' Therefore, it receives a score of 3 — it indicates a fix but lacks sufficient detail to be considered excellent.","The commit message 'update mapquest.py' is extremely vague and provides no information about what was changed or why. While the diff shows a specific update to a regex pattern and a type change from single quotes to double quotes in a string literal, the commit message fails to convey the significance of the change—such as improved parsing of API keys or better handling of quoted values. A meaningful commit message should include context (e.g., 'Fix API key extraction by updating regex to handle double-quoted values'). As such, it falls short of being informative but is not entirely without value, warranting a score of 2.","The commit message accurately reflects the change in the regex pattern to support double quotes and string formatting, which is relevant to the diff. However, it lacks context about why the change was necessary (e.g., previous regex only supported single quotes, leading to parsing failures), and does not mention the improvement in robustness or correctness. While the message is clear and relevant, it is somewhat superficial and misses technical depth. Thus, it earns a moderate score of 3."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/baidu.py,"@@ -30,10 +30,13 @@ class Baidu(Base):
     def __init__(self, location, **kwargs):
         self.url = 'http://api.map.baidu.com/geocoder/v2/'
         self.location = location
+        key = kwargs.get('key', baidu_key)
+        if not key:
+            raise ValueError('Provide API Key')
         self.params = {
             'address': location,
             'output': 'json',
-            'ak': kwargs.get('key', baidu_key),
+            'ak': key,
         }
         self.headers = {
             'Referer': kwargs.get('referer', 'http://developer.baidu.com'),
",create baidu class,fix(geocoder): add required API key validation,Corrective,"The new message indicates a bug fix that adds validation for a required API key, addressing a missing error condition, which is a corrective improvement.",3.0,2.0,3.0,"The commit message 'Raise errors when no API key' is accurate and reflects the change, but it is overly generic and lacks detail about the implementation or the context. While it correctly identifies the core behavior (raising an error when no API key is provided), it does not mention the specific improvement (e.g., using `kwargs.get('key', baidu_key)` or the validation logic), nor does it explain why this change is important. A better message would include context like 'Added validation for API key to prevent unauthorized requests'. Thus, it's functional but not comprehensive, warranting a mid-level score.","The commit message 'create baidu class' is overly vague and does not reflect the actual changes made. The diff shows that the class was enhanced with input validation for the API key and improved parameter handling, which goes beyond simply creating the class. A more descriptive message such as 'Add API key validation and improve Baidu geocoder initialization' would better reflect the changes. Therefore, the message is insufficient and lacks context, warranting a score of 2.","The commit message correctly identifies the change as a fix related to API key validation in the geocoder module, which is relevant to the diff. However, it lacks detail about why the validation is necessary or how it improves reliability (e.g., preventing unauthorized usage or missing key errors). While the message is accurate and concise, it does not fully convey the importance or context of the change, which limits its completeness. A score of 3 reflects a basic but somewhat insufficient explanation."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/bing.py,"@@ -30,6 +30,9 @@ class Bing(Base):
     def __init__(self, location, **kwargs):
         self.url = 'http://dev.virtualearth.net/REST/v1/Locations'
         self.location = location
+        key = kwargs.get('key', bing_key)
+        if not key:
+            raise ValueError('Provide API Key')
         self.headers = {
             'Referer': ""http://addxy.com/"",
             'User-agent': 'Mozilla/5.0'
@@ -38,7 +41,7 @@ class Bing(Base):
             'q': location,
             'o': 'json',
             'inclnb': 1,
-            'key': kwargs.get('key', bing_key),
+            'key': key,
             'maxResults': 1
         }
 
",add missing headers in bing.py,fix(bing): add required API key validation,Corrective,"The new message indicates a fix for a missing API key validation, which addresses a functional deficiency and ensures proper error handling, thus correcting a bug.",3.0,2.0,3.0,"The commit message 'Raise errors when no API key' is somewhat accurate and relevant to the change, as the code indeed raises a ValueError if no API key is provided. However, it is overly vague and lacks detail about the implementation or the context (e.g., why the key is required, what happens without it). A better message would specify the exact behavior (e.g., 'Enforce API key requirement with error on missing key') and improve clarity. Thus, it is functional but not excellent.","The commit message 'add missing headers in bing.py' is vague and inaccurate. The diff shows that the change is not about adding headers, but rather about adding a validation for the API key and ensuring it is provided. The actual change involves key handling and error raising, not headers. Headers are already present in the code (e.g., 'Referer', 'User-agent'). Therefore, the commit message misrepresents the change and fails to reflect the actual implementation.","The commit message accurately reflects the change — adding validation for the required API key — and uses the correct scope (bing) and type (fix). However, it lacks detail about why the validation was necessary or what the impact is (e.g., preventing failed requests without a key). A more detailed message would have improved clarity and context, which is why it's not rated higher than 3."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/canadapost.py,"@@ -37,7 +37,6 @@ class Canadapost(Base):
         self.timeout = kwargs.get('timeout', 5.0)
         self.proxies = kwargs.get('proxies', '')
         self.id = ''
-        self.key = ''
 
         # Connect to CanadaPost to retrieve API key if none are provided
         if not self.key:
",update canadapost.py,remove(key)(canadapost): remove unused key attribute,Corrective,"The new message indicates the removal of an unused API key attribute, which addresses a potential bug or redundancy in the code, thus correcting an issue related to unused or invalid configuration.",2.0,2.0,4.0,"The commit message 'Raise errors when no API key' is vague and does not accurately reflect the actual change in the code. The diff shows the removal of a line `self.key = ''` and a conditional check for `self.key`, which suggests the removal of a default empty key initialization rather than introducing error raising. The message fails to indicate that the code is now checking for a missing key (and possibly raising an error), which is the actual intent. It also lacks context about what happens when no key is provided. Therefore, it is insufficiently descriptive and misrepresents the change.","The commit message 'update canadapost.py' is extremely vague and provides no information about what was changed or why. While the diff shows the removal of a line that sets `self.key = ''`, the commit message fails to convey the significance of this change—such as the removal of a redundant key initialization or the intention to fetch the key dynamically. A better message would explain the change (e.g., 'Remove default key initialization to enforce API key retrieval on connection'). Therefore, it receives a score of 2 for lacking specificity and context.","The commit message correctly identifies the removal of an unused attribute (`key`) in the Canadapost class, which is relevant to the code change. It clearly states the action ('remove') and the context ('canadapost'). However, it lacks a bit of detail about why the attribute was unused or how it was unused (e.g., the key was never used or was redundant). While the message is concise and accurate, a slightly more detailed explanation would improve it. Overall, it's clear and appropriate for a small, focused change, just missing a touch of completeness."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/geonames.py,"@@ -23,19 +23,24 @@ class Geonames(Base):
     def __init__(self, location, **kwargs):
         self.url = 'http://api.geonames.org/searchJSON'
         self.location = location
+        username = kwargs.get('username', geonames_username)
+        if not username:
+            raise ValueError('Provide username')
         self.params = {
             'q': location,
             'fuzzy': 0.8,
-            'username': kwargs.get('username', geonames_username),
+            'username': username,
             'maxRows': 1,
         }
         self._initialize(**kwargs)
 
     def _catch_errors(self):
-        status = self.parse['status-message']
+        status = self.parse['status'].get('message')
+        value = self.parse['status'].get('value')
         count = self.parse['totalResultsCount']
         if status:
-            self.error = status
+            value_lookup = {10: 'Invalid credentials'}
+            self.error = value_lookup[value]
         if count == 0:
             self.error = 'No Results Found'
 
",add missing class attributes,fix(api): handle geonames username validation and error messaging,Corrective,"The new message indicates a fix for API key validation and error messaging, addressing a potential failure case (no API key) with proper error handling, which is a corrective improvement to the existing behavior.",2.0,2.0,4.0,"The commit message 'Raise errors when no API key' is inaccurate and misleading. The actual change in the code does not relate to raising errors for missing API keys, but rather to validating and enforcing a username parameter (with a clear error if not provided). Additionally, the error handling now maps specific status values (like 10) to meaningful messages such as 'Invalid credentials', which is more about authentication than missing API keys. The message fails to reflect the actual functionality and scope of the change, making it poor in terms of clarity and accuracy.","The commit message 'add missing class attributes' is overly vague and does not accurately reflect the changes made. The diff shows modifications to parameter handling and error messaging, including the addition of a username validation and improved error lookup logic, not just the addition of attributes. The message fails to describe the actual functionality changes, such as error handling improvements and username validation, which are more significant than simply adding attributes. Therefore, it is misleading and lacks specificity, warranting a score of 2.","The commit message accurately reflects the changes made: it highlights the addition of username validation and improved error messaging in the Geonames API integration. The fix addresses both validation (requiring a username) and error handling (mapping status values to meaningful messages like 'Invalid credentials'). While the message is concise and relevant, it could be slightly more specific about the error mapping logic (e.g., mentioning the value lookup for status 10), which would elevate it to excellent. As it is, it's clear, targeted, and sufficient for a code review."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/here.py,"@@ -3,7 +3,7 @@
 
 from __future__ import absolute_import
 from geocoder.base import Base
-from geocoder.keys import app_id, app_code
+from geocoder.keys import here_app_id, here_app_code
 
 
 class Here(Base):
@@ -25,10 +25,18 @@ class Here(Base):
     def __init__(self, location, **kwargs):
         self.url = kwargs.get('url', 'http://geocoder.api.here.com/6.2/geocode.json')
         self.location = location
+
+        # HERE Credentials
+        app_id = kwargs.get('app_id', here_app_id)
+        app_code = kwargs.get('app_code', here_app_code)
+        if not bool(app_id and app_code):
+            raise ValueError(""Provide app_id & app_code"")
+        
+        # URL Params
         self.params = {
             'searchtext': location,
-            'app_id': kwargs.get('app_id', app_id),
-            'app_code': kwargs.get('app_code', app_code),
+            'app_id': app_id,
+            'app_code': app_code,
             'gen': 8,
             'language': kwargs.get('language', 'en')
         }
",add more examples,refactor(keys): use here_app_id and here_app_code for HERE geocoding,Corrective,"The new message indicates a refactoring to use more appropriate credentials (here_app_id and here_app_code) instead of a generic API key, which addresses a potential correctness issue in the geocoding implementation.",3.0,1.0,3.0,"The commit message 'Raise errors when no API key' is vague and lacks specificity. While it correctly indicates that an error is raised in the absence of API keys, it does not convey the context—such as which keys (app_id/app_code), where the error is raised, or how it improves the code. The diff shows that the code now explicitly checks for both app_id and app_code and raises a ValueError if missing, which is a meaningful improvement. However, the commit message fails to reflect this detail, making it insufficiently descriptive for a clear understanding of the change's impact. A better message would specify 'Add validation for HERE app_id and app_code, raising ValueError if missing.'","The commit message 'add more examples' is highly irrelevant to the actual changes in the code diff. The diff shows a refactoring of imports and credential handling in the Here class, specifically replacing `app_id` and `app_code` with `here_app_id` and `here_app_code`, and adding validation for required credentials. There is no addition of examples, documentation, or usage cases. The message fails to describe the actual change, making it misleading and unhelpful. Therefore, it receives a poor score.","The commit message is somewhat accurate and relevant to the change, as it correctly identifies the refactoring of keys to use `here_app_id` and `here_app_code` for HERE geocoding. However, it lacks detail about the actual changes made—such as the removal of the old `app_id`/`app_code` from the module import and the reassignment in the constructor with validation. A more complete message would explain the rationale (e.g., to avoid conflicts or improve clarity) and the impact (e.g., requiring explicit credentials). As a result, while the message is correct in intent, it is under-specific and could be improved for clarity and completeness."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/here_reverse.py,"@@ -3,7 +3,7 @@
 
 from __future__ import absolute_import
 from geocoder.base import Base
-from geocoder.keys import app_id, app_code
+from geocoder.keys import here_app_id, here_app_code
 from geocoder.location import Location
 from geocoder.here import Here
 
@@ -26,10 +26,18 @@ class HereReverse(Here, Base):
     def __init__(self, location, **kwargs):
         self.url = 'http://reverse.geocoder.cit.api.here.com/6.2/reversegeocode.json'
         self.location = str(Location(location))
+
+        # HERE Credentials
+        app_id = kwargs.get('app_id', here_app_id)
+        app_code = kwargs.get('app_code', here_app_code)
+        if not bool(app_id and app_code):
+            raise ValueError(""Provide app_id & app_code"")
+
+        # URL Params
         self.params = {
             'prox': self.location,
-            'app_id': kwargs.get('app_id', app_id),
-            'app_code': kwargs.get('app_code', app_code),
+            'app_id': app_id,
+            'app_code': app_code,
             'mode': 'retrieveAddresses',
             'gen': 8,
         }
",add example,refactor(keys): use here_app_id and here_app_code for HERE credentials,Corrective,"The new message indicates a refactoring to use more specific and appropriate credentials (here_app_id and here_app_code), which resolves or improves the handling of HERE API authentication, addressing a potential issue in the old message that only raised an error without specifying the correct implementation approach.",3.0,1.0,3.0,"The commit message 'Raise errors when no API key' is vague and lacks specificity. While it correctly indicates a security or validation improvement (raising errors when keys are missing), it does not convey the actual change made — such as renaming `app_id` and `app_code` from global imports to specific HERE ones, or the explicit validation logic added. The diff shows a structural change in credential handling with proper error raising, but the message fails to reflect the scope, implementation, or context of the change. A better message would clarify that credentials are now properly validated and required with explicit error messaging.","The commit message 'add example' is highly insufficient and does not reflect the actual changes in the code. The diff shows a refactoring of imports and credential handling in the HereReverse class, specifically replacing `app_id` and `app_code` with `here_app_id` and `here_app_code`, and adding validation for required credentials. This is not an addition of an example but a structural and functional change involving configuration and error handling. A meaningful commit message should describe what was changed, why, and how it affects the codebase. 'add example' is vague, inaccurate, and fails to convey the real significance of the change.","The commit message correctly identifies the refactoring effort and specifies the change (using here_app_id and here_app_code). However, it lacks context about why the change was made (e.g., to avoid conflicts with other providers or to improve clarity), and does not mention the impact or any potential issues addressed. While the message is accurate and relevant, it is minimal and could be more informative for a broader audience. A score of 3 reflects a decent but under-explained message."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/keys.py,"@@ -5,8 +5,8 @@ import os
 
 bing_key = os.environ.get('BING_API_KEY')
 tomtom_key = os.environ.get('TOMTOM_API_KEY')
-app_id = os.environ.get('HERE_APP_ID')
-app_code = os.environ.get('HERE_APP_CODE')
+here_app_id = os.environ.get('HERE_APP_ID')
+here_app_code = os.environ.get('HERE_APP_CODE')
 geonames_username = os.environ.get('GEONAMES_USERNAME')
 canadapost_key = os.environ.get('CANADAPOST_API_KEY')
 opencage_key = os.environ.get('OPENCAGE_API_KEY')
",add app_id and app_code,fix: rectification failed,Corrective,"The new message indicates a fix for a failure scenario (rectification failed), suggesting it addresses a bug or error condition, which aligns with a corrective improvement.",1.0,2.0,2.0,"The commit message 'Raise errors when no API key' is highly misleading and does not reflect the actual changes in the code. The diff only renames variables from `app_id` and `app_code` to `here_app_id` and `here_app_code` to improve clarity, which is a minor refactoring, not an addition of error handling. The commit message suggests a functional change (raising errors) that was not present in the diff. Therefore, it is inaccurate and fails to describe the actual work done, making it poor.","The commit message 'add app_id and app_code' is overly vague and does not accurately reflect the changes. The diff shows that the variable names were renamed from `app_id` and `app_code` to `here_app_id` and `here_app_code` to improve clarity, indicating a naming convention update or better context. The message fails to mention the renaming or the purpose of the change (e.g., to avoid confusion with other services), making it insufficient for understanding the actual impact. A better message would be 'Rename app_id and app_code to here_app_id and here_app_code for clarity'.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple renaming of variable names from `app_id` and `app_code` to `here_app_id` and `here_app_code`, which is a code clarity improvement. A better commit message would explicitly state the change, such as 'fix: rename app_id/app_code to here_app_id/here_app_code for clarity'. Since the message lacks context and specificity, it receives a score of 2 (barely adequate)."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/mapbox.py,"@@ -26,12 +26,15 @@ class Mapbox(Base):
 
     def __init__(self, location, **kwargs):
         self.location = location
+        access_token = kwargs.get('key', mapbox_access_token)
+        if not access_token:
+            raise ValueError('Provide access token')
         self.url = 'https://api.mapbox.com/v4/geocode/' \
                    'mapbox.places/{0}.json'.format(location)
         proximity = kwargs.get('proximity')
         self.params = {
             'proximity': proximity,
-            'access_token': kwargs.get('key', mapbox_access_token),
+            'access_token': access_token,
         }
         self._initialize(**kwargs)
 
",update mapbox.py,fix(mapbox): add access token validation and use from kwargs or default,Corrective,"The new message indicates a fix for a validation issue (missing API key) by adding access token validation and specifying how it is sourced, which addresses a bug or error condition in the code.",3.0,2.0,4.0,"The commit message 'Raise errors when no API key' is relevant and indicates a change in behavior related to error handling for missing API keys. However, it is vague and does not provide context about what specifically changed or why the change matters. The diff shows that the code now explicitly raises a ValueError if the access token is missing, which is a meaningful improvement. While the message captures the intent, it lacks detail about the implementation or the impact, so it falls short of being excellent but is still reasonably clear and accurate.","The commit message 'update mapbox.py' is overly vague and provides no information about the specific changes or their significance. While the diff shows a meaningful update—such as adding access token validation and improving parameter handling—the commit message fails to convey what was changed, why it matters, or the impact. A better message would describe the improvement, e.g., 'Add access token validation and improve error handling in Mapbox geocoding initialization.' Therefore, it receives a score of 2 for lacking detail and context.","The commit message accurately reflects the changes in the code: it adds validation for the access token, uses the token from kwargs if provided, and falls back to a default. The message is clear, concise, and relevant to the task. However, it could be slightly more specific about the default token being used from a global variable (mapbox_access_token), which might be a hidden dependency. Despite this minor gap, the message effectively communicates the intent and scope of the change, making it a strong (but not perfect) commit message."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/mapbox_reverse.py,"@@ -29,11 +29,14 @@ class MapboxReverse(Mapbox, Base):
 
     def __init__(self, location, **kwargs):
         self.location = str(Location(location))
+        access_token = kwargs.get('key', mapbox_access_token)
+        if not access_token:
+            raise ValueError('Provide access token')
         lat, lng = Location(location).latlng
         self.url = 'https://api.mapbox.com/v4/geocode/mapbox.places/{lng},{lat}.json'.format(
                    lng=lng, lat=lat)
         self.params = {
-            'access_token': kwargs.get('key', mapbox_access_token),
+            'access_token': access_token,
         }
         self._initialize(**kwargs)
 
",add mapboxreverse class,fix(mapbox): add access token validation and use from kwargs,Corrective,"The new message indicates a fix for a validation issue (missing API key) by adding access token validation and using it from kwargs, which addresses a potential runtime error, making it a corrective improvement.",3.0,2.0,3.0,"The commit message 'Raise errors when no API key' is relevant and indicates a change in behavior related to error handling for missing API keys. However, it is overly generic and does not convey the specific implementation detail—such as the use of `access_token` from `kwargs` or the explicit `ValueError` raised when the token is missing. A more detailed message would better explain the change and its impact. Therefore, it is functional but lacks clarity and specificity, warranting a moderate score.","The commit message 'add mapboxreverse class' is overly vague and does not convey the actual changes or their significance. The diff shows that the class was enhanced with validation for an access token and improved parameter handling, which are important functional improvements. A better commit message would describe these changes, such as 'Add access token validation and improve access token handling in MapboxReverse class'. As it stands, the message fails to reflect the technical details of the changes, making it insufficient for understanding the purpose of the commit.","The commit message accurately reflects the change—adding access token validation and using it from kwargs—but it lacks detail about the specific improvement (e.g., error handling, default fallback, or security implications). While it correctly identifies the scope ('mapbox' and 'access token validation'), it doesn't clearly communicate the problem solved or the impact. A stronger message would mention that the token is now required and derived from kwargs or a default, which improves clarity and usefulness for future developers."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/mapquest.py,"@@ -60,7 +60,7 @@ class Mapquest(Base):
             if match:
                 return match.group(1)
             else:
-                self.error = 'ERROR - No API Key'
+                raise ValueError('Provide API Key')
 
     def _exceptions(self):
         # Build intial Tree with results
",add error message for missing api key,fix(api-key): raise ValueError when no API key provided,Corrective,"The new message specifies a precise error type (ValueError) and clarifies the cause (no API key provided), addressing a bug in the error handling mechanism.",3.0,3.0,3.0,"The commit message 'Raise errors when no API key' is clear and relevant to the change, as the code now raises a ValueError instead of setting an error attribute. However, it lacks specific details such as the exact condition or context (e.g., during initialization), and does not explain the improvement or why this change is better than the previous behavior. While it correctly identifies the action taken, it is somewhat vague and could be more informative for maintainers.","The commit message 'add error message for missing api key' is vague and lacks specificity. While it correctly indicates that an error message is being added, it does not convey the nature of the change (e.g., raising a ValueError instead of setting an attribute), nor does it explain the improvement or context. A better message would mention the change from setting `self.error` to raising a `ValueError` and the rationale (e.g., better error handling, clearer user feedback). As such, the message is functional but insufficiently detailed, earning a medium score.","The commit message is clear and relevant, indicating a fix for an API key issue by raising a ValueError instead of setting an error attribute. However, it lacks context about why the change was made (e.g., improved error handling, better user feedback, or alignment with error expectations), and does not mention the specific impact or user benefit. It also omits the original issue (e.g., silent failure or misleading error message), which would have made it more informative. Thus, it is functional but not fully detailed or explanatory."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/opencage.py,"@@ -26,9 +26,12 @@ class OpenCage(Base):
     def __init__(self, location, **kwargs):
         self.url = 'http://api.opencagedata.com/geocode/v1/json'
         self.location = location
+        key = kwargs.get('key', opencage_key)
+        if not key:
+            raise ValueError('Provide API Key')
         self.params = {
             'query': location,
-            'key': kwargs.get('key', opencage_key),
+            'key': key,
         }
         self._initialize(**kwargs)
 
",update opencage.py,fix: rectification failed,Corrective,"The new message indicates a fix for a failure scenario (rectification failed), suggesting it addresses a bug or error condition, which aligns with a corrective improvement.",3.0,2.0,1.0,"The commit message 'Raise errors when no API key' is accurate and relevant to the change, as the diff shows a validation that raises a ValueError if no API key is provided. However, it is overly generic and lacks detail about the specific behavior or context (e.g., using a default key, handling kwargs, or the exact error condition). A more descriptive message like 'Enforce API key provision with error on missing key' would be better. Thus, it's functional but not excellent.","The commit message 'update opencage.py' is extremely vague and provides no information about what was changed or why. While the diff shows a meaningful update—adding a key validation and improving error handling—the commit message fails to convey the significance of the change. A better message would describe the improvement, such as 'Add API key validation to prevent unauthorized usage in OpenCage geocoding'. Thus, it receives a score of 2 for lacking detail and context.","The commit message 'fix: rectification failed' is vague, unclear, and does not describe what was actually fixed or why. It lacks specificity about the issue or the change made. The diff shows a clear improvement in handling API key validation by adding a check and raising a ValueError if no key is provided, which is a meaningful fix. However, the commit message fails to reflect this actual change, offering no insight into the problem or solution. As a result, it is poorly written and does not meet basic expectations for clarity or usefulness in a version control context."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/tomtom.py,"@@ -25,10 +25,13 @@ class Tomtom(Base):
     def __init__(self, location, **kwargs):
         self.url = 'https://api.tomtom.com/lbs/geocoding/geocode'
         self.location = location
+        key = kwargs.get('key', tomtom_key)
+        if not key:
+            raise ValueError('Provide API Key')
         self.params = {
             'query': location,
             'format': 'json',
-            'key': kwargs.get('key', tomtom_key),
+            'key': key,
             'maxResults': 1,
         }
         self._initialize(**kwargs)
",update tomtom.py,fix(api): add required API key validation,Corrective,"The new message indicates a fix for a missing API key validation, which addresses a functional deficiency by ensuring the system raises errors when no API key is provided, improving correctness and reliability.",3.0,2.0,3.0,"The commit message 'Raise errors when no API key' is basic and accurately reflects the change, but lacks detail about the specific implementation or context. While it correctly identifies the intent (raising an error when no API key is provided), it does not mention the use of `ValueError`, the specific condition (missing key from kwargs or fallback to tomtom_key), or the impact on the code flow. A more detailed message would have improved clarity and usefulness for developers reviewing the change.","The commit message 'update tomtom.py' is extremely vague and provides no information about what was changed or why. While the diff shows a meaningful update—adding validation for the API key and improving error handling—the commit message fails to reflect this change. A better message would indicate the addition of key validation and the requirement for an API key. Therefore, it receives a score of 2 for lacking specificity and context.","The commit message 'fix(api): add required API key validation' is concise and indicates a fix related to API key validation, which aligns with the code change. The diff shows that the code now validates the API key and raises a ValueError if it's missing, which is a necessary safeguard. However, the message lacks detail about why the validation was needed or how it improves the system (e.g., preventing failed requests due to missing keys). While it correctly identifies the type of fix and the domain (API), it is somewhat vague and could be more specific to be considered excellent. Therefore, it earns a moderate score of 3."
b73ac4742aa83e68f3645f0d57724d1fa846290a,Raise errors when no API key,geocoder/w3w.py,"@@ -35,9 +35,12 @@ class W3W(Base):
     def __init__(self, location, **kwargs):
         self.url = 'https://api.what3words.com/w3w'
         self.location = location
+        key = kwargs.get('key', w3w_key)
+        if not key:
+            raise ValueError('Provide API Key')
         self.params = {
             'string': location,
-            'key': kwargs.get('key', w3w_key),
+            'key': key,
         }
         self._initialize(**kwargs)
 
",add missing error message,fix(api): validate and set W3W API key,Corrective,"The new message indicates a fix to validate and set the W3W API key, addressing a potential error condition (no API key), which is a corrective improvement to ensure proper functionality and error handling.",3.0,2.0,3.0,"The commit message 'Raise errors when no API key' is accurate and relevant to the change, as the diff shows a ValueError being raised when no API key is provided. However, it is overly brief and lacks detail about the context or impact—such as how the error is handled, why it's important, or what the default key behavior was before. A more detailed message (e.g., 'Enforce API key requirement by raising ValueError if key is missing') would be better. Thus, it's functional but not excellent.","The commit message 'add missing error message' is overly vague and does not accurately reflect the actual change. The diff shows that a missing API key validation error was added, which is not just an 'error message' but a proper validation check with a clear `ValueError` raised when the key is missing. The message fails to describe what was actually implemented (a key validation and error raise) and lacks context. A better message would be 'Add API key validation with error message on missing key'. Therefore, it receives a score of 2 for being technically inaccurate and insufficiently descriptive.","The commit message 'fix(api): validate and set W3W API key' is concise and indicates a relevant change, but it lacks detail about the specific improvement—such as how the key is validated or why it was previously missing. While it correctly identifies the domain (api) and the nature of the fix (key validation), it does not clearly communicate the impact or the problem it solved. A better message would specify that the API key is now required and validated at initialization. Thus, it's accurate but under-informative, warranting a medium score."
22a8a2f323e1df664accb8cd59cc67548b731655,Change version,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.6.0'
+__version__ = '1.6.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed'), suggesting a bug or error that needs fixing, which aligns with a corrective change rather than a cosmetic or trivial update.",2.0,1.0,1.0,"The commit message 'Change version' is overly vague and provides no context about what changed or why. While it correctly indicates a version update, it lacks details such as the version number change (from 1.6.0 to 1.6.1) or the significance of the update. A better message would explain the reason for the version bump, e.g., 'Bump version to 1.6.1 to reflect consistent JSON responses across providers.'","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.6.0' to '1.6.1', not the addition of any docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and incorrect.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.6.0' to '1.6.1', which is a simple update to the version number, not a fix for a rectification failure. The message lacks context, specificity, and technical clarity, making it insufficient for understanding the purpose of the commit. A better message would describe the version update and its significance, such as 'chore: update version to 1.6.1'."
cade7162781582ff413c686574e874a8cdf57844,version change,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.6.1'
+__version__ = '1.6.2'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue (rectification failed) that was likely a bug or failure in the system, suggesting a fix is applied to address a problem, which falls under corrective improvement.",2.0,1.0,1.0,"The commit message 'version change' is overly vague and provides no context about what was changed or why. While it correctly indicates a version update, it lacks detail such as the version number increment or the significance of the change (e.g., bug fixes, feature additions, improvements in JSON consistency as mentioned in the diff). A better message would reference the specific change (e.g., 'Bump version to 1.6.2 for consistent JSON responses across providers'). Thus, it is minimally informative and only scores a 2.","The commit message 'add missing docstrings' is highly inconsistent with the actual changes in the diff. The diff shows only a version bump from '1.6.1' to '1.6.2', which is a version update, not the addition of docstrings. There are no docstrings added or modified in the code. Therefore, the commit message is misleading and does not accurately reflect the changes made, making it poor and inappropriate for the actual diff.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.6.1' to '1.6.2', which is a simple update to the version number, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what problem it resolves, making it inadequate and misleading. A proper commit message should describe the actual change and its purpose."
ac54ff822d33f4dfe1445bb43f35debffb04f952,version change,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.6.2'
+__version__ = '1.6.3'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue (rectification failed) that was previously absent or vague, addressing a functional problem rather than just appearance or semantics.",2.0,1.0,1.0,"The commit message 'version change' is overly vague and provides no context about what was changed or why. While it correctly indicates a version update, it lacks specificity (e.g., version bump from 1.6.2 to 1.6.3) and does not explain the purpose or impact of the change. A better message would mention the version bump and any relevant updates or improvements. Thus, it receives a score of 2 for minimal informativeness.","The commit message 'add missing docstrings' is highly misleading given the actual diff. The diff shows only a version bump from '1.6.2' to '1.6.3', not any addition of docstrings. Therefore, the commit message does not accurately reflect the changes made, making it incorrect and untrustworthy. This misalignment between the message and the code change severely undermines its usefulness.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows a simple version bump from '1.6.2' to '1.6.3', which is a routine update, not a fix for a rectification failure. The message lacks context, specificity, and clarity about what was fixed or why. A proper commit message should describe the actual change, such as 'version update to 1.6.3' or 'bump version to 1.6.3 for release'. Therefore, the message is poor and does not match the actual diff."
0f787b6b8a6a069edb0f654cdf9000a8dba3277c,Version Change,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.6.3'
+__version__ = '1.6.4'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue (rectification failed) that was likely a bug or failure in the system, suggesting a fix was applied to resolve it, which aligns with a corrective improvement.",2.0,1.0,1.0,"The commit message 'Version Change' is overly generic and provides no context about what was changed or why. While it correctly indicates a version update, it lacks specificity—such as the version number or the reason for the update—which is essential for understanding the significance of the change. A better message would include the version bump (e.g., 'Bump version to 1.6.4 for consistent JSON responses'). Therefore, it receives a score of 2 for minimal informativeness.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.6.3' to '1.6.4', not any addition of docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and incorrect. A proper message would have been something like 'Bump version to 1.6.4'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.6.3' to '1.6.4', which is a minor version update, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what issue it resolves. A proper commit message should clearly describe the change and its purpose. Therefore, the message is poor and does not match the actual diff."
b52b0435746a8eb62bf1344be417a0a8a969f5e3,Change .md to .rst for readme package data,setup.py,"@@ -37,7 +37,7 @@ setup(
         geocode=geocoder.cli:cli
     ''',
     packages=['geocoder'],
-    package_data={'': ['LICENSE', 'README.md']},
+    package_data={'': ['LICENSE', 'README.rst']},
     package_dir={'geocoder': 'geocoder'},
     include_package_data=True,
     install_requires=requires,
",add missing setup.py,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which falls under corrective changes.",3.0,2.0,2.0,"The commit message is clear and indicates a change in file extension from .md to .rst for the README in package data. However, it lacks context about why the change was made (e.g., compatibility with documentation build tools, upstream requirements, or project standards). While the action is accurate and the change is minimal, the message does not provide sufficient background or motivation, which limits its completeness. Therefore, it is functional but not excellent.","The commit message 'add missing setup.py' is highly misleading and inaccurate. The diff shows a change in the setup.py file—specifically, replacing 'README.md' with 'README.rst' in the package_data section—so the file already exists and is not missing. The message fails to describe the actual change, which is a minor update to documentation file inclusion. A better message would reflect the specific change, such as 'Update README file in package_data to use README.rst'. Therefore, the commit message is poor in clarity and accuracy, warranting a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple change from 'README.md' to 'README.rst' in package_data, which suggests a documentation file format update. However, the commit message fails to link the change to the actual issue or its impact. While it uses the correct 'fix:' prefix, the content is too generic and lacks context, making it difficult to understand the purpose of the change without reviewing the diff. A better message would specify the change, e.g., 'fix: update README format to rst for package_data compatibility'."
e071186a6d0308ac778afa4f824f26151cf1815e,"Update google.py

To fix Python 2.7 encoding issues, see https://github.com/DenisCarriere/geocoder/issues/160",geocoder/google.py,"@@ -53,7 +53,7 @@ class Google(Base):
         self.client_secret = kwargs.get('client_secret', google_client_secret)
         # turn non-empty params into sorted list in order to maintain signature validity.
         # Requests will honor the order.
-        self.params = sorted([(k.encode('utf8'), v.encode('utf8')) for (k, v) in self.params.items() if v])
+        # self.params = sorted([(k.encode('utf8'), v.encode('utf8')) for (k, v) in self.params.items() if v])
         # the signature parameter needs to come in the end of the url
         if self.client_secret:
             self.params.append(self._sign_url(self.url, self.params, self.client_secret))
",update google.py,Fix(Google): Remove signature parameter encoding logic,Corrective,"The change removes outdated encoding logic that caused issues in Python 2.7, directly addressing a known bug and improving correctness.",2.0,1.0,1.0,"The commit message mentions fixing Python 2.7 encoding issues and references an issue, which is relevant. However, the diff shows that the line being commented out (rather than removed or modified) does not actually implement the fix—instead, it's a commented-out line suggesting the change was reverted or not applied. The commit message implies a fix occurred, but the actual code change shows the opposite. This creates a disconnect between the message and the diff, making the message misleading or inaccurate. Therefore, it receives a low score for misalignment between intent and implementation.","The commit message 'update google.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a commented-out line that was previously used to sort parameters for signature validity, suggesting the change was likely a bug fix or a temporary disablement. A meaningful commit message should describe the intent or effect of the change (e.g., 'Disable parameter sorting to prevent signature invalidation during debugging'). Without such context, the message fails to convey any useful information, making it poor.","The commit message is incorrect and misleading. The diff shows that the line was commented out, not removed. The commit message claims to 'Remove signature parameter encoding logic', but the actual change is a comment that disables the encoding logic — it does not remove it. This suggests a misrepresentation of the change. A proper commit message should accurately reflect the action taken. Since the change is not a removal but a disablement (commenting out), and the message falsely implies removal, it is poor and potentially misleading. Therefore, the score is 1."
1051578d05287bc09d998263703440eb34f75068,"fix geocoding for street crossings...

e.g.: 'Maple Street & West 3rd Avenue, Vancouver, BC'. There is no
unique street number, street, postal code etc., but still geocoder.ca is
able to return coordinates.",geocoder/geolytica.py,"@@ -44,23 +44,38 @@ class Geolytica(Base):
 
     @property
     def postal(self):
-        return self.parse.get('postal').strip()
+        try:
+            return self.parse.get('postal').strip()
+        except AttributeError:
+            pass
 
     @property
     def housenumber(self):
-        return self.parse['standard'].get('stnumber').strip()
+        try:
+            return self.parse['standard'].get('stnumber').strip()
+        except AttributeError:
+            pass
 
     @property
     def street(self):
-        return self.parse['standard'].get('staddress').strip()
+        try:
+            return self.parse['standard'].get('staddress').strip()
+        except AttributeError:
+            pass
 
     @property
     def city(self):
-        return self.parse['standard'].get('city').strip()
+        try:
+            return self.parse['standard'].get('city').strip()
+        except AttributeError:
+            pass
 
     @property
     def state(self):
-        return self.parse['standard'].get('prov').strip()
+        try:
+            return self.parse['standard'].get('prov').strip()
+        except AttributeError:
+            pass
 
     @property
     def address(self):
",add geolytica classes,fix(geolytica): add try-except to prevent AttributeError in property getters,Corrective,"The new message indicates a bug fix that prevents an AttributeError in property getters, which is a stability and error-handling improvement, addressing a potential runtime failure.",2.0,1.0,3.0,"The commit message does not accurately reflect the actual changes in the code diff. The diff shows the addition of try-except blocks to handle AttributeError when accessing properties, which implies improved error handling or defensive programming. However, the commit message talks about fixing geocoding for street crossings and mentions that geocoder.ca can return coordinates without unique identifiers — a topic not addressed in the code changes. The code changes are about adding error handling for attribute access, not about handling street crossings or geocoding logic. Therefore, the message is misleading and out of alignment with the actual implementation. This results in a low score, as it fails to clearly and accurately describe what was changed.","The commit message 'add geolytica classes' is highly inadequate given the actual changes in the code diff. The diff shows that existing properties (postal, housenumber, street, city, state) have been modified to include try-except blocks to handle AttributeError cases, which suggests the addition of error handling and robustness, not the creation of new classes. The message fails to describe the actual change, its purpose, or impact. It is vague, incorrect, and does not reflect the real content of the commit. Therefore, it receives a poor score.","The commit message accurately identifies the change and its purpose — adding try-except blocks to prevent AttributeError in property getters. However, it lacks specificity about the scope (e.g., how many properties were affected, which ones, or why this was necessary). While the fix is correct and relevant, the message is generic and does not provide enough context to fully convey the impact or reasoning, which limits its completeness. A score of 3 reflects a decent but somewhat superficial message."
49012a4e4a5cc56d320e687e67b5b50830b86f8e,"Remove Try/Except

Instead of using the try/except method, I've just added a fallback empty
string to the **get** function.

@porn",geocoder/geolytica.py,"@@ -32,50 +32,35 @@ class Geolytica(Base):
 
     @property
     def lat(self):
-        lat = self.parse.get('latt').strip()
+        lat = self.parse.get('latt', '').strip()
         if lat:
             return float(lat)
 
     @property
     def lng(self):
-        lng = self.parse.get('longt').strip()
+        lng = self.parse.get('longt', '').strip()
         if lng:
             return float(lng)
 
     @property
     def postal(self):
-        try:
-            return self.parse.get('postal').strip()
-        except AttributeError:
-            pass
+        return self.parse.get('postal', '').strip()
 
     @property
     def housenumber(self):
-        try:
-            return self.parse['standard'].get('stnumber').strip()
-        except AttributeError:
-            pass
+        return self.parse['standard'].get('stnumber', '').strip()
 
     @property
     def street(self):
-        try:
-            return self.parse['standard'].get('staddress').strip()
-        except AttributeError:
-            pass
+        return self.parse['standard'].get('staddress', '').strip()
 
     @property
     def city(self):
-        try:
-            return self.parse['standard'].get('city').strip()
-        except AttributeError:
-            pass
+        return self.parse['standard'].get('city', '').strip()
 
     @property
     def state(self):
-        try:
-            return self.parse['standard'].get('prov').strip()
-        except AttributeError:
-            pass
+        return self.parse['standard'].get('prov', '').strip()
 
     @property
     def address(self):
",add properties for geolytica,fix(utils): default empty strings for missing parse fields,Semantic,"The change reframes the original try/except logic as a more explicit and intentional default behavior using empty strings, improving clarity and intent without altering functionality.",4.0,2.0,4.0,"The commit message clearly communicates the change—replacing try/except blocks with default empty strings using the `get()` method's fallback parameter. This is a concise, accurate, and relevant explanation of the improvement. The message also correctly identifies the problem (redundant try/except) and the solution (safe fallback). However, it lacks context about why this change is beneficial (e.g., improved readability, reduced error handling, better error resilience), and the mention of '@porn' at the end is likely a typo or irrelevant and reduces professionalism. Overall, it's good but not perfect.","The commit message 'add properties for geolytica' is overly vague and does not convey the actual changes made. The diff shows that multiple properties (lat, lng, postal, housenumber, street, city, state) have been updated to include default empty string values using .get(key, '') instead of using try/except blocks. This change improves robustness and eliminates unnecessary exception handling. A better commit message would specify the improvement, such as 'Improve property safety by adding default values with .get(key, '') for all geolocation fields.' The current message fails to reflect the technical significance of the change, resulting in a low score.","The commit message accurately reflects the change: it introduces default empty strings for missing parse fields using `.get(key, '')` instead of error-prone try-except blocks. This improves robustness and readability. However, it lacks context about why the original try-except blocks were problematic or the specific impact (e.g., avoiding AttributeError crashes, improving default behavior). While the message is clear and relevant, a slightly more detailed explanation (e.g., 'fixes AttributeError in property access when keys are missing') would make it excellent. Thus, it's strong but not perfect."
1b23363a64d18a16ed3ebef05f979966f59fc34a,Fixed ArcGIS Reverse geocoding,geocoder/arcgis_reverse.py,"@@ -28,16 +28,59 @@ class ArcgisReverse(Arcgis):
         self.location = location
         location = Location(location)
         self.params = {
-            'location': '{},{}'.format(location.lng, location.lat),
-            'f': 'json'
+            'location': '{}, {}'.format(location.lng, location.lat),
+            'f': 'pjson',
+            'distance': kwargs.get('distance', 50000),
+            'outSR': kwargs.get('outSR', ''),
+            'maxLocations': kwargs.get('maxLocations', 1),
         }
         self._initialize(**kwargs)
 
+    def _catch_errors(self):
+        error = self.parse['error']
+        if error:
+            self.error = error['message']
+
+    @property
+    def lat(self):
+        return self.parse['location'].get('y')
+
+    @property
+    def lng(self):
+        return self.parse['location'].get('x')
+
+    @property
+    def address(self):
+        return self.parse['address'].get('Match_addr')
+
+    @property
+    def city(self):
+        return self.parse['address'].get('City')
+
+    @property
+    def neighborhood(self):
+        return self.parse['address'].get('Neighbourhood')
+
+    @property
+    def region(self):
+        return self.parse['address'].get('Region')
+
+    @property
+    def country(self):
+        return self.parse['address'].get('CountryCode')
+
+    @property
+    def postal(self):
+        return self.parse['address'].get('Postal')
+
+    @property
+    def state(self):
+        return self.parse['address'].get('Region')
+
     def _exceptions(self):
-        if self.parse['locations']:
-            self._build_tree(self.parse['locations'][0])
+        self._build_tree(self.content)
 
 
 if __name__ == '__main__':
-    g = ArcgisReverse(""48.8583, -75.2945"")
+    g = ArcgisReverse(""45.404702, -75.704150"")
     g.debug()
",add arcgisreverse class,feat(arcgis-reverse): add address and location properties with error handling,Semantic,"The new message provides more specific details about the change (adding address and location properties with error handling) and uses a standardized format indicating it's a feature addition, improving clarity and semantic precision over the vague 'Fixed' in the old message.",2.0,2.0,3.0,"The commit message 'Fixed ArcGIS Reverse geocoding' is overly vague and does not reflect the actual changes made. The diff shows several new properties (lat, lng, address, city, neighborhood, region, country, postal, state), a new error handling method (_catch_errors), and updated parameters (distance, outSR, maxLocations) in the params dictionary, along with a changed location coordinate in the example. These changes suggest the addition of enhanced geocoding data access and improved error handling, not just a simple fix. The message fails to describe what was actually added or improved, making it insufficient for understanding the scope of the change. A better message would specify the addition of reverse geocoding properties and parameter support.","The commit message 'add arcgisreverse class' is overly vague and does not reflect the actual changes made. The diff shows significant additions beyond just adding the class: new properties (lat, lng, address, city, neighborhood, region, country, postal, state), error handling via _catch_errors, modified parameters (distance, outSR, maxLocations), and a changed location coordinate in the example. A better commit message would describe these specific improvements, such as 'Add detailed address properties and error handling to ArcgisReverse class with improved parameter support.' Since the message fails to convey the scope and impact of the changes, it is only minimally informative and thus receives a score of 2.","The commit message correctly identifies the feature as adding address and location properties with error handling, which aligns with the changes in the code. However, it lacks detail about the scope and impact—such as the addition of multiple address properties (lat, lng, city, neighborhood, region, country, postal, state), the change from 'json' to 'pjson', and the new error handling method. These significant modifications are not reflected in the message, making it somewhat incomplete and potentially misleading. While it captures the core intent, it fails to fully represent the breadth of changes, so it's not excellent but is still reasonably accurate."
1314c58377c95f14a65e502ec97fb59e0b63a832,Fixed Mapzen provider,geocoder/api.py,"@@ -429,7 +429,7 @@ def geonames(location, **kwargs):
 
 
 def mapzen(location, **kwargs):
-    """"""CanadaPost Provider
+    """"""Mapzen Provider
 
     :param ``location``: Your search location you want geocoded.
     """"""
",add missing docstring,docs(mapzen): Update provider documentation to reflect Mapzen,Semantic,"The new message provides more specific and contextual information by indicating the change involves updating documentation and clarifying the reference to 'Mapzen', improving clarity and intent compared to the vague 'Fixed Mapzen provider'.",2.0,3.0,4.0,"The commit message 'Fixed Mapzen provider' is too vague and lacks detail about what was actually changed or why. While it correctly identifies the affected component (Mapzen provider), it does not describe the nature of the change—such as a typo correction, functionality fix, or documentation update. The diff shows only a change in the docstring from 'CanadaPost Provider' to 'Mapzen Provider', which is a documentation correction, not a functional fix. A better message would specify this as a documentation update. Therefore, the message is minimally accurate but insufficiently informative, warranting a score of 2.","The commit message 'add missing docstring' is accurate and concise, indicating a valid change. However, it lacks specificity about what was changed or why — for example, it doesn't mention that the docstring was updated from 'CanadaPost Provider' to 'Mapzen Provider', nor does it clarify the impact. While the action is correct, the message is too generic to be considered excellent. It meets basic expectations but doesn't provide sufficient context for a full understanding of the change, warranting a moderate score.","The commit message is clear and relevant, correctly indicating that the documentation for the mapzen provider has been updated to reflect its true identity (Mapzen instead of CanadaPost). It specifies the scope ('docs(mapzen)') and the nature of the change. However, it could be slightly more precise by mentioning the correction of the provider name or the specific change (e.g., 'corrected provider name from CanadaPost to Mapzen'). Despite this minor gap, the message is accurate, concise, and sufficient for understanding the change in context."
1314c58377c95f14a65e502ec97fb59e0b63a832,Fixed Mapzen provider,geocoder/keys.py,"@@ -17,3 +17,4 @@ mapbox_access_token = os.environ.get('MAPBOX_ACCESS_TOKEN')
 google_key = os.environ.get('GOOGLE_API_KEY')
 google_client = os.environ.get('GOOGLE_CLIENT')
 google_client_secret = os.environ.get('GOOGLE_CLIENT_SECRET')
+mapzen_key = os.environ.get('MAPZEN_API_KEY')
",add mapzen_api_key,add(config): support Mapzen API key,Semantic,"The new message provides more specific information about the change — introducing configuration support for a Mapzen API key — which adds clarity and context beyond simply stating a fix, thus improving semantic precision.",2.0,3.0,3.0,"The commit message 'Fixed Mapzen provider' is vague and does not accurately reflect the change. The diff shows the addition of a new environment variable for Mapzen API key, not a fix. The term 'fixed' implies a correction of a bug or issue, but no such issue is indicated. A more accurate message would describe the addition of Mapzen support, such as 'Added Mapzen API key support'. Therefore, the message is misleading and lacks clarity, warranting a score of 2.","The commit message 'add mapzen_api_key' is clear and indicates the change, but it is overly minimal and lacks context. It does not specify why the key was added, its purpose, or which configuration it affects. While the diff shows the addition of a new environment variable, the message fails to communicate the significance or usage of the key. A better message would include context such as 'Add Mapzen API key for geocoding services' to improve clarity and usefulness.","The commit message 'add(config): support Mapzen API key' is somewhat accurate and follows a basic format (using the conventional 'add(config):' prefix), indicating a configuration change. However, it lacks context about why the key is being added, its purpose, or whether it's deprecated or replaced by another service (e.g., Mapbox). The diff shows a simple addition of a new environment variable, but the message does not convey the full significance or intent. It is clear and minimal but not detailed or informative enough for a high score."
1314c58377c95f14a65e502ec97fb59e0b63a832,Fixed Mapzen provider,geocoder/mapzen.py,"@@ -3,6 +3,8 @@
 
 from __future__ import absolute_import
 from geocoder.base import Base
+from geocoder.keys import mapzen_key
+
 
 class Mapzen(Base):
     """"""
@@ -11,75 +13,94 @@ class Mapzen(Base):
 
     API Reference
     -------------
-    https://pelias.mapzen.com/
+    https://mapzen.com/documentation/search/search/
     """"""
     provider = 'mapzen'
     method = 'geocode'
 
     def __init__(self, location, **kwargs):
-        self.url = 'https://pelias.mapzen.com/search'
+        self.url = 'https://search.mapzen.com/v1/search'
         self.location = location
-        if 'result' in kwargs:
-            if kwargs['result']:
-                size = kwargs['result']
-        else:
-            size = 1
+        key = kwargs.get('key', mapzen_key)
+        if not key:
+            raise ValueError('Mapzen requires a [key] as parameter.')
+
         self.params = {
-            'input': location,
-            'size': size,
+            'text': location,
+            'api_key': key,
+            'size': kwargs.get('size', 1)
         }
         self._initialize(**kwargs)
 
     def _exceptions(self):
-        self._build_tree(self.parse['geometry'])
-        self._build_tree(self.parse['properties'])
+        # Only retrieve the first feature
+        features = self.parse['features']
+        if features:
+            self._build_tree(self.parse['features'][0])
 
-    def next(self):
+    def __iter__(self):
         for item in self.content['features']:
             yield item
 
     @property
     def lat(self):
-        return self.parse['coordinates'][1]
+        return self.parse['geometry']['coordinates'][1]
 
     @property
     def lng(self):
-        return self.parse['coordinates'][0]
+        return self.parse['geometry']['coordinates'][0]
+
+    @property
+    def bbox(self):
+        extent = self.parse['bbox']
+        if extent:
+            west = extent[0]
+            north = extent[1]
+            east = extent[2]
+            south = extent[3]
+            return self._get_bbox(south, west, north, east)
 
     @property
     def address(self):
-        return self.parse['properties'].get('text')
+        return self.parse['properties'].get('label')
 
     @property
-    def country(self):
-        return self.parse['properties'].get('alpha3')
+    def housenumber(self):
+        return self.parse['properties'].get('housenumber')
 
     @property
-    def state(self):
-         return self.parse['properties'].get('admin1')
+    def street(self):
+        return self.parse['properties'].get('street')
+
+    @property
+    def neighbourhood(self):
+        return self.parse['properties'].get('neighbourhood')
 
     @property
     def city(self):
-         return self.parse['properties'].get('admin2')
+        return self.parse['properties'].get('locality')
 
     @property
-    def street(self):
-         return self.parse['address'].get('street')
+    def state(self):
+        return self.parse['properties'].get('region')
 
     @property
-    def housenumber(self):
-         return self.parse['address'].get('number')
+    def country(self):
+        return self.parse['properties'].get('country')
+
+    @property
+    def postal(self):
+        return self.parse['properties'].get('postalcode')
+
+    @property
+    def gid(self):
+        return self.parse['properties'].get('gid')
+
+    @property
+    def id(self):
+        return self.parse['properties'].get('id')
+
 
 if __name__ == '__main__':
-    g = Mapzen('Toronto',result=1)
-    print "" ""
-    print g.json
-    g = Mapzen('Toronto',result=2)
-    print "" ""
-    print g.json
-    g = Mapzen('Toronto',result=3)
-    print "" ""
-    print g.json
-    g = Mapzen('Toronto',result=4)
-    print "" ""
-    print g.json
+    g = Mapzen('1552 Payette dr., Ottawa, ON', key='search-un1M9Hk')
+    g.debug()
",add mapzen api docs,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed') that addresses a bug or issue in the system, suggesting a corrective fix rather than a cosmetic or trivial change.",0.0,0.0,0.0,,,
1314c58377c95f14a65e502ec97fb59e0b63a832,Fixed Mapzen provider,geocoder/mapzen_reverse.py,"@@ -2,69 +2,47 @@
 # coding: utf8
 
 from __future__ import absolute_import
-from geocoder.base import Base
 from geocoder.mapzen import Mapzen
 from geocoder.location import Location
+from geocoder.keys import mapzen_key
 
-class MapzenReverse(Base):
+
+class MapzenReverse(Mapzen):
     """"""
     Mapzen REST API
     =======================
 
     API Reference
     -------------
-    https://pelias.mapzen.com/
+    https://mapzen.com/documentation/search/reverse/
     """"""
     provider = 'mapzen'
     method = 'reverse'
 
     def __init__(self, location, **kwargs):
-        t = location.split()
-        self.url = 'https://pelias.mapzen.com/reverse'
+        self.url = 'https://search.mapzen.com/v1/reverse'
+        self.location = location
+        location = Location(location)
+        key = kwargs.get('key', mapzen_key)
+        if not key:
+            raise ValueError('Mapzen requires a [key] as parameter.')
+
         self.params = {
-            'lat': t[0],
-            'lon': t[1],
-            'size': 1,
+            'point.lat': location.lat,
+            'point.lon': location.lng,
+            'size': kwargs.get('size', 1),
+            'layers': kwargs.get('layers'),
+            'source': kwargs.get('sources'),
+            'boundary.country': kwargs.get('country'),
+            'api_key': key
         }
         self._initialize(**kwargs)
 
-    def _exceptions(self):							# Seems to always return results, ie: Location: Earth
-        self._build_tree(self.parse['features'][0]['geometry'])
-        self._build_tree(self.parse['features'][0]['properties'])
-        self._build_tree(self.parse['features'][0])
-
-    @property
-    def lat(self):
-        return self.parse['coordinates'][1]
-
-    @property
-    def lng(self):
-        return self.parse['coordinates'][0]
-
-    @property
-    def address(self):
-        return self.parse['properties'].get('text')
-
-    @property
-    def country(self):
-        return self.parse['properties'].get('alpha3')
-
-    @property
-    def state(self):
-         return self.parse['properties'].get('admin1')
-
-    @property
-    def city(self):
-         return self.parse['properties'].get('admin2')
-
     @property
-    def street(self):
-         return self.parse['address'].get('street')
+    def ok(self):
+        return bool(self.address)
 
-    @property
-    def housenumber(self):
-         return self.parse['address'].get('number')
 
 if __name__ == '__main__':
-    g = MapzenReverse(""45.4049053 -75.7077965"")
-    print g
+    g = MapzenReverse(""45.4049053 -75.7077965"", key='search-un1M9Hk')
+    g.debug()
",add mapzen reverse api docs,refactor(mapzen): update reverse geocoding to use new Mapzen search API and improve key handling,Corrective,"The change involves updating the reverse geocoding implementation to use a new API and improves key handling, which addresses potential issues in the previous implementation, thus correcting functional shortcomings.",2.0,1.0,4.0,"The commit message 'Fixed Mapzen provider' is overly vague and does not accurately reflect the actual changes made. The diff shows a significant refactoring: the class inheritance was changed from a standalone `MapzenReverse` to inheriting from `Mapzen`, the API endpoint was updated from Pelias to Mapzen's search API, the URL structure and parameters were modified, location parsing was improved, and several properties (lat, lng, address, etc.) were removed or replaced. Additionally, the error handling for missing keys was added. The commit message fails to mention any of these key changes, nor does it indicate the scope of the refactoring. A better message would specify the change from Pelias to Mapzen's search API and the removal of deprecated properties. Therefore, it is only minimally informative and scores a 2.","The commit message 'add mapzen reverse api docs' is highly inaccurate and irrelevant to the actual changes in the code diff. The diff shows a significant refactoring and update of the MapzenReverse class, including changes to the API endpoint, parameter handling, addition of key validation, removal of deprecated properties, and restructuring of the class inheritance. The code changes are not about adding documentation but rather about implementing and updating functionality. The commit message fails to reflect the real nature of the changes, making it misleading and poor in terms of clarity and accuracy.","The commit message accurately reflects the changes made in the diff: it correctly identifies the refactoring of the Mapzen reverse geocoding functionality to use the new Mapzen search API (from pelias to search.mapzen.com), and highlights improved key handling (including validation and default key usage). The message is clear, concise, and relevant to the changes. However, it slightly misses mentioning the removal of redundant properties (like lat, lng, address, etc.) and the removal of the `_exceptions` and `_build_tree` methods, which were part of the refactoring. While these are implied by the context, a more detailed note on deprecations or simplifications could have made it excellent. Overall, it's strong and technically accurate, earning a solid 4."
1314c58377c95f14a65e502ec97fb59e0b63a832,Fixed Mapzen provider,tests/test_geocoder.py,"@@ -29,6 +29,7 @@ def test_entry_points():
     geocoder.tomtom
     geocoder.arcgis
     geocoder.ipinfo
+    geocoder.mapzen
     geocoder.geonames
     geocoder.mapquest
     geocoder.timezone
@@ -70,6 +71,17 @@ def test_mapbox_reverse():
     g = geocoder.mapbox(ottawa, method='reverse')
     assert g.ok
 
+
+def test_mapzen():
+    g = geocoder.mapzen(location)
+    assert g.ok
+
+
+def test_mapzen_reverse():
+    g = geocoder.mapbox(ottawa, method='reverse')
+    assert g.ok
+
+
 """"""
 Yandex REMOVED
 ==============
",add missing tests for mapbox and mapzen,"add(test_mapzen, test_mapzen_reverse): support Mapzen geocoding",Semantic,"The new message provides more specific information about the changes (adding test functions for geocoding and reverse geocoding) and clarifies the purpose, moving beyond a simple fix to describe the actual functionality added.",2.0,2.0,3.0,"The commit message 'Fixed Mapzen provider' is overly vague and does not accurately reflect the changes. The diff shows the addition of two new test functions (`test_mapzen` and `test_mapzen_reverse`) for the Mapzen provider, which indicates a new test case addition, not a fix. The term 'fixed' implies a bug was resolved, but no such issue is mentioned. A more accurate message would describe the addition of Mapzen provider tests. Therefore, the message is misleading and lacks clarity, warranting a score of 2.","The commit message 'add missing tests for mapbox and mapzen' is vague and incorrect in detail. It mentions 'mapbox' and 'mapzen' but the diff shows that the tests added are actually for 'mapzen', not 'mapbox'. Moreover, the test for 'mapzen_reverse' incorrectly references 'geocoder.mapbox' instead of 'geocoder.mapzen'. The message fails to accurately reflect the actual changes, leading to potential confusion. While it identifies a general intent, the specificity and correctness are lacking, warranting a low score.","The commit message correctly identifies the added tests (test_mapzen and test_mapzen_reverse) and mentions support for Mapzen geocoding. However, it contains a factual error: the test function in the diff shows 'geocoder.mapbox(ottawa, method='reverse')' in both test_mapzen_reverse and test_mapzen, which is inconsistent with the actual implementation where test_mapzen_reverse should use geocoder.mapzen, not geocoder.mapbox. Additionally, the message fails to clarify that the test is for Mapzen, not Mapbox, leading to potential confusion. The message is mostly accurate but lacks precision and contains a critical error in test naming, reducing its clarity and correctness."
056123a98fc52a9e34340cdf0fafa89de6dfe92e,Fixed Reverse Geocoding OSM,geocoder/osm_reverse.py,"@@ -1,13 +1,12 @@
-
 #!/usr/bin/python
 # coding: utf8
 
 from __future__ import absolute_import
-from geocoder.base import Base
 from geocoder.osm import Osm
 from geocoder.location import Location
 
-class OsmReverse(Base):
+
+class OsmReverse(Osm):
     """"""
     Nominatim
     =========
@@ -22,306 +21,19 @@ class OsmReverse(Base):
     method = 'reverse'
 
     def __init__(self, location, **kwargs):
-        url = kwargs.get('url', '')
-        if url:
-            self.url = url
-        elif url.lower() == 'localhost':
-            self.url = 'http://localhost/nominatim/reverse'
-        else:
-            self.url = 'https://nominatim.openstreetmap.org/reverse'
-        t = location.split()
+        self.url = self._get_osm_url(kwargs.get('url', ''))
+        self.location = location
+        location = Location(location)
         self.params = {
-            'lat': t[0],
-            'lon': t[1],
-            'format' : 'jsonv2',
+            'q': str(location),
+            'format': 'jsonv2',
             'addressdetails': 1,
+            'limit': kwargs.get('limit', 1)
         }
+        print self.url
         self._initialize(**kwargs)
 
-    def _exceptions(self):
-        # Build intial Tree with results
-        self._build_tree(self)
-
-    # ============================ #
-    # Geometry - Points & Polygons #
-    # ============================ #
-
-    @property
-    def lat(self):
-        lat = self.parse.get('lat')
-        if lat:
-            return float(lat)
-
-    @property
-    def lng(self):
-        lng = self.parse.get('lon')
-        if lng:
-            return float(lng)
-
-    @property
-    def bbox(self):
-        if self.parse['boundingbox']:
-            south = float(self.parse['boundingbox'][0])
-            west = float(self.parse['boundingbox'][2])
-            north = float(self.parse['boundingbox'][1])
-            east = float(self.parse['boundingbox'][3])
-            return self._get_bbox(south, west, north, east)
-
-    # ========================== #
-    # Tags for individual houses #
-    # ========================== #
-
-    @property
-    def address(self):
-        return self.parse.get('display_name')
-
-    @property
-    def housenumber(self):
-        return self.parse['address'].get('house_number')
-
-    @property
-    def street(self):
-        return self.parse['address'].get('road')
-
-    @property
-    def postal(self):
-        return self.parse['address'].get('postcode')
-
-    # ============================ #
-    # Populated settlements, urban #
-    # ============================ #
-
-    @property
-    def neighborhood(self):
-        """"""place=neighborhood
-
-        A named part of a place=village, a place=town or a place=city. Smaller
-        than place=suburb and place=quarter.
-
-        The tag can be used for any kind of landuse or mix of landuse (such as
-        residential, commercial, industrial etc). Usage of this term depends
-        greatly on local history, culture, politics, economy and organization
-        of settlements. More specific rules are intentionally avoided.
-
-        Note: the British English spelling is used rather than the
-              American English spelling of neighborhood.
-        """"""
-        return self.parse['address'].get('neighbourhood')
-
-    @property
-    def suburb(self):
-        """"""place=suburb
-
-        A distinct section of an urban settlement (city, town, etc.) with its
-        own name and identity. e.g.
-
-        - annexed towns or villages which were formerly independent,
-        - independent (or dependent) municipalities within a city or next to a
-          much bigger town
-        - historical districts of settlements
-        - industrial districts or recreation areas within a settlements with
-          specific names.
-        """"""
-        return self.parse['address'].get('suburb')
-
-    @property
-    def quarter(self):
-        """"""place=quarter
-
-        A named part of a bigger settlement where this part is smaller than
-        a suburb and bigger than a neighbourhood. This does not have to be
-        an administrative entity.
-
-        The term quarter is sometimes used synonymously for neighbourhood.
-        """"""
-        return self.parse['address'].get('quarter')
-
-    # ====================================== #
-    # Populated settlements, urban and rural #
-    # ====================================== #
-
-    @property
-    def allotments(self):
-        """"""place=allotments
-
-        Dacha or cottage settlement, which is located outside other
-        inhabited locality. This value is used mainly in Russia and other
-        countries of the former Soviet Union, where a lot of such unofficial
-        settlements exist
-        """"""
-        return self.parse['address'].get('hamlet')
-
-    @property
-    def farm(self):
-        """"""place=farm
-
-        A farm that has its own name. If the farm is not a part of bigger
-        settlement use place=isolated_dwelling. See also landuse=farmyard
-        """"""
-        return self.parse['address'].get('hamlet')
-
-    @property
-    def locality(self):
-        """"""place=isolated_dwelling
-
-        For an unpopulated named place.
-        """"""
-        return self.parse['address'].get('locality')
-
-    @property
-    def isolated_dwelling(self):
-        """"""place=isolated_dwelling
-
-        Smallest kind of human settlement. No more than 2 households.
-        """"""
-        return self.parse['address'].get('hamlet')
-
-    @property
-    def hamlet(self):
-        """"""place=hamlet
-
-        A smaller rural community typically with less than 100-200 inhabitants,
-        few infrastructure.
-        """"""
-        return self.parse['address'].get('hamlet')
-
-    @property
-    def village(self):
-        """"""place=village
-
-        A smaller distinct settlement, smaller than a town with few facilities
-        available with people traveling to nearby towns to access these.
-        Populations of villages vary widely in different territories but will
-        nearly always be less than 10,000 people, often a lot less.
-
-        See place=neighbourhood on how to tag divisions within a larger village
-        """"""
-        return self.parse['address'].get('village')
-
-    @property
-    def town(self):
-        """"""place=town
-
-        A second tier urban settlement of local importance, often with a
-        population of 10,000 people and good range of local facilities
-        including schools, medical facilities etc and traditionally a market.
-        In areas of low population, towns may have significantly
-        lower populations.
-
-        See place=neighbourhood and possibly also place=suburb on how to tag
-        divisions within a town.
-        """"""
-        return self.parse['address'].get('town')
-
-    @property
-    def island(self):
-        """"""place=island
-
-        Identifies the coastline of an island (> 1 km2), also consider
-        place=islet for very small islandsIdentifies the coastline of an
-        island (> 1 km2), also consider place=islet for very small islands
-        """"""
-        return self.parse['address'].get('island')
-
-    @property
-    def city(self):
-        """"""place=city
-
-        The largest urban settlements in the territory, normally including the
-        national, state and provincial capitals. These are defined by charter
-        or other governmental designation in some territories and are a matter
-        of judgement in others. Should normally have a population of at
-        least 100,000 people and be larger than nearby towns.
-
-        See place=suburb and place=neighbourhood on how to tag divisions
-        within a city. The outskirts of urban settlements may or may not match
-        the administratively declared boundary of the city.
-        """"""
-        return self.parse['address'].get('city')
-
-    # ================================ #
-    # Administratively declared places #
-    # ================================ #
-
-    @property
-    def municipality(self):
-        """"""admin_level=8""""""
-        return self.parse['address'].get('municipality')
-
-    @property
-    def county(self):
-        """"""admin_level=6""""""
-        return self.parse['address'].get('county')
-
-    @property
-    def district(self):
-        """"""admin_level=5/6""""""
-        return self.parse['address'].get('city_district')
-
-    @property
-    def state(self):
-        """"""admin_level=4""""""
-        return self.parse['address'].get('state')
-
-    @property
-    def region(self):
-        """"""admin_level=3""""""
-        return self.parse['address'].get('state')
-
-    @property
-    def country(self):
-        """"""admin_level=2""""""
-        return self.parse['address'].get('country')
-
-    # ======================== #
-    # Quality Control & Others #
-    # ======================== #
-
-    @property
-    def accuracy(self):
-        return self.importance
-
-    @property
-    def quality(self):
-        return self.type
-
-    @property
-    def population(self):
-        return self.parse.get('population')
-
-    @property
-    def license(self):
-        return self.parse.get('license')
-
-    @property
-    def type(self):
-        return self.parse.get('type')
-
-    @property
-    def importance(self):
-        return self.parse.get('importance')
-
-    @property
-    def icon(self):
-        return self.parse.get('icon')
-
-    @property
-    def osm_type(self):
-        return self.parse.get('osm_type')
-
-    @property
-    def osm_id(self):
-        return self.parse.get('osm_id')
-
-    @property
-    def place_id(self):
-        return self.parse.get('place_id')
-
-    @property
-    def place_rank(self):
-        return self.parse.get('place_rank')
-
 
 if __name__ == '__main__':
-    g = OsmReverse(""45.3 -75.4"")
-    print g
+    g = OsmReverse(""45.3, -75.4"")
+    g.debug()
",add docs for osm_reverse,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed') in the reverse geocoding process, providing clearer diagnostic information than the vague 'Fixed Reverse Geocoding OSM', suggesting a corrective action addressing a root cause.",0.0,0.0,0.0,,,
bde20f932e266fc8855200cc006988219e7c90a5,Fix Pep8 Issues,geocoder/arcgis.py,"@@ -28,7 +28,7 @@ class Arcgis(Base):
         self.params = {
             'f': 'json',
             'text': location,
-            'maxLocations': kwargs.get('maxLocations', 1),
+            'maxLocations': kwargs.get('limit', 1),
         }
         self._initialize(**kwargs)
 
@@ -71,5 +71,5 @@ class Arcgis(Base):
 
 
 if __name__ == '__main__':
-    g = Arcgis('Toronto',result=1)
+    g = Arcgis('Toronto')
     g.debug()
",update arcgis.py,fix: rectification failed,Regressive,"The new message 'fix: rectification failed' is misleading and suggests a failure occurred, whereas the original 'Fix Pep8 Issues' clearly indicates a planned correction of style issues. The new message introduces incorrect semantics and implies a failure, making it regressive.",1.0,2.0,2.0,"The commit message 'Fix Pep8 Issues' is highly misleading and inaccurate given the code changes. The diff shows a replacement of 'maxLocations' with 'limit' in the params dictionary and removal of a 'result' parameter in the main function call, which are not related to PEP8 compliance. PEP8 is a style guide for Python code, and the changes here involve parameter name updates and function call adjustments, which are logical refactors or bug fixes, not style issues. Therefore, the commit message does not reflect the actual changes and is therefore poor.","The commit message 'update arcgis.py' is extremely vague and provides no context about what was changed or why. While the diff shows a clear change from 'maxLocations' using 'maxLocations' to 'limit' in the params dictionary, and the removal of a 'result' parameter in the example usage, these changes are not explained in the message. A better message would specify the change (e.g., 'Update maxLocations parameter to use limit from kwargs, remove unused result parameter'). As it stands, the message offers no actionable insight into the purpose or impact of the changes, making it insufficient for understanding the commit's intent.","The commit message 'fix: rectification failed' is vague and does not accurately describe the actual change. The diff shows a simple parameter name change from 'maxLocations' to 'limit' in the params dictionary and the removal of a 'result' parameter from the constructor call. The term 'rectification failed' is unclear and does not reflect the real fix. A better message would describe the change, such as 'fix: update maxLocations to use limit parameter and remove unused result argument'. Therefore, the message is insufficiently descriptive and lacks clarity, warranting a score of 2."
bde20f932e266fc8855200cc006988219e7c90a5,Fix Pep8 Issues,geocoder/arcgis_reverse.py,"@@ -32,7 +32,7 @@ class ArcgisReverse(Arcgis):
             'f': 'pjson',
             'distance': kwargs.get('distance', 50000),
             'outSR': kwargs.get('outSR', ''),
-            'maxLocations': kwargs.get('maxLocations', 1),
+            'maxLocations': kwargs.get('limit', 1),
         }
         self._initialize(**kwargs)
 
@@ -41,6 +41,10 @@ class ArcgisReverse(Arcgis):
         if error:
             self.error = error['message']
 
+    @property
+    def ok(self):
+        return bool(self.address)
+
     @property
     def lat(self):
         return self.parse['location'].get('y')
",add missing properties to arcgisreverse,feat(arcgis-reverse): add ok property to indicate valid address,Semantic,"The new message provides a clear, descriptive semantic meaning about the feature addition, including the component (arcgis-reverse) and the specific change (adding an ok property), whereas the old message is vague and generic.",1.0,2.0,3.0,"The commit message 'Fix Pep8 Issues' is highly misleading given the actual changes in the diff. The diff shows a parameter name change from 'maxLocations' to 'limit' and the addition of a new property 'ok', neither of which relates to PEP8 compliance. PEP8 is a style guide for Python code, and the changes here are semantic or functional (e.g., renaming a parameter and adding a property), not style-related. Therefore, the commit message does not accurately reflect the changes, making it poor and misleading.","The commit message 'add missing properties to arcgisreverse' is overly vague and does not accurately reflect the actual changes. The diff shows a parameter name change from 'maxLocations' to 'limit' and the addition of a new property 'ok' that returns whether an address exists. The message fails to mention the parameter rename or the new property, making it misleading. While it touches on the idea of adding properties, it lacks specificity and fails to convey the actual technical changes, which reduces its clarity and usefulness. A better message would explicitly note the change in parameter name and the introduction of the 'ok' property.","The commit message accurately identifies the feature added (an 'ok' property to indicate a valid address) and relates it to the arcgis-reverse functionality. However, it lacks context about why this property is needed or how it improves the API usage (e.g., validation feedback to users). The change in the code — replacing 'maxLocations' with 'limit' — is not mentioned, which introduces a potential confusion or oversight. While the message is clear and relevant, it omits important details about the broader impact or intent, making it only moderately complete."
bde20f932e266fc8855200cc006988219e7c90a5,Fix Pep8 Issues,geocoder/freegeoip.py,"@@ -33,7 +33,7 @@ class FreeGeoIP(Base):
         self._initialize(**kwargs)
 
     @staticmethod
-    @ratelim.greedy(10000, 60*60)
+    @ratelim.greedy(10000, 60 * 60)
     def rate_limited_get(*args, **kwargs):
         return requests.get(*args, **kwargs)
 
",add missing class attribute,fix: rectification failed,Regressive,"The new message 'fix: rectification failed' is misleading and suggests a failure occurred, whereas the original 'Fix Pep8 Issues' clearly indicates a corrective action. This introduces semantic inaccuracy and undermines the intended meaning of the fix.",2.0,1.0,1.0,"The commit message 'Fix Pep8 Issues' is overly vague and does not accurately reflect the actual change. The diff shows a simple fix of a missing multiplication operator (`60 * 60` vs `60*60`), which is a formatting consistency issue, not a full PEP8 violation. While the change is minor and related to formatting, the message fails to specify what was fixed or why, making it insufficiently descriptive. A better message would mention the specific formatting fix (e.g., 'Fix missing multiplication operator in rate_limited_get'). Therefore, it receives a score of 2 for being technically correct but lacking clarity and specificity.","The commit message 'add missing class attribute' is highly inaccurate and misleading. The diff shows a change in a static method decorator from `@ratelim.greedy(10000, 60*60)` to `@ratelim.greedy(10000, 60 * 60)`, which is a formatting change (adding multiplication operator with space), not the addition of a class attribute. The change is syntactic and stylistic, not a structural addition of an attribute. Therefore, the commit message does not reflect the actual change and is therefore poor.","The commit message 'fix: rectification failed' is highly unclear and uninformative. It does not describe what was actually fixed, why the change was necessary, or what problem it resolves. The diff shows a simple fix of a multiplication operator (changing `60*60` to `60 * 60` with proper spacing), which is a minor formatting improvement, not a 'rectification failure'. A proper commit message should clearly state the intent and impact, such as 'fix: add space around multiplication in rate limit config for readability'. The current message fails to meet basic standards for clarity and usefulness."
bde20f932e266fc8855200cc006988219e7c90a5,Fix Pep8 Issues,geocoder/here.py,"@@ -31,7 +31,7 @@ class Here(Base):
         app_code = kwargs.get('app_code', here_app_code)
         if not bool(app_id and app_code):
             raise ValueError(""Provide app_id & app_code"")
-        
+
         # URL Params
         self.params = {
             'searchtext': location,
",update here.py,fix(Here): remove empty line after app_id and app_code validation,Corrective,"The change addresses a specific formatting issue (empty line after validation) that violates PEP8 guidelines, correcting a code style violation rather than just improving appearance or semantics.",2.0,2.0,3.0,"The commit message 'Fix Pep8 Issues' is overly vague and does not accurately reflect the actual change. The diff shows only a line break insertion (removing a blank line) and no actual code formatting fix related to PEP8. There is no evidence of PEP8 violations being corrected, such as spacing, indentation, or naming issues. The message misrepresents the change, making it misleading. While it's not completely wrong, it lacks specificity and fails to convey the actual impact of the change, which reduces its quality.","The commit message 'update here.py' is overly vague and provides no context about what was changed or why. While the diff shows a minor change—removing a blank line—the message fails to communicate the significance or purpose of the update. A better message would describe the change, such as 'Remove redundant blank line in Here class initialization for improved code formatting.' Thus, it receives a score of 2 for lacking specificity and context.","The commit message is accurate in describing the change — removing an empty line after the validation logic — but it lacks context about why the line was removed or any impact on code readability or functionality. While the action is correctly identified, the message is minimal and does not provide sufficient detail to be considered excellent. It is clear and relevant, but not comprehensive, hence a score of 3."
bde20f932e266fc8855200cc006988219e7c90a5,Fix Pep8 Issues,geocoder/komoot.py,"@@ -122,5 +122,4 @@ class Komoot(Base):
 
 if __name__ == '__main__':
     g = Komoot('Ottawa Ontario', result=3)
-    for item in g:
-        print item
\ No newline at end of file
+    g.debug()
",add test for komoot.py,fix: rectification failed,Regressive,"The new message 'fix: rectification failed' introduces a misleading or incorrect status (failed) and does not reflect actual Pep8 fixes, potentially suggesting a failure where none occurred, thus degrading clarity and accuracy.",1.0,1.0,1.0,"The commit message 'Fix Pep8 Issues' is highly misleading and inaccurate given the actual changes in the diff. The diff does not address any PEP8 issues—there are no formatting, naming, or style problems in the code that would be classified as PEP8 violations. Instead, the change removes a for-loop print statement and replaces it with a debug call, which is a functional or behavioral change, not a PEP8 fix. The commit message fails to reflect the actual content of the change, making it misleading and unhelpful for understanding the purpose of the commit.","The commit message 'add test for komoot.py' is highly misleading and inaccurate given the actual changes in the code diff. The diff shows a removal of a loop that prints items and a replacement with a call to `g.debug()`, which suggests a functional change or debugging enhancement, not the addition of a test. There is no test code introduced, and the change does not appear to be related to testing at all. Therefore, the commit message fails to reflect the actual changes and is not descriptive or accurate.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was actually fixed or why. The diff shows a simple change: replacing a loop that printed items with a call to `g.debug()`, which suggests the intention was to enable debugging output instead of printing items. The term 'rectification failed' is not meaningful in this context and does not reflect the actual change. A better message would describe the change clearly, such as 'fix: replace item printing with debug output'. Therefore, the commit message is poor in clarity, relevance, and informativeness."
4c57ef0304b17cfde73429a5290d509462a79643,Fix Google Provider,geocoder/google.py,"@@ -120,8 +120,8 @@ class Google(Base):
             # Parse address components with short & long names
             for item in self.parse['address_components']:
                 for category in item['types']:
-                    self.parse[category]['long_name'] = self._encode(item['long_name'])
-                    self.parse[category]['short_name'] = self._encode(item['short_name'])
+                    self.parse[category]['long_name'] = item['long_name']
+                    self.parse[category]['short_name'] = item['short_name']
 
     @property
     def lat(self):
",update google.rb,fix(address): remove unnecessary encoding of address components,Corrective,"The change removes unnecessary encoding of address components, which is a bug fix addressing incorrect behavior in the Google Provider's address handling.",2.0,2.0,3.0,"The commit message 'Fix Google Provider' is too vague and provides no context about what was fixed or why. The diff shows a removal of encoding calls (_encode) from the address components, which suggests the fix was removing unnecessary encoding. However, the commit message fails to convey the actual change, its impact, or the reason for the change. A better message would specify, for example, 'Remove unnecessary encoding of address components in Google provider'. Thus, while it correctly identifies a fix, it lacks detail and clarity, resulting in a score of 2.","The commit message 'update google.rb' is extremely vague and provides no information about what was changed or why. The diff shows a clear removal of encoding calls (_encode) from address component handling, which suggests a simplification or a bug fix related to data handling. A better message would indicate the change, such as 'Remove unnecessary encoding of address components in Google geocoding parser'. Since the message lacks context, specificity, and technical detail, it only scores a 2.","The commit message accurately identifies the change as removing unnecessary encoding of address components, which aligns with the diff showing the removal of calls to _encode(). However, it lacks context about why the encoding was previously used or whether there were specific concerns about encoding (e.g., data integrity, format, or compatibility). While the message is clear and relevant, it is somewhat minimal and does not fully explain the impact or reasoning, which limits its completeness. Thus, it is functional but not excellent."
4c57ef0304b17cfde73429a5290d509462a79643,Fix Google Provider,geocoder/google_reverse.py,"@@ -35,7 +35,6 @@ class GoogleReverse(Google, Base):
             'language': kwargs.get('language', ''),
             'client': kwargs.get('client', google_client)
         }
-        self._encode_params(**kwargs)
         self._initialize(**kwargs)
 
     @property
",add missing `initialize` method to google_reverse,remove(client): drop _encode_params call,Corrective,"The change removes an unnecessary _encode_params call, which likely fixes a bug or incorrect behavior in the Google Provider's client logic, improving correctness.",2.0,2.0,3.0,"The commit message 'Fix Google Provider' is overly vague and provides no context about what was actually fixed or why. The diff shows only a removal of a call to `_encode_params`, which suggests a specific change in parameter handling, but the commit message fails to convey this. A better message would indicate the exact nature of the change, such as 'Remove unnecessary _encode_params call in GoogleReverse initialization'. Thus, while it indicates a fix, it lacks detail and technical clarity, resulting in a low score.","The commit message is incorrect and misleading. The diff shows the removal of a call to `_encode_params(**kwargs)` and the addition of a call to `_initialize(**kwargs)`, suggesting that a method was added, but in fact, the code is removing a line and not adding a new method. The message 'add missing `initialize` method to google_reverse' is false — no such method is added. The task implies a missing method, but the diff shows a change in parameter handling, not a method addition. Therefore, the message is inaccurate and does not reflect the actual change, resulting in a low score.","The commit message is concise and identifies the change (removing a call to _encode_params), but it lacks context about why the removal was necessary or how it affects the functionality. While it correctly references the method and the parameter, it does not explain the reasoning or impact, which is important for maintainability. Therefore, it is somewhat clear but not fully informative, earning a mid-level score."
4015dd8310f406b685568101bfcba95ea4daf579,Python3 issue,geocoder/osm_reverse.py,"@@ -30,7 +30,6 @@ class OsmReverse(Osm):
             'addressdetails': 1,
             'limit': kwargs.get('limit', 1)
         }
-        print self.url
         self._initialize(**kwargs)
 
 
",update osm.py,remove(print)(OsmReverse): log URL,Corrective,"The new message indicates a specific action (removing print) and context (OsmReverse) related to a logging issue, suggesting a fix for a problematic behavior, rather than just a style or semantic change.",1.0,1.0,2.0,"The commit message 'Python3 issue' is extremely vague and provides no context about what specific issue was addressed, why it was fixed, or what change was made. The diff shows a removal of a print statement, which suggests a logging or debugging change, but the commit message fails to communicate this. A meaningful commit message should describe the change and its purpose. This message lacks detail, specificity, and clarity, making it poor for understanding the intent or impact of the change.","The commit message 'update osm.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a removal of a print statement, which is a minor and potentially non-critical change, but the commit message fails to convey this. A meaningful commit message should describe the specific change and its purpose, such as 'Remove debug print statement from OsmReverse class to reduce log output'. As it stands, the message offers no actionable or contextual insight, making it poor for code review and version control purposes.","The commit message is technically correct in indicating that a print statement was removed, but it is overly minimal and lacks context. It does not explain why the print statement was removed, which is important for code review and maintainability. A better message would include the purpose (e.g., 'remove debug print to reduce log noise' or 'remove URL logging for security and performance'). As it stands, the message is barely informative and could be mistaken for a trivial change without context, so it receives a score of 2."
9e5672964346fd9399960fb89af9b83b98da37bb,Version Change,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.6.4'
+__version__ = '1.7.0'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific fix for a failure (rectification failed), suggesting a bug or issue was resolved, which falls under corrective improvement.",2.0,1.0,1.0,"The commit message 'Version Change' is overly vague and provides no context about what was changed or why. While it correctly indicates a version update, it lacks specific details such as the version bump (from 1.6.4 to 1.7.0) or the significance of the change (e.g., new features, bug fixes, API updates). A better message would include the version number and a brief description of the improvements or changes. Therefore, it receives a score of 2 for minimal informativeness.","The commit message 'add missing docstrings' is highly inconsistent with the actual changes in the diff. The diff only shows a version number update from '1.6.4' to '1.7.0', not any addition of docstrings. Therefore, the commit message does not accurately reflect the changes made, making it misleading and incorrect. This misalignment reduces its usefulness and trustworthiness, warranting a poor score.","The commit message 'fix: rectification failed' is highly unclear and does not accurately reflect the actual change in the code diff. The diff shows only a version number update from '1.6.4' to '1.7.0', which is a simple version bump, not a fix for a rectification failure. The message lacks context, specificity, and technical clarity, making it misleading and unhelpful for understanding the purpose of the commit. A proper message should describe what was changed and why, such as 'chore: update version to 1.7.0' or 'feat: release version 1.7.0'. Therefore, the commit message is poor."
0180894444763e6f6a20a18e26ad181b541a1c51,Error in PyPI must change version again.,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.7.0'
+__version__ = '1.7.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed') and implies a fix is being applied, addressing the root cause rather than just describing a surface-level change.",1.0,1.0,1.0,"The commit message is irrelevant to the actual change in the code diff. The diff only shows a version bump from '1.7.0' to '1.7.1', which is a minor update. The commit message 'Error in PyPI must change version again' suggests a problem with PyPI and implies a version change due to an error, but there is no mention of an error, PyPI, or any failure in the diff. It is vague, misleading, and does not accurately reflect the actual change. Therefore, it is poor.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.7.0' to '1.7.1', not the addition of any docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and irrelevant. A correct message would have been something like 'Bump version to 1.7.1'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.7.0' to '1.7.1', which is a simple version update, not a fix for a rectification failure. The message fails to describe what was fixed, why it was fixed, or how it relates to the change. A proper commit message should clearly explain the nature of the change, and this one provides no such context, making it poor and misleading."
91d02570e4a60c0d9abd8668d9b16e61ee84d8e0,"Unicode Errors #171
- Fixed __repr__ unicode issue
- Google's encoding params
- Remove here's encoding for results (already in unicode)
- Added unicode to testing",geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.7.2'
+__version__ = '1.8.0'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Cosmetic,"The new message 'fix: rectification failed' is vague and does not convey any specific technical correction or improvement compared to the detailed changes in the old message. It lacks meaningful content about what was fixed or why, suggesting it is primarily a cosmetic change in messaging style.",2.0,1.0,1.0,"The commit message does not accurately reflect the changes in the code diff. The diff only shows an version update from '1.7.2' to '1.8.0', with no mention of Unicode issues, __repr__ fixes, encoding params, or testing changes. The message references 'Unicode Errors #171' and lists several unrelated fixes that are not present in the diff. This misalignment between the commit message and the actual code changes makes it misleading and reduces its usefulness. Therefore, it is only moderately informative and should be scored as 2.","The commit message 'add missing docstrings' is highly inconsistent with the actual changes in the diff. The diff shows only a version bump from '1.7.2' to '1.8.0', not the addition of any docstrings. Therefore, the commit message is misleading and does not accurately reflect the work done. This misalignment reduces its clarity and trustworthiness, resulting in a poor score.","The commit message 'fix: rectification failed' is highly inadequate as it does not describe what was actually fixed or why. The diff shows only a version bump from '1.7.2' to '1.8.0', which is a version update, not a fix for a rectification failure. The message is vague, lacks context, and does not reflect the actual change. A proper commit message should explain the nature of the change, its purpose, and the problem it addresses. Therefore, it receives a score of 1 (Poor)."
91d02570e4a60c0d9abd8668d9b16e61ee84d8e0,"Unicode Errors #171
- Fixed __repr__ unicode issue
- Google's encoding params
- Remove here's encoding for results (already in unicode)
- Added unicode to testing",geocoder/base.py,"@@ -5,6 +5,7 @@ from __future__ import absolute_import
 import requests
 import sys
 import json
+import six
 from collections import defaultdict
 from geocoder.distance import Distance
 
@@ -58,7 +59,7 @@ class Base(object):
                 self.status,
                 self.provider.title(),
                 self.method.title(),
-                self.address
+                six.text_type(self.address, 'utf-8')
             )
         else:
             return ""<[{0}] {1} - {2}>"".format(
",add missing comments,fix: rectification failed,Cosmetic,"The new message 'fix: rectification failed' is vague and does not convey any specific technical correction or improvement compared to the detailed changes in the old message. It lacks meaningful information about what was fixed or why, suggesting it is purely cosmetic in nature.",3.0,1.0,2.0,"The commit message addresses a Unicode-related issue in the __repr__ method, which is relevant to the diff where `six.text_type` is added to ensure proper Unicode handling. However, the message is vague and lacks specificity about the actual changes made (e.g., it doesn't clearly explain that `six.text_type` was used to ensure UTF-8 encoding in string output). It also mentions 'Google's encoding params' and 'remove here's encoding' which are not present in the diff, suggesting possible inaccuracies or misinterpretations. The claim about 'unicode to testing' is unsupported by the diff. While the fix is valid, the commit message fails to clearly and accurately reflect the changes, reducing its clarity and usefulness.","The commit message 'add missing comments' is vague and does not accurately reflect the actual changes in the code. The diff shows an import of 'six' and a change in how the address is formatted using 'six.text_type' with a 'utf-8' argument, which is not a comment but a code modification related to string handling. The change is not about adding comments but about improving string type handling for better Unicode support. Therefore, the commit message is misleading and does not describe the real purpose or impact of the change, making it poor.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows an import of 'six' and a change to use 'six.text_type' on an address field, which suggests a fix for encoding issues (likely to ensure string compatibility across Python 2 and 3). However, the commit message fails to mention the actual problem (e.g., encoding errors) or the fix (e.g., ensuring proper string handling). While it is labeled as a 'fix', the term 'rectification failed' is unclear and misleading. A better message would specify the issue and the resolution, such as 'fix: ensure string encoding compatibility in address output'. Therefore, the message is minimally informative and receives a score of 2."
91d02570e4a60c0d9abd8668d9b16e61ee84d8e0,"Unicode Errors #171
- Fixed __repr__ unicode issue
- Google's encoding params
- Remove here's encoding for results (already in unicode)
- Added unicode to testing",geocoder/google.py,"@@ -4,6 +4,7 @@
 from __future__ import absolute_import
 import ratelim
 import requests
+import six
 from geocoder.base import Base
 from geocoder.keys import google_key, google_client, google_client_secret
 
@@ -54,7 +55,7 @@ class Google(Base):
         self.client_secret = kwargs.get('client_secret', google_client_secret)
         # turn non-empty params into sorted list in order to maintain signature validity.
         # Requests will honor the order.
-        self.params = sorted([(k.encode('utf8'), v.encode('utf8')) for (k, v) in self.params.items() if v])
+        self.params = sorted([(six.text_type(k, 'utf-8'), six.text_type(v, 'utf-8')) for (k, v) in self.params.items() if v])
         # the signature parameter needs to come in the end of the url
         if self.client_secret:
             self.params.append(self._sign_url(self.url, self.params, self.client_secret))
",add signature parameter to google request,import(s)(utils): Add six.text_type for UTF-8 encoding compatibility,Corrective,"The change addresses a specific encoding compatibility issue by introducing six.text_type for UTF-8 support, which ensures proper Unicode handling in Python 2/3 environments, fixing potential encoding inconsistencies.",2.0,2.0,3.0,"The commit message is vague and does not accurately reflect the changes in the diff. It mentions 'Unicode Errors #171' and 'Fixed __repr__ unicode issue', but there is no mention of __repr__ in the code diff. The actual change is about encoding parameters in the Google class using `six.text_type` to ensure proper Unicode handling during URL parameter encoding. The message fails to clearly state what was fixed or why, and includes unrelated points like 'Remove here's encoding for results' and 'Added unicode to testing' which are not present in the diff. While the change is relevant to Unicode handling, the commit message is poorly written and lacks specificity and accuracy.","The commit message 'add signature parameter to google request' is highly inaccurate and misleading. The diff does not add a new signature parameter; instead, it modifies the encoding of parameters (using `six.text_type` to ensure proper string handling) to maintain signature validity. The actual change is about encoding string parameters consistently across Python 2 and 3, not adding a signature parameter. Therefore, the commit message fails to reflect the true nature of the change, making it poor and potentially misleading for developers reviewing the code.","The commit message is somewhat relevant but lacks clarity and precision. It mentions adding 'six.text_type' for UTF-8 encoding compatibility, which is partially accurate, but the actual change is about encoding strings to UTF-8 (specifically using six.text_type to ensure proper string type handling across Python 2 and 3). However, the message does not clearly explain why this change is necessary or what problem it solves. It also misrepresents the purpose — the change isn't just about UTF-8 encoding, but about ensuring consistent string type handling in a cross-version context. A better message would explain the intent (e.g., 'Ensure consistent string handling across Python 2 and 3 using six.text_type'). Therefore, it's functional but not excellent."
91d02570e4a60c0d9abd8668d9b16e61ee84d8e0,"Unicode Errors #171
- Fixed __repr__ unicode issue
- Google's encoding params
- Remove here's encoding for results (already in unicode)
- Added unicode to testing",geocoder/here.py,"@@ -2,6 +2,7 @@
 # coding: utf8
 
 from __future__ import absolute_import
+import six
 from geocoder.base import Base
 from geocoder.keys import here_app_id, here_app_code
 
@@ -53,7 +54,7 @@ class Here(Base):
             if result:
                 self._build_tree(result[0])
         for item in self.parse['Location']['Address']['AdditionalData']:
-            self.parse[item['key']] = self._encode(item['value'])
+            self.parse[item['key']] = item['value']
 
     def _catch_errors(self):
         status = self.parse.get('type')
",add here app code,fix: rectification failed,Cosmetic,"The new message 'fix: rectification failed' is vague and does not convey any specific technical correction or improvement compared to the detailed changes in the old message. It lacks actionable information and appears to be a placeholder or placeholder-style update, indicating a cosmetic change in messaging rather than a substantive improvement.",2.0,1.0,2.0,"The commit message does not accurately reflect the changes in the code diff. It mentions fixing a 'Unicode Errors #171', modifying Google's encoding params, removing Here's encoding for results, and adding unicode to testing — but the diff shows only the removal of encoding (self._encode(item['value'])) and the import of six, which is unrelated to the specific changes described. The actual change is simply removing a call to _encode, implying a simplification due to values already being in Unicode. The commit message is vague, misleading, and includes irrelevant points (like Google's encoding params, which aren't in the diff). Therefore, it fails to clearly or correctly describe the actual changes, resulting in a low score.","The commit message 'add here app code' is highly inadequate given the actual changes in the code diff. The diff introduces an import of 'six' and modifies a method to remove encoding of values in the parse dictionary, replacing it with direct value assignment. These changes are not related to adding 'here app code' (which would imply adding or modifying API credentials or configuration). The commit message is vague, irrelevant, and does not reflect the actual changes made. Therefore, it receives a score of 1 (Poor).","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a change from encoding values using `_encode()` to directly assigning raw values, which suggests a simplification or removal of encoding logic. However, the commit message provides no context about the issue, the intended fix, or its impact. While it correctly uses the 'fix:' prefix, the content is insufficient to understand the change or its significance, resulting in a low score."
91d02570e4a60c0d9abd8668d9b16e61ee84d8e0,"Unicode Errors #171
- Fixed __repr__ unicode issue
- Google's encoding params
- Remove here's encoding for results (already in unicode)
- Added unicode to testing",tests/test_unicode.py,"@@ -1,9 +1,16 @@
 # -*- encoding: utf-8 -*-
 
-# import geocoder
+import geocoder
 
 
 def test_unicode():
-    # tokyo = '東京'
-    # g = geocoder.google(tokyo)
-    pass
+    g = geocoder.google('東京', key='')
+    assert g
+
+def test_repr_unicode():
+    g = geocoder.osm('Tokyo, Japan')
+    assert g
+
+if __name__ == '__main__':
+    test_repr_unicode()
+    test_unicode()
",add test for,fix: rectification failed,Cosmetic,"The new message 'fix: rectification failed' is vague and does not clearly indicate any functional change or bug fix, unlike the detailed and specific changes in the old message. It lacks technical clarity and appears to be a superficial update without meaningful content, suggesting a cosmetic change.",3.0,2.0,1.0,"The commit message addresses relevant changes related to Unicode handling, such as fixing a __repr__ issue and adding Unicode testing, which aligns with the code diff. However, the message is vague and lacks specificity—e.g., it doesn't clearly explain what 'Google's encoding params' or 'Remove here's encoding for results' means, and the phrasing is awkward. The changes in the diff are minor and mostly involve adding tests, not fixing deep bugs or complex encoding issues. While the intent is present, the message fails to clearly convey the impact or technical details of the changes, resulting in a moderate score.","The commit message 'add test for' is extremely vague and lacks specificity. While it indicates that tests were added, it does not describe what was tested, why it was added, or the context. The diff shows two new test functions: one for Unicode handling with '東京' and another for repr behavior with 'Tokyo, Japan'. A better message would specify the purpose, such as 'add tests for Unicode support in geocoder.google and geocoder.osm'. As it stands, the message provides minimal value and fails to convey meaningful information about the change.","The commit message 'fix: rectification failed' is highly vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what problem it solved. The diff shows added test cases for Unicode handling in geocoder, specifically for '東京' and 'Tokyo, Japan', and a new test function, which suggests the commit is about improving Unicode support in testing. A meaningful commit message should reflect this improvement, such as 'feat: add Unicode support tests for Japanese and English city names'. The current message fails to convey any actionable or relevant context, making it poor for communication and code review."
0ba0f25857b870c88633d38e1267ae413ee92cf8,Pep8 issue in testing,tests/test_unicode.py,"@@ -7,6 +7,7 @@ def test_unicode():
     g = geocoder.google('東京', key='')
     assert g
 
+
 def test_repr_unicode():
     g = geocoder.osm('Tokyo, Japan')
     assert g
",add test for,feat(test): add unicode representation test for OSM geocoder,Semantic,"The new message provides clearer context by specifying the feature (adding unicode representation test) and its purpose (for OSM geocoder), improving semantic meaning compared to the vague 'Pep8 issue in testing'.",1.0,2.0,3.0,"The commit message 'Pep8 issue in testing' is irrelevant to the actual changes in the diff. The diff shows the addition of two new test functions related to Unicode handling, not a formatting issue like PEP8. There is no mention of PEP8 violations or formatting problems in the code changes. The message fails to describe what was actually fixed or added, and instead makes an incorrect or unsupported claim. Therefore, it is poor and does not reflect the actual content of the diff.","The commit message 'add test for' is extremely vague and lacks specificity. It does not indicate what was added, why it was added, or which functionality is being tested. While it correctly identifies that a test was added, the message fails to provide context or detail about the test (e.g., Unicode handling, representation, or specific use case). A better message would specify, for example, 'Add tests for Unicode support in geocoder representations'. Therefore, it receives a score of 2 for being minimally informative but lacking clarity and purpose.","The commit message correctly identifies the type of change as a feature (test) and mentions the relevant component (OSM geocoder) and the specific functionality (unicode representation). However, it lacks context about why the test is needed or what problem it solves, and it omits the earlier test for Google geocoder with Unicode, which was also added in the diff. This omission makes the message incomplete and slightly misleading. While it is clear and correctly formatted, it does not fully reflect the scope of the changes, resulting in a moderate score."
cf0fc93c7c4b661bb6fb41d0f9837a7198daf3ed,Exception must be last,geocoder/base.py,"@@ -94,14 +94,14 @@ class Base(object):
             self.url = r.url
             if r.content:
                 self.status_code = 200
+        except (KeyboardInterrupt, SystemExit):
+            raise
         except requests.exceptions.SSLError:
             self.status_code = 495
             self.error = 'ERROR - SSLError'
         except:
             self.status_code = 404
             self.error = 'ERROR - URL Connection'
-        except (KeyboardInterrupt, SystemExit):
-            raise
 
         # Open JSON content from Request connection
         if self.status_code == 200:
",update base.py,fix(base): handle KeyboardInterrupt and SystemExit explicitly,Corrective,"The new message indicates explicit handling of KeyboardInterrupt and SystemExit, which addresses a potential runtime issue and improves robustness, reflecting a corrective change to enhance error handling.",2.0,1.0,3.0,"The commit message 'Exception must be last' is overly vague and does not clearly explain the change or its significance. The diff shows a removal of a specific exception handler for KeyboardInterrupt and SystemExit, which was previously raised, and the code now raises these exceptions unhandled at the end. However, the message fails to convey why this change was made, what problem it solves, or how it improves the code. A better message would explain the intent, such as 'Ensure KeyboardInterrupt and SystemExit are not caught and suppressed, allowing graceful termination.' Therefore, the message is insufficiently descriptive and lacks context, warranting a score of 2.","The commit message ""update base.py"" is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a removal of an except block for (KeyboardInterrupt, SystemExit) and a corresponding addition of the same block, which suggests a code cleanup or refactoring. A meaningful commit message should reflect this change, such as 'Fix KeyboardInterrupt/SystemExit handling in Base class to preserve exception propagation'. Without such context, the message fails to convey any useful information, making it poor.","The commit message correctly identifies the intent of the change — explicitly handling KeyboardInterrupt and SystemExit — which is relevant to the diff. However, the fix is somewhat redundant because the same exception handling is already present in the code (before the change), and the commit message does not clearly convey that the original handling was missing or incorrect. Additionally, the change merely re-adds a raised exception without explaining why it was previously absent or what problem it solved. While the message is accurate, it lacks context and impact, resulting in a moderate score."
321dbcbb51950ae5dff8200a60d69f1462861729,"Added Usage Policies
- Changed 10 request/s for Google
- Added rate limit of 1 request/s for OSM
- Main readme is Markdown with usage policies",geocoder/google.py,"@@ -102,9 +102,9 @@ class Google(Base):
 
     @staticmethod
     @ratelim.greedy(2500, 60 * 60 * 24)
-    @ratelim.greedy(5, 1)
+    @ratelim.greedy(10, 1)
     # @ratelim.greedy(100000, 60 * 60 * 24) # Google for Work daily limit
-    # @ratelim.greedy(10, 1) # Google for Work limit per second
+    # @ratelim.greedy(50, 1) # Google for Work limit per second
     def rate_limited_get(*args, **kwargs):
         return requests.get(*args, **kwargs)
 
",add more examples to the google api docs,fix(google): increase rate limit to 10 requests per second,Corrective,"The new message corrects a previous change by explicitly fixing the rate limit for Google to 10 requests per second, which aligns with the original intent and resolves an inconsistency.",2.0,1.0,4.0,"The commit message is poorly aligned with the actual changes in the code diff. The diff only modifies the rate limit from 5 to 10 requests per second for Google (not 10 to 1), and it removes a comment about Google for Work limits. The message claims to 'add a rate limit of 1 request/s for OSM', which is not reflected in the code. Additionally, the mention of 'Main readme is Markdown with usage policies' is unrelated to the code change and appears to be a misattribution. The message lacks clarity, accuracy, and relevance to the actual diff, making it inadequate for a meaningful commit explanation.","The commit message 'add more examples to the google api docs' is completely unrelated to the actual code change. The diff shows a modification to rate limiting parameters in the Google class, specifically increasing the per-second rate limit from 5 to 10. This change affects request throttling behavior, not documentation examples. Therefore, the commit message misrepresents the change and fails to accurately describe what was implemented.","The commit message correctly identifies the change as a fix related to Google's rate limiting and accurately reflects the increase from 5 to 10 requests per second. It is clear, relevant, and scoped appropriately. However, it could be slightly improved by mentioning the removal or commenting out of the older Google for Work limits (e.g., 50 per second) to provide full context, which would make it more comprehensive. Still, the message is accurate and useful for understanding the change, warranting a high score."
321dbcbb51950ae5dff8200a60d69f1462861729,"Added Usage Policies
- Changed 10 request/s for Google
- Added rate limit of 1 request/s for OSM
- Main readme is Markdown with usage policies",geocoder/osm.py,"@@ -30,6 +30,11 @@ class Osm(Base):
         }
         self._initialize(**kwargs)
 
+    @staticmethod
+    @ratelim.greedy(1, 1)
+    def rate_limited_get(*args, **kwargs):
+        return requests.get(*args, **kwargs)
+
     def _get_osm_url(self, url):
         if url.lower() == 'localhost':
             return 'http://localhost/nominatim/search'
",add missing docstring to osm class,fix: rectification failed,Corrective,"The new message 'fix: rectification failed' indicates a bug fix or correction to a previous issue, suggesting a corrective improvement to the system's behavior.",2.0,1.0,1.0,"The commit message does not accurately reflect the changes in the code diff. The diff introduces a rate-limited version of `requests.get` for OSM using a decorator, but the commit message talks about 'changing 10 request/s for Google' and 'adding rate limit of 1 request/s for OSM', which is misleading since Google is not mentioned in the code. Additionally, the message mentions 'Main readme is Markdown with usage policies', which is unrelated to the actual code changes. The content is off-topic and lacks specificity about the actual implementation (e.g., the use of `@ratelim.greedy(1, 1)`). Therefore, the message is poor in accuracy and relevance, warranting a score of 2.","The commit message 'add missing docstring to osm class' is highly inaccurate given the actual changes in the diff. The diff introduces a new static method `rate_limited_get` with a decorator and modifies the class, but there is no docstring added to the class or any method. The message misrepresents the change and does not reflect the actual content of the commit. Therefore, it is poor and deserves a score of 1.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was actually fixed or why. The code diff shows the addition of a rate-limited GET method using a decorator, which suggests the commit is related to adding rate limiting to HTTP requests, not a 'rectification' of a failed operation. The message fails to describe the actual change, its purpose, or the problem it solves, making it inadequate for understanding the commit's intent. A proper message would describe the addition of rate limiting to requests, for example: 'feat: add rate limiting to OSM requests using greedy decorator'. Therefore, the commit message is poor and does not reflect the actual change."
a303c7e3d7a9c8ce703f0da9205f155a8ff1d3be,Fixed OSM Rate limit,geocoder/osm.py,"@@ -2,6 +2,7 @@
 # coding: utf8
 
 from __future__ import absolute_import
+import ratelim
 from geocoder.base import Base
 
 
",add missing import,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed') that addresses a bug or issue in the system, suggesting a corrective fix rather than a cosmetic or trivial change.",1.0,3.0,1.0,"The commit message 'Fixed OSM Rate limit' is vague and does not accurately reflect the changes in the code diff. The diff shows only an import of a module 'ratelim' with no actual implementation or modification related to OSM rate limiting. There is no indication that a rate limit issue was fixed, nor is there any mention of OSM or rate limiting logic. The message is misleading and does not correspond to the actual changes, making it poor communication of the commit's purpose.","The commit message 'add missing import' is accurate and relevant to the change, as the diff shows a new import statement for 'ratelim'. However, it lacks specificity—such as why the import was needed or which feature or functionality it supports. A more detailed message (e.g., 'add ratelim import for rate limiting in geocoder') would be better. Therefore, it is functional but not fully informative, earning a moderate score.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was actually fixed, why it was needed, or what issue it resolves. It does not describe the change in the code (which is simply an import addition of 'ratelim'), nor does it indicate the problem it solved. A good commit message should clearly explain the purpose and impact of the change. This message fails to meet basic standards for clarity and usefulness."
e0d07ffed5e4d5a05110e1f9aa457f7686aa272f,OSM Rate limit URL connection issue #158,geocoder/osm.py,"@@ -31,11 +31,6 @@ class Osm(Base):
         }
         self._initialize(**kwargs)
 
-    @staticmethod
-    @ratelim.greedy(1, 1)
-    def rate_limited_get(*args, **kwargs):
-        return requests.get(*args, **kwargs)
-
     def _get_osm_url(self, url):
         if url.lower() == 'localhost':
             return 'http://localhost/nominatim/search'
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a failure (rectification failed), suggesting a correction to a malfunction, which aligns with a corrective improvement.",2.0,1.0,1.0,"The commit message 'OSM Rate limit URL connection issue #158' is vague and does not clearly describe the change or its purpose. The diff shows the removal of a rate-limited GET method, suggesting that the rate limiting was either deprecated or replaced, but the message fails to explain why this change was made. It lacks context about the fix, the problem it solves, or the impact on functionality. While it references an issue number, the message is too generic and does not reflect the actual content of the diff, which is the removal of a static rate-limited request method. A better message would explain that the rate-limited GET method was removed to simplify or refactor the OSM client logic.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff shows the removal of a static method `rate_limited_get` and not the addition of docstrings. There is no evidence of docstrings being added, and the change is actually a removal. Therefore, the commit message does not accurately reflect the changes made, making it incorrect and unhelpful. This misrepresentation significantly reduces its usefulness and clarity, warranting a poor score.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was actually fixed or why. The diff shows the removal of a rate-limited GET method, which suggests the fix might be related to rate limiting or API request handling. However, the commit message fails to describe the change, its purpose, or the problem it resolves. A meaningful commit message should clearly explain what was fixed and why, which this one does not."
0edf2aa3a270dd47bf9cf032482beb071d7b3386,"fix calling _encode_params in google.py

self._encode_params expects **kwargs from the Google(Base) object. It was called without the **kwargs, so _encode_params failed.",geocoder/google.py,"@@ -48,7 +48,7 @@ class Google(Base):
             'region': kwargs.get('region', ''),
             'components': kwargs.get('components', ''),
         }
-        self._encode_params()
+        self._encode_params(**kwargs)
         self._initialize(**kwargs)
 
     def _encode_params(self, **kwargs):
",add missing docstring,fix(google): pass kwargs to _encode_params,Corrective,"The change addresses a bug where _encode_params was called without required kwargs, fixing a functional error in the Google class implementation.",4.0,2.0,3.0,"The commit message accurately identifies the issue—incorrectly calling `_encode_params` without passing `**kwargs`—and explains why it failed. It correctly references the context (Google(Base) class) and the fix (passing `**kwargs`). The message is clear, relevant, and technically sound. However, it could be slightly more precise by mentioning the specific parameter handling or the impact on parameter encoding, which would elevate it to excellent. Still, it is well-written and effectively communicates the change and its necessity.","The commit message 'add missing docstring' is vague and does not clearly indicate what was changed or why. While a docstring might have been added, the diff shows that the method `_encode_params` now accepts `**kwargs`, which is a functional change, not just a docstring addition. The message fails to reflect the actual change in behavior or parameters, making it insufficiently informative. A better message would describe the parameter change and its purpose. Therefore, it receives a score of 2 for being technically accurate but lacking context and clarity.","The commit message is clear and identifies the fix correctly — passing `kwargs` to `_encode_params` — but it lacks context about why this change was necessary or what impact it has. While it accurately reflects the diff, it does not explain the problem or the rationale behind the change, which is important for maintainability. Therefore, it is functional but not fully informative, warranting a moderate score."
0720d3fad3858286b5296e4374f95fd076d78d63,"fix key vs client-id conflict in google.py

When a `google_client` and `google_secret` is provided, the `key` is set to None to avoid the API failing (https://developers.google.com/maps/premium/previous-licenses/webservices/auth?hl=EN).",geocoder/google.py,"@@ -39,26 +39,27 @@ class Google(Base):
     def __init__(self, location, **kwargs):
         self.url = 'https://maps.googleapis.com/maps/api/geocode/json'
         self.location = location
+        self.client = kwargs.get('client', google_client)
+        self.client_secret = kwargs.get('client_secret', google_client_secret)
         self.params = {
             'address': location,
-            'key': kwargs.get('key', google_key),
-            'client': kwargs.get('client', google_client),
+            'key': None if self.client and self.client_secret else kwargs.get('key', google_key),
+            'client': self.client,
             'bounds': kwargs.get('bounds', ''),
             'language': kwargs.get('bounds ', ''),
             'region': kwargs.get('region', ''),
             'components': kwargs.get('components', ''),
         }
-        self._encode_params(**kwargs)
+        if self.client and self.client_secret:
+            self._encode_params(**kwargs)
         self._initialize(**kwargs)
 
     def _encode_params(self, **kwargs):
-        self.client_secret = kwargs.get('client_secret', google_client_secret)
         # turn non-empty params into sorted list in order to maintain signature validity.
         # Requests will honor the order.
         self.params = sorted([(k, v) for (k, v) in self.params.items() if v])
         # the signature parameter needs to come in the end of the url
-        if self.client_secret:
-            self.params.append(self._sign_url(self.url, self.params, self.client_secret))
+        self.params.append(self._sign_url(self.url, self.params, self.client_secret))
 
     def _sign_url(self, base_url=None, params=None, client_secret=None):
 
",update google.py,feat(google): add client and client_secret support with proper URL signing,Corrective,"The new message introduces a fix by adding proper client and client_secret support with URL signing, addressing a functional issue related to authentication in Google's API, which aligns with correcting a flaw in the previous implementation.",3.0,2.0,4.0,"The commit message identifies a relevant issue involving a conflict between `key` and `client`/`client_secret` in Google's geocoding API, which aligns with the code changes. However, it oversimplifies the fix and does not fully capture the scope of the changes—such as the conditional handling of `self.client` and `self.client_secret`, the removal of the `key` parameter when both `client` and `client_secret` are present, and the adjustment of parameter encoding logic. Additionally, the message references a specific documentation link but doesn't explain why the key is set to `None` or how the signature generation is affected. While the issue is valid and the fix is relevant, the message lacks technical depth and clarity about the actual behavior changes, resulting in a moderate score.","The commit message 'update google.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the changes. While the diff shows significant modifications to the Google class initialization and parameter signing logic—particularly around client credentials and URL signing—the commit message fails to convey any meaningful context. A better message would describe the purpose, such as 'Add client and client_secret support with proper URL signing for Google Geocoding API'. Therefore, it receives a score of 2 for lacking specificity and technical context.","The commit message accurately captures the main feature introduced: adding support for client and client_secret with proper URL signing. It correctly identifies the scope (google) and the nature of the change (feat). However, it lacks detail on how the signing logic was improved or whether backward compatibility was maintained. While the message is clear and relevant, a more detailed explanation of the security or functional impact (e.g., 'enables OAuth-style client authentication with signed URLs') would elevate it to excellent. As it is, it's well-written and appropriate for a feature commit, just slightly under-communicative in technical depth."
84ef530bf384d2c12dd2705a6a7755be7c084ae1,fix _sign_url in google.py,geocoder/google.py,"@@ -83,7 +83,7 @@ class Google(Base):
         import urlparse
 
         # Return if any parameters aren't given
-        if not base_url or not client_secret or not dict(params)['client']:
+        if not base_url or not self.client_secret or not self.client:
             return None
 
         # assuming parameters will be submitted to Requests in identical order!
",update google.py,fix(auth): validate required parameters,Corrective,"The new message indicates a fix that validates required parameters in authentication, which addresses a potential failure case in the auth flow, going beyond a simple cosmetic or trivial change to correct a functional deficiency.",3.0,2.0,3.0,"The commit message 'fix _sign_url in google.py' is too vague and does not clearly describe what was fixed or why. The diff shows a change in parameter checking from using a dictionary lookup `dict(params)['client']` to using `self.client`, which suggests a refactoring to use instance attributes instead of relying on external parameters. A better message would specify the change, such as 'Fix client validation by using instance attributes instead of params dictionary'. Since the message lacks context and specificity, it earns a moderate score of 3.","The commit message 'update google.py' is extremely vague and provides no information about what was changed or why. While the diff shows a clear change in the code—specifically, the use of `self.client_secret` and `self.client` instead of hardcoded or dictionary-accessed values—the commit message fails to convey the significance of the change, such as improved encapsulation, better error handling, or security improvements. A meaningful commit message should describe the change in context. Therefore, it receives a score of 2 for being technically accurate but lacking detail and context.","The commit message 'fix(auth): validate required parameters' is brief and indicates a fix related to authentication parameter validation, which aligns with the code change. The diff shows a fix where `self.client_secret` and `self.client` are now used instead of accessing `dict(params)['client']`, improving correctness and encapsulation. However, the message lacks specific details about what was fixed, why it matters, or the impact (e.g., preventing missing credentials or improving security). While it correctly identifies the domain (auth) and the nature of the fix, it is overly generic and could be more descriptive for better clarity. Thus, it is functional but not excellent."
46c8386ca5b755aaa025d6d343a2fe0175f00f49,Fixed Pep8 syntax issues,tests/test_geocoder.py,"@@ -115,15 +115,17 @@ def test_baidu():
 
 
 def test_google():
-    g = geocoder.google(location, client = None)
+    g = geocoder.google(location, client=None)
     assert g.ok
     assert str(g.city) == city
 
+
 def test_google_for_work():
     g = geocoder.google(location)
     assert g.ok
     assert str(g.city) == city
 
+
 def test_google_reverse():
     g = geocoder.google(ottawa, method='reverse')
     assert g.ok
",add more tests,fix(tests): fix google client parameter and add missing test cases,Corrective,"The new message indicates a fix to a specific issue (google client parameter) and addition of missing test cases, which addresses a functional defect, not just syntax or style.",2.0,2.0,3.0,"The commit message 'Fixed Pep8 syntax issues' is overly vague and does not accurately reflect the actual changes. The diff shows only a minor fix: changing 'client = None' to 'client=None' (removing space), which is a PEP 8 style issue. However, the commit message fails to specify the exact nature of the change or which files/lines were affected. While it is technically correct that a PEP 8 issue was fixed, the message lacks specificity and context, making it insufficient for clarity. A better message would identify the exact style issue and its scope (e.g., 'Fixed missing space after comma in geocoder.google() calls'). Therefore, it receives a score of 2 (Fair) rather than higher.","The commit message 'add more tests' is overly vague and provides no details about what was added, why it was added, or the scope of the changes. While it is true that more test cases were introduced (e.g., test_google_for_work, test_google_reverse), the message lacks specificity and context. A better message would indicate the purpose of the tests (e.g., 'Add tests for Google geocoding with client and reverse lookup'). As such, it falls short of being clear or informative, earning a score of 2.","The commit message correctly identifies a fix (removing the extra space in `client = None`) and mentions adding missing test cases. However, it lacks specificity about which test cases were added or what the expected behavior change was. The term 'missing test cases' is vague and does not clearly indicate the scope or purpose of the additions. While the fix itself is accurate and relevant, the message could be more detailed and precise to fully reflect the changes in context and impact."
b0bc8e49b0d5895b20e75dbd2311f8d84fc7da59,"fix for when there is an accent in the *result*

`geocoder.bing('1 rue bergere, paris',key=bing_key)`
used to trigger error
`UnicodeEncodeError: 'ascii' codec can't encode character...`",geocoder/bing.py,"@@ -81,7 +81,7 @@ class Bing(Base):
         if self.street:
             expression = r'\d+'
             pattern = re.compile(expression)
-            match = pattern.search(str(self.street))
+            match = pattern.search(self.street,re.UNICODE)
             if match:
                 return match.group(0)
 
",update bing.py,fix(bing): enable Unicode support in street address matching,Corrective,"The fix addresses a specific error (UnicodeEncodeError) that occurred when processing street addresses with accents, ensuring the system can properly handle Unicode characters in Bing geocoding.",3.0,2.0,3.0,"The commit message correctly identifies the issue as a Unicode encoding error when handling accented characters in street names, and it references a specific use case. However, the actual diff change adds `re.UNICODE` to the search call, which is not the standard or recommended way to handle Unicode in Python's `re` module (especially in Python 3, where Unicode is the default). The fix is technically valid in some contexts, but the commit message does not clearly explain why `re.UNICODE` was necessary or why the original code failed without it. A more accurate explanation would link the error to improper string encoding during regex matching, and the fix should ideally be framed as ensuring proper Unicode handling in the regex search. As such, the message is somewhat accurate but lacks depth and context, resulting in a moderate score.","The commit message 'update bing.py' is extremely vague and provides no information about what was changed or why. While the code diff shows a minor addition of `re.UNICODE` flag to a regex search, the commit message fails to convey the significance or context of the change. A better message would specify the change (e.g., 'Add Unicode flag to regex search in Bing class to handle international characters'). Thus, it receives a score of 2 for lacking detail and context.","The commit message correctly identifies the change as enabling Unicode support in street address matching, which aligns with the code change that adds `re.UNICODE` to the search call. However, the message is somewhat vague about the impact or why Unicode support was necessary. The change itself is minor and may not be a critical fix, so the significance is underemphasized. While the message is accurate and relevant, it lacks context about the problem it solves or the scope of the fix, which limits its completeness. Thus, it receives a moderate score."
7efa73676adbbbe218b9326073bb03feea04d644,Version change 1.8.2,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.8.1'
+__version__ = '1.8.2'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2015 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a specific failure (rectification failed), suggesting a bug correction rather than a cosmetic or trivial change.",2.0,1.0,1.0,"The commit message 'Version change 1.8.2' is technically correct but lacks detail and context. While it indicates a version update, it does not explain why the version was incremented, what changes were made, or how this affects users or functionality. A more meaningful message would include a brief description of the changes (e.g., 'Improved JSON consistency across providers'). As it stands, the message is minimal and provides no value beyond the version number, which is insufficient for a good commit message.","The commit message 'add missing docstrings' is highly misleading given the actual diff. The diff shows only a version bump from '1.8.1' to '1.8.2', not any addition of docstrings. Therefore, the commit message does not accurately reflect the changes made, making it incorrect and untrustworthy. A proper message would have described the version update, such as 'Bump version to 1.8.2'. This misalignment severely undermines the clarity and transparency of the commit, resulting in a poor score.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.8.1' to '1.8.2', which is a minor version update, not a fix for a rectification failure. There is no mention of a bug, failure, or issue being resolved. A proper commit message should clearly describe what was changed and why. Therefore, the message is misleading and lacks clarity, resulting in a poor score."
682503294e5ef5d09d6885959080edd8ef916b65,Change regex CanadaPost,geocoder/canadapost.py,"@@ -62,7 +62,7 @@ class Canadapost(Base):
             self._json()
 
     def _retrieve_key(self):
-        url = 'https://www.canadapost.ca/pca/support/guides/bestpractices'
+        url = 'http://www.canadapost.ca/cpo/mc/personal/postalcode/fpc.jsf'
         text = ''
         try:
             r = requests.get(url, timeout=self.timeout, proxies=self.proxies)
@@ -71,7 +71,7 @@ class Canadapost(Base):
             self.error = 'ERROR - URL Connection'
 
         if text:
-            expression = r""(....-....-....-....)""
+            expression = r""'(....-....-....-....)';""
             pattern = re.compile(expression)
             match = pattern.search(text)
             if match:
@@ -93,7 +93,7 @@ class Canadapost(Base):
         items = []
 
         url = 'https://ws1.postescanada-canadapost.ca/AddressComplete' \
-              '/Interactive/Find/v2.00/json3ex.ws'
+              '/Interactive/Find/v2.10/json3ex.ws'
         try:
             r = requests.get(url, params=params,
                              timeout=self.timeout,
@@ -175,6 +175,10 @@ class Canadapost(Base):
     def label(self):
         return self.parse.get('Label')
 
+    @property
+    def canadapost_api_key(self):
+        return self.key
+
 if __name__ == '__main__':
     g = Canadapost(""453 Booth Street, ON"")
     g.debug()
",add more examples to the canadapost script,feat(canadapost): update API endpoints and add key property,Semantic,"The new message provides more specific and meaningful information about the changes (updating API endpoints and adding a key property), going beyond a simple description and reflecting the actual nature and scope of the change.",2.0,1.0,3.0,"The commit message 'Change regex CanadaPost' is extremely vague and does not accurately reflect the actual changes made. While the code does modify a regex pattern and update URLs, the message fails to mention these specific changes, the purpose of the changes (e.g., fixing key extraction or updating API endpoints), or the impact. A better message would describe the actual modifications, such as 'Update CanadaPost API URLs and regex pattern to extract postal codes from new JSF page and newer API version.' Therefore, the message is insufficiently descriptive and lacks context, earning a score of 2.","The commit message 'add more examples to the canadapost script' is highly misleading and does not reflect the actual changes in the code diff. The diff shows modifications to URLs, regex patterns, and the addition of a new property (`canadapost_api_key`), which are functional updates, not examples. There is no mention of examples or documentation additions. The message is inaccurate and fails to describe the real nature of the changes, making it poor communication of the commit's intent.","The commit message is generally accurate in stating that API endpoints were updated and a key property was added. However, it lacks specificity about the changes—such as why the endpoints were changed (e.g., version bump from v2.00 to v2.10), or what the purpose of the new `canadapost_api_key` property is (it simply returns `self.key`, which is already accessible). The message also omits context about the URL change from a support guide to a JSF endpoint, which could imply a significant functional shift. While the message is technically correct, it's too vague to be considered excellent. A better message would explain the rationale and impact. Thus, a score of 3 reflects a basic, functional message with insufficient detail."
471f9cf88766ac12e5b19b2e98f2d6ad32ab8e87,python3 fix,geocoder/tamu.py,"@@ -158,61 +158,61 @@ class Tamu(Base):
     def census_tract(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusTract')
+            return list(census[0].values())[0].get('CensusTract')
 
     @property
     def census_block(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusBlock')
+            return list(census[0].values())[0].get('CensusBlock')
 
     @property
     def census_msa_fips(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusMsaFips')
+            return list(census[0].values())[0].get('CensusMsaFips')
 
     @property
     def census_mcd_fips(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusMcdFips')
+            return list(census[0].values())[0].get('CensusMcdFips')
 
     @property
     def census_metdiv_fips(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusMetDivFips')
+            return list(census[0].values())[0].get('CensusMetDivFips')
 
     @property
     def census_place_fips(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusPlaceFips')
+            return list(census[0].values())[0].get('CensusPlaceFips')
 
     @property
     def census_cbsa_fips(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusCbsaFips')
+            return list(census[0].values())[0].get('CensusCbsaFips')
 
     @property
     def census_state_fips(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusStateFips')
+            return list(census[0].values())[0].get('CensusStateFips')
 
     @property
     def census_county_fips(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusCountyFips')
+            return list(census[0].values())[0].get('CensusCountyFips')
 
     @property
     def census_year(self):
         census = self.parse.get('CensusValues')
         if census:
-            return census[0].values()[0].get('CensusYear')
+            return list(census[0].values())[0].get('CensusYear')
 
 
 if __name__ == '__main__':
",add missing properties,fix(census): replace values() with list() for safe iteration,Corrective,"The change addresses a potential safety issue in iteration by replacing unsafe `values()` with `list()`, ensuring safe and predictable behavior in the code.",1.0,2.0,5.0,"The commit message 'python3 fix' is extremely vague and provides no context about what was fixed, why it was fixed, or what issue it addresses. The diff shows a simple change from using `.values()[0]` to `list(census[0].values())[0]`, which is a more explicit and safe way to access the first item in a dictionary's values. However, the commit message fails to explain this change—its purpose, the problem it solved, or the impact. A meaningful commit message should describe the change in functional terms (e.g., 'Fix dictionary values access to avoid potential TypeError'). As such, the message is poor and does not reflect the actual change or its significance.","The commit message 'add missing properties' is vague and does not accurately reflect the actual change. The diff shows a refactoring of property getters where `values()` (a deprecated or non-existent method on dictionaries) is replaced with `list(census[0].values())`, which is a more explicit and safe way to convert dictionary values to a list. This is not simply adding properties, but fixing a potential runtime error or misuse of dictionary methods. The message fails to convey the nature of the fix (correcting incorrect method usage) and lacks specificity. Therefore, it is only minimally adequate, earning a score of 2.","The commit message accurately and concisely describes the change: replacing `values()` with `list()` to ensure safe iteration. This is a critical improvement because `dict.values()` returns a view object, which can cause issues in certain contexts (e.g., when accessing elements via indexing or in older Python versions). Using `list()` explicitly creates a list, making the code more reliable and predictable. The message is specific, relevant, and directly reflects the diff changes across all census-related properties. It also follows the conventional commit format (fix(scope): description), which enhances readability and maintainability."
a448d4dd57f07ae1d24dab54ccce93ee5434a42f,fix key handling,geocoder/tamu.py,"@@ -5,6 +5,7 @@ from __future__ import absolute_import
 
 # geocoder imports
 from geocoder.base import Base
+from geocoder.keys import tamu_key
 
 
 class Tamu(Base):
@@ -36,10 +37,13 @@ class Tamu(Base):
             raise ValueError(""Provide city, state and zipcode"")
 
         # API key
-        key = kwargs.get('key', '')
+        key = kwargs.get('key', tamu_key)
         if not key:
             raise ValueError(""Provide key"")
 
+        self.location = location
+        self.key = key
+
         # note we do string formatting b/c apparently tamu endpoint is
         # sensitive to the order of parameters.
         self.url = 'https://geoservices.tamu.edu/Services/Geocode/WebService/'\
@@ -54,10 +58,13 @@ class Tamu(Base):
                    '&censusYear=1990|2000|2010'\
                    '&notStore=false'\
                    '&verbose=true'\
-                   '&version=4.01'.format(addr=location, **kwargs)
+                   '&version=4.01'.format(
+                        addr=location, 
+                        key=self.key,
+                        city=city,
+                        state=state,
+                        zipcode=zipcode)
 
-        self.location = location
-        self.key = kwargs['key']
         self._initialize(**kwargs)
 
     def _catch_errors(self):
",add tamu api docs,add(scope): implement TAMU geocoding service with API key and location parameters,Semantic,"The new message provides more specific context about the scope and functionality (TAMU geocoding service, API key, location parameters) compared to the vague 'fix key handling', improving clarity and semantic meaning.",2.0,1.0,3.0,"The commit message 'fix key handling' is overly vague and provides no context about what was actually fixed or why. While the diff shows that the API key is now properly extracted from `tamu_key` by default and passed into the URL, and that the `key` and `location` attributes are now properly initialized, the message fails to convey the scope or impact of the change. A better message would specify, for example, 'Fix default API key usage and ensure key is passed in URL for Tamu geocoding service'. As it stands, the message lacks detail and technical clarity, resulting in a score of 2.","The commit message 'add tamu api docs' is highly inconsistent with the actual changes in the code diff. The diff shows the addition of API key handling, initialization of instance variables (self.location, self.key), and modifications to the URL formatting to include dynamic parameters like key, city, state, and zipcode. These changes are functional and structural, not documentation-related. Therefore, the commit message is misleading and does not accurately reflect the work done. A more appropriate message would describe the implementation of TAMU geocoding with key handling and parameter injection.","The commit message correctly identifies the addition of the TAMU geocoding service and mentions key features like API key and location parameters. However, it lacks specificity about the changes—such as the fact that the key is now defaulted to a hardcoded TAMU key, or that location and key are now stored as instance attributes. It also doesn't mention the improved URL formatting with dynamic parameters. While the message is accurate and relevant, it is vague and misses important implementation details, which reduces its completeness and usefulness for code review or understanding the impact of the change."
a491da35e8c46561adf8db8fa2823990421d0cd7,"Code refactoring
- Added _exceptions for `self.parse`
- Cleaned up @property functions

@ac6y Have a look at these edits, it makes the code a LOT cleaner! :)",geocoder/tamu.py,"@@ -7,7 +7,6 @@ from __future__ import absolute_import
 from geocoder.base import Base
 from geocoder.keys import tamu_key
 
-
 class Tamu(Base):
     """"""
     TAMU Geocoding Services
@@ -88,139 +87,106 @@ class Tamu(Base):
     def _exceptions(self):
         # Build initial Tree with results
         if self.parse['OutputGeocodes']:
-            self._build_tree(self.parse.get('OutputGeocodes')[0])
+            if self.parse.get('OutputGeocodes'):
+                self._build_tree(self.parse.get('OutputGeocodes')[0])
+                self._build_tree(self.parse.get('MatchedAddress'))
+                self._build_tree(self.parse.get('OutputGeocode'))
 
         if self.parse['CensusValues']:
-            self._build_tree(self.parse.get('CensusValues'))
+            self._build_tree(self.parse.get('CensusValues')[0]['CensusValue1'])
 
     @property
     def lat(self):
-        geo = self.parse.get('OutputGeocode')
-        if geo:
-            lat = geo.get('Latitude')
-            if lat:
-                return float(lat)
+        lat = self.parse.get('Latitude')
+        if lat:
+            return float(lat)
 
     @property
     def lng(self):
-        geo = self.parse.get('OutputGeocode')
-        if geo:
-            lng = geo.get('Longitude')
-            if lng:
-                return float(lng)
+        lng = self.parse.get('Longitude')
+        if lng:
+            return float(lng)
 
     @property
     def quality(self):
-        geo = self.parse.get('OutputGeocode')
-        if geo:
-            return geo.get('MatchedLocationType')
+        return self.parse.get('MatchedLocationType')
 
     @property
     def accuracy(self):
-        geo = self.parse.get('OutputGeocode')
-        if geo:
-            return geo.get('FeatureMatchingGeographyType')
+        return self.parse.get('FeatureMatchingGeographyType')
 
     @property
     def confidence(self):
-        geo = self.parse.get('OutputGeocode')
-        if geo:
-            return geo.get('MatchScore')
+        return self.parse.get('MatchScore')
 
     @property
     def housenumber(self):
-        matched_addr = self.parse.get('MatchedAddress')
-        if matched_addr:
-            return matched_addr.get('Number')
+        return self.parse.get('Number')
 
     @property
     def street(self):
-        matched_addr = self.parse.get('MatchedAddress')
-        if matched_addr:
-            return ' '.join(
-                [matched_addr.get('Name'), matched_addr.get('Suffix')])
+        name = self.parse.get('Name')
+        suffix = self.parse.get('Suffix')
+        if suffix:
+            return ' '.join([name, suffix])
+        else:
+            return name
 
     @property
     def address(self):
-        return self.parse.get('InputAddress').get('StreetAddress')
+        return self.parse['InputAddress'].get('StreetAddress')
 
     @property
     def city(self):
-        matched_addr = self.parse.get('MatchedAddress')
-        if matched_addr:
-            return matched_addr.get('City')
+        return self.parse.get('City')
 
     @property
     def state(self):
-        matched_addr = self.parse.get('MatchedAddress')
-        if matched_addr:
-            return matched_addr.get('State')
+        return self.parse.get('State')
 
     @property
     def postal(self):
-        matched_addr = self.parse.get('MatchedAddress')
-        if matched_addr:
-            return matched_addr.get('Zip')
+        return self.parse.get('Zip')
 
     @property
     def census_tract(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusTract')
+        return self.parse.get('CensusTract')
 
     @property
     def census_block(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusBlock')
+        return self.parse.get('CensusBlock')
 
     @property
     def census_msa_fips(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusMsaFips')
+        return self.parse.get('CensusMsaFips')
 
     @property
     def census_mcd_fips(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusMcdFips')
+        return self.parse.get('CensusMcdFips')
 
     @property
     def census_metdiv_fips(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusMetDivFips')
+        return self.parse.get('CensusMetDivFips')
 
     @property
     def census_place_fips(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusPlaceFips')
+        return self.parse.get('CensusPlaceFips')
 
     @property
     def census_cbsa_fips(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusCbsaFips')
+        return self.parse.get('CensusCbsaFips')
 
     @property
     def census_state_fips(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusStateFips')
+        return self.parse.get('CensusStateFips')
 
     @property
     def census_county_fips(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusCountyFips')
+        return self.parse.get('CensusCountyFips')
 
     @property
     def census_year(self):
-        census = self.parse.get('CensusValues')
-        if census:
-            return list(census[0].values())[0].get('CensusYear')
+        return self.parse.get('CensusYear')
 
 
 if __name__ == '__main__':
",add tests for tamu,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug or issue was resolved, which falls under corrective improvements.",4.0,1.0,2.0,"The commit message accurately reflects the changes in the diff, highlighting the refactoring of `_exceptions` and cleanup of `@property` methods. The message is clear, concise, and appropriately credits the reviewer. However, it slightly oversimplifies the actual changes — for instance, the `_exceptions` method now handles multiple fields (e.g., `OutputGeocodes`, `MatchedAddress`, `OutputGeocode`) rather than just 'self.parse', and several properties now directly access `self.parse` without nested lookups. While the message captures the intent, it lacks detail on the structural improvements (e.g., reduced nesting, simplified access paths). Still, the overall clarity and relevance are strong, justifying a score of 4 rather than 5.","The commit message 'add tests for tamu' is highly irrelevant to the actual code changes shown in the diff. The diff removes redundant nested access to parse dictionaries (e.g., self.parse.get('OutputGeocode') and similar) and simplifies property getters by directly accessing top-level parse keys. This indicates a refactoring or cleanup of the code, not the addition of tests. There is no mention of test files, test functions, or any test-related changes. Therefore, the commit message does not accurately reflect the work done and is a poor fit for the actual changes.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was actually fixed or why. The diff shows a significant refactoring of the Tamu class, removing nested access to 'OutputGeocode' and instead directly accessing fields in the parse dictionary, which suggests a simplification or correction of property access logic. However, the message does not indicate the nature of the issue (e.g., incorrect parsing, missing fallbacks, or data structure changes), nor does it reflect the actual fix (e.g., 'fix: simplify property access by removing redundant nesting'). A meaningful commit message should describe the change in functional terms, such as 'fix: simplify geocoding property access by removing redundant nested dictionary lookups'. As such, the message is technically a 'fix' but lacks clarity and context, warranting a low-to-moderate score."
00a9d09e83ca3ee77d56a795f88d8d464c9c1063,"Version change
- Added Tamu provider",geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.9.0'
+__version__ = '1.10.0'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a failure in rectification, suggesting a bug or error was resolved, which falls under corrective improvement.",2.0,1.0,1.0,"The commit message is overly vague and does not accurately reflect the changes in the diff. While the diff shows only a version bump from '1.9.0' to '1.10.0', the message incorrectly claims an 'Added Tamu provider', which is not mentioned or implied in the code change. This misalignment between the commit message and the actual diff reduces its usefulness. A better message would simply state 'Bumped version to 1.10.0'. Therefore, the message is only partially accurate and lacks clarity, earning a score of 2.","The commit message 'add missing docstrings' is highly misleading given the actual change in the code diff. The diff shows only a version number update from '1.9.0' to '1.10.0', not any addition of docstrings. Therefore, the commit message does not accurately reflect the changes made, making it poor and potentially confusing for other developers.","The commit message 'fix: rectification failed' is highly inadequate as it does not describe what was actually fixed or why. The diff shows only a version bump from '1.9.0' to '1.10.0', which is a version update, not a fix for a rectification failure. The message is vague, lacks context, and does not reflect the actual change. A proper commit message should explain the nature and impact of the change, such as 'chore: update version to 1.10.0'. Therefore, the message is poor and fails to provide meaningful information."
6f42f1d1f6d910efe2127e021a2e782a9a25f2f5,can just strip() if suffix is empty string,geocoder/tamu.py,"@@ -116,14 +116,10 @@ class Tamu(Base):
     def street(self):
         name = self.parse.get('Name')
         suffix = self.parse.get('Suffix')
-        if suffix:
-            return ' '.join([name, suffix])
-        else:
-            return name
+        return ' '.join([name, suffix]).strip()
 
     @property
     def address(self):
-#        return self.parse['InputAddress'].get('StreetAddress')
         return ' '.join([
             self.housenumber, self.street, self.city, self.state, self.postal])
 
",update tamu.py,fix(street): strip suffix and name when joining street address,Corrective,"The change addresses a potential issue in street address formatting by properly stripping both suffix and name during joining, ensuring data integrity and correctness rather than just cosmetic or trivial adjustments.",2.0,2.0,3.0,"The commit message is incomplete and misleading. It claims ""can just strip() if suffix is empty string"", but the diff shows that the strip() is applied unconditionally (even when suffix is empty), not conditionally. The change actually removes a conditional block and applies `.strip()` to the joined string regardless of whether suffix exists. This means the message fails to accurately describe the actual change. While the fix is minor, the message does not reflect the actual code modification properly, making it poorly informative.","The commit message 'update tamu.py' is extremely vague and provides no information about the changes made or their purpose. While the diff shows a small improvement—adding a .strip() call to the street method and removing redundant if-else logic—the message fails to communicate what was changed, why it was changed, or the impact. A better message would specify the fix or improvement, such as 'Add .strip() to street() method to prevent trailing whitespace'. Therefore, the message is only minimally informative and receives a score of 2.","The commit message indicates a fix to strip whitespace when joining street components, which is a valid and relevant change. However, it oversimplifies the actual change: the original code already had a conditional that only joined name and suffix when suffix existed, and the fix now applies `.strip()` to the joined result regardless of suffix presence. The message does not clearly convey that the strip operation is applied to the entire joined string, nor does it mention that the conditional logic was preserved. Additionally, the fix is not limited to 'suffix' but affects the entire joined string. While the intent is understandable, the message lacks precision and context about the scope and impact of the change, reducing its clarity and usefulness for code review."
d0af7736d91acdb8bc1b7da92647ce7dd4375e8c,"make pep8 happy
@DenisCarrier not sure if you prefer to break long url or use #noqa?",geocoder/tamu.py,"@@ -7,6 +7,7 @@ from __future__ import absolute_import
 from geocoder.base import Base
 from geocoder.keys import tamu_key
 
+
 class Tamu(Base):
     """"""
     TAMU Geocoding Services
@@ -27,7 +28,9 @@ class Tamu(Base):
     provider = 'tamu'
     method = 'geocode'
 
-    def __init__(self, location, censusYears=('1990','2000','2010'), **kwargs):
+    def __init__(
+            self, location, censusYears=('1990', '2000', '2010'), **kwargs):
+
         # city, state, zip
         city = kwargs.get('city', '')
         state = kwargs.get('state', '')
@@ -41,7 +44,8 @@ class Tamu(Base):
             raise ValueError(""Provide key"")
 
         self.location = location
-        self.url = 'https://geoservices.tamu.edu/Services/Geocode/WebService/GeocoderWebServiceHttpNonParsed_V04_01.aspx'
+        self.url = 'https://geoservices.tamu.edu/Services/Geocode/WebService/'\
+                   'GeocoderWebServiceHttpNonParsed_V04_01.aspx'
         self.params = {
             'streetAddress': location,
             'city': city,
",add documentation for tamu services,refactor(tamu): use multiline string for URL,Cosmetic,"The new message focuses on a stylistic change (using multiline string for URL) to improve code readability and adherence to style guidelines, without altering functionality or introducing bugs.",2.0,1.0,3.0,"The commit message is minimally informative and lacks context. While it addresses a PEP8-related formatting issue (line length in URL), it does not clearly state what was changed, why it was changed, or its impact. The mention of '@DenisCarrier' and '#noqa' suggests a discussion about code style preferences, but the message fails to convey the actual change or its significance. A better commit message would explain the formatting fix and its rationale. Thus, it receives a score of 2 for being technically relevant but poorly communicated.","The commit message 'add documentation for tamu services' is highly inaccurate and misrepresents the actual changes in the diff. The diff shows a code modification involving improved formatting of a URL with a line break and consistent indentation, not the addition of documentation. There is no new documentation, comments, or descriptive text added. The message fails to reflect the actual content of the changes, making it misleading and irrelevant. Therefore, it receives a poor score.","The commit message 'refactor(tamu): use multiline string for URL' is technically accurate and identifies the change (multiline string for URL) and the affected component (tamu). However, it lacks context about why the change was made—such as improved readability, maintainability, or consistency—and does not mention the specific improvement in code structure or any potential impact. While the diff shows a clear formatting change, the message is minimal and does not fully communicate the significance or rationale behind the refactor. Therefore, it is functional but not detailed or insightful, warranting a moderate score."
f0bb79cf44dba608c92a3510ddf0dd618eb9507e,self.key used in line 78 for error msg,geocoder/tamu.py,"@@ -42,6 +42,7 @@ class Tamu(Base):
         key = kwargs.get('key', tamu_key)
         if not key:
             raise ValueError(""Provide key"")
+        self.key = key
 
         self.location = location
         self.url = 'https://geoservices.tamu.edu/Services/Geocode/WebService/'\
",update tamu.py,feat(tamu): add key initialization,Semantic,"The new message introduces a feature (key initialization) related to functionality, shifting from a mere error reference to a descriptive change in behavior, indicating a semantic improvement.",1.0,2.0,3.0,"The commit message is highly irrelevant to the actual changes in the code diff. The diff shows that `self.key` is being assigned in line 42, and the commit message claims it is used in line 78 for an error message, which is not mentioned or visible in the diff. There is no reference to line 78 or any error message in the code changes. Therefore, the message is inaccurate, misleading, and fails to describe the actual change. This makes it poor and deserving a score of 1.","The commit message 'update tamu.py' is overly vague and provides no information about what was changed or why. While the diff shows that a new `self.key = key` line was added, the message fails to convey the significance of the change—such as the addition of key validation or the importance of storing the key for geocoding functionality. A better message would specify the change, e.g., 'Add key storage to Tamu geocoding class for proper authentication'. Thus, it receives a score of 2 for lacking detail and context.","The commit message 'feat(tamu): add key initialization' is concise and correctly identifies the feature and component (tamu). However, it lacks detail about the purpose or impact of the change. The diff shows that the key is being stored in `self.key`, which improves initialization and validation, but the message does not explain why this is necessary or how it improves functionality. A more detailed message (e.g., 'feat(tamu): initialize key from kwargs to enable geocoding service access') would be stronger. Thus, it is functional but lacks context, earning a moderate score."
c79dce3840bb06f525ed5ed0a7e572bdc8abfd23,Pep8 issues,geocoder/tamu.py,"@@ -2,11 +2,10 @@
 # coding: utf8
 
 from __future__ import absolute_import
-
-# geocoder imports
 from geocoder.base import Base
 from geocoder.keys import tamu_key
 
+
 class Tamu(Base):
     """"""
     TAMU Geocoding Services
@@ -41,7 +40,8 @@ class Tamu(Base):
             raise ValueError(""Provide key"")
 
         self.location = location
-        self.url = 'https://geoservices.tamu.edu/Services/Geocode/WebService/GeocoderWebServiceHttpNonParsed_V04_01.aspx'
+        self.url = 'https://geoservices.tamu.edu/Services/Geocode/WebService' \
+                   '/GeocoderWebServiceHttpNonParsed_V04_01.aspx'
         self.params = {
             'streetAddress': location,
             'city': city,
",add key for tamu,refactor(geocoder): use line break for longer URL in Tamu class,Cosmetic,"The change introduces a line break for longer URLs to improve readability, which is a cosmetic improvement rather than a functional or semantic change.",2.0,2.0,3.0,"The commit message 'Pep8 issues' is overly vague and does not accurately reflect the actual changes. The diff shows a simple line break and URL formatting adjustment (using line continuation for readability), which is a code style improvement, but not a full PEP8 violation. The message fails to specify what exactly was fixed or why, and does not provide context. While the change is minor and stylistic, the commit message lacks detail and specificity, making it insufficient for a clear understanding of the change's purpose. A better message would describe the change (e.g., 'Improved URL formatting for readability and consistency with PEP8 line length guidelines'). Thus, it receives a score of 2 — barely meeting minimum standards.","The commit message 'add key for tamu' is highly insufficient as it does not describe what was actually changed or why. The diff shows that a key was already imported and used, and the main change is a URL formatting improvement (line continuation for readability). The message fails to mention the actual change (URL formatting), the purpose, or any impact. It incorrectly implies a new key was added when no new key was introduced. Therefore, it is poorly written and misleading, warranting a low score.","The commit message accurately reflects the change — introducing a line break for better readability of a long URL — and is appropriately scoped to the Tamu class. However, it lacks context about why the change was made (e.g., maintainability, readability issues before), and does not mention the removal of a commented-out import, which was also part of the diff. While the message is clear and relevant, it is somewhat minimal and misses some technical context, limiting its completeness. Thus, it is fair but not excellent."
a004faef9a83683168eaa62da9ba3392c6893cf8,Minor version change,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.10.0'
+__version__ = '1.10.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue ('rectification failed') that was likely causing a problem, suggesting a fix for a functional defect, rather than a cosmetic or trivial change.",2.0,1.0,1.0,"The commit message 'Minor version change' is overly vague and provides no context about what was changed or why. While the diff shows a simple version bump from 1.10.0 to 1.10.1, the message fails to explain the significance of the update. A better message would specify the nature of the change (e.g., 'Bumped version to 1.10.1 to fix JSON consistency issues'). As such, it lacks detail and clarity, earning a score of 2.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.10.0' to '1.10.1', not the addition of any docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and incorrect. A proper message would have been something like 'Bump version to 1.10.1'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.10.0' to '1.10.1', which is a simple version update, not a fix for a rectification failure. The message fails to describe what was fixed, why it was fixed, or how it relates to the change. A proper commit message should clearly explain the nature of the change, and this one provides no meaningful context."
ee79c6110b69b0fcb58d2b2a12f3a5d580aef445,Patch version change,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.11.1'
+__version__ = '1.11.2'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing file,fix: rectification failed,Corrective,"The new message indicates a specific issue ('rectification failed') that was likely previously unreported or overlooked, suggesting a fix for a functional problem rather than a stylistic or trivial change.",2.0,1.0,1.0,"The commit message 'Patch version change' is overly generic and provides no context about what was changed or why. While it correctly indicates a version increment, it lacks detail about the impact or the specific improvement (e.g., consistent JSON responses as noted in the diff). A better message would mention the specific change, such as 'Fix inconsistent JSON responses across providers'. Therefore, it scores 2 for being technically accurate but insufficiently informative.","The commit message 'add missing file' is extremely vague and provides no context about what was actually changed or why. The diff shows only a version bump from '1.11.1' to '1.11.2', which is a routine update, not the addition of a missing file. The message fails to describe the nature of the change, its purpose, or its impact, making it inadequate and unhelpful for understanding the commit's intent.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.11.1' to '1.11.2', which is a simple version update, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what issue it resolves, making it misleading and uninformative. A proper commit message should clearly describe the change and its purpose."
95d2b7449571a356df24bbe05ac5819e02763e47,Fixed PEP8 errors,geocoder/__init__.py,"@@ -35,8 +35,7 @@ __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 # CORE
 from geocoder.api import get, yahoo, bing, geonames, mapquest, google, mapbox  # noqa
 from geocoder.api import nokia, osm, tomtom, geolytica, arcgis, opencage  # noqa
-from geocoder.api import maxmind, ipinfo, freegeoip, ottawa, here, baidu, w3w, yandex, mapzen, komoot, tamu  # noqa
-from geocoder.api import geocodefarm
+from geocoder.api import maxmind, ipinfo, freegeoip, ottawa, here, baidu, w3w, yandex, mapzen, komoot, tamu, geocodefarm  # noqa
 
 # EXTRAS
 from geocoder.api import timezone, elevation, ip, canadapost, reverse, distance, location  # noqa
",add missing imports,add(api): restore geocodefarm and remove deprecated services,Corrective,"The new message indicates a specific code change involving restoration of a service and removal of deprecated ones, which addresses a functional or structural issue rather than just style or minor adjustments.",1.0,3.0,3.0,"The commit message 'Fixed PEP8 errors' is highly misleading given the actual change in the code diff. The diff shows a restoration of a previously removed import (geocodefarm) that was removed in an earlier commit. This is not a PEP8 error correction but rather a fix to restore functionality. PEP8 is a style guide, and the change here involves actual code structure and import restoration, not formatting. Therefore, the commit message fails to accurately describe the actual change, making it poor and misleading.","The commit message 'add missing imports' is vague and lacks specificity. While it correctly identifies that imports were restored (the geocodefarm module was previously missing and is now included), the message does not explain the context or why the import was missing. A better message would specify which module was restored and perhaps mention that it was previously omitted. Given that the change is small and straightforward, the message is technically correct but insufficiently informative, resulting in a moderate score.","The commit message states 'add(api): restore geocodefarm and remove deprecated services', but the diff shows only the restoration of geocodefarm (which was previously removed) and does not indicate any actual removal of deprecated services. The message is misleading because it claims both addition and removal, while the diff only shows a restoration. The intent is understandable, but the accuracy is flawed. Therefore, it receives a score of 3 — clear and relevant but factually inaccurate."
95d2b7449571a356df24bbe05ac5819e02763e47,Fixed PEP8 errors,geocoder/api.py,"@@ -469,6 +469,7 @@ def tamu(location, **kwargs):
     """"""
     return get(location, provider='tamu', **kwargs)
 
+
 def geocodefarm(location, **kwargs):
     """"""GeocodeFarm Provider
 
",add provider keyword argument to geocodefarm,feat(geocoding): add geocodefarm provider,Semantic,"The new message provides specific context about the feature (geocoding) and the change (adding a geocodefarm provider), making it more informative and meaningful than the generic 'Fixed PEP8 errors'.",1.0,2.0,3.0,"The commit message 'Fixed PEP8 errors' is misleading and inaccurate given the diff. The diff shows the addition of a new function `geocodefarm` and a comment, with no actual PEP8 violations being fixed. There is no evidence of PEP8-related code formatting issues (such as spacing, naming, or line length) being corrected. Therefore, the commit message does not accurately reflect the changes made, making it poor and potentially confusing for other developers.","The commit message is incomplete and lacks context. It mentions adding a 'provider' keyword argument to geocodefarm, but the diff shows no actual addition of such a parameter—only a new function definition. The message does not reflect the actual change made. Additionally, it fails to explain why the change was made or its impact. While it identifies a component involved, it is vague and technically inaccurate, warranting a low score.","The commit message correctly identifies the feature as adding a geocodefarm provider and uses the appropriate 'feat' prefix. However, it lacks context about the purpose or impact of the addition (e.g., why this provider was added, how it improves functionality, or which locations it supports). The diff shows only the addition of a function definition with minimal context, so the message is accurate but insufficiently detailed to fully reflect the change's significance. A score of 3 reflects a basic, correct message that is technically accurate but lacks depth or clarity for full understanding."
95d2b7449571a356df24bbe05ac5819e02763e47,Fixed PEP8 errors,tests/test_geocoder.py,"@@ -249,11 +249,13 @@ def test_tamu():
         zipcode=us_zipcode)
     assert g.ok
 
+
 def test_geocodefarm():
     g = geocoder.geocodefarm(location)
     assert g.ok
     assert str(g.city) == city
 
+
 def test_geocodefarm_reverse():
     g = geocoder.mapquest(ottawa, method='reverse')
     assert g.ok
",add tests for geocodefarm and mapquest,fix: rectification failed,Regressive,"The new message 'fix: rectification failed' suggests a failure in rectification, implying a bug or issue that was not resolved, which contradicts the intent of a fix and represents a regressive change.",1.0,3.0,1.0,"The commit message 'Fixed PEP8 errors' is highly misleading given the code diff. The diff shows the addition of two new test functions (test_geocodefarm and test_geocodefarm_reverse) and a minor change in a test assertion, not any PEP8-related fixes. There is no indication of formatting, naming, or style issues being resolved. Therefore, the commit message does not accurately reflect the actual changes, making it poor and potentially misleading to developers.","The commit message 'add tests for geocodefarm and mapquest' is accurate and covers the main content of the changes. However, it is vague and lacks detail about what exactly was tested (e.g., city matching, reverse geocoding, success/failure assertions). A more detailed message would specify the test cases, such as 'add tests for geocodefarm city matching and mapquest reverse geocoding'. As it stands, the message is clear but insufficiently descriptive, resulting in a moderate score.","The commit message 'fix: rectification failed' is highly inadequate. It does not describe what was actually fixed, lacks context about the change, and does not relate to the code diff provided. The diff shows the addition of new test functions for geocodefarm and geocodefarm_reverse, which suggests the commit is about adding tests, not fixing a rectification issue. The message is vague, technically incorrect (no 'rectification' is mentioned in the code), and fails to provide any meaningful information about the change. A proper commit message should clearly state what was changed and why."
7fa4d3a1c664a67d893f070ad63b58b0a0663587,Fixed wrong method being called in test,tests/test_geocoder.py,"@@ -257,5 +257,5 @@ def test_geocodefarm():
 
 
 def test_geocodefarm_reverse():
-    g = geocoder.mapquest(ottawa, method='reverse')
+    g = geocoder.geocodefarm(ottawa, method='reverse')
     assert g.ok
",add missing semicolon,fix(test): use geocodefarm for reverse geocoding,Corrective,"The new message specifies a concrete fix involving the correct method (geocodefarm) for reverse geocoding, addressing a functional issue rather than just a minor change or formatting update.",3.0,1.0,3.0,"The commit message accurately identifies that the wrong method was being called in the test, which is correct. However, it lacks specific details such as which method was incorrectly used and which one was intended, and it doesn't explain the impact or why this change matters. While it is technically correct and clear enough to convey the issue, it is too vague to be considered excellent. Therefore, a score of 3 reflects a basic but incomplete explanation.","The commit message 'add missing semicolon' is incorrect and misleading. The diff shows a change from using `geocoder.mapquest` to `geocoder.geocodefarm`, which is a functional change involving a method replacement, not the addition of a semicolon. There is no semicolon missing in the code. The message does not accurately reflect the actual change, making it both factually wrong and irrelevant to the diff. Therefore, it receives a low score.","The commit message is clear and indicates a fix related to testing, specifically switching from mapquest to geocodefarm for reverse geocoding. However, it lacks context about why the change was made (e.g., MapQuest was deprecated or not available), and it doesn't mention any potential impact or broader implications. While it correctly identifies the action and the domain (testing), it is somewhat minimal in detail and could be improved with more context. Therefore, it is functional but not excellent."
4c5426a3583733d94dcfb66cbc030f3cbef5d7ac,prevent 'TypeError: argument of type 'NoneType' is not iterable' when content is None after query,geocoder/mapquest.py,"@@ -38,7 +38,7 @@ class Mapquest(Base):
         self._initialize(**kwargs)
 
     def _catch_errors(self):
-        if 'The AppKey submitted with this request is invalid' in self.content:
+        if self.content and 'The AppKey submitted with this request is invalid' in self.content:
             raise ValueError('MapQuest API Key invalid')
 
     def _exceptions(self):
",update mapquest.py,fix(api): prevent ValueError when content is empty,Corrective,"The new message addresses a runtime error (ValueError) when content is empty, which is a bug fix ensuring the application handles empty content safely, improving reliability and stability.",4.0,2.0,5.0,"The commit message accurately describes the fix and addresses a potential issue when `self.content` is None, which could cause a TypeError. The diff shows a logical change to check `self.content` before attempting to search within it, which prevents the error. The message is clear and relevant to the change, though it could be slightly more specific about the context (e.g., API response handling). Overall, it's well-written and technically accurate, justifying a high score.","The commit message 'update mapquest.py' is overly vague and provides no information about the specific changes or their purpose. While the diff shows a small but meaningful improvement—adding a check for `self.content` being truthy before searching for an error message—the commit message fails to convey what was fixed or why. A better message would indicate the issue addressed (e.g., 'Fix potential KeyError when validating MapQuest API key'). Thus, it receives a score of 2 for lacking detail and context.","The commit message accurately reflects the change made in the code diff. The fix addresses a potential ValueError when `self.content` is empty by adding a check `self.content and ...`, which prevents the error from being raised in cases where the content is missing. The message is concise, relevant, and clearly explains the purpose of the fix — preventing a ValueError when content is empty. This is an excellent commit message that matches the actual change in behavior and improves robustness."
3d00acf6285599f33f5ac999f6bcdfec2701485d,Fix PEP8-check problems,geocoder/tgos.py,"@@ -18,16 +18,18 @@ Beause of different coordinate system, this project need ""pyproj"" to transform t
 It's HTTP request need session state, so ""beautifulsoup4"" is needed to extract ""pagekey"" field.
 '''
 class Tgos(Base):
+
+
     provider = 'tgos'
-    method   = 'geocode'
+    method = 'geocode'
 
     def __init__(self, location, **kwargs):
-        self.url    = 'http://map.tgos.nat.gov.tw/TGOSCloud/Generic/Project/GHTGOSViewer_Map.ashx'
+        self.url = 'http://map.tgos.nat.gov.tw/TGOSCloud/Generic/Project/GHTGOSViewer_Map.ashx'
         self.params = {
-            'method':     'queryaddr',
+            'method': 'queryaddr',
             'useoddeven': 'false',
-            'address':    location,
-            'sid':        'Unknown'
+            'address': location,
+            'sid': 'Unknown'
         }
         self._initialize(**kwargs)
 
@@ -48,30 +50,30 @@ class Tgos(Base):
     @property
     def lat(self):
         entry = self._get_tgos_entry()
-        if entry != None:
+        if entry is not None:
             return entry['lat']
         return 0
 
     @property
     def lng(self):
         entry = self._get_tgos_entry()
-        if entry != None:
+        if entry is not None:
             return entry['lng']
         return 0
 
     @property
     def address(self):
         entry = self._get_tgos_entry()
-        if entry != None:
+        if entry is not None:
             return entry['FULL_ADDR']
         return ''
 
     @property
     def housenumber(self):
         entry = self._get_tgos_entry()
-        if entry != None:
+        if entry is not None:
             m = re.match(u'(\d+)號', entry['NUMBER'])
-            if m != None:
+            if m is not None:
                 num = int(m.group(1))
                 return num
         return 0
@@ -79,7 +81,7 @@ class Tgos(Base):
     @property
     def street(self):
         entry = self._get_tgos_entry()
-        if entry != None:
+        if entry is not None:
             numch = u'零一二三四五六七八九'
             if entry['SECTION'] != '':
                 street = u'%s%s段' % (entry['ROAD'], numch[int(entry['SECTION'])])
@@ -91,7 +93,7 @@ class Tgos(Base):
     @property
     def city(self):
         entry = self._get_tgos_entry()
-        if entry != None:
+        if entry is not None:
             return entry['COUNTY']
         return 0
 
@@ -113,7 +115,7 @@ class Tgos(Base):
             node = soup.find('script', {'id': 'sircMessage1'})
             script = node.get_text().strip()
             m = re.search('window\.sircMessage\.sircPAGEKEY\s?=\s?\'([\w\+%]+)\';', script)
-            if m != None:
+            if m is not None:
                 pagekey = m.group(1)
                 for c in r.cookies:
                     cookies[c.name] = c.value
",add missing docstrings,fix(tgos): correct None comparisons and fix typo in provider initialization,Corrective,"The new message specifies concrete fixes—correcting None comparisons and fixing a typo in provider initialization—indicating actual bugs or errors being addressed, which falls under corrective changes.",2.0,1.0,4.0,"The commit message 'Fix PEP8-check problems' is overly vague and does not accurately reflect the actual changes. While the diff shows several instances of `!= None` being replaced with `is not None`, which is a Python best practice, the change is not merely a PEP8 issue—it's a more fundamental improvement in code correctness and readability. Additionally, the commit message fails to mention the specific improvements (e.g., using `is not None` instead of `!= None`), which makes it uninformative for developers reviewing the change. A better message would specify the actual fix, such as 'Fix None comparison using 'is' instead of '==' for improved Python correctness and PEP8 compliance.' Therefore, while the message is technically related to PEP8, it lacks specificity and clarity, warranting a low-to-mid score.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff shows no addition of docstrings—instead, it contains numerous fixes of Python comparisons using `is not None` instead of `!= None`, which are syntactic and semantic improvements. These changes are not related to documentation. The commit message fails to accurately describe the actual work done, making it misleading and incorrect. Therefore, it receives a low score.","The commit message accurately reflects the changes in the code: it correctly identifies the fix of None comparisons (using `is not None` instead of `!= None`) across multiple properties and the typo in the provider initialization (though the provider is already correctly set as 'tgos' and no actual typo was introduced). The message is concise and relevant, covering the main intent of the changes. However, it slightly underexplains the scope—there are multiple `if entry is not None` changes, and the fix is more widespread than just 'provider initialization'. A score of 4 reflects accuracy and clarity, but a minor gap in scope description prevents it from being 'excellent'."
ff14c00613407eb3185bf556d41b0810043d77ed,"Fix PEP8-check problems, comment of class.",geocoder/tgos.py,"@@ -10,16 +10,15 @@ import urllib
 from bs4 import BeautifulSoup
 from geocoder.base import Base
 
-'''
-TGOS Geocoding Service
 
-TGOS Map is official map service of Taiwan. It use EPSG:3826 coordinate system.
-Beause of different coordinate system, this project need ""pyproj"" to transform the coordinate.
-It's HTTP request need session state, so ""beautifulsoup4"" is needed to extract ""pagekey"" field.
-'''
 class Tgos(Base):
+    '''
+    TGOS Geocoding Service
 
-
+    TGOS Map is official map service of Taiwan. It use EPSG:3826 coordinate system.
+    Beause of different coordinate system, this project need ""pyproj"" to transform the coordinate.
+    It's HTTP request need session state, so ""beautifulsoup4"" is needed to extract ""pagekey"" field.
+    '''
     provider = 'tgos'
     method = 'geocode'
 
",add missing tags,docs(update): add description for Tgos geocoding service,Cosmetic,"The change involves updating documentation with a description for a service, which is a minor, non-functional enhancement to clarity and completeness without altering behavior or fixing errors.",2.0,2.0,3.0,"The commit message 'Fix PEP8-check problems, comment of class.' is vague and does not accurately reflect the actual changes. The diff shows that the class docstring was reorganized and formatted with proper indentation and structure, but the commit message incorrectly implies PEP8 issues were fixed, which is not evident in the diff. The comment itself was not fixed for PEP8—rather, it was merely restructured for clarity and consistency. A more accurate message would specify the improvement in documentation structure or formatting. Thus, while the change is minor and relevant, the commit message is misleading and lacks specificity, warranting a low score.","The commit message 'add missing tags' is extremely vague and provides no context about what was actually changed or why. The diff shows a refactoring of docstring formatting and content, not the addition of tags. The message fails to indicate the nature of the change (e.g., improving documentation, fixing formatting), the affected component (the Tgos class docstring), or its impact. While it may imply some documentation improvement, the term 'tags' is ambiguous and misleading in this context. A better message would describe the change clearly, such as 'improve Tgos class docstring for clarity and completeness'. Thus, the message is minimally informative and only scores a 2.","The commit message correctly identifies the nature of the change as a documentation update and mentions the specific component affected (Tgos geocoding service). However, it is overly generic and lacks detail about what exactly was updated or why. The actual diff shows that the description was moved from a commented block to a docstring within the class, which is a meaningful improvement in code readability and maintainability. The commit message does not reflect this structural or semantic change, only stating 'add description' without context. Thus, while it is accurate in intent, it fails to convey the technical significance of the change, resulting in a moderate score."
fbdd648d22637b78d4f81072018a14821eb96734,Fix Python 3.x try ... catch ... problem.,geocoder/tgos.py,"@@ -133,5 +133,5 @@ if __name__ == '__main__':
     try:
         g = Tgos('台北市內湖區內湖路一段735號')
         g.debug()
-    except Exception, ex:
+    except Exception as ex:
         print(ex)
",update test_tgos.py,fix(deps): update exception syntax to use as keyword,Cosmetic,"The change updates the exception syntax to use keyword form, which is a stylistic improvement in code readability and consistency, rather than fixing a functional bug or altering behavior.",3.0,2.0,2.0,"The commit message correctly identifies the fix as addressing a Python 3.x syntax issue by updating the exception handling syntax from the old 'except Exception, ex:' to the modern 'except Exception as ex:'. This is a valid and necessary change. However, the message is overly generic and lacks context—such as the specific version of Python affected or why this change was needed beyond 'Python 3.x'. A more detailed message (e.g., 'Fix syntax error in exception handling for Python 3.x: use 'as' keyword instead of comma') would be better. Thus, it's accurate but not sufficiently descriptive, earning a mid-level score.","The commit message 'update test_tgos.py' is overly vague and provides no context about what was changed or why. While the diff shows a minor syntax update from Python 2-style exception handling to Python 3-style (using 'as ex' instead of ', ex'), the commit message fails to convey the significance of the change. A better message would specify the change, such as 'Update exception handling to Python 3 syntax in test_tgos.py'. Therefore, it receives a score of 2 for lacking detail and context.","The commit message incorrectly states that this is a 'deps' fix and refers to 'update exception syntax to use as keyword', which is misleading. The change is not about dependencies but about Python exception syntax (updating from old-style exception handling to modern 'as' syntax). The message fails to accurately reflect the actual change. While the fix itself is valid and minor, the commit message is poorly worded and misrepresents the nature of the change, reducing its clarity and usefulness."
906f478f15792215254605238785a033b8b10bc4,fixed url issue to support language for here_reverse and google,geocoder/google.py,"@@ -46,7 +46,7 @@ class Google(Base):
             'key': None if self.client and self.client_secret else kwargs.get('key', google_key),
             'client': self.client,
             'bounds': kwargs.get('bounds', ''),
-            'language': kwargs.get('bounds ', ''),
+            'language': kwargs.get('language ', ''),
             'region': kwargs.get('region', ''),
             'components': kwargs.get('components', ''),
         }
",add missing tag,fix: rectification failed,Regressive,"The new message 'fix: rectification failed' suggests a failure or unresolved issue, indicating a regression rather than an improvement over the original fix.",2.0,1.0,2.0,"The commit message is partially relevant but contains a critical error: it mentions fixing a 'url issue to support language for here_reverse and google', yet the diff shows a typo in the parameter name — 'bounds ' becomes 'language ' — which is likely a copy-paste error. The actual change appears to be a typo in the code (incorrectly using 'language ' instead of 'language'), not a fix for language support. The message misrepresents the change and lacks clarity or accuracy. While it addresses a potential issue, the explanation is misleading and technically incorrect, reducing its quality to a score of 2.","The commit message 'add missing tag' is extremely vague and provides no context about what was actually changed or why. The diff shows a typo in the code: 'bounds ' was mistakenly written instead of 'bounds' and 'language ' instead of 'language'. The message fails to indicate the actual fix, the affected functionality, or the intended behavior. A proper commit message should clearly describe the change, such as 'Fix typo in language and bounds parameter keys'. Therefore, the message is poor and does not reflect the actual change made.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple typo in the code: 'bounds ' was incorrectly used in the 'language' field, which should be 'language'. The message fails to convey the actual change or its significance. While it is categorized as a 'fix', the term 'rectification failed' is unclear and unhelpful. A better message would specify the actual issue, such as 'fix: correct typo in language parameter key from bounds to language'."
906f478f15792215254605238785a033b8b10bc4,fixed url issue to support language for here_reverse and google,geocoder/here_reverse.py,"@@ -39,6 +39,7 @@ class HereReverse(Here, Base):
             'app_id': app_id,
             'app_code': app_code,
             'mode': 'retrieveAddresses',
+            'language': kwargs.get('language ', ''),
             'gen': 8,
         }
         self._initialize(**kwargs)
",add missing kwargs to herereverse example,fix: rectification failed,Regressive,"The new message 'fix: rectification failed' suggests a failure in rectification, implying a regression or unresolved issue, rather than a positive fix or improvement over the old message which addressed a real problem.",2.0,2.0,1.0,"The commit message is partially relevant but contains a significant error: it mentions 'support language for here_reverse and google', yet the diff only shows a change for HereReverse (not Google). Additionally, the code change has a syntax error — `kwargs.get('language ', '')` should be `kwargs.get('language', '')` (extra space in the key). The message fails to acknowledge the bug in the code and misrepresents the scope. While it identifies a language parameter addition, the technical accuracy and clarity are lacking, warranting a low score.","The commit message is vague and does not accurately reflect the change. It says 'add missing kwargs to herereverse example', but the actual change is adding a 'language' parameter with a malformed default ('language ' with a trailing space). The parameter is not truly 'missing' in the sense of being absent from the method signature or documentation, and the syntax error (trailing space) makes the code invalid. The message fails to describe the actual fix or its impact, and the code change itself is problematic. A better message would clarify the intent and correct the issue. Therefore, it receives a score of 2 (Fair) for lack of accuracy and clarity.","The commit message 'fix: rectification failed' is vague, unclear, and provides no meaningful context about what was actually fixed or why. It does not describe the change in the code, the issue it resolves, or its impact. The diff shows a simple addition of a 'language' parameter with a typo ('language ' with a trailing space), which suggests a clear intent to add language support. However, the commit message fails to reflect this. A proper message should indicate the fix for a missing or incorrectly set language parameter, such as 'fix: add language parameter to reverse geocoding request'. Therefore, the message is poor and does not match the actual change."
62f0470a81b377d0c320492f4399ee033e20e829,fixes #188,geocoder/arcgis.py,"@@ -23,7 +23,7 @@ class Arcgis(Base):
     method = 'geocode'
 
     def __init__(self, location, **kwargs):
-        self.url = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find'
+        self.url = 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find'
         self.location = location
         self.params = {
             'f': 'json',
",arcgis class,fix(geocode): use https instead of http for arcgis geocoding url,Corrective,"The change addresses a security and functionality issue by switching from HTTP to HTTPS for ArcGIS geocoding URLs, ensuring secure communication and better reliability.",2.0,1.0,5.0,"The commit message 'fixes #188' is minimal and lacks detail about what was fixed or why. While it references an issue, it does not explain the change (e.g., updating HTTP from HTTP to HTTPS), which is critical for understanding the impact. The diff shows a clear change from HTTP to HTTPS, but the commit message fails to communicate this context. A better message would specify the change, such as 'Updates ArcGIS geocoding URL to use HTTPS for security and compatibility'. Thus, the message is insufficiently descriptive and only partially informative, warranting a score of 2.","The commit message 'arcgis class' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a simple update from HTTP to HTTPS in the URL, which is a security improvement, but this context is missing from the message. A meaningful commit message should describe the change and its significance, such as 'Update ArcGIS URL to HTTPS for secure connections'. Therefore, the message is poor and receives a score of 1.","The commit message is clear, concise, and accurately reflects the change made in the code diff. It specifies the type of change ('fix'), the affected component ('geocode'), and the exact nature of the update (switching from HTTP to HTTPS for the ArcGIS geocoding URL). This provides sufficient context for any developer reviewing the commit to understand the purpose and impact of the change without needing to examine the code diff."
62f0470a81b377d0c320492f4399ee033e20e829,fixes #188,geocoder/arcgis_reverse.py,"@@ -24,7 +24,7 @@ class ArcgisReverse(Arcgis):
     method = 'reverse'
 
     def __init__(self, location, **kwargs):
-        self.url = 'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode'
+        self.url = 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode'
         self.location = location
         location = Location(location)
         self.params = {
",reverse class,fix(geocoding): use HTTPS for ArcGIS reverse geocoding URL,Semantic,"The new message provides more specific context about the fix, including the component (geocoding) and the technical detail (using HTTPS), enhancing clarity and meaning beyond the generic 'fixes #188'.",2.0,1.0,5.0,"The commit message 'fixes #188' is minimal and lacks context. While it references an issue, it does not explain what was fixed, why it was necessary, or how it impacts the functionality. The diff shows a simple change from HTTP to HTTPS in the URL, which is a security improvement, but this detail is missing from the commit message. A better message would clarify the change and its significance. Therefore, the message is functional but insufficiently informative, warranting a score of 2.","The commit message 'reverse class' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a simple update from HTTP to HTTPS in the URL, which is a security improvement, but this context is entirely missing from the commit message. A good commit message should explain the significance of the change, such as 'Updated URL from HTTP to HTTPS for secure geocoding in reverseGeocode endpoint'. Therefore, the message is poor and lacks clarity, relevance, and context.","The commit message is clear, concise, and directly relates to the change made in the code diff. It identifies the type of change ('fix'), the affected feature ('geocoding'), and specifically states the improvement ('use HTTPS for ArcGIS reverse geocoding URL'), which matches the actual change from HTTP to HTTPS in the URL. This is an excellent commit message that provides sufficient context for understanding the purpose and impact of the change."
ac35235a8e43e07cbefd0c0a63ad43c63d5e9445,Version change,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.14.0'
+__version__ = '1.15.0'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue (rectification failed) that was previously not addressed, suggesting a fix for a bug or failure scenario, which falls under corrective improvement.",2.0,1.0,1.0,"The commit message 'Version change' is overly generic and provides no context about what was changed or why. While it correctly indicates a version update, it lacks details such as the version bump (from 1.14.0 to 1.15.0) or any significant improvements, fixes, or features associated with the update. A better message would include the version number and a brief explanation, e.g., 'Bump version to 1.15.0 with consistent JSON responses across providers.'","The commit message 'add missing docstrings' is highly misleading given the actual change in the code diff. The diff shows only a version number update from '1.14.0' to '1.15.0', not any addition of docstrings. Therefore, the commit message does not accurately reflect the changes made, making it inappropriate and misleading. A correct message would have been something like 'bump version to 1.15.0'. This misalignment severely undermines trust in the commit message, resulting in a poor score.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows a simple version bump from '1.14.0' to '1.15.0', which is a version update, not a fix for a rectification failure. The message fails to describe what was fixed, why it was fixed, or how it relates to the change. A proper commit message should clearly explain the nature of the change, which is missing here."
410b0ab0ccc043370d6b67a8111c1e7000656620,Added Place_ID field and fix language param,geocoder/google.py,"@@ -47,7 +47,7 @@ class Google(Base):
             'key': None if self.client and self.client_secret else kwargs.get('key', google_key),
             'client': self.client,
             'bounds': kwargs.get('bounds', ''),
-            'language': kwargs.get('language ', ''),
+            'language': kwargs.get('language', ''),
             'region': kwargs.get('region', ''),
             'components': kwargs.get('components', ''),
         }
@@ -147,6 +147,10 @@ class Google(Base):
     @property
     def lng(self):
         return self.parse['location'].get('lng')
+        
+    @property
+    def place(self):
+        return self.parse.get('place_id')
 
     @property
     def quality(self):
",add missing class properties,feat(google): add place_id property to parsed location,Semantic,"The new message provides more specific context by indicating the feature scope (google), the exact change (add place_id property), and the context (parsed location), improving clarity and semantic precision over the old message.",3.0,3.0,3.0,"The commit message correctly identifies two changes: adding a `place` property to expose the `place_id` and fixing a typo in the language parameter (changing 'language ' to 'language'). However, the message is brief and lacks context—such as why the place_id was added or how it improves functionality. While accurate, it doesn't fully explain the impact or intent, which reduces its completeness. Thus, it is functional but not excellent.","The commit message 'add missing class properties' is vague and lacks specificity. While it correctly identifies that new properties were added (lng and place), it does not mention the exact changes or their purpose. The diff shows the addition of two properties: 'lng' and 'place', with 'place' returning a 'place_id' from the parse data. A better message would specify what was added and why. The message is minimally accurate but insufficiently detailed for clarity, hence a score of 3.","The commit message accurately reflects the change by indicating the addition of a `place` property to the Google class that returns the `place_id` from the parsed location. However, it lacks context about why this property is useful or how it improves functionality (e.g., for place searches or integration with Google Places API). The message is clear and relevant, but could be improved with more detail about the purpose or impact. Thus, it is functional but not fully comprehensive, earning a moderate score."
416fe3115554b32391072f1f398d9a529327727f,Version patch change 1.15.1,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.15.0'
+__version__ = '1.15.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a specific issue (rectification failed), suggesting a bug correction rather than a cosmetic or trivial change.",2.0,1.0,1.0,"The commit message is overly minimal and lacks context. While it correctly indicates a version bump to 1.15.1, it does not explain why the version was incremented or what changes were made in this release. A better message would include a brief description of the improvement (e.g., ""Fixed inconsistent JSON responses across providers""). As it only states the version change without any meaningful context, it falls short of being informative or useful for developers reviewing the commit history.","The commit message 'add missing docstrings' is highly misleading given the actual change in the diff. The diff shows only a version bump from '1.15.0' to '1.15.1', not the addition of any docstrings. Therefore, the commit message does not accurately reflect the changes made, making it incorrect and misleading. A proper message would have been something like 'Bump version to 1.15.1'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.15.0' to '1.15.1', which is a simple version update, not a fix for a rectification failure. The message lacks context, specificity, and clarity about what was fixed or why. A proper commit message should describe the actual change and its purpose, such as 'chore: update version to 1.15.1'. Therefore, the commit message is poor and does not match the actual diff."
92c31cbb48f8dea7404cdf835fdf1c399ac77210,Fixed CLI api key issue,geocoder/base.py,"@@ -73,10 +73,14 @@ class Base(object):
         return requests.get(url, **kwargs)
 
     def _get_api_key(self, base_key, **kwargs):
-        key = kwargs.get('key', base_key)
-        if not key:
-            raise ValueError('Provide API Key')
-        return key
+        key = kwargs.get('key')
+        # Retrieves API Key from method argument first
+        if key:
+            return key
+        # Retireve API Key from Environment variables
+        elif base_key:
+            return base_key
+        raise ValueError('Provide API Key')
 
     def _connect(self, **kwargs):
         self.status_code = 'Unknown'
",add missing docstring,feat(api): enhance api key retrieval with environment fallback,Semantic,"The new message provides more context by indicating it's a feature enhancement with environment fallback, rather than just fixing a bug, thus improving semantic clarity and conveying the nature of the change.",2.0,1.0,4.0,"The commit message 'Fixed CLI api key issue' is too vague and lacks specificity. It does not describe what was actually changed, why the change was necessary, or how it resolves the issue. The diff shows a significant improvement in the API key retrieval logic—now checking method arguments before falling back to environment variables—which is a meaningful enhancement. However, the commit message fails to reflect this technical detail or context, making it insufficient for understanding the impact. A better message would describe the fix, such as 'Improved API key retrieval by prioritizing method arguments over environment variables to ensure consistent key handling in CLI usage.'","The commit message 'add missing docstring' is highly inadequate given the actual changes in the code. The diff shows a significant refactoring of the _get_api_key method, including restructuring logic, adding comments, and improving error handling. These changes go well beyond simply adding a docstring. A meaningful commit message should reflect the actual nature of the changes, such as 'refactor _get_api_key to prioritize method arguments and fall back to environment variables with improved error handling'. The current message is misleading and fails to convey the real scope and intent of the changes, making it poor.","The commit message accurately reflects the change: it enhances the API key retrieval by adding a fallback to environment variables when the method argument is missing. The message is concise, relevant, and properly scoped to the feature ('feat(api)'). However, it could be slightly more specific about the fallback behavior (e.g., mentioning environment variables explicitly), which would make it excellent. As it is, it's clear, correct, and sufficiently descriptive for a typical code review — just missing a tiny bit of precision to reach an 'excellent' score."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.16.1'
+__version__ = '1.17.0'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a correction to a previously failing functionality, which aligns with a corrective improvement.",1.0,1.0,1.0,"The commit message does not accurately reflect the changes in the code diff. The diff only shows an increment in the version number from '1.16.1' to '1.17.0', which is a version update, not a fix for an encoding issue in Python 2. The commit message falsely claims to 'Fix Encoding issue Python2' with no evidence or context in the diff. Additionally, there is no mention of encoding, Python 2, or any related functionality. The attribution to Sergei Grabalin is also not supported by the diff. Therefore, the message is misleading and does not match the actual change, resulting in a poor score.","The commit message 'add missing docstrings' is highly inconsistent with the actual change in the diff, which only updates the version number from '1.16.1' to '1.17.0'. There are no docstrings added or modified in the code. The message misrepresents the change, making it misleading and inaccurate. Therefore, the score is 1 (Poor) for a significant mismatch between the commit message and the actual code change.","The commit message 'fix: rectification failed' is highly inadequate as it does not describe what was actually fixed or why the change was made. The diff shows only a version bump from '1.16.1' to '1.17.0', which is a routine update and not a fix for a failure. The message is vague, lacks context, and fails to communicate the actual nature of the change. A proper commit message should explain the issue and the resolution, not just reference a failed rectification without details."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/arcgis_reverse.py,"@@ -28,7 +28,7 @@ class ArcgisReverse(Arcgis):
         self.location = location
         location = Location(location)
         self.params = {
-            'location': '{}, {}'.format(location.lng, location.lat),
+            'location': u'{}, {}'.format(location.lng, location.lat),
             'f': 'pjson',
             'distance': kwargs.get('distance', 50000),
             'outSR': kwargs.get('outSR', ''),
",update arcgis_reverse.py,fix(core): use unicode string format for location,Corrective,"The change addresses a specific encoding issue by using Unicode string format, which ensures proper handling of text in Python 2, thereby fixing a potential data corruption or display problem.",2.0,2.0,3.0,"The commit message mentions a 'Fixed Encoding issue Python2' but the diff shows only a change from `'{}, {}'.format(...)` to `u'{}, {}'.format(...)` — which is a Unicode string literal in Python 2. While this could be relevant for encoding, the change is minimal and the commit message is vague about the actual problem and its impact. The message lacks context about why this was necessary, who it affects, or what the original issue was. It also doesn't clearly indicate that this was a fix for encoding, as the change is more about string type than encoding. Therefore, it's only mildly informative and technically accurate, warranting a score of 2.","The commit message 'update arcgis_reverse.py' is extremely vague and provides no information about what was changed or why. While the diff shows a change from regular string formatting to Unicode string formatting (u'{}'), this is a minor and potentially unnecessary change. A better commit message would specify the change, such as 'Use Unicode string formatting in ArcGIS reverse location parameter to ensure consistent string handling'. Since the message lacks context, impact, and detail, it receives a score of 2 (barely adequate).","The commit message is technically correct in stating that a unicode string format is used, which is a minor improvement over the previous string formatting. However, it lacks context about why this change was necessary (e.g., compatibility, encoding issues, or correctness in certain environments) and does not clearly indicate the impact or risk. The change itself is small and likely safe, but the message is overly brief and doesn't convey the significance or rationale behind the fix. A score of 3 reflects that it is accurate and relevant but lacks depth and context."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/base.py,"@@ -55,14 +55,14 @@ class Base(object):
 
     def __repr__(self):
         if self.address:
-            return ""<[{0}] {1} - {2} [{3}]>"".format(
+            return u'<[{0}] {1} - {2} [{3}]>'.format(
                 self.status,
                 self.provider.title(),
                 self.method.title(),
                 six.text_type(self.address)
             )
         else:
-            return ""<[{0}] {1} - {2}>"".format(
+            return u'<[{0}] {1} - {2}>'.format(
                 self.status,
                 self.provider.title(),
                 self.method.title()
",update core.py,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a correction to a previously failing functionality, which aligns with a corrective improvement.",3.0,2.0,1.0,"The commit message mentions a 'Fixed Encoding issue Python2' and credits Sergei Grabalin, which is relevant to the change. However, the diff shows a simple change from regular string formatting to Unicode formatting (`u'<...>'`), which is more about consistency or string handling in Python 2 than a true encoding issue. The message lacks technical detail about what exactly was fixed or why it was necessary. While it correctly identifies the context (Python 2), it is vague and does not clearly explain the impact or the problem being solved. Thus, it is moderately informative but not excellent.","The commit message 'update core.py' is overly vague and provides no information about what was changed or why. While the diff shows a minor change in string formatting from regular format to unicode format (u'<...>'), the commit message fails to convey the significance of the change, such as the intent to ensure Unicode compatibility or to handle string types consistently. A better message would specify the change, e.g., 'Ensure Unicode consistency in string formatting for repr output in Base class'. Therefore, the message is only minimally informative and deserves a score of 2.","The commit message 'fix: rectification failed' is highly unclear and uninformative. It does not describe what was actually fixed, why it was necessary, or what problem it solves. The term 'rectification failed' is vague and possibly a mistranslation or misstatement. A good commit message should clearly explain the change and its purpose. Given the diff shows a simple change from regular string formatting to Unicode formatting (using `u'<'`), a more appropriate message would be something like 'fix: use Unicode literal in string formatting for consistency'. Therefore, the commit message is poor in clarity, specificity, and usefulness."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/bing_reverse.py,"@@ -26,8 +26,8 @@ class BingReverse(Bing):
 
     def __init__(self, location, **kwargs):
         self.location = str(Location(location))
-        self.url = 'http://dev.virtualearth.net/' \
-                   'REST/v1/Locations/{0}'.format(self.location)
+        self.url = u'http://dev.virtualearth.net/' \
+                    'REST/v1/Locations/{0}'.format(self.location)
         self.params = {
             'o': 'json',
             'key': self._get_api_key(bing_key, **kwargs),
",update bing_reverse.py,fix(bing): use unicode string for URL,Corrective,"The change addresses a potential encoding issue by using unicode strings for URLs, which ensures proper handling of international characters and prevents encoding-related bugs in Python2 environments.",2.0,2.0,3.0,"The commit message mentions a 'Fixed Encoding issue Python2' but the diff shows only a change from regular string literal to Unicode string (u'http://...'). This change is minor and likely addresses Unicode handling in Python 2, which is relevant. However, the message is vague and lacks context—such as why the encoding issue existed, what the original problem was, or how this fix specifically resolves it. The mention of Sergei Grabalin adds no value without explaining their contribution. Overall, it's technically accurate but insufficiently detailed or explanatory, warranting a low-medium score.","The commit message 'update bing_reverse.py' is overly vague and provides no information about the actual change or its significance. While the diff shows a minor update to the URL string by adding a Unicode prefix (u'http'), this change is trivial and not clearly justified in the message. A better message would specify the change, such as 'Add Unicode prefix to Bing reverse geocoding URL for consistency'. Therefore, the message lacks detail and context, resulting in a low but not completely poor score.","The commit message 'fix(bing): use unicode string for URL' is accurate in indicating a change, but it is overly vague and lacks context. While the diff shows a change from a regular string to a Unicode string (using `u'...'`), the significance of this change is not clearly explained—especially since in Python 3, strings are Unicode by default, and in Python 2, the use of `u'...'` is often just a matter of style or compatibility. Without context about why this was necessary (e.g., compatibility with older Python versions, handling of international characters, or API requirements), the message falls short of being excellent. It is correct and relevant, but lacks depth, so a score of 3 reflects a basic, functional but insufficient message."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/distance.py,"@@ -87,8 +87,8 @@ def haversine(point1, point2, **kwargs):
             raise ValueError(""Unknown units of measurement"")
 
     else:
-        print('[WARNING] Error calculating the following two locations.\n'
-              'Points: {0} to {1}'.format(point1.location, point2.location))
+        print(u'[WARNING] Error calculating the following two locations.\n'
+               'Points: {0} to {1}'.format(point1.location, point2.location))
 
 if __name__ == '__main__':
     d = Distance('Ottawa, ON', 'Toronto, ON', 'Montreal, QC')
",update haversine.py,fix(utils): use unicode for warning message,Corrective,"The change addresses a potential encoding issue by ensuring warning messages use Unicode, which corrects a fundamental handling problem in Python 2, improving reliability and consistency in message processing.",2.0,2.0,3.0,"The commit message indicates a fix for an encoding issue in Python 2, which is plausible given the change from `print` with ASCII to Unicode (`u'[WARNING]'`). However, the commit message is vague and lacks specific details about the encoding issue (e.g., what was the original problem, why Unicode was needed, or how this affects behavior). It also does not clearly state that the change was to support Unicode in print statements, which is the actual change in the diff. While the fix is minor and technically relevant, the message fails to provide sufficient context or technical detail to be considered clear or meaningful. Therefore, it receives a score of 2 — barely adequate but lacking in clarity and specificity.","The commit message 'update haversine.py' is extremely vague and provides no information about what was actually changed or why. While the diff shows a minor update to use Unicode (u'[WARNING]') in a print statement, this change is trivial and contextually insignificant. A better message would specify the nature of the change, such as 'Use Unicode in warning message for consistent encoding in haversine.py'. Since the message offers no actionable insight into the change, it falls short of being meaningful or useful for code review or future reference, resulting in a score of 2 (Fair).","The commit message 'fix(utils): use unicode for warning message' is technically accurate and indicates a change related to encoding. However, the diff shows a simple replacement of ASCII print with Unicode (using `u'[WARNING]'`), which is a minor and potentially questionable change—using Unicode in a print statement for a warning message is not a common or necessary practice in Python 3 (where strings are already Unicode by default). The change lacks context about why Unicode was specifically needed, and the fix is minimal and possibly redundant. Thus, while the message correctly identifies the type of change and the module, it is not sufficiently detailed or justified, resulting in a moderate score."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/freegeoip.py,"@@ -48,11 +48,12 @@ class FreeGeoIP(Base):
     @property
     def address(self):
         if self.city:
-            return '{0}, {1} {2}'.format(self.city, self.state, self.country)
+            return u'{0}, {1} {2}'.format(self.city, self.state, self.country)
         elif self.state:
-            return '{0}, {1}'.format(self.state, self.country)
-        else:
-            return '{0}'.format(self.country)
+            return u'{0}, {1}'.format(self.state, self.country)
+        elif self.country:
+            return u'{0}'.format(self.country)
+        return u''
 
     @property
     def postal(self):
",add missing semicolon,fix(address): use unicode strings for address formatting,Corrective,"The change addresses a specific bug related to encoding by using Unicode strings for address formatting, which corrects a potential issue in string handling, particularly in Python 2 environments.",2.0,1.0,3.0,"The commit message mentions a 'Fixed Encoding issue Python2' and credits Sergei Grabalin, but the code diff shows only a change from regular string formatting to Unicode strings (u'...') using `u'{0}'`. This change is more about consistency in string handling (especially in Python 2 where Unicode strings are important for internationalization), rather than fixing a critical encoding issue. The message is vague and lacks specificity about what exactly was fixed or why. While the change is reasonable, the commit message does not clearly communicate the intent or impact, so it falls short of being excellent but is not entirely poor either.","The commit message 'add missing semicolon' is completely inaccurate and misleading. The diff shows no semicolon being added or removed; instead, it shows changes to string formatting using Unicode literals (u'{0}'), which indicates a change in encoding or string handling, not a semicolon. The message does not reflect the actual changes in the code and provides no context about the purpose or impact of the changes. Therefore, it is poor and misleading.","The commit message correctly identifies the intent of the change—using Unicode strings for address formatting—which is relevant to the diff. However, it lacks specificity about why Unicode was necessary (e.g., handling international characters, avoiding encoding issues) and does not clearly explain the impact or context (e.g., edge cases, backward compatibility). The change is technically sound, but the message is generic and could be more informative. Thus, it is moderately accurate and useful but not excellent."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/geolytica.py,"@@ -69,9 +69,9 @@ class Geolytica(Base):
     @property
     def address(self):
         if self.street_number:
-            return '{0} {1}, {2}'.format(self.street_number, self.route, self.locality)
+            return u'{0} {1}, {2}'.format(self.street_number, self.route, self.locality)
         elif self.route and self.route != 'un-known':
-            return '{0}, {1}'.format(self.route, self.locality)
+            return u'{0}, {1}'.format(self.route, self.locality)
         else:
             return self.locality
 
",add missing semicolon,fix(address): use unicode strings for address formatting,Corrective,"The change addresses a specific issue in address formatting by using unicode strings, which resolves potential encoding problems, particularly relevant in Python 2 environments where string encoding can cause inconsistencies.",3.0,1.0,4.0,"The commit message indicates a fix for an encoding issue in Python 2, which is relevant to the code change. The diff shows the replacement of regular string formatting with Unicode strings (using `u'{...}'`), which is a common practice to ensure proper encoding handling in Python 2. However, the commit message is vague and lacks specific details such as the exact encoding problem, why Python 2 was affected, or how this change resolves the issue. While the change is technically sound and likely addresses encoding concerns, the message does not clearly explain the impact or context, resulting in a moderate score rather than excellent.","The commit message 'add missing semicolon' is completely incorrect and misleading. The diff shows no semicolon being added or removed; instead, it changes string formatting from regular format to Unicode format (u'{0}...'). The actual change is about using Unicode literals for string formatting, not adding a semicolon. The commit message fails to accurately describe the change, misrepresents the diff, and does not reflect the real intent or impact of the code modification. Therefore, it is poor and should be scored 1.","The commit message accurately reflects the change made in the code diff, which is the replacement of regular strings with Unicode strings (using `u'...'`) in address formatting. This is a relevant and specific fix, especially for internationalization or string handling. While the message is concise and correct, it could be slightly more detailed (e.g., mentioning the specific properties or context), but overall it clearly communicates the intent. Thus, it is solid and appropriate for a code change of this nature, warranting a high score."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/google_timezone.py,"@@ -33,7 +33,7 @@ class Timezone(Base):
         self._initialize(**kwargs)
 
     def __repr__(self):
-        return ""<[{0}] {1} [{2}]>"".format(self.status, self.provider, self.timeZoneName)
+        return u'<[{0}] {1} [{2}]>'.format(self.status, self.provider, self.timeZoneName)
 
     def _exceptions(self):
         if self.parse['results']:
",add missing docstring,style(timezone): use unicode for string formatting,Cosmetic,"The change involves using Unicode for string formatting in time zone handling, which is a style improvement rather than a functional fix or correction.",2.0,1.0,3.0,"The commit message indicates a fix for an encoding issue in Python 2, which is relevant to the code change. However, the actual diff shows only a minor change: replacing a regular string format with a Unicode string (`u'<...>'`). This change is likely intended to ensure proper Unicode handling, especially in Python 2 where string encoding can be problematic. While the message references a reporter, it lacks context about the problem (e.g., why encoding was an issue), the impact of the fix, or how it relates to the broader system. The message is technically accurate but overly vague and lacks sufficient detail to be considered excellent. Thus, a score of 2 reflects a minimal effort in explaining the change and its significance.","The commit message 'add missing docstring' is highly inaccurate given the diff. The diff shows a change from a regular string format to a Unicode string format (u'<...>') using the 'u' prefix, which is a Python 2-specific syntax and indicates a change in string handling, not a missing docstring. There is no docstring added or modified in the code. Therefore, the commit message is misleading and does not reflect the actual change, making it poor and inappropriate for the task.","The commit message indicates a style change to use Unicode in string formatting, which is technically accurate and relevant to the diff. However, the change is minimal and the justification is vague—using `u'...'` in Python 2 for string formatting is often unnecessary and can be misleading in modern Python (especially Python 3, where all strings are Unicode by default). The diff shows a trivial change with no clear benefit or context, so while the message correctly identifies the action, it lacks depth or explanation of why this change was necessary. Thus, it's better than poor but not excellent."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/ipinfo.py,"@@ -42,13 +42,13 @@ class Ipinfo(Base):
     @property
     def address(self):
         if self.city:
-            return '{0}, {1}, {2}'.format(self.city, self.state, self.country)
+            return u'{0}, {1}, {2}'.format(self.city, self.state, self.country)
         elif self.state:
-            return '{0}, {1}'.format(self.state, self.country)
+            return u'{0}, {1}'.format(self.state, self.country)
         elif self.country:
-            return '{0}'.format(self.country)
+            return u'{0}'.format(self.country)
         else:
-            return ''
+            return u''
 
     @property
     def postal(self):
",add missing property to ipinfo,fix(ipinfo): use unicode strings for address formatting,Corrective,"The change addresses a specific issue in string handling by using unicode strings for address formatting, which corrects potential encoding problems in Python2, aligning with best practices for consistent and reliable string processing.",3.0,2.0,4.0,"The commit message indicates a fix for an encoding issue in Python 2 by changing string literals from regular strings to Unicode strings (u""...""). This is a reasonable and relevant change, especially in Python 2 where string encoding can be a concern. However, the commit message is very brief and lacks context—such as why the change was necessary, what the original issue was, or how it affects behavior. It also does not clearly state that the fix is for Unicode handling or that it improves compatibility. While the diff shows a valid change, the message fails to explain the significance or the problem it solves, which reduces its completeness and clarity. Thus, it receives a moderate score of 3.","The commit message 'add missing property to ipinfo' is vague and does not accurately describe the change. The diff shows a change from regular string formatting to Unicode string formatting (using u'') across multiple lines, which is a minor code style improvement, not the addition of a missing property. The message fails to convey what was actually changed, why it was changed, or its significance. A better message would describe the use of Unicode strings for consistency and compatibility. Thus, the message is poorly descriptive and misrepresents the actual change.","The commit message accurately reflects the change made in the code diff, which is the replacement of regular strings with Unicode strings (using `u'...'`) in the `address` property. This is a meaningful and relevant fix, especially in the context of string handling in Python where Unicode support is important. The message is clear, concise, and directly tied to the change. However, it could be slightly more precise by mentioning the specific properties or the reason (e.g., to ensure consistent Unicode handling across all string formats), but overall it is well-written and appropriate for the change. Thus, it earns a 4 rather than 5."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/location.py,"@@ -117,8 +117,8 @@ class Location(object):
 
     def __str__(self):
         if self.ok:
-            return '{0}, {1}'.format(self.lat, self.lng)
-        return ''
+            return u'{0}, {1}'.format(self.lat, self.lng)
+        return u''
 
 if __name__ == '__main__':
     l = Location([0.0, 0.0])
",update location.py,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a correction to a previously failing functionality, which aligns with a corrective improvement.",2.0,2.0,1.0,"The commit message mentions a 'Fixed Encoding issue Python2' but the code diff shows only a change from regular string formatting to Unicode strings (u'{0}, {1}'), which is a type consistency improvement, not an encoding fix. In Python 2, using Unicode strings is often necessary for proper internationalization, but the change is subtle and not clearly tied to an encoding problem. The message is vague and does not accurately reflect the actual change. While the fix is valid, the commit message fails to clearly communicate the nature of the change, making it only mildly appropriate.","The commit message 'update location.py' is extremely vague and provides no information about what was changed or why. While the diff shows a minor change from using regular strings to Unicode strings in the __str__ method, the commit message fails to convey this specific improvement or context. A better message would indicate the change (e.g., 'Use Unicode strings in Location.__str__ for consistent string handling'). Thus, it receives a score of 2 for lacking detail and clarity.","The commit message 'fix: rectification failed' is highly inadequate. It does not describe what was actually fixed, nor does it explain the issue or the change made. The diff shows a simple change from regular string formatting to Unicode string formatting (using u''), which is a minor improvement for internationalization, but the commit message fails to communicate this. The term 'rectification failed' is vague, possibly incorrect, and does not relate to the actual code change. A good commit message should clearly state what was fixed and why. Therefore, this message is poor and receives a score of 1."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/mapbox.py,"@@ -27,7 +27,7 @@ class Mapbox(Base):
 
     def __init__(self, location, **kwargs):
         self.location = location
-        self.url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/{0}.json'.format(location)
+        self.url = u'https://api.mapbox.com/geocoding/v5/mapbox.places/{0}.json'.format(location)
         self.params = {
             'access_token': self._get_api_key(mapbox_access_token, **kwargs),
             'country': kwargs.get('country'),
@@ -52,7 +52,7 @@ class Mapbox(Base):
     def _get_proximity(self, **kwargs):
         if 'proximity' in kwargs:
             lat, lng = Location(kwargs['proximity']).latlng
-            return '{0},{1}'.format(lng, lat)
+            return u'{0},{1}'.format(lng, lat)
 
     @property
     def lat(self):
",add missing docstrings,fix(mapbox): use unicode strings for URL and proximity formatting,Corrective,"The change addresses a potential encoding issue by ensuring URL and proximity formatting use unicode strings, which is a necessary fix to prevent encoding-related bugs, especially in Python2 environments.",2.0,1.0,4.0,"The commit message mentions fixing an 'Encoding issue in Python2', which is vague and lacks specific context. The diff shows only a change from regular string formatting to Unicode string formatting (`u'...'`), which is a minor change and primarily addresses string encoding in Python 2 (where `u''` denotes Unicode). However, the commit message does not clearly explain why this change was necessary, what the original issue was, or how it resolves a real encoding problem. While the change itself is technically valid, the message fails to provide sufficient context or impact to justify a higher score. Thus, it is only moderately informative — earning a score of 2.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff shows only the replacement of regular string formatting with Unicode string formatting (u'...') in two instances, which is a syntax change for string literals, not the addition of docstrings. There are no docstrings added or modified in the code. Therefore, the commit message does not accurately reflect the changes made, making it poor and inappropriate for the actual work performed.","The commit message accurately reflects the change made in the code diff, which involves replacing regular strings with Unicode strings (u"""") in two instances: the URL construction and proximity formatting. This is a clear, relevant fix that improves string handling consistency, especially in internationalized contexts. The message is concise, specific, and correctly scoped to the mapbox module. While it could be slightly more detailed (e.g., mentioning the purpose of using Unicode strings), it is still clear, precise, and sufficient for understanding the change. Therefore, it earns a strong 4 rather than 5."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/maxmind.py,"@@ -63,13 +63,13 @@ class Maxmind(Base):
     @property
     def address(self):
         if self.city:
-            return '{0}, {1}, {2}'.format(self.city, self.state, self.country)
+            return u'{0}, {1}, {2}'.format(self.city, self.state, self.country)
         elif self.state:
-            return '{0}, {1}'.format(self.state, self.country)
+            return u'{0}, {1}'.format(self.state, self.country)
         elif self.country:
-            return '{0}'.format(self.country)
+            return u'{0}'.format(self.country)
         else:
-            return ''
+            return u''
 
     @property
     def domain(self):
",add missing property for maxmind,fix(address): use unicode strings for address formatting,Corrective,"The change addresses a specific bug related to encoding by using Unicode strings for address formatting, which corrects a potential issue in handling string data, especially in Python 2 environments where encoding problems are common.",3.0,2.0,5.0,"The commit message indicates a fix for an encoding issue in Python 2 by changing string literals from regular strings to Unicode strings (u""...""). This is a reasonable and relevant change, especially in Python 2 where encoding can be a concern. However, the commit message is minimal and lacks context—such as why the change was necessary, what the original issue was, or how it affects functionality. While the change itself is valid and likely correct, the message does not fully explain the problem or its impact, making it somewhat vague. Thus, it's not poor, but not excellent either—earning a moderate score of 3.","The commit message 'add missing property for maxmind' is vague and does not accurately reflect the actual change. The diff shows a simple change from regular string formatting to Unicode string formatting (using u""""), which is a style improvement, not the addition of a missing property. The message fails to describe what was actually changed, why it was changed, or its impact. A better message would specify the change in string formatting to Unicode for consistency. Therefore, it receives a score of 2 for being off-target and lacking clarity.","The commit message accurately reflects the change made in the code diff, which is the replacement of regular strings with Unicode strings (using 'u' prefix) in the address formatting properties. This is a clear, relevant, and precise description of the fix, especially in the context of string handling in Python. The message follows the conventional format for a fix commit (e.g., 'fix(feature): describe change'), and the change is directly tied to the purpose of ensuring Unicode compatibility. Given the context and clarity, this is an excellent commit message."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/tamu.py,"@@ -26,8 +26,7 @@ class Tamu(Base):
     provider = 'tamu'
     method = 'geocode'
 
-    def __init__(
-            self, location, censusYears=('1990', '2000', '2010'), **kwargs):
+    def __init__(self, location, censusYears=('1990', '2000', '2010'), **kwargs):
 
         # city, state, zip
         city = kwargs.get('city', '')
@@ -65,17 +64,12 @@ class Tamu(Base):
         status_code = self.parse.get('QueryStatusCodeValue')
         exception = self.parse.get('Exception')
 
-        if (exception_occured == 'True' or
-                status_code != ""200"" or
-                exception):
-
+        if (exception_occured == 'True' or status_code != '200' or exception):
             self.error = exception
 
-        if status_code == ""401"" or status_code == ""470"":
-            self.error = \
-                ""Tamu returned status_code {0}.  Is API key {1} valid?"".\
-                format(status_code, self.key)
-#            raise Exception(self.error)
+        if status_code == '401' or status_code == '470':
+            self.error = u'Tamu returned status_code {0}.  Is API key {1} valid?'.format(status_code, self.key)
+            raise Exception(self.error)
 
     def _exceptions(self):
         # Build initial Tree with results
@@ -187,8 +181,8 @@ class Tamu(Base):
 if __name__ == '__main__':
     g = Tamu(
         '595 Market Street',
-        city=""San Francisco"",
-        state=""CA"",
-        zipcode=""94105"")
+        city='San Francisco',
+        state='CA',
+        zipcode='94105')
 
     g.debug()
",add tests for tamu,fix(tamu): remove unnecessary parentheses and fix string formatting in error messages,Cosmetic,"The change removes unnecessary parentheses and improves string formatting in error messages, which enhances readability and consistency without altering functionality.",1.0,1.0,3.0,"The commit message does not accurately reflect the changes in the code diff. The diff shows a removal of unnecessary parentheses in Python method definitions, consistent formatting improvements (e.g., removing redundant parentheses and fixing string formatting), and minor whitespace adjustments (e.g., removing extra spaces in keyword arguments). There is no mention of an 'encoding issue' in Python 2, which is completely unrelated to the changes. The message also fails to describe the actual changes made, and the attribution to Sergei Grabalin is not supported by the diff. Therefore, the commit message is misleading and does not match the actual content of the changes.","The commit message 'add tests for tamu' is highly irrelevant to the actual changes in the code diff. The diff shows a refactoring of the Tamu class, including minor syntax improvements (removing unnecessary parentheses, fixing string formatting, and adjusting indentation), and a small addition of error handling. There is no mention of test code being added, and the changes are purely in functionality and formatting. Therefore, the commit message does not accurately reflect the changes made, making it poor and misleading.","The commit message correctly identifies the main changes: removing unnecessary parentheses and fixing string formatting in error messages. However, it omits the addition of Unicode (u'') prefix in the error message string, which is a subtle but meaningful improvement in string handling (especially for internationalization or consistency). Also, the commit message does not mention the removal of a commented-out `raise Exception(self.error)` line, which might be relevant context. While the message is accurate and concise, it lacks completeness in capturing all the actual changes. Therefore, it is not 'excellent' but still 'good' — a score of 3 reflects a mostly accurate but incomplete summary."
7080fd736c41a476d4e8c0b7a24c9356d397de4e,"Fixed Encoding issue Python2
- Reported & Assisted by Sergei Grabalin",geocoder/yandex_reverse.py,"@@ -43,7 +43,7 @@ class YandexReverse(Yandex, Base):
         self.url = 'http://geocode-maps.yandex.ru/1.x/'
         location = location
         x, y = Location(location).xy
-        self.location = '{}, {}'.format(x, y)
+        self.location = u'{}, {}'.format(x, y)
         self.params = {
             'geocode': self.location,
             'lang': kwargs.get('lang', 'en-US'),
",update yandex.py,fix(yandex-reverse): use unicode format for location,Corrective,"The change addresses a specific issue related to encoding and data format (using Unicode for location), which corrects a potential data handling problem in the Yandex reverse geocoding functionality.",2.0,2.0,3.0,"The commit message mentions a 'Fixed Encoding issue Python2' but the code diff shows only a change from `'{}, {}'.format(x, y)` to `u'{}, {}'.format(x, y)`, which introduces a Unicode string in Python 2. This change is minor and likely intended to ensure proper Unicode handling, but the message is vague and lacks context about the actual problem or why it was necessary. While it acknowledges a contributor, the explanation is insufficient to convey the significance or impact of the change. Therefore, it receives a score of 2 — it addresses a relevant issue but lacks clarity and detail.","The commit message 'update yandex.py' is extremely vague and provides no information about what was changed or why. While the diff shows a change from regular string formatting to Unicode string formatting (u'{}'), this detail is missing from the message. A better message would specify the change, such as 'Use Unicode string formatting in YandexReverse location to ensure proper encoding'. Since the message lacks context, specificity, and motivation, it receives a score of 2.","The commit message is relevant and identifies the change (using unicode format for location), which aligns with the diff showing a change from `'{}, {}'.format(x, y)` to `u'{}, {}'.format(x, y)`. However, it lacks context about why this change was made—such as whether it's for compatibility, encoding, or to prevent issues with non-ASCII characters. The message is accurate but minimal and does not fully explain the significance or necessity of the change, which limits its completeness. Thus, it is functional but not excellent."
1c098a0485c456c77b561b021340591279bbc052,Fix Key Optional key handling GeocodeFarm,geocoder/geocodefarm.py,"@@ -34,13 +34,12 @@ class GeocodeFarm(Base):
     provider = 'geocodefarm'
     method = 'geocode'
 
-    key = self._get_api_key(geocodefarm_key, **kwargs)
-
     def __init__(self, location, **kwargs):
         self.url = 'https://www.geocode.farm/v3/json/forward/'
+        self.key = kwargs.get('key', geocodefarm_key)
         self.params = {
             'addr': location,
-            'key': key if key else None,
+            'key': self.key if self.key else None,
             'lang': kwargs.get('lang', ''),
             'country': kwargs.get('country', ''),
         }
",add missing class attributes,fix(geocodefarm): use provided key from kwargs or fallback to default,Semantic,The new message provides clearer and more precise information about the change—specifying that the key is taken from kwargs or falls back to a default—improving the semantic meaning and intent of the commit message compared to the vague original.,3.0,2.0,4.0,"The commit message 'Fix Key Optional key handling GeocodeFarm' is vague and lacks specificity. It indicates a fix related to key handling but does not clearly describe what was fixed, why it was necessary, or how the change improves functionality. While the diff shows a change in key handling (moving key retrieval from instance method to kwargs and using self.key properly), the message fails to convey the context or impact. A better message would specify, for example, 'Fix optional key handling in GeocodeFarm to use provided key from kwargs with fallback to environment variable'. Therefore, it receives a medium score—clearly related to the change but lacking detail and clarity.","The commit message 'add missing class attributes' is overly vague and lacks specificity. While the diff does show the addition of a `key` attribute in the `__init__` method, the message does not explain what was added, why it was added, or how it relates to the existing code. A better message would specify, for example, 'Add key attribute from kwargs with fallback to geocodefarm_key for GeocodeFarm provider'. The message fails to provide context or clarity, making it difficult to understand the change's purpose without reviewing the diff.","The commit message accurately describes the change: it clarifies that the key is now sourced from kwargs or falls back to the default (geocodefarm_key). The fix is relevant and the message is clear and concise. However, it slightly misses mentioning the removal of the redundant `_get_api_key` call, which might be important context for maintainers. Still, the core intent is well-captured, making it a strong, mostly accurate message."
1c098a0485c456c77b561b021340591279bbc052,Fix Key Optional key handling GeocodeFarm,geocoder/geocodefarm_reverse.py,"@@ -39,16 +39,13 @@ class GeocodeFarmReverse(GeocodeFarm, Base):
 
     def __init__(self, location, **kwargs):
         self.url = 'https://www.geocode.farm/v3/json/reverse/'
-
         self.location = location
         location = Location(location)
-
-        key = self._get_api_key(geocodefarm_key, **kwargs)
-
+        self.key = kwargs.get('key', geocodefarm_key)
         self.params = {
             'lat': location.latitude,
             'lon': location.longitude,
-            'key': key if key else None,
+            'key': self.key if self.key else None,
             'lang': kwargs.get('lang', ''),
             'country': kwargs.get('country', ''),
         }
",add key param to geocodefarm,refactor(api): remove redundant key handling in GeocodeFarmReverse,Corrective,"The change removes redundant key handling, which improves correctness by eliminating unnecessary or duplicated logic in the GeocodeFarmReverse API.",3.0,2.0,4.0,"The commit message 'Fix Key Optional key handling GeocodeFarm' is vague and lacks specificity. It mentions a fix for key handling but does not clearly indicate what was fixed, why it was necessary, or how the change improves functionality. While the diff shows a change from using a dynamically retrieved key via _get_api_key to directly using kwargs.get('key', geocodefarm_key), the commit message fails to explain this change's purpose or impact. A better message would clarify that the key is now properly handled as optional with a default fallback. Therefore, it receives a moderate score of 3 — it identifies a relevant change but lacks clarity and context.","The commit message 'add key param to geocodefarm' is too vague and lacks context. It does not indicate what was changed, why it was changed, or how it affects functionality. The diff shows that a key parameter was introduced and used in the request params, but the message fails to communicate the purpose or impact of this change. A better message would explain that the API key is now configurable via a 'key' parameter in kwargs, improving flexibility and allowing users to pass their own keys. Therefore, the message is minimally informative and falls short of being clear or useful for understanding the change.","The commit message accurately reflects the change: it removes redundant key handling by eliminating duplicate key logic in the initialization. The refactoring simplifies the code by using `kwargs.get('key', geocodefarm_key)` directly, which is more concise and avoids redundant calls to `_get_api_key`. However, the message could be slightly more specific—e.g., mentioning that the `_get_api_key` method was removed or that the key is now directly sourced from `kwargs` or the default—though it's still clear and relevant. Overall, it's well-written and appropriate for the diff, earning a strong 4."
26bfe69d27dda86694be83bcd532747dcc50aa5b,Revert changes from Geocodefarm,geocoder/geocodefarm.py,"@@ -36,10 +36,11 @@ class GeocodeFarm(Base):
 
     def __init__(self, location, **kwargs):
         self.url = 'https://www.geocode.farm/v3/json/forward/'
-        self.key = kwargs.get('key', geocodefarm_key)
+        key = kwargs.get('key', geocodefarm_key)
+
         self.params = {
             'addr': location,
-            'key': self.key if self.key else None,
+            'key': key if key else None,
             'lang': kwargs.get('lang', ''),
             'country': kwargs.get('country', ''),
         }
",add url and params to geocodefarm,refactor(core): use local variable for key in geocode farm initialization,Corrective,"The new message indicates a refactoring that addresses a potential issue in the geocode farm initialization by using a local variable for the key, which improves code correctness and maintainability.",1.0,2.0,3.0,"The commit message 'Revert changes from Geocodefarm' is highly misleading and inaccurate. The diff shows a simple change where the variable `self.key` is replaced with a local variable `key`, which is not a revert but a refactoring or correction. There is no actual reversion of changes—only a local variable assignment change. The message fails to describe what was actually changed, why, or what the impact is. It also lacks specificity and context, making it useless for understanding the intent. Therefore, it is poor and does not meet basic standards for a commit message.","The commit message is too vague and does not accurately reflect the changes made in the diff. While it mentions 'add url and params', the actual change involves modifying the initialization of the `key` variable and adjusting the `params` dictionary to use a local variable `key` instead of `self.key`. This is not merely adding a URL or params, but a change in variable scope and assignment logic. A more accurate message would describe the refactoring or correction of key handling. Therefore, the message is insufficient and lacks specificity, warranting a low score.","The commit message is relevant and identifies the change as a refactoring, which is appropriate. However, it lacks specificity about the impact or reason for the change (e.g., why a local variable was introduced). The diff shows a simple variable name change from `self.key` to `key`, which is a minor refactoring with limited benefit. While the message correctly identifies the scope ('core') and the action ('use local variable'), it does not explain the intent or any potential improvements, making it somewhat vague. Thus, it is accurate but not detailed enough to be considered excellent."
26bfe69d27dda86694be83bcd532747dcc50aa5b,Revert changes from Geocodefarm,geocoder/geocodefarm_reverse.py,"@@ -41,16 +41,15 @@ class GeocodeFarmReverse(GeocodeFarm, Base):
         self.url = 'https://www.geocode.farm/v3/json/reverse/'
         self.location = location
         location = Location(location)
-        self.key = kwargs.get('key', geocodefarm_key)
+        key = kwargs.get('key', geocodefarm_key)
         self.params = {
             'lat': location.latitude,
             'lon': location.longitude,
-            'key': self.key if self.key else None,
+            'key': key if key else None,
             'lang': kwargs.get('lang', ''),
             'country': kwargs.get('country', ''),
         }
         self._initialize(**kwargs)
-
 if __name__ == '__main__':
     g = GeocodeFarm([45.3, -75.4])
     g.debug()
",add missing class attributes,refactor(generic): remove unused self.key assignment and simplify key handling,Cosmetic,"The change removes an unused assignment and simplifies key handling, improving code clarity without altering behavior or fixing bugs.",1.0,2.0,4.0,"The commit message 'Revert changes from Geocodefarm' is highly misleading and inaccurate given the actual diff. The diff shows a simple variable name change from `self.key` to `key` in a local scope, with no actual reversion of changes — it's not a revert, and there's no indication of a prior change being undone. The message fails to describe what was actually changed, why, or the impact, making it useless for understanding the intent. It also suggests a reversal of changes that were not originally committed or were not part of a revert operation. This is a poor commit message and does not meet basic standards for clarity or accuracy.","The commit message 'add missing class attributes' is vague and does not accurately reflect the actual change. The diff shows a simple variable name change from `self.key` to `key` (a local variable), and the removal of a trailing blank line. There is no actual addition of class attributes. The message misrepresents the change as adding attributes when it merely renames a variable and removes an unused line. A more accurate message would describe the variable renaming and its purpose, such as 'rename key to local variable to avoid self-key assignment'. Therefore, the message is misleading and lacks specificity, warranting a score of 2.","The commit message accurately reflects the changes in the code: it removes an unused self.key assignment and simplifies key handling by using a local variable 'key' instead. The message is clear, concise, and correctly identifies the refactoring as being related to generic code structure. However, it could be slightly more precise by mentioning that the key is now handled via a local variable to avoid redundancy, but overall it is well-written and relevant to the diff. Therefore, it earns a 4 rather than 5."
7671502e13f6d225ac371d54e778f416497bb0ab,Do not silently catch all exceptions,geocoder/base.py,"@@ -103,9 +103,6 @@ class Base(object):
         except requests.exceptions.SSLError:
             self.status_code = 495
             self.error = 'ERROR - SSLError'
-        except:
-            self.status_code = 404
-            self.error = 'ERROR - URL Connection'
 
         # Open JSON content from Request connection
         if self.status_code == 200:
",add missing status code and error message,fix(base): handle connection errors gracefully,Corrective,"The new message indicates a specific fix for handling connection errors, which addresses a potential failure mode rather than merely improving appearance or semantics.",2.0,2.0,3.0,"The commit message 'Do not silently catch all exceptions' is relevant to the change, as the diff removes a broad `except:` clause that would silently catch exceptions and set a generic error. However, the message is vague and lacks specific context about what was fixed or why it matters. It does not explain the impact or the rationale (e.g., improving error visibility, aiding debugging), which reduces its effectiveness. A more detailed message would have been better, so the score is moderate (2) rather than excellent.","The commit message 'add missing status code and error message' is vague and does not accurately reflect the actual change. The diff shows that a commented-out exception block (which previously handled a general exception and set status_code to 404 and error to 'ERROR - URL Connection') has been removed, not added. The message implies an addition, but the change is actually a removal of a fallback error handler. This misrepresentation reduces clarity and accuracy, making the message misleading. A better message would clarify that a deprecated or unused error handler was removed. Thus, the score is 2 for being technically incorrect and insufficiently descriptive.","The commit message 'fix(base): handle connection errors gracefully' is generally appropriate in form and indicates a fix related to error handling. However, it lacks specific details about the change—such as which errors were previously being caught incorrectly or why the previous code was problematic. The diff shows that a broad 'except:' clause was removed and replaced with more specific exception handling (SSLError), but the commit message does not reflect this improvement in detail. As a result, while it is technically correct and follows the conventional format, it is vague and does not fully convey the significance or context of the fix, limiting its clarity and usefulness for reviewers."
011464d4df8cd14204a070cd5aef01e359f490a6,pep8 line spacing fixes,geocoder/api.py,"@@ -257,6 +257,7 @@ def elevation(location, **kwargs):
     """"""
     return get(location, method='elevation', provider='google', **kwargs)
 
+
 def places(location, **kwargs):
     """"""Places - Google Provider
 
@@ -264,6 +265,7 @@ def places(location, **kwargs):
     """"""
     return get(location, method='places', provider='google', **kwargs)
 
+
 def timezone(location, **kwargs):
     """"""Timezone - Google Provider
 
",add missing comments,"add(places, timezone): implement Google provider methods for places and timezone",Semantic,"The new message describes a specific implementation of Google provider methods for places and timezone, adding functional intent and clarity beyond mere formatting or style fixes.",2.0,2.0,3.0,"The commit message 'pep8 line spacing fixes' is overly vague and does not accurately reflect the actual changes. The diff shows the addition of empty lines between function definitions, which is not a PEP8 line spacing issue but rather a formatting adjustment for readability. PEP8 does not specify line spacing between functions, and such changes are more about code style than strict compliance. The message fails to describe what was actually changed or why, making it poorly informative. A better message would specify the addition of blank lines between function definitions for improved readability.","The commit message 'add missing comments' is vague and does not clearly describe what was added or why. The diff shows the addition of function definitions with docstrings, which are actually comments (specifically docstrings), so the message is misleading — it implies only comments were added, when in fact new functions were introduced. A more accurate message would describe the addition of new geolocation methods (elevation, places, timezone) with Google provider support. Thus, while the action was minor, the message lacks clarity and specificity, resulting in a low score.","The commit message correctly identifies the added functionality (places and timezone methods) and specifies the Google provider, which is relevant. However, it lacks context about why these methods were added, their purpose, or any potential impact. The phrasing 'implement Google provider methods' is somewhat vague and could be more precise. While it is clear and concise, it does not fully convey the scope or intent, which reduces its effectiveness as a commit message. Therefore, it is functional but not excellent."
6b1dd72c65128078913ff43d8027ac09c32dda6d,fix line spacing,geocoder/api.py,"@@ -514,6 +514,7 @@ def tgos(location, **kwargs):
     """"""
     return get(location, provider='tgos', **kwargs)
 
+
 def uscensus(location, **kwargs):
     """"""US Census Provider
 
",add missing keyword arguments,feat(census): add uscensus provider,Semantic,"The new message introduces a new feature (adding a USCensus provider) with a clear semantic meaning, indicating a functional enhancement rather than a cosmetic or corrective change.",2.0,2.0,3.0,"The commit message 'fix line spacing' is overly vague and does not provide context about what was actually changed or why. While the diff shows two new lines added (a function definition and a docstring), the message fails to explain the purpose or impact of the change. A better message would specify the intent, such as 'Add USCensus provider function for location data access'. Thus, the message is minimally informative and lacks clarity, warranting a score of 2.","The commit message 'add missing keyword arguments' is vague and lacks specificity. While it indicates a change related to keyword arguments, it does not clarify what exactly was added, why it was needed, or which function or parameters were affected. The diff shows the addition of a new function `uscensus` with a docstring, but no actual keyword arguments are introduced in the code. Therefore, the message is misleading or inaccurate, as it implies missing keyword arguments were added, when no such arguments are present in the diff. A better message would describe the addition of a new provider function. Thus, the message is only minimally relevant and deserves a low score.","The commit message 'feat(census): add uscensus provider' is clear and follows a standard format (e.g., type: feature), indicating it adds a new feature. However, it lacks specific details about the implementation, such as the purpose of the provider, how it integrates with the existing system, or any relevant context (e.g., data sources, usage patterns). While it correctly identifies the feature and domain, it is somewhat generic and does not provide enough information for a full understanding of the change's impact. Therefore, it is functional but not excellent."
6b1dd72c65128078913ff43d8027ac09c32dda6d,fix line spacing,geocoder/uscensus.py,"@@ -123,4 +123,5 @@ class USCensus(Base):
 
 if __name__ == '__main__':
     g = USCensus('4600 Silver Hill Road, Suitland, MD 20746', benchmark=9)
-    g.debug()
\ No newline at end of file
+    g.debug()
+    
\ No newline at end of file
",update uscensus.py,fix(test): add missing newline after debug call,Corrective,"The change addresses a missing newline after a debug call, which is a code formatting issue that could affect readability or cause unintended behavior in certain contexts, thus falling under corrective improvement.",2.0,2.0,3.0,"The commit message 'fix line spacing' is vague and lacks context. While the diff shows an addition of a blank line after `g.debug()` which may improve readability, the message does not specify what was fixed, why it matters, or the impact. A more descriptive message like 'Add blank line for better code readability in main execution block' would be more informative and useful. Therefore, the message is minimally adequate but insufficiently detailed.","The commit message 'update uscensus.py' is overly vague and provides no context about what was changed or why. The diff shows a simple addition of a blank line after the debug() call, which is a minor formatting change. A better message would specify the change, such as 'Add blank line after debug() call for improved code readability.' Since the message lacks detail and fails to convey the significance or purpose of the change, it receives a score of 2 (Fair).","The commit message correctly identifies the issue as a missing newline after a debug call, which is relevant to the diff. However, it uses the label 'fix(test)' which is misleading since the change is not in a test file or related to testing functionality—it's a formatting fix in a main script. The message is accurate in describing what was changed, but the tag is inappropriate and slightly reduces clarity. Overall, it's clear and relevant, but not perfectly precise, hence a score of 3."
6b1dd72c65128078913ff43d8027ac09c32dda6d,fix line spacing,geocoder/uscensus_reverse.py,"@@ -96,4 +96,5 @@ class USCensusReverse(Base):
 
 if __name__ == '__main__':
     g = USCensusReverse([38.846542, -76.92691])
-    g.debug()
\ No newline at end of file
+    g.debug()
+    
\ No newline at end of file
",add missing newline,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs to be addressed, which is a corrective action rather than a cosmetic or trivial change.",2.0,2.0,2.0,"The commit message 'fix line spacing' is vague and does not provide context about what was fixed or why. While the diff shows an addition of a blank line after the debug() call, the message fails to explain the intent or impact. A more descriptive message, such as 'Add blank line for better code formatting and readability', would be more informative. Thus, it receives a score of 2 for being technically accurate but lacking clarity and context.","The commit message 'add missing newline' is technically accurate and addresses the visible change in the code diff, which adds a newline after the debug() call. However, it lacks context—such as why the newline matters, whether it's a formatting concern, or if it affects readability or tooling. A better message would explain the intent (e.g., 'Fix formatting issue to ensure consistent code structure and prevent trailing newline errors'). As it stands, the message is minimal and lacks depth, making it only marginally sufficient.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple addition of a missing newline after a debug call, which is a formatting issue, not a rectification failure. The message fails to link the change to the actual problem or context, making it unclear and unhelpful for future developers. A better message would specify the issue (e.g., 'fix: added missing newline in debug call') and provide context. Thus, it receives a score of 2 for being technically incorrect in scope and lacking clarity."
7d10b35acae4c42e0d26375ccab901a2bbcfa63d,Fixed whitespace,geocoder/uscensus.py,"@@ -124,4 +124,3 @@ class USCensus(Base):
 if __name__ == '__main__':
     g = USCensus('4600 Silver Hill Road, Suitland, MD 20746', benchmark=9)
     g.debug()
-    
\ No newline at end of file
",add benchmark option to uscensus script,fix(USCensus): remove trailing empty line,Cosmetic,"The change removes a trailing empty line, which is a formatting detail rather than a functional or semantic update.",2.0,2.0,4.0,"The commit message 'Fixed whitespace' is overly vague and does not provide context about what was changed or why. While the diff shows a trailing newline removal, the message fails to explain the impact or rationale. A better message would specify the exact change (e.g., 'Removed trailing newline in main function') and its purpose (e.g., 'to ensure consistent file formatting'). As such, it lacks specificity and clarity, earning a score of 2.","The commit message 'add benchmark option to uscensus script' is vague and lacks specific details about the change. While it correctly identifies the addition of a benchmark option, it does not explain what the benchmark option does, how it was implemented, or why it was added. The diff shows a simple addition of a `benchmark=9` parameter to the constructor, but the message fails to convey the significance or context of this change. A better message would specify the behavior or impact, such as 'add benchmark parameter to USCensus constructor to enable different benchmarking modes'. Therefore, the message is partially accurate but insufficiently informative, warranting a score of 2.","The commit message accurately describes the change: removing a trailing empty line in the Python file. The fix is specific and relevant to the code diff, and the message follows the conventional format of 'fix(component): description'. While it's slightly concise, it clearly communicates what was changed and where. A score of 5 would require more context (e.g., why the empty line was problematic), which is absent. Therefore, it's solid but not exceptional."
7d10b35acae4c42e0d26375ccab901a2bbcfa63d,Fixed whitespace,geocoder/uscensus_reverse.py,"@@ -97,4 +97,3 @@ class USCensusReverse(Base):
 if __name__ == '__main__':
     g = USCensusReverse([38.846542, -76.92691])
     g.debug()
-    
\ No newline at end of file
",add debug statement in uscensus_reverse,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously overlooked, which is a corrective action rather than a cosmetic or trivial change.",2.0,2.0,2.0,"The commit message 'Fixed whitespace' is overly vague and does not provide context about what was actually changed or why. While the diff shows a missing newline at the end of the file, which is a minor formatting issue, the message fails to specify the nature of the change (e.g., 'Added missing newline at end of file') or its impact. A better message would clarify the exact fix and its significance, making it more informative and useful for other developers. Therefore, it receives a score of 2 for being technically accurate but lacking detail and clarity.","The commit message 'add debug statement in uscensus_reverse' is vague and lacks detail about what was actually changed or why. The diff shows a simple removal of a trailing newline, not the addition of a debug statement. The message misrepresents the change, making it unclear and potentially misleading. While it's not completely wrong, it fails to accurately reflect the actual diff, which reduces its usefulness. A score of 2 reflects a basic but inaccurate commit message.","The commit message 'fix: rectification failed' is vague and lacks specific details about what was fixed or why. The diff shows a simple removal of a trailing newline, which is a minor formatting change, not a rectification failure. The message does not align with the actual change, making it misleading. While it follows the 'fix:' prefix convention, it fails to provide context or clarity, resulting in a low score."
08225e817e39196f225f4ed8059d6bb39356b9f9,fix PEP8 syntax; add uscensus test cases,geocoder/uscensus_reverse.py,"@@ -4,9 +4,10 @@
 from __future__ import absolute_import
 from geocoder.base import Base
 from geocoder.location import Location
+from geocoder.uscensus import USCensus
 
 
-class USCensusReverse(Base):
+class USCensusReverse(USCensus, Base):
     """"""
     US Census Geocoder REST Services
     =======================
",add missing import,refactor(us-census): add USCensus base class to USCensusReverse,Semantic,"The new message introduces a structural change by adding a base class to a specific component, which changes the code's design and behavior in a meaningful way, going beyond simple formatting or bug fixes.",2.0,3.0,3.0,"The commit message is misleading and does not accurately reflect the changes in the diff. The diff shows a class inheritance modification (changing `USCensusReverse(Base)` to `USCensusReverse(USCensus, Base)`), which is a structural change, not a PEP8 fix. Additionally, there is no mention of test cases being added. The claim of 'fixing PEP8 syntax' is incorrect, and the addition of test cases is not indicated in the diff. Therefore, the message is inaccurate and lacks clarity, warranting a low score.","The commit message 'add missing import' is accurate and reflects the change, but it is overly vague and lacks context. The diff shows that a class inheritance is being updated to inherit from USCensus, which implies a structural change, not just an import. While the import was indeed added, the message does not capture the full scope of the change—specifically, that the class now inherits from USCensus instead of just Base. A more descriptive message like 'Modify USCensusReverse to inherit from USCensus for proper service integration' would be better. Therefore, it is functional but insufficiently detailed, warranting a score of 3.","The commit message is somewhat unclear and lacks context. While it mentions a refactor and adds a base class, it does not clearly explain the purpose or benefit of the change. The message 'add USCensus base class to USCensusReverse' is technically accurate but vague. A better message would explain why this refactoring was done (e.g., to enable inheritance, improve code reuse, or align with design principles). As such, it is not poor (which would be a lack of meaning or relevance), but also not excellent due to insufficient detail or clarity."
08225e817e39196f225f4ed8059d6bb39356b9f9,fix PEP8 syntax; add uscensus test cases,tests/test_geocoder.py,"@@ -15,10 +15,11 @@ repeat = 3
 ottawa = (45.4215296, -75.6971930)
 toronto = (43.653226, -79.3831843)
 istanbul = {'lat': 41.005407, 'lng': 28.978349}
-us_address = '595 Market St'
+us_address = 'c'
 us_city = 'San Francisco'
 us_state = 'CA'
 us_zipcode = '94105'
+dc = (38.904722, -77.016389)
 
 
 def test_entry_points():
@@ -50,6 +51,7 @@ def test_entry_points():
     geocoder.canadapost
     geocoder.tamu
     geocoder.geocodefarm
+    geocoder.uscensus
 
 
 def test_location():
@@ -261,6 +263,18 @@ def test_geocodefarm_reverse():
     g = geocoder.geocodefarm(ottawa, method='reverse')
     assert g.ok
 
+
+def test_uscensus():
+    g = geocoder.uscensus(' '.join([us_address, us_city, us_state, us_zipcode]))
+    assert g.ok
+    assert g.city == us_city.upper()
+
+
+def test_uscensus_reverse():
+    g = geocoder.uscensus((38.904722, -77.016389), method='reverse')
+    assert g.ok
+
+
 """"""
 Host Server failing
 ###################
",add tests for farm and ottawa,feat(us-census): add support for US Census geocoding and reverse geocoding,Semantic,"The new message introduces a new feature (support for US Census geocoding and reverse geocoding) with a clear semantic meaning, shifting from a minor syntax fix to a functional enhancement, thus representing a significant change in scope and intent.",2.0,2.0,5.0,"The commit message is inaccurate and misleading. It claims to fix PEP8 syntax, but the diff shows no PEP8-related changes—there are no formatting issues, whitespace problems, or style fixes. Instead, the diff adds new test cases for the uscensus geocoder, including both forward and reverse geocoding. The message fails to reflect the actual changes. While it correctly mentions 'add uscensus test cases', the 'fix PEP8 syntax' part is entirely false and detracts from credibility. Therefore, the message is misleading and only partially accurate, warranting a score of 2.","The commit message 'add tests for farm and ottawa' is overly narrow and misleading. While the diff does add tests for `uscensus`, which is not mentioned in the message, it also adds tests for `geocodefarm` and `reverse` functionality (including a new test function `test_uscensus_reverse`). The message fails to reflect the actual scope of changes — it omits the new `uscensus` tests and incorrectly focuses only on 'farm' and 'ottawa'. A more accurate message would include 'add tests for uscensus, geocodefarm, and reverse geocoding'. Therefore, the message is incomplete and inaccurate, warranting a score of 2.","The commit message accurately reflects the changes in the code diff. It clearly identifies the feature as 'us-census' geocoding and specifies both forward and reverse geocoding support, which is exactly what the diff introduces with the new `test_uscensus()` and `test_uscensus_reverse()` functions. The message is concise, relevant, and properly scoped to the feature added. It follows the conventional format for feature commits and correctly uses the 'feat' prefix. No ambiguity or missing details are present."
8881dba6a7dc6d349585708261cd6cea4d534af8,fix overwrite of us_address,tests/test_geocoder.py,"@@ -15,7 +15,7 @@ repeat = 3
 ottawa = (45.4215296, -75.6971930)
 toronto = (43.653226, -79.3831843)
 istanbul = {'lat': 41.005407, 'lng': 28.978349}
-us_address = 'c'
+us_address = '595 Market St'
 us_city = 'San Francisco'
 us_state = 'CA'
 us_zipcode = '94105'
",add missing coverage data,docs(scope): update US address to 595 Market St,Cosmetic,"The change updates documentation to reflect a specific address, which is a minor formatting or presentation update rather than a functional fix or semantic change.",3.0,2.0,3.0,"The commit message 'fix overwrite of us_address' is technically correct in indicating a fix for an issue where us_address was being overwritten, but it lacks detail about the change (e.g., from 'c' to '595 Market St') or context (e.g., why this change was made). While it identifies the problem, it does not clearly communicate the impact or intent of the change, which is essential for maintainability. Therefore, it is functional but insufficiently informative, earning a moderate score.","The commit message 'add missing coverage data' is vague and does not accurately reflect the actual change. The diff shows a simple update to a US address from 'c' to '595 Market St' in the configuration, which is a specific value change, not the addition of coverage data. The message fails to describe what was changed, why it was changed, or what 'coverage data' refers to. A better message would specify the exact update (e.g., 'Update US address to 595 Market St, San Francisco, CA'). Therefore, the message is only minimally informative and deserves a score of 2.","The commit message indicates a change to the US address, which is accurate and relevant to the diff. However, it lacks context about why the address was changed (e.g., for accuracy, testing, or user experience), and 'docs(scope)' is misleading since the change is not in documentation but in configuration data. The message is somewhat clear but insufficiently descriptive for understanding the purpose or impact. Thus, it is functional but not excellent."
f99345ba0eb892267035790dc1e410752152041d,Use xfail to ignore test failure on TimeoutError,tests/test_geocoder.py,"@@ -1,5 +1,7 @@
 #!/usr/bin/python
 # coding: utf8
+import pytest
+from requests.packages.urllib3.exceptions import TimeoutError
 
 import geocoder
 
@@ -123,6 +125,7 @@ def test_maxmind():
     assert g.ok
 
 
+@pytest.mark.xfail(raises=TimeoutError)
 def test_baidu():
     g = geocoder.baidu(china)
     assert g.ok
@@ -269,12 +272,14 @@ def test_geocodefarm_reverse():
     assert g.ok
 
 
+@pytest.mark.xfail(raises=TimeoutError)
 def test_uscensus():
     g = geocoder.uscensus(' '.join([us_address, us_city, us_state, us_zipcode]))
     assert g.ok
     assert g.city == us_city.upper()
 
 
+@pytest.mark.xfail(raises=TimeoutError)
 def test_uscensus_reverse():
     g = geocoder.uscensus((38.904722, -77.016389), method='reverse')
     assert g.ok
",add xfailing tests,"fix(tests): add pytest and TimeoutError xfail for baidu, uscensus, and uscensus_reverse tests",Corrective,"The new message specifies a concrete fix by adding xfail for specific tests related to TimeoutError, addressing a potential test failure issue in a targeted and intentional way, which improves test reliability and correctness.",3.0,2.0,3.0,"The commit message is basic and accurately reflects the change — using pytest.xfail to skip tests that may timeout. However, it lacks detail about why the timeout is expected (e.g., network instability, unreliable services), the specific tests affected, or the context (e.g., intermittent external API failures). While it correctly identifies the intent, it does not fully explain the rationale or impact, which limits its clarity and usefulness for other developers. Therefore, it is functional but not comprehensive.","The commit message 'add xfailing tests' is overly vague and lacks detail. While it correctly indicates that failing tests were added, it does not specify what the tests are failing for, why they are marked as xfail, or which services (e.g., Baidu, USCensus) are affected. The diff shows that the tests are specifically marked with `@pytest.mark.xfail(raises=TimeoutError)` to simulate timeout failures, which is meaningful context missing from the message. A better message would clarify the intent (e.g., 'Add xfail tests for timeout-prone geocoding services like Baidu and USCensus'). Thus, the message is minimally informative and only scores a 2.","The commit message accurately identifies the changes made—adding pytest and marking specific tests with xfail for TimeoutError—but it lacks detail about why these changes were necessary or the context (e.g., intermittent timeouts in external services like Baidu or US Census). While the message is clear and concise, it does not fully explain the intent or impact, which reduces its completeness. A score of 3 reflects a generally accurate but superficial message that meets basic requirements but falls short of excellent clarity or context."
1241aeaaa2b0af03bac4173f6400f895efbb33b8,Fix CLI by excluding session from json and cosmetic fixes,geocoder/api.py,"@@ -498,7 +498,7 @@ def geocodefarm(location, **kwargs):
     ------
     :param location: The string to search for. Usually a street address.
     :param key: (optional) API Key. Only Required for Paid Users.
-    :param lang: (optional) 2 digit lanuage code to return results in. Currently only ""en""(English) or ""de""(German) supported.
+    :param lang: (optional) 2 digit language code to return results in. Currently only ""en""(English) or ""de""(German) supported.
     :param country: (optional) The country to return results in. Used for biasing purposes and may not fully filter results to this specific country.
 
     API Reference
",add docs for geocodefarm,fix(docs): correct language code description in geocodefarm function,Corrective,"The change corrects an inaccurate language code description in the documentation, which improves the clarity and accuracy of the geocodefarm function's behavior.",2.0,3.0,5.0,"The commit message does not accurately reflect the changes in the code diff. The diff shows a typo correction in the docstring: 'lanuage' -> 'language'. The commit message mentions 'Fix CLI by excluding session from json and cosmetic fixes', which is unrelated to the actual change (a documentation typo). Therefore, the message is misleading and fails to describe the actual work done. While there is a minor cosmetic fix, the claim about CLI or session exclusion is incorrect, reducing the relevance and accuracy of the message.","The commit message 'add docs for geocodefarm' is vague and lacks detail about what was specifically added or improved. While the diff shows a minor correction in documentation (fixing a typo in 'lanuage' to 'language'), the commit message does not reflect this change. A better message would mention the typo fix or the specific improvement. Therefore, it is partially accurate but insufficiently descriptive, warranting a moderate score.","The commit message accurately reflects the change made in the code diff, which is a minor correction in the documentation of the 'lang' parameter's description. The original description had a spelling error ('lanuage' → 'language'), and the commit message correctly identifies it as a documentation fix. The message is concise, specific, and clearly indicates the nature and scope of the change, making it excellent for a documentation fix."
1241aeaaa2b0af03bac4173f6400f895efbb33b8,Fix CLI by excluding session from json and cosmetic fixes,geocoder/base.py,"@@ -22,7 +22,7 @@ class Base(object):
                 'xy', 'northeast', 'northwest', 'southeast', 'southwest',
                 'road_long', 'city_long', 'state_long', 'country_long',
                 'postal_town_long', 'province_long', 'road_long',
-                'street_long', 'interpolated', 'method', 'geometry']
+                'street_long', 'interpolated', 'method', 'geometry', 'session']
     fieldnames = []
     error = None
     status_code = None
@@ -72,7 +72,8 @@ class Base(object):
     def rate_limited_get(self, url, **kwargs):
         return self.session.get(url, **kwargs)
 
-    def _get_api_key(self, base_key, **kwargs):
+    @staticmethod
+    def _get_api_key(base_key, **kwargs):
         key = kwargs.get('key')
         # Retrieves API Key from method argument first
         if key:
",add missing docstrings,add(session)(base): add session support to API key retrieval,Semantic,The new message introduces a meaningful functional change—adding session support to API key retrieval—shifting from a cosmetic or corrective fix to a semantic enhancement with new behavior.,2.0,1.0,3.0,"The commit message is misleading and does not accurately reflect the changes. The diff shows the addition of 'session' to a list of fieldnames and a method decorator change, which are not related to fixing a CLI or excluding 'session' from JSON. The message claims 'cosmetic fixes' but the actual change introduces a new field and modifies a method's behavior, which may have functional implications. The statement 'Fix CLI by excluding session from json' is factually incorrect and misrepresents the diff. While there are minor cosmetic changes, the commit message lacks clarity and accuracy, warranting a low score.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff does not add any docstrings; instead, it modifies the class definition by adding a new field 'session' to the fieldnames list and changes the _get_api_key method to be a staticmethod. These are code changes that alter functionality and structure, not documentation. The commit message fails to reflect the actual changes made, making it misleading and irrelevant. Therefore, it receives a poor score.","The commit message introduces the concept of adding session support to API key retrieval, which is accurate and reflects the change. However, it is vague and lacks clarity about the context or purpose of the addition. The use of 'add(session)' is ambiguous and not standard in commit messaging. It doesn't clearly explain why session support is needed or how it improves functionality. While the diff shows a real change (adding 'session' to fieldnames and marking the method as static), the message fails to convey the significance or intent of the change. A better message would specify, for example, 'Add session support to API key retrieval to enable authenticated requests with session context.' Therefore, it's functional but not excellent."
1241aeaaa2b0af03bac4173f6400f895efbb33b8,Fix CLI by excluding session from json and cosmetic fixes,geocoder/cli.py,"@@ -33,7 +33,7 @@ units = ['kilometers', 'miles', 'feet', 'meters']
 @click.option('--state', '-s', default='')
 @click.option('--zipcode', '-z', default='')
 def cli(location, **kwargs):
-    ""Geocode an arbitrary number of strings from Command Line.""
+    """"""Geocode an arbitrary number of strings from Command Line.""""""
 
     locations = []
 
@@ -62,6 +62,9 @@ def cli(location, **kwargs):
     # Geocode results from user input
     for location in locations:
         g = geocoder.get(location.strip(), **kwargs)
+        print(kwargs['output'])
+        print(g.__getattribute__(kwargs['output']))
+        import pdb;pdb.set_trace()
         try:
             click.echo(json.dumps(g.__getattribute__(kwargs['output'])))
         except IOError:
",add more options to the geocode command,feat(cli): enhance geocoding output debugging with print and pdb,Semantic,"The new message introduces a functional enhancement related to debugging geocoding output, shifting from simple cosmetic fixes to a meaningful addition that improves developer experience and functionality.",2.0,1.0,3.0,"The commit message is vague and does not accurately reflect the changes in the code diff. The diff shows a change from a docstring format (single quote) to triple quotes, and adds debugging print statements and a pdb breakpoint, which are not related to 'excluding session from json' or 'cosmetic fixes'. The message fails to describe the actual changes made, misrepresents the purpose, and lacks specificity. While it includes a minor cosmetic change (docstring format), the added debugging code suggests a deeper issue being investigated, which is not acknowledged. Therefore, the message is misleading and insufficient for understanding the actual intent or impact of the commit.","The commit message 'add more options to the geocode command' is highly inaccurate and misleading given the actual changes in the code diff. The diff shows only minor modifications to docstring formatting and adds debugging print statements and a pdb breakpoint, not new command-line options. There is no evidence of adding new options to the command. The message fails to reflect the actual content of the changes, making it poor and misleading.","The commit message 'feat(cli): enhance geocoding output debugging with print and pdb' is somewhat accurate in indicating a feature addition related to debugging. However, it lacks specificity about what exactly was enhanced, the purpose, or the impact. The diff shows temporary debugging code (print statements and pdb) that is not part of a production feature but rather a diagnostic addition. The use of 'feat' is misleading since this is not a new feature but a debugging enhancement. A more precise message would clarify the intent (e.g., 'debug: add output inspection and breakpoint for geocoding'). Therefore, while the message is not entirely wrong, it is vague and misclassifies the change, resulting in a moderate score."
1241aeaaa2b0af03bac4173f6400f895efbb33b8,Fix CLI by excluding session from json and cosmetic fixes,geocoder/google.py,"@@ -111,8 +111,8 @@ class Google(Base):
         # Encode the binary signature into base64 for use within a URL
         encoded_signature = base64.urlsafe_b64encode(signature.digest())
 
-        # Return signature as a tuple (to be appended as a param to url)
-        return (""signature"", encoded_signature)
+        # Return signature (to be appended as a param tuple to url)
+        return ""signature"", encoded_signature
 
     """"""
     import ratelim
",update signature.py,refactor(google): return signature and encoded signature as tuple,Semantic,"The new message indicates a structural change in functionality (returning signature and encoded signature as a tuple), which alters the behavior or interface of the code, reflecting a semantic improvement rather than just cosmetic or corrective changes.",2.0,2.0,3.0,"The commit message 'Fix CLI by excluding session from json and cosmetic fixes' does not accurately reflect the changes in the code diff. The diff shows a change in a Python method's return value formatting—specifically, changing from returning a tuple to returning a tuple-like expression without the parentheses. This is a minor code style or formatting change, not a CLI fix or session exclusion from JSON. The message is misleading and out of alignment with the actual code changes, hence a low score. It fails to describe the actual change clearly, which reduces its usefulness for understanding the commit's intent.","The commit message 'update signature.py' is overly vague and provides no information about what was changed or why. While the code diff shows a minor improvement in formatting (removing unnecessary tuple wrapping and making the return statement more concise), the commit message fails to convey the actual change or its significance. A better message would specify the nature of the change, such as 'Simplify signature return format to remove redundant tuple wrapping for URL parameter construction.' Thus, it receives a score of 2 for lacking detail and context.","The commit message is somewhat relevant and indicates a refactoring, but it lacks specificity about the change's impact or why the tuple format was altered. The diff shows a simple syntactic change from returning a tuple with quotes to returning a tuple without quotes, which is a minor formatting improvement. However, the commit message does not clearly explain the purpose or benefit of this change, nor does it reflect the actual intent (e.g., improving readability, consistency, or compatibility). A better message would explain the rationale behind the tuple return format change. Thus, it's accurate but insufficiently detailed, warranting a mid-range score."
1241aeaaa2b0af03bac4173f6400f895efbb33b8,Fix CLI by excluding session from json and cosmetic fixes,geocoder/location.py,"@@ -20,7 +20,8 @@ class Location(object):
     def ok(self):
         return bool(self.latlng)
 
-    def _convert_float(self, number):
+    @staticmethod
+    def _convert_float(number):
         try:
             return float(number)
         except ValueError:
",add missing staticmethod to location class,refactor(location): add staticmethod to _convert_float,Semantic,"The new message introduces a structural change by adding a staticmethod to a class method, which alters the behavior or interface of the code in a meaningful way, indicating a semantic improvement rather than just cosmetic or corrective changes.",2.0,3.0,3.0,"The commit message does not accurately reflect the changes in the code diff. The diff shows a change from a non-static instance method to a static method `_convert_float`, which is a structural and functional modification, not a CLI fix or cosmetic change. The mention of 'excluding session from json' is not present in the diff. Therefore, the commit message is misleading and out of alignment with the actual code changes, resulting in a low score.","The commit message correctly identifies that a staticmethod was added, which is accurate given the diff. However, it lacks context about why the method was made static (e.g., because it doesn't depend on instance state), and does not explain the purpose or impact of the change. While the message is technically correct and identifies the change, it is minimal and lacks clarity or motivation, which limits its completeness. A score of 3 reflects a basic, accurate but under-explained message.","The commit message correctly identifies the change as a refactor and mentions the addition of a staticmethod, which is accurate based on the diff. However, it lacks context about why the method was made static (e.g., for utility, to avoid instance state, or to improve reusability), and does not explain the benefit or impact of the change. While the technical detail is correct, the message is minimal and could be more informative for understanding the motivation behind the refactoring."
1241aeaaa2b0af03bac4173f6400f895efbb33b8,Fix CLI by excluding session from json and cosmetic fixes,geocoder/tamu.py,"@@ -59,7 +59,7 @@ class Tamu(Base):
         status_code = self.parse.get('QueryStatusCodeValue')
         exception = self.parse.get('Exception')
 
-        if (exception_occured == 'True' or status_code != '200' or exception):
+        if exception_occured == 'True' or status_code != '200' or exception:
             self.error = exception
 
         if status_code == '401' or status_code == '470':
",update tamu.py,fix(api): handle error conditions when status code is not 200 or exception occurs,Corrective,"The new message indicates a specific error handling improvement for API responses, addressing failure cases (non-200 status codes or exceptions), which is a functional fix rather than a cosmetic or trivial change.",2.0,2.0,3.0,"The commit message does not accurately reflect the changes in the code diff. The diff shows a logical fix to a condition in the Python code where the `exception_occured` check was incorrectly using parentheses, which could have led to unintended behavior. The message claims to fix the CLI by excluding session from JSON and mentions 'cosmetic fixes', but the actual change is a logical correction in a conditional statement, not related to JSON or CLI session handling. The connection between the changes and the commit message is weak and misleading, resulting in a low score.","The commit message 'update tamu.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. While the diff shows a logical simplification of a conditional expression (removing redundant parentheses), this context is missing from the commit message. A better message would specify the change, such as 'Fix logic in error handling condition to remove redundant parentheses and improve readability.' Thus, the message is only minimally informative and deserves a low score.","The commit message is generally clear and addresses the intended fix — handling error conditions when the status code is not 200 or an exception occurs. However, it lacks specificity about what was actually changed (e.g., removing the redundant parentheses, which improves readability and correctness). The message also doesn't highlight the impact or context, such as why the change matters (e.g., avoiding incorrect boolean evaluation due to parentheses). While it correctly identifies the domain (api) and the issue type (error handling), it could be more precise and technically detailed to fully reflect the diff's significance."
1241aeaaa2b0af03bac4173f6400f895efbb33b8,Fix CLI by excluding session from json and cosmetic fixes,setup.py,"@@ -9,7 +9,6 @@ try:
 except ImportError:
     from distutils.core import setup
 
-version = ''
 with open('geocoder/__init__.py', 'r') as fd:
     version = re.search(r'^__version__\s*=\s*[\'""]([^\'""]*)[\'""]',
                         fd.read(), re.MULTILINE).group(1)
",add missing import,removed(deprecated): version parsing from __init__.py,Corrective,"The change removes deprecated version parsing logic, which addresses a potential maintenance issue and aligns the code with current best practices, thus correcting a known problem.",2.0,2.0,2.0,"The commit message does not accurately reflect the changes in the code diff. The diff shows a removal of a version parsing block, which is unrelated to fixing a CLI or excluding session from JSON. The mention of 'cosmetic fixes' is vague and not supported by the actual change. The commit message is misleading and fails to convey the actual intent or impact of the change, resulting in a low score.","The commit message 'add missing import' is too vague and does not accurately reflect the changes in the diff. The diff shows a removal of a version parsing block, not the addition of an import. The actual change appears to be removing a version retrieval snippet, which may have been a mistake or part of a larger refactoring. Since the message misrepresents the change, it lacks clarity and context, making it only minimally informative. A better message would describe the removal of version parsing logic or clarify the intent behind the change.","The commit message indicates a removal of version parsing from __init__.py, which is accurate based on the diff. However, it labels the change as 'removed(deprecated)', which is misleading because the code was not deprecated—it was simply removed. The term 'deprecated' implies a planned removal with a fallback, but there's no evidence of deprecation in the code or intent. Additionally, the message lacks context about why the change was made (e.g., security, maintenance, or dependency changes). While the action is clear, the terminology and context are insufficient for a strong commit message, resulting in a moderate score."
1241aeaaa2b0af03bac4173f6400f895efbb33b8,Fix CLI by excluding session from json and cosmetic fixes,tests/test_cli.py,"@@ -5,7 +5,6 @@ Unit tests for cli functionality
 """"""
 
 import subprocess
-import geocoder
 
 
 address = '453 Booth Street, Ottawa'
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that needed fixing, which aligns with a corrective improvement.",2.0,2.0,1.0,"The commit message is vague and does not accurately reflect the changes in the diff. The diff shows the removal of an import ('geocoder') and a minor code cleanup (removing a line), but the commit message claims to fix the CLI by excluding session from JSON and includes 'cosmetic fixes' without evidence. There is no mention of JSON or session handling in the code changes, making the message misleading and uninformative. While it's not entirely wrong, it lacks specificity and accuracy, warranting a low score.","The commit message 'add missing import' is vague and lacks specificity. While it correctly identifies that an import was missing, it does not indicate which import was added or why it was necessary. The diff shows that the import for 'geocoder' was removed, not added, which contradicts the commit message. Therefore, the message is factually incorrect and misleading, resulting in a low score. A better message would clarify that a removed import was accidentally left out or that a dependency was incorrectly omitted.","The commit message 'fix: rectification failed' is vague, lacks context, and does not clearly describe what was fixed or why. The diff shows the removal of an import ('geocoder'), but the commit message provides no indication of the reason or the actual issue being resolved. A good commit message should explain the problem and the solution. This message fails to meet basic expectations for clarity and usefulness."
c1298a8e34f44ee9c068e1fef0ab13b874f93547,Uuuups forgot to clean up after debugging,geocoder/cli.py,"@@ -62,9 +62,6 @@ def cli(location, **kwargs):
     # Geocode results from user input
     for location in locations:
         g = geocoder.get(location.strip(), **kwargs)
-        print(kwargs['output'])
-        print(g.__getattribute__(kwargs['output']))
-        import pdb;pdb.set_trace()
         try:
             click.echo(json.dumps(g.__getattribute__(kwargs['output'])))
         except IOError:
",update geocoder.py,fix(cli): remove debug prints and pdb trace,Corrective,"The new message indicates a specific fix to remove debug prints and pdb traces, which addresses a functional or code quality issue, improving the code's correctness and cleanliness.",2.0,2.0,5.0,"The commit message is minimally informative and lacks detail about what was changed or why. While it acknowledges a debugging oversight, it does not specify the nature of the issue, the impact of the change, or the context (e.g., removing debug prints). A commit message should ideally explain the change and its purpose. This message is technically accurate but insufficiently descriptive, hence a score of 2.","The commit message 'update geocoder.py' is extremely vague and provides no information about what was actually changed or why. The diff shows the removal of two print statements and a pdb breakpoint, which suggests a debugging step was removed, likely to clean up or simplify the code. A better commit message would specify the change, such as 'Remove debug prints and pdb breakpoint from geocoder.py to simplify output handling'. Since the message offers no context or technical detail, it only scores a 2 — it indicates a file was modified but fails to communicate the purpose or impact of the change.","The commit message accurately reflects the changes in the code diff. It correctly identifies that debug prints and a pdb trace were removed from the cli function, which aligns with the diff showing the deletion of print statements and the pdb.set_trace() call. The message is concise, specific, and clearly communicates the purpose of the change, making it excellent for a commit message."
7d2872b1afaa68972cc2b06fe2b0aafe56774cdd,Use https protocol for Yandex Geocoder. Fixes #229,geocoder/yandex.py,"@@ -41,7 +41,7 @@ class Yandex(Base):
     method = 'geocode'
 
     def __init__(self, location, **kwargs):
-        self.url = 'http://geocode-maps.yandex.ru/1.x/'
+        self.url = 'https://geocode-maps.yandex.ru/1.x/'
         self.location = location
         self.params = {
             'geocode': location,
",update yandex.py,fix(geocode): use HTTPS for Yandex geocode URL,Corrective,"The new message explicitly identifies the change as a fix for a security protocol issue (using HTTPS), addressing a potential vulnerability or misconfiguration in the old message, which was merely stating the action without context or categorization.",5.0,2.0,5.0,"The commit message is clear, concise, and directly relates to the change. It accurately describes the update from HTTP to HTTPS for the Yandex Geocoder URL, which improves security and is consistent with best practices. The mention of 'Fixes #229' properly links the commit to the relevant issue, providing context and traceability. All elements are relevant and sufficient for understanding the change and its purpose.","The commit message 'update yandex.py' is overly vague and provides no context about what was changed or why. While the diff shows a clear update from HTTP to HTTPS in the URL, the commit message fails to communicate the significance of the change (e.g., improved security, compatibility, or functionality). A better message would specify the change (e.g., 'Update Yandex geocode URL to HTTPS for secure connections'). Therefore, it receives a score of 2 for lacking detail and context.","The commit message is clear, concise, and accurately describes the change. It specifies the type of change ('fix'), the affected feature ('geocode'), and the exact improvement ('use HTTPS for Yandex geocode URL'), which directly relates to the diff. The message is appropriate for a changelog and provides sufficient context for understanding the change without extra detail."
7d2872b1afaa68972cc2b06fe2b0aafe56774cdd,Use https protocol for Yandex Geocoder. Fixes #229,geocoder/yandex_reverse.py,"@@ -40,7 +40,7 @@ class YandexReverse(Yandex, Base):
     method = 'reverse'
 
     def __init__(self, location, **kwargs):
-        self.url = 'http://geocode-maps.yandex.ru/1.x/'
+        self.url = 'https://geocode-maps.yandex.ru/1.x/'
         location = location
         x, y = Location(location).xy
         self.location = u'{}, {}'.format(x, y)
",update yandex.py,fix(geocode): use HTTPS for Yandex geocode reverse URL,Corrective,"The new message explicitly identifies the fix as part of a geocoding feature and specifies the use of HTTPS, which addresses a security and protocol correctness issue, going beyond a simple cosmetic change.",5.0,2.0,5.0,"The commit message clearly states the change made (switching from HTTP to HTTPS), specifies the affected component (Yandex Geocoder), and references the relevant issue (#229). It is concise, accurate, and provides sufficient context to understand the purpose and impact of the change. The diff confirms the change is correct and minimal, and the commit message aligns perfectly with the actual modification.","The commit message 'update yandex.py' is overly vague and provides no context about what was changed or why. While the diff shows a clear change from HTTP to HTTPS in the URL, the message fails to communicate the significance of the update (e.g., security, compatibility, or functionality). A better message would specify the change (e.g., 'Switch Yandex geocoding API from HTTP to HTTPS for security and compatibility'). As such, it lacks detail and technical context, resulting in a score of 2.","The commit message is clear, concise, and accurately describes the change. It specifies the type of change ('fix'), the affected component ('geocode'), and the exact nature of the update (switching from HTTP to HTTPS for the Yandex reverse geocode URL). The diff confirms the change is relevant and directly addresses the issue. This is an excellent commit message that follows conventional standards and provides sufficient context for understanding the change."
c770fef838c117477a95e85997d6a4f9955915a4,Baidu failing tests,tests/test_geocoder.py,"@@ -124,12 +124,12 @@ def test_maxmind():
     g = geocoder.maxmind(ip)
     assert g.ok
 
-
+""""""
 @pytest.mark.xfail(raises=TimeoutError)
 def test_baidu():
     g = geocoder.baidu(china)
     assert g.ok
-
+""""""
 
 def test_google():
     g = geocoder.google(location, client=None)
",add xfail test for geocoder,fix: rectification failed,Corrective,"The new message indicates a specific issue ('rectification failed') and frames it as a fix, suggesting a correction to a failure, which aligns with a corrective improvement rather than a cosmetic or trivial change.",2.0,2.0,0.0,"The commit message 'Baidu failing tests' is overly vague and lacks context. It does not explain why the tests are failing, what the expected behavior is, or whether the failure is intentional (e.g., due to timeouts or service issues). While it identifies the affected test (Baidu), it fails to communicate the root cause or any changes made. A better message would specify the nature of the failure (e.g., timeout, service unavailability) and possibly indicate that the test is marked as xfailed for a known reason. Therefore, it receives a score of 2 for being minimally relevant but insufficiently informative.","The commit message 'add xfail test for geocoder' is overly vague and does not accurately reflect the changes in the diff. The diff shows the addition of an xfail test specifically for `test_baidu()`, not a general 'geocoder' test. Additionally, the test is marked with `@pytest.mark.xfail(raises=TimeoutError)`, indicating a timeout-related failure, which is not mentioned in the commit message. A better message would specify the test name and the reason for xfail (e.g., 'Add xfail for baidu geocoder due to timeout issues'). As a result, the message lacks specificity and context, earning a score of 2.",
2856d0a444eee43a71fad3996d0114e31b28a9b5,Fix google reverse #237,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.21.0'
+__version__ = '1.21.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message addresses a specific failure ('rectification failed') indicating a bug or error in the system, which is a corrective fix rather than a cosmetic or semantic change.",2.0,1.0,1.0,"The commit message 'Fix google reverse #237' is overly vague and does not accurately reflect the actual change in the diff. The diff only shows an increment in the version number from '1.21.0' to '1.21.1', which is a version bump, not a fix for a Google reverse geocoding issue. The message fails to describe what was actually fixed or why the version was updated. A better message would mention the version update and possibly the reason (e.g., 'Bump version to 1.21.1 for consistency and bug fixes'). Therefore, it is only minimally relevant and lacks clarity, warranting a score of 2.","The commit message 'add missing docstrings' is highly misleading given the actual change in the diff. The diff shows only a version bump from '1.21.0' to '1.21.1', not the addition of any docstrings. Therefore, the commit message does not accurately reflect the changes made, making it incorrect and untrustworthy. A proper message would have been something like 'Bump version to 1.21.1'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.21.0' to '1.21.1', which is a simple version update, not a fix for a rectification failure. The message fails to describe what was fixed, why it was fixed, or its impact, making it misleading and unhelpful for understanding the commit's purpose."
2856d0a444eee43a71fad3996d0114e31b28a9b5,Fix google reverse #237,geocoder/google_reverse.py,"@@ -26,7 +26,8 @@ class GoogleReverse(Google):
     def __init__(self, location, **kwargs):
         self.url = 'https://maps.googleapis.com/maps/api/geocode/json'
         self.location = str(Location(location))
-        self.short_name = kwargs.get('short_name', True)
+        self.client = kwargs.get('client', google_client)
+        self.client_secret = kwargs.get('client_secret', google_client_secret)
         self.params = {
             'sensor': 'false',
             'latlng': self.location,
",update reverse.py,add(client): support client and client_secret configuration,Semantic,"The new message provides a clearer and more descriptive indication of the change's purpose, specifying the addition of client and client_secret configuration, which improves understanding of the functionality being introduced compared to the vague 'Fix google reverse #237'.",2.0,2.0,3.0,"The commit message 'Fix google reverse #237' is overly vague and does not describe what was actually changed or why. The diff shows that the code modified parameters related to client credentials (adding `client` and `client_secret`), which suggests a change in authentication setup, but this context is missing from the commit message. A better message would specify the change, such as 'Add client and client_secret parameters for Google reverse geocoding authentication'. As it stands, the message fails to provide meaningful context about the fix or its impact, resulting in a low score.","The commit message 'update reverse.py' is extremely vague and provides no information about what was changed or why. While the diff shows modifications to the class initialization, including the addition of new parameters `client` and `client_secret`, the commit message fails to reflect these changes. A better message would specify the addition of client and secret parameters for Google reverse geocoding. This lack of detail makes the commit hard to understand without reviewing the diff, resulting in a low score.","The commit message indicates the addition of client and client_secret configuration, which is relevant to the code change. However, it lacks context about why these fields were added, their purpose, or how they affect the functionality. The message is technically accurate but too vague and does not clearly explain the impact or intent. A better message would specify, for example, 'Add client and client_secret support for Google Maps API authentication'. Thus, it's functional but not detailed or informative enough for clarity, warranting a moderate score."
3d19820951be6493d03cf2b192eef868c257dec2,fix google reverse,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.21.1'
+__version__ = '1.21.2'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message addresses a specific failure scenario ('rectification failed') more accurately than the vague 'fix google reverse', indicating a correction of the underlying issue rather than just a surface-level change.",2.0,1.0,1.0,"The commit message 'fix google reverse' is too vague and does not accurately reflect the actual change. The diff shows only a version bump from '1.21.1' to '1.21.2', which is a minor version update, not a fix for Google reverse geocoding. A more accurate message would describe the nature of the change, such as 'Bump version to 1.21.2' or 'Update version for consistent JSON responses'. Since the commit message fails to clearly describe what was changed or why, it is only minimally informative.","The commit message 'add missing docstrings' is highly inconsistent with the actual change in the code diff. The diff shows only a version bump from '1.21.1' to '1.21.2', which is a version update, not the addition of docstrings. There are no docstrings added or modified in the code. Therefore, the commit message is misleading and does not accurately reflect the change, making it poor.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows a simple version bump from '1.21.1' to '1.21.2', which is a routine update, not a fix for a rectification failure. The message provides no context about what was fixed, why it was fixed, or what problem it solves. It fails to meet basic expectations for clarity and relevance, making it poor for communication and tracking."
3d19820951be6493d03cf2b192eef868c257dec2,fix google reverse,geocoder/google_reverse.py,"@@ -4,7 +4,7 @@
 from __future__ import absolute_import
 from geocoder.google import Google
 from geocoder.location import Location
-from geocoder.keys import google_key, google_client
+from geocoder.keys import google_key, google_client, google_client_secret
 
 
 class GoogleReverse(Google):
",add missing import,feat(geocoder.keys): add google_client_secret import,Semantic,"The new message provides a more descriptive and meaningful explanation of the change, specifying the feature addition and the exact component involved (google_client_secret import), which improves clarity and context compared to the vague 'fix google reverse'.",2.0,3.0,3.0,"The commit message 'fix google reverse' is extremely vague and provides no context about what was fixed, why it was necessary, or what issue it resolves. While the diff shows an addition of `google_client_secret` from `geocoder.keys`, which may be relevant for OAuth or secure client authentication, the commit message fails to explain this change. A better message would specify the purpose, such as 'Add google_client_secret to enable secure OAuth for Google Reverse geocoding'. As it stands, the message lacks detail and technical context, making it only minimally informative.","The commit message 'add missing import' is accurate and reflects the change, as a new import (google_client_secret) was added. However, it lacks detail about why the import was needed or its potential impact, which could be helpful for context. While it is correct and concise, it is minimal in explanatory value, so it does not reach 'excellent' but is functional and clear enough to be acceptable.","The commit message is clear and accurately reflects the change, stating that a new import (`google_client_secret`) was added to the `geocoder.keys` module. However, it lacks context about why this import is needed or its impact on functionality, which would have made it more valuable for understanding the purpose behind the change. While it correctly identifies the feature and the affected file, it is somewhat minimal in explaining the significance or use case of the new import."
bd9f949b6c65fa7c025eff1fe7b27a0dffb9a2bb,Fix attempt for Google Reverse Geocoding,geocoder/google_reverse.py,"@@ -31,9 +31,8 @@ class GoogleReverse(Google):
         self.params = {
             'sensor': 'false',
             'latlng': self.location,
-            'key': kwargs.get('key', google_key),
             'language': kwargs.get('language', ''),
-            'client': kwargs.get('client', google_client)
+            'region': kwargs.get('region', ''),
         }
         if self.client and self.client_secret:
             self.params['client'] = self.client
",update reverse.py,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed') in the geocoding process, providing clearer and more accurate information about the issue compared to the vague 'Fix attempt' in the old message.",2.0,2.0,1.0,"The commit message 'Fix attempt for Google Reverse Geocoding' is vague and does not clearly describe what was fixed or why. The diff shows that two parameters ('key', 'language', 'client') were removed from the params dictionary, and 'region' was added instead. This suggests a configuration or parameter change, possibly due to deprecation or API updates. The message fails to indicate the actual change, its purpose, or the impact. While it contains the word 'fix', it lacks specificity and context, making it difficult to understand the intent or significance of the change. A better message would describe the removal of deprecated parameters and the addition of a new one (region), especially if it relates to API changes or deprecation policy.","The commit message 'update reverse.py' is extremely vague and provides no information about what was changed or why. While the diff shows a removal of 'key', 'language', and 'client' parameters in favor of 'region', this context is missing from the message. A better message would indicate the specific changes, such as 'Remove deprecated parameters (key, language, client) in favor of region support in GoogleReverse class'. Since the message offers no actionable insight into the change, it receives a low score.","The commit message 'fix: rectification failed' is vague, unclear, and provides no meaningful information about what was actually fixed or why. The diff shows a change in parameters from including 'key', 'language', and 'client' to only including 'region', which suggests a removal or reconfiguration of Google Reverse Geocoding parameters. However, the commit message does not reflect this change, nor does it explain the intent or context. A proper commit message should describe the actual change and its purpose. Therefore, the message is poor and fails to meet basic standards for clarity and usefulness."
1ef012387a140425632adead338c56dd54e3ca7e,Reduced google reverse init complexity to avoid bugs,geocoder/google.py,"@@ -41,23 +41,26 @@ class Google(Base):
 
     def __init__(self, location, **kwargs):
         self.url = 'https://maps.googleapis.com/maps/api/geocode/json'
-        self.location = location
         self.client = kwargs.get('client', google_client)
         self.client_secret = kwargs.get('client_secret', google_client_secret)
         self.params = {
-            'address': location,
-            'bounds': kwargs.get('bounds', ''),
             'language': kwargs.get('language', ''),
             'region': kwargs.get('region', ''),
-            'components': kwargs.get('components', ''),
         }
         if self.client and self.client_secret:
             self.params['client'] = self.client
             self._encode_params()
         elif kwargs.get('key', google_key):
             self.params['key'] = kwargs.get('key', google_key)
+        self.location_init(location, **kwargs)
         self._initialize(**kwargs)
 
+    def location_init(self, location, **kwargs):
+        self.location = location
+        self.params['address'] = location
+        self.params['bounds'] = kwargs.get('bounds', '')
+        self.params['components'] = kwargs.get('components', '')
+
     def _encode_params(self):
         # turn non-empty params into sorted list in order to maintain signature validity.
         # Requests will honor the order.
",add google api docs,feat(google): initialize location and params in geocode client,Semantic,"The new message provides a more specific and meaningful description of the change by indicating the exact components (location and params) being initialized and the context (geocode client), improving clarity and intent compared to the vague original message.",2.0,1.0,3.0,"The commit message 'Reduced google reverse init complexity to avoid bugs' is vague and misleading. The code diff shows that the initialization logic was actually expanded with a new `location_init` method, which increases clarity and separates concerns rather than reducing complexity. The message implies simplification, but the change introduces more structure and explicit handling of location parameters. Therefore, the commit message does not accurately reflect the change and lacks specificity or context, resulting in a low score.","The commit message 'add google api docs' is completely irrelevant to the code changes shown in the diff. The diff introduces a new method `location_init` and modifies the initialization logic of the Google class to properly set `location` and related parameters. This is a functional change to the codebase, not a documentation update. Therefore, the commit message fails to accurately reflect the actual changes made, making it poor and misleading.","The commit message accurately reflects the change—initializing the location and params in the Google geocode client—but lacks detail about why this change was made or its impact. While it correctly identifies the feature and the component (google), it does not explain the motivation (e.g., fixing missing location data, enabling proper geocoding), nor does it highlight any edge cases or improvements in functionality. A better message would include context such as 'fixes missing location in geocoding requests' or 'ensures location and bounds are properly passed to API'. As a result, it's clear but superficial, earning a moderate score."
1ef012387a140425632adead338c56dd54e3ca7e,Reduced google reverse init complexity to avoid bugs,geocoder/google_reverse.py,"@@ -4,7 +4,6 @@
 from __future__ import absolute_import
 from geocoder.google import Google
 from geocoder.location import Location
-from geocoder.keys import google_key, google_client, google_client_secret
 
 
 class GoogleReverse(Google):
@@ -23,23 +22,10 @@ class GoogleReverse(Google):
     provider = 'google'
     method = 'reverse'
 
-    def __init__(self, location, **kwargs):
-        self.url = 'https://maps.googleapis.com/maps/api/geocode/json'
+    def location_init(self, location, **kwargs):
         self.location = str(Location(location))
-        self.client = kwargs.get('client', google_client)
-        self.client_secret = kwargs.get('client_secret', google_client_secret)
-        self.params = {
-            'sensor': 'false',
-            'latlng': self.location,
-            'language': kwargs.get('language', ''),
-            'region': kwargs.get('region', ''),
-        }
-        if self.client and self.client_secret:
-            self.params['client'] = self.client
-            self._encode_params()
-        elif kwargs.get('key', google_key):
-            self.params['key'] = kwargs.get('key', google_key)
-        self._initialize(**kwargs)
+        self.params['latlng'] = location
+        self.params['sensor'] = 'false'
 
     @property
     def ok(self):
",add google reverse api docs,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that was addressed, implying a fix for a problem rather than a cosmetic or trivial change.",3.0,1.0,1.0,"The commit message 'Reduced google reverse init complexity to avoid bugs' is vague and lacks specific details about the changes made or the actual improvements achieved. While the diff shows a refactoring of the `__init__` method in `GoogleReverse` class, removing dependencies on global keys and simplifying parameter handling, the message does not clearly explain what was simplified, why it was necessary, or how it reduces complexity or prevents bugs. A more detailed message (e.g., 'Simplified GoogleReverse initialization by removing global key dependencies and consolidating parameter setup') would be more informative and useful for code review and maintainability.","The commit message 'add google reverse api docs' is highly mismatched with the actual changes in the code diff. The diff shows a removal of Google key-related variables and refactoring of the GoogleReverse class initialization, specifically removing dependencies on google_key, google_client, and google_client_secret, and modifying the initialization logic. This indicates a code refactoring or security improvement, not the addition of API documentation. The commit message is therefore irrelevant and misleading, making it poor and inaccurate.","The commit message 'fix: rectification failed' is extremely vague and provides no context about what was actually fixed or why. The diff shows a significant refactoring of the GoogleReverse class initialization, removing dependencies on global keys and client secrets, and restructuring parameter handling. A meaningful commit message should clearly describe the change, such as 'refactor: remove hardcoded Google API keys and simplify reverse geocoding initialization'. The current message fails to convey any technical detail, making it poor for understanding the purpose or impact of the change."
932c6bcd76a2ce1d165b4c94e70e0f04fe9c1b4c,"Fix invalid URL for google reverse
https://github.com/DenisCarriere/geocoder/pull/242",geocoder/google_reverse.py,"@@ -24,7 +24,7 @@ class GoogleReverse(Google):
 
     def _location_init(self, location, **kwargs):
         self.location = str(Location(location))
-        self.params['latlng'] = location
+        self.params['latlng'] = self.location
         self.params['sensor'] = 'false'
 
     @property
",update reverse.rb,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error in the system's functionality, which is a corrective improvement addressing a functional issue.",3.0,2.0,2.0,"The commit message indicates a fix for an invalid URL in Google reverse geocoding, which aligns with the code change that replaces `location` with `self.location` (a properly formatted Location object). However, the message is vague and lacks specific details about the issue (e.g., why the URL was invalid, what the original problem was, or how the fix ensures correctness). It also references a PR link without context. While the fix is relevant and likely correct, the commit message does not fully explain the problem or its significance, resulting in a moderate score.","The commit message 'update reverse.rb' is extremely vague and provides no information about what was changed or why. While the diff shows a change in the code where `self.params['latlng']` is now set to `self.location` instead of directly using `location`, the commit message fails to convey the significance of this change. A better message would describe the improvement, such as 'Use self.location for latlng parameter to ensure consistent location formatting'. As it stands, the message offers minimal value and does not reflect the actual change, resulting in a low score.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple change: replacing `location` with `self.location` in the params dictionary, which suggests a fix for incorrect data type or value usage. However, the message fails to explain the issue or the actual fix, making it difficult to understand the context. A better message would describe the problem (e.g., 'fix: ensure latlng uses string location from Location class') and the change. Thus, it receives a score of 2 for being technically correct but lacking clarity and context."
dfeb60a458c4a7365059d04eff4d845b63437d13,"bugfix - prevent: TypeError: a bytes-like object is required, not 'str'",geocoder/mapquest.py,"@@ -38,7 +38,7 @@ class Mapquest(Base):
         self._initialize(**kwargs)
 
     def _catch_errors(self):
-        if self.content and 'The AppKey submitted with this request is invalid' in self.content:
+        if self.content and b'The AppKey submitted with this request is invalid' in self.content:
             raise ValueError('MapQuest API Key invalid')
 
     def _exceptions(self):
",update mapquest.py,fix(api): handle AppKey invalid error with byte string check,Corrective,"The new message describes a specific fix addressing a type error related to byte string handling, indicating a bug resolution with improved error handling, which falls under corrective improvements.",4.0,2.0,4.0,"The commit message correctly identifies a potential TypeError related to string vs bytes comparison, which is a relevant issue. The diff shows a fix where the content is checked as bytes instead of a string, which resolves the error. The message is clear and directly relates to the change, though it could be slightly more specific (e.g., mentioning the context of API key validation). Overall, it's accurate, concise, and relevant to the change, making it a strong bugfix message.","The commit message 'update mapquest.py' is extremely vague and provides no information about what was changed or why. While the diff shows a specific change—switching from a string to a bytes comparison in the error check—it lacks context. A better message would indicate the nature of the change (e.g., 'Fix MapQuest API key validation to handle bytes content'). As it stands, the message fails to communicate the significance or impact of the change, making it insufficient for understanding the purpose of the update.","The commit message is clear and relevant to the change, correctly identifying the fix as addressing an API key validation error. It specifies the context ('api') and the nature of the fix (using byte string check). However, it could be slightly improved by mentioning why the original string check was insufficient or the risk of type mismatch (e.g., content being bytes vs. string), which would make it more informative. Overall, it's accurate and actionable, earning a strong 4."
f2f72470c6fd845046af466e207fc6dc8e6e7c37,Passing custom params and headers. Fix #247,geocoder/base.py,"@@ -87,6 +87,8 @@ class Base(object):
         self.status_code = 'Unknown'
         self.timeout = kwargs.get('timeout', 5.0)
         self.proxies = kwargs.get('proxies', '')
+        self.headers.update(kwargs.get('headers', {}))
+        self.params.update(kwargs.get('params', {}))
         try:
             r = self.rate_limited_get(
                 self.url,
",update base.py,feat(request): add headers and params support,Semantic,"The new message provides a more descriptive and structured indication of the feature addition, specifying the component ('request') and the nature of the change (headers and params support), which improves clarity and semantic accuracy over the old message.",3.0,2.0,3.0,"The commit message correctly indicates that custom params and headers are now being passed, which aligns with the code changes. However, it lacks detail about how or why this change was made, and does not explicitly mention the issue it fixes (e.g., referencing #247 is good, but no context is given). The message is accurate but minimal, making it functional but not informative. A score of 3 reflects a basic, correct message that meets minimum expectations but falls short of being clear or comprehensive.","The commit message 'update base.py' is extremely vague and provides no information about what was changed or why. While the diff shows two additions related to updating headers and params from kwargs, the message fails to convey the actual impact or context. A better message would specify the changes, such as 'Add headers and params support from kwargs in Base class'. Therefore, it receives a score of 2 for being technically accurate but lacking detail and clarity.","The commit message 'feat(request): add headers and params support' is somewhat vague and lacks detail about the actual changes or their impact. While it correctly identifies the feature as related to request headers and params, it does not specify how these were implemented or why they are significant. The diff shows that the headers and params are being updated from kwargs, which is a concrete implementation detail missing from the message. A stronger message would include context such as 'add support for headers and params via kwargs to improve request customization'. Thus, it's functional but lacks clarity and depth, warranting a moderate score."
646cdce42a7d700d5e02958e754e3c1f4fb87232,"Fix geocoder.ip('me')
Ref: https://github.com/DenisCarriere/geocoder/issues/250",geocoder/ipinfo.py,"@@ -17,9 +17,10 @@ class Ipinfo(Base):
 
     def __init__(self, location='', **kwargs):
         self.location = location
-        if location.lower() == 'me':
-            self.location = ''
-        self.url = 'http://ipinfo.io/{0}/json'.format(self.location)
+        if location.lower() == 'me' or location == '':
+            self.url = 'http://ipinfo.io/json'
+        else:
+            self.url = 'http://ipinfo.io/{0}/json'.format(self.location)
         self._initialize(**kwargs)
 
     def _catch_errors(self):
",update ipinfo.py,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed'), suggesting a bug or error that was addressed, which falls under corrective improvement.",3.0,2.0,1.0,"The commit message correctly identifies the issue being fixed — handling the 'me' input in the geocoder.ip('me') call — and references the relevant issue. However, it lacks detail about the change itself (e.g., how the URL is now constructed differently when location is 'me' or empty). While the fix is clear from the diff, the commit message is minimal and does not fully explain the impact or reasoning. It is accurate and relevant but could be more descriptive to fully reflect the change.","The commit message 'update ipinfo.py' is overly vague and provides no information about what was changed or why. While the diff shows a meaningful update to the Ipinfo class's logic—specifically, modifying how the URL is constructed based on the 'location' parameter—the commit message fails to convey the actual change, its purpose, or its impact. A better message would describe the behavior change, such as 'Fix URL construction for 'me' and empty location inputs to point to default IP info endpoint'. Therefore, it receives a score of 2 for lacking specificity and context.","The commit message 'fix: rectification failed' is highly vague and uninformative. It does not describe what was actually fixed, why it was necessary, or what the problem was. A good commit message should clearly explain the change and its purpose. The diff shows a logical improvement in the URL construction logic—specifically, handling 'me' or empty location by setting the URL to 'http://ipinfo.io/json'—but this critical detail is missing from the message. Therefore, the message fails to provide context or value to developers reviewing the change, resulting in a poor score."
ae49c2c6a63bc465f9a0e5c35fe94b8bd4ca96c1,patch version change,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.23.1'
+__version__ = '1.23.2'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue (rectification failed) that was previously not addressed, suggesting a fix for a bug or failure, which falls under corrective improvement.",2.0,1.0,1.0,"The commit message 'patch version change' is technically accurate but lacks detail and context. While it correctly indicates a version bump, it does not specify what was changed, why the version was incremented, or which component was affected. In a well-maintained codebase, such messages should provide more value to reviewers or future contributors. A better message would explain the nature of the change (e.g., 'Updated version to 1.23.2 to fix JSON response consistency across providers'). Therefore, the message is minimally informative and receives a score of 2.","The commit message 'add missing docstrings' is highly misleading given the actual change in the code diff. The diff shows only a version bump from '1.23.1' to '1.23.2', not the addition of any docstrings. Therefore, the commit message does not accurately reflect the changes made, making it incorrect and unhelpful for understanding the purpose of the commit.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.23.1' to '1.23.2', which is a simple version update, not a fix for a rectification failure. The message lacks context, specificity, and clarity about what was fixed or why. A proper commit message should describe the actual change and its purpose, such as 'chore: update version to 1.23.2'. Therefore, the message is poor and does not match the diff."
e55f39422af6c6e93c7e462fd2a34aaf1a1fa40d,Change snapcraft to Python3,setup.py,"@@ -4,10 +4,7 @@
 from codecs import open
 import re
 
-try:
-    from setuptools import setup
-except ImportError:
-    from distutils.core import setup
+from distutils.core import setup
 
 with open('geocoder/__init__.py', 'r') as fd:
     version = re.search(r'^__version__\s*=\s*[\'""]([^\'""]*)[\'""]',
",add missing import,fix: rectification failed,Corrective,"The new message indicates a specific error ('rectification failed') that suggests a bug or failure in the system, implying a fix is needed, which is a corrective improvement.",1.0,2.0,2.0,"The commit message 'Change snapcraft to Python3' is highly inaccurate and irrelevant to the actual changes in the diff. The diff shows a change in the Python packaging setup code, specifically replacing a try-except block for setuptools with a direct import of distutils.core.setup, which is a Python packaging configuration change, not a snapcraft or Python3 migration. The commit message does not reflect the actual content of the change, leading to a significant misalignment between the message and the code. Therefore, it is poor and should be scored 1.","The commit message 'add missing import' is too vague and lacks context. While the diff does remove a try-except block and directly imports from distutils.core, the message does not clearly explain what was removed, why it was removed, or the impact of the change. A better message would specify that the setuptools fallback import was removed because distutils.core is sufficient and the codebase no longer requires setuptools. The message fails to convey the intent or rationale, which reduces its usefulness for code review or future developers.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simplification of the setup.py import logic—removing a try-except block and directly importing from distutils.core. This change is a minor refactoring or cleanup, not a fix for a failure. The term 'rectification' is unclear and not standard in software development context. A better message would specify the actual change, such as 'fix: simplify setup.py import by removing setuptools fallback'. Therefore, the message is technically a 'fix' but lacks clarity and specificity, warranting a low-to-moderate score."
bbcff0e941fa0d5506451f7748feba68b01a4862,Fix setup.py,setup.py,"@@ -4,7 +4,10 @@
 from codecs import open
 import re
 
-from distutils.core import setup
+try:
+    from setuptools import setup
+except ImportError:
+    from distutils.core import setup
 
 with open('geocoder/__init__.py', 'r') as fd:
     version = re.search(r'^__version__\s*=\s*[\'""]([^\'""]*)[\'""]',
",add missing import,feat(core): switch to setuptools for setup,Semantic,"The new message provides a clearer, more descriptive indication of the change by specifying the use of setuptools and categorizing it under core functionality, which improves understanding of the technical impact beyond a simple fix.",2.0,3.0,3.0,"The commit message 'Fix setup.py' is overly vague and does not convey the actual change or its significance. While the diff shows a replacement of `distutils.core.setup` with a try-except fallback to `setuptools.setup`, which improves compatibility and modern Python packaging practices, the message lacks specificity about what was fixed and why. A better message would indicate the improvement in setuptools compatibility or the resolution of a packaging dependency issue. Thus, it receives a score of 2 for being technically correct but insufficiently descriptive.","The commit message 'add missing import' is technically correct as it describes the action taken (adding an import), but it is overly vague and lacks context. The diff shows a more specific change: adding a try-except block to handle both setuptools and distutils fallbacks, which indicates a more nuanced improvement in import handling. A better commit message would explain the intent (e.g., 'Ensure setup.py works with setuptools or distutils'). Therefore, while the message is accurate, it is insufficiently detailed to reflect the actual change's significance, resulting in a moderate score.","The commit message correctly identifies the change as a feature related to core setup, but it's somewhat vague and lacks context about why setuptools was chosen over distutils. While the diff shows a safe fallback to distutils if setuptools is unavailable, the message doesn't convey the benefit or rationale (e.g., better dependency handling, modern Python packaging). A more detailed message would explain the upgrade's purpose and advantages, which is missing here. Thus, it's functional but not fully informative."
3820f2776c97321167b24458641116c56cb5cbd2,"fixed flake8 F401,F811",geocoder/freegeoip.py,"@@ -108,10 +108,6 @@ class FreeGeoIP(Base):
     def organization(self):
         return self.parse.get('organization')
 
-    @property
-    def offset(self):
-        return self.parse.get('offset')
-
     @property
     def ip(self):
         return self.parse.get('ip')
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously masked or unaddressed, implying a corrective action is needed to fix the underlying problem.",2.0,1.0,1.0,"The commit message 'fixed flake8 F401,F811' is vague and provides no context about what was actually changed or why. While it correctly identifies the tools (flake8) and error codes (F401, F811), the diff shows a removal of a property method (`offset`), which suggests the fix was removing a redundant or unused property. A better message would explain the change, such as 'Removed unused offset property to resolve flake8 F811 (unused-argument) and F401 (no-member)'. As the current message lacks actionable detail and context, it earns a score of 2 (Fair).","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff removes a property method (`offset`) rather than adding docstrings. There is no indication of docstring additions, and the message does not accurately reflect the change. Therefore, the commit message is incorrect and fails to provide meaningful context, making it poor.","The commit message 'fix: rectification failed' is highly vague and lacks clarity. It does not describe what was actually fixed, why it was necessary, or what problem it solved. The diff shows the removal of a property `offset`, which suggests a cleanup or refactoring, but the commit message fails to communicate this. A meaningful commit message should explain the change in simple terms, such as 'remove unused offset property'. Therefore, the message is poor in clarity, context, and usefulness."
3820f2776c97321167b24458641116c56cb5cbd2,"fixed flake8 F401,F811",geocoder/geocodefarm.py,"@@ -2,7 +2,6 @@
 # coding: utf8
 
 from __future__ import absolute_import
-import six
 from geocoder.base import Base
 from geocoder.keys import geocodefarm_key
 
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously overlooked, which implies a corrective action is needed to address the failure.",2.0,2.0,1.0,"The commit message 'fixed flake8 F401,F811' is vague and lacks context. It does not explain what was actually fixed, why it was necessary, or how it addresses the issues. While it correctly references flake8 errors, the absence of detail about the changes (e.g., removal of 'six' import) makes it insufficient for understanding the impact. The diff shows the removal of an import ('six'), which likely resolves F401 (import not used) and possibly F811 (invalid syntax or unused import), but this connection is not made in the message. A better message would specify the import removal and its rationale.","The commit message 'add missing import' is overly vague and provides no context about what was missing or why it was necessary. While it correctly identifies that an import was added, the lack of detail makes it difficult to understand the impact or rationale. A better message would specify which import was added and why (e.g., 'Remove unused import six to simplify dependencies'). Given the minimal change and the absence of context, the message is only marginally informative, warranting a score of 2.","The commit message 'fix: rectification failed' is extremely vague and provides no context about what was actually fixed, why it was necessary, or what issue it resolves. It does not describe the change in the code (which is a removal of the 'six' import), nor does it explain the impact or purpose of the change. A good commit message should be specific, actionable, and informative. This message fails to meet basic standards for clarity and usefulness, making it poor."
3820f2776c97321167b24458641116c56cb5cbd2,"fixed flake8 F401,F811",geocoder/geocodefarm_reverse.py,"@@ -2,7 +2,6 @@
 # coding: utf8
 
 from __future__ import absolute_import
-import six
 from geocoder.base import Base
 from geocoder.location import Location
 from geocoder.geocodefarm import GeocodeFarm
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now requires fixing, which aligns with a corrective change.",2.0,2.0,1.0,"The commit message 'fixed flake8 F401,F811' is vague and lacks context. It does not explain what was actually fixed, why it was necessary, or how it relates to the code changes. The diff shows the removal of an import ('six'), which may have been related to the flake8 issues, but this connection is not made explicit in the message. A better message would specify the exact issue (e.g., 'removed unused import six to fix F401') and its impact. As such, the message is technically correct but insufficiently informative, warranting a score of 2.","The commit message 'add missing import' is overly vague and lacks specificity. While it correctly identifies that an import was added, it does not explain which import was missing, why it was necessary, or what impact it has on the code. The diff shows the removal of 'import six', which suggests the commit might actually be removing a dependency rather than adding one. The message is therefore misleading or inaccurate, reducing its quality. A better message would clarify that 'six' was removed due to deprecation or compatibility changes. Thus, the score is 2 for being technically incorrect or ambiguous.","The commit message 'fix: rectification failed' is extremely vague and provides no context about what was actually fixed, why it was necessary, or what issue it resolves. It does not describe the change in the code (which is simply a removal of an import), nor does it indicate the problem it solved. A good commit message should clearly explain the purpose and impact of the change. This message fails to meet basic standards for clarity and informativeness, making it poor."
3820f2776c97321167b24458641116c56cb5cbd2,"fixed flake8 F401,F811",geocoder/google_places.py,"@@ -2,7 +2,6 @@
 # coding: utf8
 
 from __future__ import absolute_import
-import time
 from geocoder.base import Base
 from geocoder.keys import google_key
 
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously overlooked, which implies a corrective action is needed to fix the problem.",2.0,2.0,1.0,"The commit message 'fixed flake8 F401,F811' is vague and lacks context. While it correctly identifies the issue type (flake8 violations), it does not explain what was fixed, why it was necessary, or how the change addresses the problems. The diff shows the removal of an import (`time`), which may have been related to the F401 (imported but unused) or F811 (invalid import) issues, but this connection is not made explicit in the message. A better message would specify the exact import removed and the reason, such as 'removed unused import of time to fix flake8 F401 and F811'. As it stands, the message is technically correct but insufficiently informative, warranting a score of 2.","The commit message 'add missing import' is vague and lacks specificity. While it correctly identifies that an import was added, it does not explain which import was missing or why it was necessary. The diff shows that `time` was removed, not added, so the message is factually incorrect. A better message would clarify that a missing import was removed (or that an import was removed due to a dependency change), which would make the message accurate and informative. Therefore, the message is poor in both accuracy and detail, warranting a score of 2.","The commit message 'fix: rectification failed' is extremely vague and provides no context about what was fixed, why it was fixed, or what issue it resolves. It lacks specificity and does not align with conventional commit message standards (e.g., no reference to the actual problem or change). The diff shows the removal of an import ('time'), but the commit message offers no explanation for this change, making it impossible to understand the intent or impact. Therefore, it is poorly written and provides minimal value to developers or maintainers."
3820f2776c97321167b24458641116c56cb5cbd2,"fixed flake8 F401,F811",geocoder/here.py,"@@ -2,7 +2,6 @@
 # coding: utf8
 
 from __future__ import absolute_import
-import six
 from geocoder.base import Base
 from geocoder.keys import here_app_id, here_app_code
 
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously missed, implying a corrective action is needed to address the failure.",2.0,2.0,1.0,"The commit message 'fixed flake8 F401,F811' is vague and provides no context about what was actually fixed or why. The diff shows that the import of 'six' was removed, which may have been part of the fix, but the message does not explicitly state this. While it correctly references flake8 issues, it lacks detail about the change, the reason, or the impact. A better message would specify which import was removed and why (e.g., 'removed unused import six to fix flake8 F401 and F811'). Therefore, the message is minimally informative and only scores a 2.","The commit message 'add missing import' is vague and lacks specificity. While it correctly identifies that an import was missing, it does not indicate which import was added or why it was necessary. The diff shows that the import for 'six' was removed, not added, so the message is factually incorrect. Therefore, the commit message is misleading and fails to accurately reflect the change, resulting in a low score.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was actually fixed, why it was necessary, or what issue it resolves. It lacks specificity and does not align with conventional commit message standards (e.g., describing the problem, the action taken, or the impact). Given the diff shows a removal of an import ('six'), the message fails to reflect this change or its significance, making it essentially meaningless in terms of understanding the commit's purpose."
86ba4ad74e778b4c6dd181b126a85437b404f5ac,fixed import of mock,tests/test_session.py,"@@ -2,7 +2,7 @@
 # coding: utf8
 
 import geocoder
-import mock
+from unittest import mock
 import requests
 
 
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously present and now requires correction, implying a fix for a problem rather than a cosmetic or trivial change.",3.0,3.0,1.0,"The commit message 'fixed import of mock' is accurate in indicating that the import was changed, but it lacks specificity. It does not explain why the change was necessary, what the old import was, or how the new import improves the code (e.g., compatibility, best practices). While the diff shows a clear change from `import mock` to `from unittest import mock`, which is a more standard and recommended way to import mock in Python, the commit message is too vague to be considered excellent. It is factual but insufficiently descriptive for a good commit message, hence a score of 3.","The commit message 'add missing import' is vague and lacks detail about what was added or why. While the diff shows a replacement of an import from 'mock' to 'from unittest import mock', which is a more standard and recommended way to import mock in Python, the message does not explicitly state the change or its significance. A better message would specify the exact import change and its rationale (e.g., 'Update mock import to use unittest.mock for compatibility and best practices'). As such, the message is minimally informative and technically correct but lacks clarity and context, resulting in a moderate score.","The commit message 'fix: rectification failed' is vague, ambiguous, and provides no context about what was actually fixed or why. It does not describe the change in the code (which was simply importing `mock` from `unittest` instead of the old `mock` module), nor does it explain the purpose or impact of the change. A good commit message should clearly state what was fixed and why. This message fails to meet basic standards for clarity and usefulness, making it poor."
dafa33292c9eb1a89c4c6cee2dd908847c9317a2,Changed import to be compatible with python 2.7,tests/test_session.py,"@@ -2,9 +2,12 @@
 # coding: utf8
 
 import geocoder
-from unittest import mock
 import requests
 
+try:
+    import mock
+except ImportError:
+    from unittest import mock
 
 address = 'Booth Street, Ottawa'
 
",add missing import,fix(unittest): import mock gracefully,Corrective,"The change ensures that the import of 'mock' works gracefully in unittest, addressing a potential failure or incompatibility in the test environment, which is a functional fix rather than a cosmetic or trivial change.",3.0,3.0,4.0,"The commit message correctly identifies the change as addressing Python 2.7 compatibility, which is relevant given the import adjustment. However, it lacks specificity about why the import was changed (e.g., `mock` not being available in older versions) and doesn't mention the context of the fix (e.g., avoiding ImportError). While the change is valid and appropriate for Python 2.7 compatibility, the message is somewhat generic and could be more informative. Thus, it is neither poor nor excellent, but moderately clear and accurate.","The commit message 'add missing import' is vague and lacks detail about what was added or why. While the diff shows a conditional import for `mock` that handles the case where `mock` is not available (common in Python environments), the message does not convey the context or purpose of the change. A better message would specify that it adds a fallback import for `mock` to ensure compatibility with Python versions or environments where `mock` is not installed. As such, the message is technically correct but insufficiently descriptive, warranting a moderate score.","The commit message 'fix(unittest): import mock gracefully' is clear and relevant to the change. The diff shows a graceful fallback import for `mock` using a try-except block, which avoids ImportError when `mock` is not available (e.g., in Python 3.3+ where `mock` is part of `unittest`). The message accurately reflects the purpose of the change. However, it lacks specific detail about the context (e.g., why this was needed or which unittest version it affects), which slightly limits its completeness. Overall, it is good but could be more detailed for full clarity."
7ed8c43914a99fd7ac3e462627374044b315171f,fix build error when params cast to tuple (google),geocoder/google.py,"@@ -5,6 +5,7 @@ from __future__ import absolute_import
 import six
 from geocoder.base import Base
 from geocoder.keys import google_key, google_client, google_client_secret
+from collections import OrderedDict
 
 
 class Google(Base):
@@ -63,11 +64,11 @@ class Google(Base):
     def _encode_params(self):
         # turn non-empty params into sorted list in order to maintain signature validity.
         # Requests will honor the order.
-        self.params = sorted([(k, v) for (k, v) in self.params.items() if v])
+        ordered_params = sorted([(k, v) for (k, v) in self.params.items() if v])
+        self.params = OrderedDict(ordered_params)
 
         # the signature parameter needs to come in the end of the url
-        signature = ['signature', self._sign_url(self.url, self.params, self.client_secret)]
-        self.params.append(signature)
+        self.params['signature'] = self._sign_url(self.url, ordered_params, self.client_secret)
 
     def _sign_url(self, base_url=None, params=None, client_secret=None):
         """""" Sign a request URL with a Crypto Key.
",add missing comments,fix(google): use OrderedDict to maintain parameter order and update signature logic,Corrective,"The change addresses a build error by fixing the parameter casting issue and introduces proper parameter order maintenance using OrderedDict, which resolves a logical flaw in the signature logic.",2.0,1.0,4.0,"The commit message is overly vague and does not accurately reflect the changes made. The diff shows that the issue was not about casting params to a tuple but rather about maintaining parameter order for URL signature validity by using OrderedDict instead of a regular sorted list. The commit message fails to mention the actual fix (using OrderedDict) or the context (signature generation and parameter ordering), making it misleading and insufficient for understanding the change. While it references a build error, there's no evidence of a build error in the diff, and the fix is more about correctness and consistency than a build issue. Therefore, it is only minimally adequate.","The commit message 'add missing comments' is extremely vague and does not accurately reflect the actual changes made. The diff shows a substantial modification to the code — replacing a simple sorted list with an OrderedDict, changing how parameters are appended, and updating the signature logic. These changes are not merely about adding comments; they involve structural and functional updates. A meaningful commit message should describe what was actually changed and why. Therefore, the message is misleading and fails to provide any useful context, making it poor.","The commit message accurately reflects the changes made: it mentions using `OrderedDict` to maintain parameter order, which is a key improvement for signature validity, and correctly notes the update to the signature logic. The message is clear, concise, and directly relevant to the diff. However, it could be slightly more precise by specifying that the signature is now computed using the ordered parameters (rather than just 'updated'), which would make it even more technically accurate. Still, overall, it is well-written and sufficient for a good commit message."
e3ce2efe60a6d77b147db4250ecaa664edbdb206,adding verbosity on JSON corrupted message to ease build debugging,geocoder/base.py,"@@ -111,9 +111,9 @@ class Base(object):
         if self.status_code == 200:
             try:
                 self.content = r.json()
-            except:
+            except Exception as err:
                 self.status_code = 400
-                self.error = 'ERROR - JSON Corrupted'
+                self.error = 'ERROR - JSON Corrupted: %s' % str(err)
                 self.content = r.content
 
     def _initialize(self, **kwargs):
",update base.py,fix(api): handle JSON parsing errors with detailed message,Corrective,"The new message indicates a fix for JSON parsing errors with detailed output, addressing a functional issue rather than just improving presentation or semantics.",3.0,2.0,4.0,"The commit message indicates an improvement in error messaging by adding more detail (the exception message) when JSON parsing fails, which is relevant to debugging. However, the message is somewhat vague and lacks context about why this change matters or how it improves build debugging specifically. It doesn't clearly explain the impact or the problem it solves. While the change itself is reasonable and useful, the commit message could be more descriptive and precise to fully justify its importance, hence a score of 3 rather than 4 or 5.","The commit message 'update base.py' is extremely vague and provides no information about what was changed or why. While the diff shows a specific improvement—adding exception details to error messages—the commit message fails to reflect this change. A better message would describe the improvement, such as 'Improve error logging by including exception details in JSON parsing failures'. As it stands, the message offers no actionable insight, resulting in a low score.","The commit message accurately reflects the change: it improves error handling in JSON parsing by providing a more detailed error message. The diff shows that the original exception was caught without context, and the updated version captures the exception as a string and includes it in the error message. This is a meaningful improvement. However, the message is slightly generic and could be more specific about the impact (e.g., 'improves error visibility in API response handling'), but it still clearly communicates the intent. Thus, it earns a 4 — good clarity and relevance, but could be more detailed."
887e4b4065a344f0e81b514a3f75864261e371ab,removed google mocks that fails during Travis build,tests/test_google.py,"@@ -28,18 +28,8 @@ def test_google():
 
 
 def test_google_reverse():
-    urls = [
-        # when testing locally
-        'https://maps.googleapis.com/maps/api/geocode/json?language=&latlng=45.4215296%2C+-75.697193&sensor=false&key=mock',
-        # when building in Travis (secured connection implies ordered parameters)
-        'https://maps.googleapis.com/maps/api/geocode/json?client=[secure]&latlng=45.4215296%2C+-75.697193&sensor=false&signature=iXbq6odmrYN0XgcfB5EPcgEvR-I%3D',
-    ]
-    data_file = 'tests/results/google_reverse.json'
-    with requests_mock.Mocker() as mocker, open(data_file, 'r') as input:
-        for url in urls:
-            mocker.get(url, text=input.read())
-        g = geocoder.google(ottawa, method='reverse', key='mock')
-        assert g.ok
+    g = geocoder.google(ottawa, method='reverse')
+    assert g.ok
 
 
 # FIXME from ebreton: what difference with test_google() ?
@@ -55,18 +45,8 @@ def test_google_reverse():
 
 
 def test_google_timezone():
-    urls = [
-        # when testing locally
-        'https://maps.googleapis.com/maps/api/timezone/json?location=45.4215296%2C+-75.697193&timestamp=1501571979.087397',
-        # when building in Travis (secured connection implies ordered parameters)
-        'https://maps.googleapis.com/maps/api/timezone/json?timestamp=1501571979.09&location=45.4215296%2C+-75.697193'
-    ]
-    data_file = 'tests/results/google_timezone.json'
-    with requests_mock.Mocker() as mocker, open(data_file, 'r') as input:
-        for url in urls:
-            mocker.get(url, text=input.read())
-        g = geocoder.google(ottawa, method='timezone', timestamp=1501571979.087397)
-        assert g.ok
+    g = geocoder.google(ottawa, method='timezone')
+    assert g.ok
 
 
 # def test_google_elevation():
",add test for timezone and language,fix(tests): remove mock requests for google reverse and timezone tests,Corrective,"The new message provides a more precise and actionable description of the change, specifying the context (tests), the exact issue (mock requests for google reverse and timezone tests), and indicates a fix rather than a simple removal, which aligns with corrective improvements.",3.0,2.0,4.0,"The commit message 'removed google mocks that fails during Travis build' is somewhat accurate and addresses the surface-level change — removing mocked URLs that caused failures in Travis. However, it lacks detail about why the mocks were problematic (e.g., parameter ordering due to secure connections), what the actual fix was (removing mocked requests and relying on real calls), and the broader impact (e.g., simplifying tests, improving reliability). While the diff confirms the removal of mock configurations, the message is vague and does not fully explain the context or rationale, which reduces its clarity and usefulness for understanding the change. Therefore, it receives a moderate score.","The commit message 'add test for timezone and language' is inaccurate and misleading. The diff shows the removal of mocked URL testing for both `test_google_reverse` and `test_google_timezone`, and the simplification of the tests to directly call `geocoder.google()` without mocks. There is no new test added for 'language' as mentioned in the message. Instead, the changes reflect a simplification or refactoring of existing tests, likely to reduce test complexity. The message fails to reflect the actual changes, which were removing mock dependencies rather than adding new tests. Therefore, it is poorly aligned with the diff and should score low.","The commit message accurately reflects the change: it removes mock requests for the Google reverse and timezone tests, which aligns with the diff showing the removal of `requests_mock` setup and the associated URL lists. The message is concise and relevant to the change. However, it lacks context about why the mocks were removed (e.g., simplification, deprecation, or reliance on real responses), which slightly limits its completeness. Still, it correctly identifies the scope and type of change, making it clear and useful for a reviewer."
239eda345c113835753bfef4431e7c8070936c2c,fix encoding for python 2.7,tests/test_geonames.py,"@@ -74,7 +74,7 @@ def test_geonames_delegation(geonames_response):
 def test_details():
     url = 'http://api.geonames.org/getJSON?geonameId=6094817&username=mock&style=full'
     data_file = 'tests/results/geonames_details.json'
-    with requests_mock.Mocker() as mocker, open(data_file, 'r') as input:
+    with requests_mock.Mocker() as mocker, open(data_file, 'r', encoding=""utf-8"") as input:
         mocker.get(url, text=input.read())
         g = geocoder.geonames(6094817, method='details', username='mock')
 
",add test for geonames details,fix(test): use utf-8 encoding when opening json file,Corrective,"The new message specifies a concrete fix for encoding issues by using UTF-8 when opening a JSON file, addressing a potential correctness issue in Python 2.7's handling of text encoding, which goes beyond a cosmetic change and directly corrects a functional flaw.",3.0,2.0,5.0,"The commit message 'fix encoding for python 2.7' is vague and lacks specificity. While the diff does add UTF-8 encoding to the file opening in Python, which is a valid improvement for handling non-ASCII data, the message does not clearly explain why this change was necessary or how it addresses Python 2.7 specifically. Python 2.7 is largely deprecated, and encoding issues in this context are typically not a major concern in modern codebases. The change is technically sound, but the commit message fails to provide context or motivation, reducing its clarity and usefulness. Therefore, it receives a moderate score.","The commit message 'add test for geonames details' is vague and does not reflect the actual change made. The diff shows a small but meaningful improvement: adding 'encoding=""utf-8""' to the open() call, which is a best practice for handling text files and prevents potential encoding issues. This change is relevant to test stability and correctness, especially when reading JSON files. A better commit message would acknowledge both the addition of the encoding parameter and the purpose—such as 'Fix encoding issue in geonames details test to ensure proper JSON reading'. Since the message fails to capture the technical detail of the change, it is only moderately informative and thus scores a 2.","The commit message accurately and concisely describes the change: it specifies the use of UTF-8 encoding when opening a JSON file, which is a relevant and necessary improvement for file handling, especially with international characters. The message follows the standard 'fix(test):' format, is specific, and directly relates to the diff. The change is small but meaningful in ensuring proper text handling, making the message both clear and contextually appropriate."
fad48575d2266ad8c81831f1097e7be36f9789c3,Add orderedset dependency fixes #258,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.24.0'
+__version__ = '1.24.1'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a failure (rectification failed), suggesting a bug or issue was resolved, which falls under corrective improvement.",1.0,1.0,1.0,"The commit message 'Add orderedset dependency fixes #258' is highly inconsistent with the actual changes in the diff. The diff only shows a version bump from '1.24.0' to '1.24.1', which is a minor release update, not the addition of a dependency like 'orderedset'. The message incorrectly suggests a dependency change that is not present. Additionally, it references issue #258 without any context or evidence that this issue was related to the dependency. This misalignment between the commit message and the actual change makes it inaccurate and misleading.","The commit message 'add missing docstrings' is highly misleading given the diff. The diff shows only a version bump from '1.24.0' to '1.24.1', not any addition of docstrings. There are no docstring changes in the code. Therefore, the commit message does not accurately reflect the actual changes, making it incorrect and untrustworthy. This misalignment severely undermines its clarity and honesty, warranting a poor score.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.24.0' to '1.24.1', which is a simple version update, not a fix for a rectification failure. The message lacks context, specificity, and clarity about what was fixed or why. A proper commit message should describe the actual change and its purpose. Therefore, it is poorly written and does not meet basic standards for clarity or usefulness."
fad48575d2266ad8c81831f1097e7be36f9789c3,Add orderedset dependency fixes #258,setup.py,"@@ -19,7 +19,7 @@ if not version:
 with open('README.md', 'r', 'utf-8') as f:
     readme = f.read()
 
-requires = ['requests', 'ratelim', 'click', 'six']
+requires = ['requests', 'ratelim', 'click', 'six', 'orderedset']
 
 setup(
     name='geocoder',
",add missing setup.py,feat(package): add orderedset to requirements,Semantic,"The new message provides a more descriptive and structured indication of the change using standard commit message conventions (feat, package, requirements), improving clarity and semantic meaning over the original.",3.0,2.0,4.0,"The commit message 'Add orderedset dependency fixes #258' is clear and mentions the addition of a dependency, which is relevant to the diff. However, it lacks context about why orderedset was needed or how it fixes the issue referenced in #258. While the action is correctly identified, the justification is minimal and does not fully explain the impact or reasoning, which reduces its completeness. Therefore, it is moderately informative but not excellent.","The commit message 'add missing setup.py' is vague and misleading. The diff shows that a dependency ('orderedset') was added to the requirements list, not that setup.py was missing or added. The change is about updating requirements, not creating or adding setup.py. A more accurate message would reflect the actual change, such as 'add orderedset to requirements'. Therefore, the commit message fails to clearly describe what was changed, resulting in a score of 2.","The commit message is clear and relevant, indicating a feature addition of 'orderedset' to the requirements. It correctly identifies the type of change ('feat') and the specific package added. However, it lacks context on why orderedset was needed or its purpose in the project, which could be improved for better maintainability. Overall, it is accurate and concise, but slightly limited in depth."
ba460704c0da3075c1f7414b5325cfad1f22a792,"Bump minor version to support w3w change
Ref: https://github.com/DenisCarriere/geocoder/pull/261",geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.24.1'
+__version__ = '1.25.0'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug was resolved, which falls under corrective improvements.",3.0,1.0,1.0,"The commit message mentions a version bump and references a pull request related to a change (w3w), but it lacks specific details about what the w3w change entails or how it affects the functionality or consistency of JSON responses. While the version update is correct and the reference to the PR is appropriate, the message is vague and does not clearly explain the impact or rationale behind the version bump. A more detailed explanation would improve clarity and usefulness for other developers.","The commit message 'add missing docstrings' is highly inconsistent with the actual changes in the diff. The diff shows only a version bump from '1.24.1' to '1.25.0', which is a version update, not the addition of docstrings. There are no docstrings added or modified in the code. Therefore, the commit message is misleading and does not accurately reflect the changes, making it poor.","The commit message 'fix: rectification failed' is highly inadequate as it does not describe what was actually fixed or why. The diff shows only a version bump from '1.24.1' to '1.25.0', which is a minor release update, not a bug fix or rectification. The term 'rectification failed' is vague, ambiguous, and does not reflect the actual change. A proper commit message should clearly explain the change and its purpose. Therefore, the message is poor and fails to provide any meaningful context."
35ffebf46bf01fc2aa65e92d7d697477ca517153,fix mapquest._build_headers argument,geocoder/mapquest.py,"@@ -78,7 +78,7 @@ class MapquestQuery(MultipleResultsQuery):
     _RESULT_CLASS = MapquestResult
     _KEY = mapquest_key
 
-    def _build_headers(self, location, **kwargs):
+    def _build_headers(self, provider_key, **kwargs):
         return {
             'referer': 'http://www.mapquestapi.com/geocoding/',
             'host': 'www.mapquestapi.com',
",add missing return statement,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed') that addresses a root cause of the issue, suggesting a fix for a logical or functional problem rather than just a surface-level change.",2.0,1.0,2.0,"The commit message is too vague and lacks specificity. While it correctly identifies a fix in the `_build_headers` method, it does not explain what was changed, why it was necessary, or how it impacts functionality. The change involves renaming `location` to `provider_key`, which is a significant parameter shift that should be clarified in the message. A better message would explain the parameter rename and its purpose, such as 'Update _build_headers to accept provider_key instead of location to align with API authentication requirements.'","The commit message 'add missing return statement' is highly inaccurate and misleading. The diff shows a parameter name change from 'location' to 'provider_key', not the addition of a return statement. There is no return statement missing in the code. The message fails to describe the actual change, which is a parameter rename, and thus misrepresents the commit's purpose. This makes the message poor and potentially confusing for other developers.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple parameter name change from `location` to `provider_key` in the `_build_headers` method, which is a minor refactoring. A better message would explain the change, such as 'fix: update header parameter from location to provider_key for correct API key handling'. As it stands, the message lacks context and technical clarity, resulting in a low but not terrible score."
768554865027fa98d0404b6c3dde84e7ed2825a6,"Added all of the aliases as defined in: https://github.com/OpenCageData/address-formatting/blob/master/conf/components.yaml

Fixed the circular import error and created a more robust lookup for the aliases if one does not exist.

Updated tests to include country and country_code",geocoder/opencage.py,"@@ -65,106 +65,300 @@ class OpenCage(Base):
     def housenumber(self):
         return self.parse['components'].get('house_number')
 
+    @property
+    def house_aliases(self):
+        house = self.parse['components'].get('house')
+        building = self.parse['components'].get('building')
+        public_building = self.parse['components'].get('public_building')
+        if house:  # Priority can be rearranged
+            return house
+        elif building:
+            return building
+        elif public_building:
+            return public_building
+
+    @property
+    def house(self):
+        house = self.parse['components'].get('house')
+        if house:
+            return house
+        else:
+            return self.house_aliases
+
+    @property
+    def building(self):
+        building = self.parse['components'].get('building')
+        if building:
+            return building
+        else:
+            return self.house_aliases
+
+    @property
+    def public_building(self):
+        public_building = self.parse['components'].get('public_building')
+        if public_building:
+            return public_building
+        else:
+            return self.house_aliases
+
+    @property
+    def street_aliases(self):
+        street = self.parse['components'].get('street')
+        road = self.parse['components'].get('road')
+        footway = self.parse['components'].get('footway')
+        street_name = self.parse['components'].get('street_name')
+        residential = self.parse['components'].get('residential')
+        path = self.parse['components'].get('path')
+        pedestrian = self.parse['components'].get('pedestrian')
+        if street:
+            return street
+        elif road:
+            return road
+        elif footway:
+            return footway
+        elif street_name:
+            return street_name
+        elif residential:
+            return residential
+        elif path:
+            return path
+        elif pedestrian:
+            return pedestrian
+
     @property
     def street(self):
         street = self.parse['components'].get('street')
         if street:
             return street
-        elif self.footway:
-            return self.footway
-        elif self.road:
-            return self.road
-        elif self.street_name:
-            return self.street_name
-        elif self.residential:
-            return self.residential
-        elif self.path:
-            return self.path
-        elif self.pedestrian:
-            return self.pedestrian
+        else:
+            return self.street_aliases
 
     @property
     def footway(self):
-        return self.parse['components'].get('footway')
+        footway = self.parse['components'].get('footway')
+        if footway:
+            return footway
+        else:
+            return self.street_aliases
 
     @property
     def road(self):
-        return self.parse['components'].get('road')
+        road = self.parse['components'].get('road')
+        if road:
+            return road
+        else:
+            return self.street_aliases
 
     @property
     def street_name(self):
-        return self.parse['components'].get('street_name')
+        street_name = self.parse['components'].get('street_name')
+        if street_name:
+            return street_name
+        else:
+            return self.street_aliases
 
     @property
     def residential(self):
-        return self.parse['components'].get('residential')
+        residential = self.parse['components'].get('residential')
+        if residential:
+            return residential
+        else:
+            return self.street_aliases
 
     @property
     def path(self):
-        return self.parse['components'].get('path')
+        path = self.parse['components'].get('path')
+        if path:
+            return path
+        else:
+            return self.street_aliases
 
     @property
     def pedestrian(self):
-        return self.parse['components'].get('pedestrian')
+        pedestrian = self.parse['components'].get('pedestrian')
+        if pedestrian:
+            return pedestrian
+        else:
+            return self.street_aliases
 
     @property
-    def neighborhood(self):
+    def neighbourhood_aliases(self):
+        neighbourhood = self.parse['components'].get('neighbourhood')
+        suburb = self.parse['components'].get('suburb')
+        city_district = self.parse['components'].get('city_district')
+        if neighbourhood:  # Priority can be rearranged
+            return neighbourhood
+        elif suburb:
+            return suburb
+        elif city_district:
+            return city_district
+
+    @property
+    def neighbourhood(self):
         neighbourhood = self.parse['components'].get('neighbourhood')
         if neighbourhood:
             return neighbourhood
-        elif self.suburb:
-            return self.suburb
-        elif self.city_district:
-            return self.city_district
+        else:
+            return self.neighbourhood_aliases
 
     @property
     def suburb(self):
-        return self.parse['components'].get('suburb')
+        suburb = self.parse['components'].get('suburb')
+        if suburb:
+            return suburb
+        else:
+            return self.neighbourhood_aliases
 
     @property
     def city_district(self):
-        return self.parse['components'].get('city_district')
+        city_district = self.parse['components'].get('city_district')
+        if city_district:
+            return city_district
+        else:
+            return self.neighbourhood_aliases
+
+    @property
+    def city_aliases(self):
+        city = self.parse['components'].get('city')
+        town = self.parse['components'].get('town')
+        if city:  # Priority can be rearranged
+            return city
+        elif town:
+            return town
+        else: # if nothing in city_aliases, then return village aliases
+            return self.village_aliases
+
 
     @property
     def city(self):
         city = self.parse['components'].get('city')
         if city:
             return city
-        elif self.town:
-            return self.town
-        elif self.village:
-            return self.village
-        elif self.county:
-            return self.county
+        else:
+            return self.city_aliases
 
     @property
     def town(self):
-        return self.city
+        town = self.parse['components'].get('town')
+        if town:
+            return town
+        else:
+            return self.city_aliases
+
+    @property
+    def county(self):
+        return self.parse['components'].get('county')
+
+    @property
+    def village_aliases(self):
+        village = self.parse['components'].get('village')
+        hamlet = self.parse['components'].get('hamlet')
+        locality = self.parse['components'].get('locality')
+
+        if village:  # Priority can be rearranged
+            return village
+        elif hamlet:
+            return hamlet
+        elif locality:
+            return locality
 
     @property
     def village(self):
-        return self.parse['components'].get('village')
+        village = self.parse['components'].get('village')
+        if village:
+            return village
+        else:
+            return self.village_aliases
 
     @property
-    def county(self):
-        return self.parse['components'].get('county')
+    def hamlet(self):
+        hamlet = self.parse['components'].get('hamlet')
+        if hamlet:
+            return hamlet
+        else:
+            return self.village_aliases
+
+    @property
+    def locality(self):
+        locality = self.parse['components'].get('locality')
+        if locality:
+            return locality
+        else:
+            return self.village_aliases
+
+    @property
+    def state_aliases(self):
+        state = self.parse['components'].get('state')
+        province = self.parse['components'].get('province')
+        state_code = self.parse['components'].get('state_code')
+
+        if state:  # Priority can be rearranged
+            return state
+        elif province:
+            return province
+        elif state_code:
+            return state_code
 
     @property
     def state(self):
-        return self.parse['components'].get('state')
+        state = self.parse['components'].get('state')
+        if state:
+            return state
+        else:
+            return self.state_aliases
+
+    @property
+    def province(self):
+        province = self.parse['components'].get('province')
+        if province:
+            return province
+        else:
+            return self.state_aliases
 
     @property
     def state_code(self):
-        return self.parse['components'].get('state_code')
+        state_code = self.parse['components'].get('state_code')
+        if state_code:
+            return state_code
+        else:
+            return self.state_aliases
+
+    @property
+    def state_district(self):
+        return self.parse['components'].get('state_district')
 
     @property
     def country(self):
+        country = self.parse['components'].get('country')
+        if country:
+            return country
+        else:
+            return self.parse['components'].get('country_name')
+
+    @property
+    def country_code(self):
         return self.parse['components'].get('country_code')
 
     @property
     def postal(self):
         return self.parse['components'].get('postcode')
 
+    @property
+    def postcode(self):
+        return self.parse['components'].get('postcode')
+
+    @property
+    def continent(self):
+        return self.parse['components'].get('continent')
+
+    @property
+    def island(self):
+        return self.parse['components'].get('island')
+
+    @property
+    def region(self):
+        return self.parse['components'].get('region')
+
     @property
     def confidence(self):
         return self.parse.get('confidence')
@@ -209,6 +403,7 @@ class OpenCage(Base):
         east = self.parse['northeast'].get('lng')
         return self._get_bbox(south, west, north, east)
 
+
 if __name__ == '__main__':
     g = OpenCage('1552 Payette dr., Ottawa')
     print(g.json['mgrs'])
",add missing attributes to opencage,fix: rectification failed,Corrective,"The new message indicates a fix for a failure (rectification failed), suggesting a correction to a bug or error in the system, which aligns with a corrective improvement.",0.0,0.0,0.0,,,
768554865027fa98d0404b6c3dde84e7ed2825a6,"Added all of the aliases as defined in: https://github.com/OpenCageData/address-formatting/blob/master/conf/components.yaml

Fixed the circular import error and created a more robust lookup for the aliases if one does not exist.

Updated tests to include country and country_code",tests/test_opencage.py,"@@ -14,7 +14,7 @@ def test_opencage():
     """"""
     g = geocoder.opencage(location)
     assert g.ok
-    assert g.country == 'ca'
+    assert g.country_code == 'ca'
     assert g.state == 'Ontario'
     assert g.state_code == 'ON'
     assert g.city == 'Ottawa'
@@ -27,7 +27,7 @@ def test_opencage_address():
     """"""
     g = geocoder.opencage(address)
     assert g.ok
-    assert g.country == 'ca'
+    assert g.country == 'Canada'
     assert g.state == 'Ontario'
     assert g.state_code == 'ON'
     assert g.city == 'Ottawa'
@@ -42,7 +42,7 @@ def test_opencage_reverse():
     """"""
     g = geocoder.opencage(ottawa, method='reverse')
     assert g.ok
-    assert g.country == 'ca'
+    assert g.country_code == 'ca'
     assert g.state == 'Ontario'
     assert g.state_code == 'ON'
     assert g.city == 'Ottawa'
",add more test cases,fix(opencage): update country assertion to country_code,Corrective,"The change addresses a specific issue in the test assertion by updating the expected value from 'country' to 'country_code', ensuring alignment with the actual data structure and fixing a potential test failure due to mismatched field names.",2.0,2.0,4.0,"The commit message is somewhat off-topic and misrepresents the actual changes. The diff shows only a change in test assertions: `g.country` is replaced with `g.country_code` in several test cases, but there is no mention of adding aliases or fixing circular imports. The claim about 'adding all of the aliases as defined in components.yaml' and 'fixing circular import' is not supported by the diff. The test updates are correctly noted, but the explanation is inaccurate and misleading. Therefore, the message is not clear, truthful, or aligned with the actual changes, resulting in a low score.","The commit message 'add more test cases' is vague and does not accurately reflect the actual changes. The diff shows specific updates where 'country' is replaced with 'country_code' in several assertions, indicating a correction or refinement of expected field names, not the addition of new test cases. The message fails to convey the nature of the change, which is more about fixing or adjusting field expectations rather than adding coverage. Therefore, it is poorly descriptive and lacks specificity, warranting a low score.","The commit message accurately reflects the change made in the code diff, which updates assertions from `g.country == 'ca'` to `g.country_code == 'ca'` in multiple test cases. The message is concise, relevant, and clearly indicates the scope and nature of the fix. However, it could be slightly more precise by mentioning that the country name was replaced with the country code, as the change affects both the expected value and the field name. Despite this minor gap, the message is clear and actionable, making it a strong, well-written commit message."
27d5f574aeae708571aa3de775d1bee33075f64c,fix google accuracy,geocoder/google.py,"@@ -14,6 +14,8 @@ class GoogleResult(OneResult):
         # flatten geometry
         geometry = json_content.get('geometry', {})
         json_content['location'] = geometry.get('location', {})
+        json_content['location_type'] = geometry.get('location_type', {})
+        json_content['bounds'] = geometry.get('bounds', {})
         json_content['northeast'] = geometry.get(
             'viewport', {}).get('northeast', {})
         json_content['southwest'] = geometry.get(
",add missing comments,"add(location_type, bounds)(geometry): flatten geometry fields",Corrective,"The new message clarifies and corrects the functionality by specifying the addition of location_type and bounds to geometry fields, addressing a potential ambiguity or omission in the old message which only stated a vague fix for accuracy.",2.0,2.0,3.0,"The commit message 'fix google accuracy' is overly vague and does not clearly describe what was fixed or why. The diff shows additions to extract geometry fields like 'location_type' and 'bounds' from Google's JSON response, which likely improves location accuracy or metadata completeness. However, the message fails to convey the actual change or its impact. A better message would specify the addition of location_type and bounds for improved accuracy. Thus, it receives a score of 2 for lacking specificity and clarity.","The commit message 'add missing comments' is vague and does not accurately reflect the actual changes. The diff shows the addition of three new fields (location_type, bounds, and viewport details) from the geometry object, which are not comments but data fields. Therefore, the message misrepresents the change. While the commit does involve adding new data fields, the message fails to describe what was added or why. A better message would specify the addition of geometry fields like 'location_type' and 'bounds' for better clarity and context.","The commit message is partially clear but lacks context and precision. It correctly identifies the addition of `location_type` and `bounds` from the geometry object, which is accurate. However, the phrasing 'add(location_type, bounds)(geometry)' is overly terse and not standard or readable. It doesn't clearly convey the purpose—flattening geometry fields—or the impact on the code. A better message would explain why these fields are being added (e.g., for consistency, usability, or API compatibility). As such, it's functional but not excellent in clarity or completeness."
27d5f574aeae708571aa3de775d1bee33075f64c,fix google accuracy,tests/test_google.py,"@@ -24,6 +24,7 @@ def test_google():
             mocker.get(url, text=input.read())
         g = geocoder.google(location, client=None, key='mock')
         assert g.ok
+        assert g.accuracy == 'APPROXIMATE'
         assert str(g.city) == city
 
 
",add test for,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed') rather than a vague issue ('google accuracy'), providing clearer diagnostic information and pointing to a concrete problem that needs resolution.",2.0,2.0,1.0,"The commit message 'fix google accuracy' is too vague and lacks specific details about what was fixed, why it was fixed, or how it relates to the code change. While the diff shows an assertion added to verify that `g.accuracy == 'APPROXIMATE'`, the commit message does not clearly communicate this change or its intent. A better message would specify that the accuracy was explicitly set or verified in the test case. Therefore, it receives a score of 2 for being minimally relevant but insufficiently descriptive.","The commit message 'add test for' is extremely vague and lacks specificity. It does not indicate what exactly is being tested, why it's important, or which functionality is being verified. While it correctly identifies that a test is being added, the message provides no context about the feature, behavior, or expected outcome. A better message would specify, for example, 'Add test to verify Google geocoder returns accurate location data with approximate accuracy.' Given the lack of detail, the message is only minimally informative, warranting a score of 2.","The commit message 'fix: rectification failed' is highly unclear and lacks meaningful context. It does not describe what was actually fixed, why it was necessary, or how it relates to the code change. The diff shows a simple assertion added to verify that `g.accuracy == 'APPROXIMATE'`, which suggests the fix is related to testing accuracy in geocoding. However, the commit message fails to communicate this. It uses vague terminology ('rectification') and does not indicate the intent or impact of the change. A good commit message should be specific and descriptive, such as 'fix: assert accuracy is APPROXIMATE in Google geocoding test'. Therefore, this message is poor and receives a score of 1."
ddc16ca01c6e51e8bf10e28a569c4c49abdc734d,test of maptbox more flexible (data is changing too often),tests/test_mapbox.py,"@@ -22,9 +22,6 @@ def test_multi_results():
     g = geocoder.mapbox(location)
     assert len(g) == 5
 
-    expected_result = 'Ontario Court of Justice, 15 Victoria, Ottawa, Ontario K2G 3H2, Canada'
-    assert expected_result in [result.address for result in g]
-
 
 def main():
     test_multi_results()
",update test_multi_results.py,remove(test_multi_results): assert expected result in address list,Corrective,"The new message indicates a fix or assertion related to expected results in the address list, suggesting a bug correction or validation improvement.",2.0,2.0,2.0,"The commit message is vague and lacks specificity. It mentions 'test of maptbox more flexible' and references 'data is changing too often', but does not clearly describe what was changed, why it was changed, or what the test is actually verifying. The diff shows a removal of a hardcoded assertion, which suggests a refactoring or improvement in test robustness, but this context is missing from the commit message. A better message would explain the intent behind removing the hardcoded expected result and why it was replaced with a more dynamic or flexible test approach. Thus, the message is only minimally informative and falls short of being clear or useful.","The commit message 'update test_multi_results.py' is extremely vague and provides no information about what was changed or why. While the diff shows the removal of a test assertion related to an expected address, the commit message fails to reflect this specific change. A better message would indicate the removal of a hardcoded expected result assertion, improving clarity and usefulness for future developers. Therefore, it receives a score of 2 for being minimally descriptive but lacking meaningful detail.","The commit message is too vague and lacks clarity. It mentions 'remove(test_multi_results)' which is misleading since the test is not being removed from the codebase — only an assertion is being removed. The message does not explain why the assertion was removed or what the change improves. A better message would specify the purpose of the change, such as 'Remove hardcoded expected result assertion to improve test maintainability.' As it stands, the commit message fails to clearly communicate the intent or impact, resulting in a low score."
8eafa9304d8ffa7ad806675bbf60dd0de2b18e5e,more solid catching of RequestException,geocoder/base.py,"@@ -814,20 +814,19 @@ class MultipleResultsQuery(MutableSequence):
             )
 
             # check that response is ok
+            self.status_code = response.status_code
             response.raise_for_status()
-            self.status_code = 200
 
             # rely on json method to get non-empty well formatted JSON
             json_response = response.json()
             self.url = response.url
             LOGGER.info(""Requested %s"", self.url)
 
-        except requests.exceptions.RequestException:
+        except requests.exceptions.RequestException as err:
             # store real status code and error
-            self.status_code = response.status_code
-            self.error = u'ERROR - {}'.format(str(response))
-            LOGGER.error(""Error %s from %s: %s"",
-                         response.status_code, response.url, self.url)
+            self.error = u'ERROR - {}'.format(str(err))
+            LOGGER.error(""Status code %s from %s: %s"",
+                         self.status_code, self.url, self.error)
 
             # return False
             return False
",add logging to multipleresultsquery,fix(requests): handle request exceptions with proper error logging,Corrective,"The new message specifies a concrete fix for handling request exceptions with proper error logging, indicating a bug fix or error correction rather than a cosmetic or semantic change.",3.0,2.0,3.0,"The commit message 'more solid catching of RequestException' is vague and does not clearly convey the actual changes or improvements made. While the diff shows a more robust error handling by capturing the exception instance and logging with better context (including status code and error message), the message fails to highlight these specific improvements. It lacks detail about what was fixed or why it's better. A more descriptive message, such as 'Improve error handling in MultipleResultsQuery by logging full exception details and preserving status code', would be more informative and accurate. Thus, it earns a moderate score of 3 — it reflects a meaningful change but lacks clarity and specificity.","The commit message 'add logging to multipleresultsquery' is overly vague and does not accurately reflect the changes made. The diff shows a more specific improvement: updating error handling to log the actual status code and error message, and properly capturing the status code in both successful and error cases. The commit message fails to mention the key improvements in error logging, status code handling, or the fix to the error message formatting. While it correctly identifies a logging addition, it lacks detail and context, making it insufficient for a clear understanding of the change's impact.","The commit message correctly identifies the issue as handling request exceptions with improved error logging, which is relevant to the code changes. However, it lacks specificity about what was fixed (e.g., missing status code in exception handling, inconsistent error formatting) or why it matters. The diff shows that the status code is now properly captured in the exception case, and the error logging is more informative by including the actual exception rather than the response. While the message is accurate and relevant, it is generic and does not fully reflect the technical improvements made. Therefore, it earns a moderate score of 3."
825e482112e65e31f02569671c9025503a05de15,using mocks for test_geocodefarms (policy breaks build),tests/test_geocodefarm.py,"@@ -2,16 +2,25 @@
 # coding: utf8
 
 import geocoder
+import requests_mock
 
-location = 'Ottawa, Ontario'
-ottawa = (45.4215296, -75.6971930)
+location = 'New York City'
+coordinates = [45.3, -75.4]
 
 
 def test_geocodefarm():
-    g = geocoder.geocodefarm(location)
-    assert g.ok
+    url = 'https://www.geocode.farm/v3/json/forward/?addr=New+York+City&lang=&country=&count=1'
+    data_file = 'tests/results/geocodefarm.json'
+    with requests_mock.Mocker() as mocker, open(data_file, 'r') as input:
+        mocker.get(url, text=input.read())
+        result = geocoder.geocodefarm(location)
+        assert result.ok
 
 
 def test_geocodefarm_reverse():
-    g = geocoder.geocodefarm(ottawa, method='reverse')
-    assert g.ok
+    url = 'https://www.geocode.farm/v3/json/reverse/?lat=45.3&lon=-75.4&lang=&country='
+    data_file = 'tests/results/geocodefarm_reverse.json'
+    with requests_mock.Mocker() as mocker, open(data_file, 'r') as input:
+        mocker.get(url, text=input.read())
+        result = geocoder.geocodefarm(coordinates, method='reverse')
+        assert result.ok
",add tests for reverse geocodefarm,test(geocoder): add requests_mock for geocodefarm forward and reverse tests,Semantic,"The new message provides more specific and meaningful context by indicating the use of 'requests_mock' and clarifying the scope of the tests (forward and reverse geocoding), improving semantic clarity and intent compared to the vague old message.",2.0,3.0,3.0,"The commit message is highly inadequate. It states 'using mocks for test_geocodefarms (policy breaks build)', which is confusing and technically incorrect — mocking is a standard testing practice and does not 'break build'. The message lacks clarity, context, and proper explanation of what was changed or why. It fails to indicate the purpose of the change, the impact, or any relevant details about the test improvements. While the diff shows a clear improvement in test robustness via mocking, the commit message does not reflect that. Therefore, it scores a 2 — it's technically present but poorly written and misleading.","The commit message 'add tests for reverse geocodefarm' is partially accurate but overly vague and incomplete. While it correctly identifies the addition of reverse geocoding tests, it omits the forward geocoding tests that were also added in the diff. The diff shows both forward and reverse geocoding tests were introduced, so the message fails to reflect the full scope. A more complete message like 'add tests for forward and reverse geocoding with geocode.farm' would be better. Therefore, it's not poor, but lacks precision and completeness, warranting a mid-range score.","The commit message accurately identifies the scope of the change — adding `requests_mock` for testing geocodefarm forward and reverse functionality — and is concise and relevant. However, it lacks specific details about why this change was made (e.g., to avoid external API calls, to make tests deterministic), and does not mention the specific locations or data files used. While it correctly references the feature ('geocoder') and the test type ('forward and reverse'), it could be more descriptive or contextual. Therefore, it is functional but not outstanding in clarity or completeness."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/arcgis_reverse.py,"@@ -88,6 +88,8 @@ class ArcgisReverse(ArcgisQuery):
         error = json_response.get('error', None)
         if error:
             self.error = error['message']
+            
+        return self.error
 
 
 if __name__ == '__main__':
",update arcgis_reverse.py,fix(utility): return error message from ArcgisReverse class,Corrective,"The new message specifies a fix to a utility class that returns error messages, indicating a correction to the behavior or output of the code, which was previously missing or incorrect in the old message.",2.0,2.0,3.0,"The commit message 'return error from _catch_errors' is vague and lacks specificity. It does not clearly indicate what was changed, why it was changed, or how it impacts the functionality. The diff shows that a return statement was added after setting self.error, but the message fails to link this change to the actual purpose or context. A better message would explain that the method now returns the error message if one exists, improving error handling visibility. As such, the message is minimally informative and lacks clarity, warranting a score of 2.","The commit message 'update arcgis_reverse.py' is extremely vague and provides no information about what was changed or why. The diff shows a clear addition of a return statement for self.error, which is a meaningful change. A better commit message would specify the change, such as 'Add return self.error to ArcgisReverse class to expose error message'. Since the message lacks context and details, it only scores a 2 — it indicates a change occurred but offers no value for understanding the purpose or impact of the update.","The commit message is relevant and identifies the fix as being in a utility function, correctly noting the intent to return an error message. However, it lacks specificity about the change (e.g., where the error was previously not being returned, or why this fix matters). The diff shows a simple addition of a return statement, but the message does not clearly communicate the impact or context. It is accurate but minimal in detail, which limits its usefulness for understanding the change's significance."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/base.py,"@@ -868,10 +868,10 @@ class MultipleResultsQuery(MutableSequence):
     def status(self):
         if self.ok:
             return 'OK'
-        elif len(self) == 0:
-            return 'ERROR - No results found'
         elif self.error:
             return self.error
+        elif len(self) == 0:
+            return 'ERROR - No results found'
         else:
             return 'ERROR - Unhandled Exception'
 
",update multipleresultsquery.py,fix(multiple-results-query): return error message for empty results,Corrective,"The new message indicates a fix for a specific issue where empty results were not properly handled, leading to missing error messages, which is a functional correction rather than a cosmetic or trivial change.",2.0,2.0,3.0,"The commit message 'return error from _catch_errors' is overly vague and does not accurately reflect the actual change in the code. The diff shows a change in the status() method's error handling logic: it now returns 'ERROR - No results found' when the result list is empty, which was previously missing. The commit message fails to mention this specific change, nor does it reference the actual fix or context. While it touches on an error-related aspect, it lacks detail and clarity about what was actually modified, making it insufficient for understanding the purpose of the change.","The commit message 'update multipleresultsquery.py' is extremely vague and provides no information about what was changed or why. While the diff shows a minor code adjustment (reordering of an elif condition), the message fails to communicate the significance or context of the change. A better message would indicate the specific improvement, such as 'Fix status return logic to correctly handle empty result cases'. Therefore, the message is only minimally informative and receives a score of 2.","The commit message correctly identifies the intent of the change — fixing the error message for empty results — and is appropriately scoped to the feature (multiple-results-query). However, it lacks detail about the actual change made (e.g., the original missing condition and the re-added one), and does not clarify why the fix was necessary or how it improves the behavior. While it is accurate and relevant, it is somewhat minimal in context and could be more descriptive to fully reflect the diff's impact."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/geocodefarm.py,"@@ -134,6 +134,8 @@ class GeocodeFarmQuery(MultipleResultsQuery):
         status = json_response['geocoding_results']['STATUS'].get('status')
         if not status == 'SUCCESS':
             self.error = status
+            
+        return self.error
 
     def _adapt_results(self, json_response):
         return json_response['geocoding_results']['RESULTS']
",update geocoding_farm.py,fix(geocode_farm_query): return error status on unsuccessful geocoding,Corrective,"The new message indicates a fix for an error handling issue in geocoding, specifically returning an error status on failure, which corrects a deficiency in the original behavior.",2.0,1.0,3.0,"The commit message 'return error from _catch_errors' is vague and lacks context. It does not clearly explain what changed, why it was changed, or how it affects the functionality. The diff shows that a new return statement is added in the _catch_errors method, but the message fails to indicate that the method now returns the error status instead of just setting it. This makes it difficult for other developers to understand the purpose or impact of the change. While it's somewhat relevant, it lacks specificity and clarity, warranting a low-to-mid score.","The commit message 'update geocoding_farm.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a modification to a method that adds a return statement for self.error, but the commit message fails to communicate this change or its significance. A good commit message should describe the specific change and its purpose. This message lacks clarity, context, and actionable insight, making it poor for understanding or maintaining the codebase.","The commit message is clear and relevant to the change, indicating a fix for returning an error status on unsuccessful geocoding. However, the implementation in the diff is problematic: the method `geocode_farm_query` currently returns `self.error` at the end, which is not properly handled or used elsewhere. Additionally, the code has an empty line after the `if` block with a comment, and the return statement is misplaced — it returns `self.error` immediately after setting it, without any further logic. This could lead to incorrect behavior or confusion in the calling code. The commit message does not reflect the actual change in behavior or its potential impact. Thus, while the intent is understandable, the implementation quality is subpar, warranting a moderate score."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/google.py,"@@ -277,6 +277,8 @@ class GoogleQuery(MultipleResultsQuery):
         status = json_response.get('status')
         if not status == 'OK':
             self.error = status
+            
+        return self.error
 
     def _adapt_results(self, json_response):
         return json_response.get('results', [])
",update multiple_results_query.py,fix: rectification failed,Corrective,"The new message indicates a fix for a failure in rectification, suggesting a bug or error was addressed, which aligns with a corrective improvement.",2.0,2.0,1.0,"The commit message 'return error from _catch_errors' is too vague and lacks context. It does not clearly explain what was changed, why it was changed, or how it affects the functionality. The diff shows that the method now returns `self.error` after checking the status, but the message fails to convey this change or its purpose. A better message would specify the intent, such as 'Modify _catch_errors to return error status on failure.' Thus, it receives a score of 2 for being minimally informative but lacking clarity and context.","The commit message 'update multiple_results_query.py' is extremely vague and provides no information about what was changed or why. The diff shows a modification to the GoogleQuery class where a return statement is added after setting an error status, but the commit message fails to convey the purpose or impact of this change. A meaningful commit message should describe the change in context (e.g., 'Add error return in GoogleQuery to properly propagate status failures'). As such, while the change is minor and technically present, the message lacks clarity and context, resulting in a low score.","The commit message 'fix: rectification failed' is vague, ambiguous, and provides no context about what was actually fixed or why. It does not clearly indicate the issue being resolved or the impact of the change. The diff shows a change in the GoogleQuery class that adds a return statement for self.error, but the commit message fails to connect this change to any meaningful problem or fix. A good commit message should describe the intent and the problem solved; this one offers none of that, making it extremely poor."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/here.py,"@@ -131,6 +131,8 @@ class HereQuery(MultipleResultsQuery):
         status = json_response.get('type')
         if not status == 'OK':
             self.error = status
+            
+        return self.error
 
     def _adapt_results(self, json_response):
         # Build intial Tree with results
",update example.py,fix(multiple-results-query): return error status from query response,Corrective,"The new message specifies a fix for a bug related to error handling in a multiple-results query, indicating a correction to the behavior rather than a cosmetic or trivial change.",2.0,1.0,2.0,"The commit message 'return error from _catch_errors' is vague and does not clearly describe what was changed or why. The diff shows that a new return statement is added after setting self.error, but the message fails to link the change to the actual functionality or context. It also misrepresents the method's behavior—there is no method named _catch_errors—and the return value is not clearly tied to error handling. A better message would specify the intent, such as 'Add error return in case of non-OK response'. Thus, it scores 2 for being partially relevant but lacking clarity and accuracy.","The commit message 'update example.py' is extremely vague and provides no information about what was actually changed or why. The diff shows a modification to a query class that adds a return statement for self.error, which is a significant change in behavior. A meaningful commit message should describe the change in functionality or intent, such as 'Add error handling and return status from HereQuery response parsing'. The current message fails to reflect the actual code change, making it poor and unhelpful for understanding the purpose of the commit.","The commit message is relevant to the task and indicates a change in behavior (returning error status), but it is overly vague and lacks specific details about what was fixed or why. The code diff shows a misplaced return statement that exits the method prematurely without properly handling the error flow, and the commit message does not clarify that the error status is being returned incorrectly or that the method's logic was broken. A better message would specify the issue (e.g., 'fix: incorrectly returning error status before processing response') and the impact. Thus, it is partially accurate but insufficiently detailed."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/mapquest.py,"@@ -94,7 +94,9 @@ class MapquestQuery(MultipleResultsQuery):
 
     def _catch_errors(self, json_response):
         if b'The AppKey submitted with this request is invalid' in json_response:
-            raise ValueError('MapQuest API Key invalid')
+            self.error = 'MapQuest API Key invalid'
+            
+        return self.error
 
     def _adapt_results(self, json_response):
         results = json_response.get('results', [])
",update mapquest.py,fix(multiple-results-query): handle invalid MapQuest API key gracefully,Corrective,"The new message indicates a fix for a specific issue (handling invalid MapQuest API key) in a multiple-results query, which addresses a bug or error scenario, making it a corrective improvement.",2.0,2.0,2.0,"The commit message 'return error from _catch_errors' is overly vague and does not accurately reflect the actual change. The diff shows that the method now sets an instance attribute `self.error` instead of raising an exception, and it returns `self.error` rather than propagating an error. The message fails to convey the intent, the actual behavior change, or the impact. A better message would specify that the method now stores and returns an error message instead of raising a ValueError. Thus, it is only minimally descriptive and lacks clarity, warranting a score of 2.","The commit message 'update mapquest.py' is extremely vague and provides no information about what was changed or why. The diff shows a modification to handle API key validation errors by storing the error message in an instance attribute instead of raising a ValueError, which is a meaningful change. A better commit message would describe this change, such as 'Fix MapQuest API key validation to store error message instead of raising ValueError'. Since the current message offers no context or value, it only scores a 2 — insufficient to reflect the actual change.","The commit message is somewhat relevant to the task, as it addresses handling an invalid MapQuest API key. However, it lacks detail about the actual change made—specifically, that the error is now stored in an instance variable instead of raising an exception. The change introduces a more graceful handling by storing the error message rather than immediately raising a ValueError, which is a meaningful improvement. Still, the message does not clearly communicate the impact or the rationale behind the change, making it under-communicative for a code review. Thus, it earns a score of 2 (Fair)."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/maxmind.py,"@@ -37,8 +37,9 @@ class Maxmind(Base):
     def _catch_errors(self):
         error = self.content.get('error')
         if error:
-            code = self.content.get('code')
-            self.error = code
+            self.error = self.content.get('code')
+            
+        return self.error
 
     def _exceptions(self):
         subdivisions = self.content.get('subdivisions')
",update maxmind.py,fix: rectification failed,Corrective,"The new message indicates a specific failure in the rectification process, addressing a bug or error that was previously unreported or vague, thus correcting the issue rather than just improving appearance or semantics.",2.0,2.0,2.0,"The commit message 'return error from _catch_errors' is vague and lacks context. While it correctly indicates a change related to error handling, it does not explain what was changed, why it was changed, or how it affects the functionality. The diff shows that the method now returns the error value, but the message fails to convey the significance or intent of the change. A better message would specify that the method now returns the error code from the content dictionary. Thus, it is only minimally informative and falls short of being clear or useful for understanding the impact of the change.","The commit message 'update maxmind.py' is overly vague and provides no information about what was changed or why. While the code diff shows a small modification to the _catch_errors method—specifically, the addition of a return statement and proper indentation—the message fails to convey the actual change or its significance. A better message would describe the change, such as 'Add return statement to _catch_errors to properly propagate error code'. Thus, the message is minimally informative and lacks context, earning a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a minor code change where the error assignment is now properly returned with a missing newline and a logical fix in the `_catch_errors` method, but the message fails to convey the actual improvement. A better message would specify the issue (e.g., 'fix: properly return error code in _catch_errors') and the change made. Thus, it receives a score of 2 for being technically relevant but poorly worded and lacking clarity."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/opencage.py,"@@ -40,6 +40,8 @@ class OpenCage(Base):
                 message = status.get('message')
                 if self.status_code:
                     self.error = message
+            
+        return self.error
 
     def _exceptions(self):
         # Build intial Tree with results
",add error attribute to opencage,fix(open-cage): return error message on status check,Corrective,"The new message indicates a fix for a specific issue (status check not returning error message) in the open-cage integration, which addresses a functional deficiency, making it a corrective improvement.",2.0,2.0,3.0,"The commit message 'return error from _catch_errors' is too vague and lacks specificity. It does not clearly indicate what was changed, why it was changed, or the impact of the change. The diff shows that a return statement was added after a block that sets self.error, but the message fails to explain the purpose or context of this change. A better message would specify that the method now returns the error message set in _catch_errors, improving error propagation. As such, it is only minimally informative and falls short of being clear or useful for understanding the change.","The commit message 'add error attribute to opencage' is too vague and does not reflect the actual change. The diff shows that the error attribute is being set in the class and returned in the method, indicating a more complete functionality change—specifically, making the error accessible via a return value. A better message would clarify that the error is now returned from the method, not just added as an attribute. Thus, the message lacks detail and context, resulting in a low score.","The commit message is relevant and identifies the fix correctly — returning the error message on status check — which aligns with the code change. However, it lacks context such as why the change was needed, what the previous behavior was, or how this improves the functionality. The message is concise but minimal, missing technical depth or impact. Therefore, it is functional but not excellent."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/tamu.py,"@@ -170,7 +170,8 @@ class TamuQuery(MultipleResultsQuery):
 
         if status_code == '401' or status_code == '470':
             self.error = u'Tamu returned status_code {0}.  Is API key {1} valid?'.format(status_code, self.key)
-            raise Exception(self.error)
+            
+        return self.error
 
     def _adapt_results(self, json_response):
         return json_response['OutputGeocodes']
",update tamu_query.py,fix(multiple-results-query): return error message on 401 or 470 status codes,Corrective,"The new message indicates a fix for returning error messages on specific status codes (401 or 470), which addresses a functional deficiency in error handling, making it a corrective improvement.",2.0,2.0,2.0,"The commit message ""return error from _catch_errors"" is vague and lacks context. It does not clearly explain what changed, why it was changed, or the impact of the change. The diff shows that an exception was removed and instead the error message is returned, which is a significant behavioral change. A better message would specify that the exception was replaced with a return of the error message, and that this improves error handling by allowing callers to handle the error gracefully rather than crashing. As it stands, the message is too minimal and fails to communicate the actual change or its significance.","The commit message 'update tamu_query.py' is extremely vague and provides no information about what was changed or why. The diff shows a significant change in behavior: instead of raising an exception on a 401/470 status code, the code now returns the error message. This is a critical change in error handling, yet the commit message fails to communicate this. A better message would describe the change, such as 'Modify TamuQuery to return error message instead of raising exception on 401/470 status codes'. Therefore, while the change is present, the commit message lacks clarity and context, resulting in a score of 2.","The commit message correctly identifies the intent of the change — returning an error message instead of raising an exception for 401 or 470 status codes — which is relevant to the task. However, it is overly vague and lacks specific context about why the change was made (e.g., improving error handling, enabling better debugging, or aligning with API expectations). The code diff shows a removal of an exception raise and a simple return of the error message, which suggests a more subtle and potentially risky change (e.g., breaking error propagation). The commit message does not mention the removal of the exception or the implications for error handling, which reduces its clarity and usefulness. Thus, it is functional but insufficiently detailed, warranting a score of 2."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/tomtom.py,"@@ -113,6 +113,8 @@ class TomtomQuery(MultipleResultsQuery):
         if 'Developer Inactive' in str(json_response):
             self.error = 'API Key not valid'
             self.status_code = 401
+            
+        return self.error
 
 
 if __name__ == '__main__':
",update totomtom.py,fix(query): return error when API key is invalid,Corrective,"The new message specifies a concrete cause of the error (invalid API key) and ties it to a specific function (query), indicating a fix for a bug or incorrect behavior rather than a stylistic or semantic change.",2.0,1.0,2.0,"The commit message 'return error from _catch_errors' is vague and lacks context. It does not explain what change was made, why it was made, or how it affects the functionality. The diff shows that a return statement was added after setting an error and status code, but the message fails to link this to the actual purpose—such as ensuring error propagation or improving error handling. A better message would specify the intent, like 'Add error return in TomtomQuery to propagate API key validation errors'. Thus, it receives a score of 2 for being technically relevant but insufficiently descriptive.","The commit message 'update totomtom.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a clear addition of error handling logic that checks for 'Developer Inactive' in the API response and sets an error and status code, but this context is completely missing from the commit message. A good commit message should reflect the purpose and effect of the change, which is absent here. Therefore, the message is poor and fails to meet basic standards for clarity and usefulness.","The commit message correctly identifies the issue and the fix (returning an error when the API key is invalid), which aligns with the task. However, it is overly simplistic and lacks context—such as the specific condition being checked ('Developer Inactive') or the fact that the error is returned after setting self.error and self.status_code. A better message would include more detail about the behavior or the code change. Therefore, it is functional but not comprehensive, warranting a score of 2."
7a30f8c159fd1829bc5ef3a8a5fadf57a1fdb62e,return error from _catch_errors,geocoder/yahoo.py,"@@ -35,6 +35,8 @@ class Yahoo(Base):
         if status:
             if not status == 'OK':
                 self.error = status
+            
+        return self.error
 
     def _exceptions(self):
         # Build intial Tree with results
",update yahoo.py,feat(yahoo): add error return in status check,Corrective,"The new message indicates a deliberate addition of error return during status checking, which addresses a potential missing behavior in the Yahoo integration, suggesting a fix for a functional deficiency.",2.0,1.0,3.0,"The commit message 'return error from _catch_errors' is vague and lacks specificity. It does not clearly indicate what was changed, why it was changed, or how it impacts the functionality. The diff shows a simple addition of a return statement for self.error after checking status, but the message fails to connect this change to the actual behavior or context. A better message would explain that the method now returns the error status if it's not 'OK', which improves error handling. As such, the message is partially relevant but insufficiently detailed.","The commit message 'update yahoo.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the change. The diff shows a modification to a method that adds a return statement for self.error, which is a significant change in behavior. A meaningful commit message should describe the specific change and its purpose, such as 'Add return self.error to Yahoo class to expose error status after status check.' Without such detail, the message fails to provide context or value to developers reviewing the commit.","The commit message 'feat(yahoo): add error return in status check' is somewhat accurate in indicating a feature addition related to error handling. However, it lacks detail about the actual change—specifically, it doesn't clarify that the error is being returned after a status check, nor does it mention the context (e.g., when status is not 'OK'). The diff shows a simple addition of a return statement for self.error, which is a small, focused change, but the message is vague and could be more precise. A better message would specify what the change does and why. Thus, it's functional but not excellent."
c55ddb26dd4604af328a78762b618d46e05ede7e,refactored yahoo (but not fixing it),geocoder/api.py,"@@ -28,7 +28,7 @@ from geocoder.tamu import TamuQuery
 from geocoder.tomtom import TomtomQuery
 from geocoder.tgos import TgosQuery
 from geocoder.uscensus import USCensusQuery
-from geocoder.yahoo import Yahoo
+from geocoder.yahoo import YahooQuery
 from geocoder.yandex import YandexQuery
 from geocoder.w3w import W3WQuery
 
@@ -81,7 +81,7 @@ options = {
         'geocode': Gaode,
         'reverse': GaodeReverse
     },
-    'yahoo': {'geocode': Yahoo},
+    'yahoo': {'geocode': YahooQuery},
     'tomtom': {'geocode': TomtomQuery},
     'arcgis': {
         'geocode': ArcgisQuery,
",add yahoo/tomtom/arcgis/yandex to searchresults,refactor(provider): update yahoo geocode to use YahooQuery,Corrective,"The new message indicates a specific update to fix or improve the geocode functionality by using YahooQuery, which addresses a potential issue in the original implementation, moving beyond mere refactoring to a functional improvement.",2.0,2.0,4.0,"The commit message 'refactored yahoo (but not fixing it)' is vague and misleading. While the diff shows a renaming of `Yahoo` to `YahooQuery` in imports and configuration, the message implies a refactoring that doesn't fix any issues, which is not accurate. The change is actually a consistent naming pattern (aligning with other queries like TomtomQuery, YandexQuery, etc.), suggesting a code style or API consistency improvement. However, the phrase 'but not fixing it' introduces an incorrect implication that the underlying functionality is broken or unaddressed. A better message would acknowledge the naming consistency improvement without implying a failure or lack of resolution. Thus, the message is partially accurate but poorly worded and lacks clarity, warranting a score of 2.","The commit message is vague and does not accurately reflect the changes made. The diff shows only a renaming of imports and configuration entries (Yahoo to YahooQuery), which is a minor code refactoring, not the addition of new services. The message 'add yahoo/tomtom/arcgis/yandex to searchresults' is misleading because no new services are being added; instead, existing ones are being updated to use a consistent query class pattern. The message fails to convey the actual scope and nature of the change, making it poor for clarity and usefulness.","The commit message accurately reflects the change: it updates the Yahoo geocode provider from `Yahoo` to `YahooQuery`, which aligns with the diff showing the import and configuration update. The message is concise, clear, and relevant to the task. However, it lacks context about why the change was made (e.g., consistency with other providers, refactoring pattern), which could have made it more complete. Still, it is technically correct and sufficiently descriptive for a code review, earning a strong 'Good' rating."
c55ddb26dd4604af328a78762b618d46e05ede7e,refactored yahoo (but not fixing it),geocoder/yahoo.py,"@@ -1,60 +1,26 @@
 #!/usr/bin/python
 # coding: utf8
-
 from __future__ import absolute_import
-from geocoder.base import Base
 
+import logging
 
-class Yahoo(Base):
-    """"""
-    Yahoo BOSS Geo Services
-    =======================
-    Yahoo PlaceFinder is a geocoding Web service that helps developers make
-    their applications location-aware by converting street addresses or
-    place names into geographic coordinates (and vice versa).
+from geocoder.base import OneResult, MultipleResultsQuery
 
-    API Reference
-    -------------
-    https://developer.yahoo.com/boss/geo/
-    """"""
-    provider = 'yahoo'
-    method = 'geocode'
 
-    def __init__(self, location, **kwargs):
-        self.url = 'https://sgws2.maps.yahoo.com/FindLocation'
-        self.location = location
-        self.params = {
-            'q': location,
-            'flags': 'J',
-            'locale': kwargs.get('locale', 'en-CA'),
-        }
-        self._initialize(**kwargs)
-
-    def _catch_errors(self):
-        status = self.parse['statusDescription']
-        if status:
-            if not status == 'OK':
-                self.error = status
-
-        return self.error
-
-    def _exceptions(self):
-        # Build intial Tree with results
-        if self.parse['Result']:
-            self._build_tree(self.parse['Result'])
+class YahooResult(OneResult):
 
     @property
     def lat(self):
-        return self.parse.get('latitude')
+        return self.raw.get('latitude')
 
     @property
     def lng(self):
-        return self.parse.get('longitude')
+        return self.raw.get('longitude')
 
     @property
     def address(self):
-        line1 = self.parse.get('line1')
-        line2 = self.parse.get('line2')
+        line1 = self.raw.get('line1')
+        line2 = self.raw.get('line2')
         if line1:
             return ', '.join([line1, line2])
         else:
@@ -62,48 +28,88 @@ class Yahoo(Base):
 
     @property
     def housenumber(self):
-        return self.parse.get('house')
+        return self.raw.get('house')
 
     @property
     def street(self):
-        return self.parse.get('street')
+        return self.raw.get('street')
 
     @property
     def neighborhood(self):
-        return self.parse.get('neighborhood')
+        return self.raw.get('neighborhood')
 
     @property
     def city(self):
-        return self.parse.get('city')
+        return self.raw.get('city')
 
     @property
     def county(self):
-        return self.parse.get('county')
+        return self.raw.get('county')
 
     @property
     def state(self):
-        return self.parse.get('state')
+        return self.raw.get('state')
 
     @property
     def country(self):
-        return self.parse.get('country')
+        return self.raw.get('country')
 
     @property
     def hash(self):
-        return self.parse.get('hash')
+        return self.raw.get('hash')
 
     @property
     def quality(self):
-        return self.parse.get('addressMatchType')
+        return self.raw.get('addressMatchType')
 
     @property
     def postal(self):
-        postal = self.parse.get('postal')
+        postal = self.raw.get('postal')
         if postal:
             return postal
         else:
-            return self.parse.get('uzip')
+            return self.raw.get('uzip')
+
+
+class YahooQuery(MultipleResultsQuery):
+    """"""
+    Yahoo BOSS Geo Services
+    =======================
+    Yahoo PlaceFinder is a geocoding Web service that helps developers make
+    their applications location-aware by converting street addresses or
+    place names into geographic coordinates (and vice versa).
+
+    API Reference
+    -------------
+    https://developer.yahoo.com/boss/geo/
+    """"""
+    provider = 'yahoo'
+    method = 'geocode'
+
+    _URL = 'https://sgws2.maps.yahoo.com/FindLocation'
+    _RESULT_CLASS = YahooResult
+    _KEY_MANDATORY = False
+
+    def _build_params(self, location, provider_key, **kwargs):
+        return{
+            'q': location,
+            'flags': 'J',
+            'locale': kwargs.get('locale', 'en-CA'),
+        }
+
+    def _catch_errors(self, json_response):
+        status = json_response['statusDescription']
+        if status:
+            if not status == 'OK':
+                self.error = status
+
+        return self.error
+
+    def _adapt_results(self, json_response):
+        return [json_response['Result']]
+
 
 if __name__ == '__main__':
-    g = Yahoo('1552 Payette dr., Ottawa, ON')
+    logging.basicConfig(level=logging.INFO)
+    g = YahooQuery('1552 Payette dr., Ottawa, ON')
     g.debug()
",add docs for yahoo place finder,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a fix is being applied to address the issue, which moves beyond a mere refactoring to actively correct a problem.",3.0,2.0,2.0,"The commit message 'refactored yahoo (but not fixing it)' is vague and lacks specificity. While the diff shows a clear refactoring of the Yahoo geocoding class — splitting it into separate `YahooResult` and `YahooQuery` classes, removing redundant code, and improving structure — the message fails to convey the actual changes or their significance. It also incorrectly implies the code is not fixed, when in fact the refactoring improves maintainability and separation of concerns. A better message would describe the changes more precisely (e.g., 'Split Yahoo geocoding into dedicated Result and Query classes for better modularity'). Given that the changes are meaningful and well-structured, but the message is under-explained and misleading, a score of 3 reflects a moderately poor commit message that is technically accurate but lacks clarity and value.","The commit message 'add docs for yahoo place finder' is highly inaccurate given the actual changes in the code diff. The diff does not add documentation; instead, it refactors and restructures the Yahoo geocoding class into two new classes (YahooResult and YahooQuery), moves logic from the old Base class to these new components, and introduces new structure with proper property access via raw data. The code also adds logging setup and improves error handling. The commit message fails to reflect these substantial structural and functional changes, which go far beyond just adding documentation. Therefore, it is misleading and does not accurately represent the work done.","The commit message 'fix: rectification failed' is highly inadequate for describing the actual changes in the diff. The diff shows a significant refactoring of the Yahoo geocoding class, introducing a new `YahooResult` and `YahooQuery` classes, moving data access from parsed results to raw JSON, and restructuring the error handling and parameter building. The term 'rectification failed' is vague, technically incorrect (no rectification failure is evident), and does not reflect the real nature of the changes—namely, a structural and architectural improvement to support better data access and query handling. A proper commit message should describe what was fixed or implemented, such as 'refactor: split Yahoo geocoding into query and result classes for better data access and maintainability'. Thus, the message is poor in clarity, specificity, and relevance to the changes."
472731fe38f570df4b83887e38a2473dc6962520,.debug() now returns stats,geocoder/base.py,"@@ -7,14 +7,12 @@ import sys
 import json
 import six
 import logging
+from io import StringIO
 from collections import OrderedDict
-from geocoder.distance import Distance
 
-try:
-    # python >3.3
-    from collections.abc import MutableSequence
-    from urllib.parse import urlparse
-except ImportError:
+is_python2 = sys.version_info < (3, 0)
+
+if is_python2:
     # python 2.7
     from urlparse import urlparse
 
@@ -26,8 +24,12 @@ except ImportError:
         def __iter__(self): return iter(self._list) # noqa
         def __contains__(self, v): return self._list.__contains__(v) # noqa
         def __eq__(self, other): return self._list == other # noqa
+else:
+    # python >3.3
+    from collections.abc import MutableSequence
+    from urllib.parse import urlparse
 
-is_python2 = sys.version_info < (3, 0)
+from geocoder.distance import Distance # noqa
 
 LOGGER = logging.getLogger(__name__)
 
@@ -134,38 +136,46 @@ class OneResult(object):
             return 'ERROR - No results found'
         return 'ERROR - No Geometry'
 
-    def debug(self):
-        print('')
-        print('From provider')
-        print('-----------')
-        print(json.dumps(self.raw, indent=4))
-        print('')
-        print('Cleaned json')
-        print('-----------')
-        print(json.dumps(self.json, indent=4))
-        print('')
-        print('OSM Quality')
-        print('-----------')
-        count = 0
-        for key in self.osm:
-            if 'addr:' in key:
-                if self.json.get(key.replace('addr:', '')):
-                    print('- [x] {0}'.format(key))
-                    count += 1
+    def debug(self, verbose=True):
+        with StringIO() as output:
+            output.write('\n')
+            output.write('From provider\n')
+            output.write('-----------\n')
+            output.write(json.dumps(self.raw, indent=4))
+            output.write('\n')
+            output.write('Cleaned json\n')
+            output.write('-----------\n')
+            output.write(json.dumps(self.json, indent=4))
+            output.write('\n')
+            output.write('OSM Quality\n')
+            output.write('-----------\n')
+            osm_count = 0
+            for key in self.osm:
+                if 'addr:' in key:
+                    if self.json.get(key.replace('addr:', '')):
+                        output.write('- [x] {0}\n'.format(key))
+                        osm_count += 1
+                    else:
+                        output.write('- [ ] {0}\n'.format(key))
+            output.write('({0}/{1})\n'.format(osm_count, len(self.osm) - 2))
+            output.write('\n')
+            output.write('Fieldnames\n')
+            output.write('----------\n')
+            fields_count = 0
+            for fieldname in self.fieldnames:
+                if self.json.get(fieldname):
+                    output.write('- [x] {0}\n'.format(fieldname))
+                    fields_count += 1
                 else:
-                    print('- [ ] {0}'.format(key))
-        print('({0}/{1})'.format(count, len(self.osm) - 2))
-        print('')
-        print('Fieldnames')
-        print('----------')
-        count = 0
-        for fieldname in self.fieldnames:
-            if self.json.get(fieldname):
-                print('- [x] {0}'.format(fieldname))
-                count += 1
-            else:
-                print('- [ ] {0}'.format(fieldname))
-        print('({0}/{1})'.format(count, len(self.fieldnames)))
+                    output.write('- [ ] {0}\n'.format(fieldname))
+            output.write('({0}/{1})\n'.format(fields_count, len(self.fieldnames)))
+
+            # print in verbose mode
+            if verbose:
+                print(output.getvalue())
+
+            # return stats
+            return [osm_count, fields_count]
 
     def _get_bbox(self, south, west, north, east):
         if all([south, east, north, west]):
@@ -541,23 +551,31 @@ class MultipleResultsQuery(MutableSequence):
         }
         return features
 
-    def debug(self):
-        print('===')
-        print(repr(self))
-        print('===')
-        print('')
-        print('#res: {}'.format(len(self)))
-        print('code: {}'.format(self.status_code))
-        print('url:  {}'.format(self.url))
+    def debug(self, verbose=True):
+        with StringIO() as output:
+            output.write('===\n')
+            output.write(repr(self))
+            output.write('===\n')
+            output.write('\n')
+            output.write('#res: {}\n'.format(len(self)))
+            output.write('code: {}\n'.format(self.status_code))
+            output.write('url:  {}\n'.format(self.url))
+
+            stats = []
+
+            if self.ok:
+                for index, result in enumerate(self):
+                    output.write('\n')
+                    output.write('Details for result #{}\n'.format(index + 1))
+                    output.write('---\n')
+                    stats.append(result.debug())
+            else:
+                output.write(self.status)
 
-        if self.ok:
-            for index, result in enumerate(self):
-                print('')
-                print('Details for result #{}'.format(index + 1))
-                print('---')
-                result.debug()
-        else:
-            print(self.status)
+            if verbose:
+                print(output.getvalue())
+
+            return stats
 
     # Delegation to current result
     def set_default_result(self, index):
",add tests for python 2.7+,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug was resolved, which falls under corrective improvement.",4.0,1.0,1.0,"The commit message ""\.debug() now returns stats"" is concise and accurate in indicating a key behavioral change: the debug methods in both OneResult and MultipleResultsQuery now return statistics (e.g., OSM field counts and fieldnames counts) in addition to printing debug output. This is a meaningful improvement that enhances usability, especially for programmatic use. However, the message lacks context about the implementation details—such as the use of StringIO for output buffering or the addition of a verbose parameter—which could be helpful for developers. While it correctly captures the core change, it could be slightly more descriptive (e.g., 'debug() now returns stats and supports verbose output'). Still, it is clear, relevant, and sufficient for a general audience, justifying a high score.","The commit message 'add tests for python 2.7+' is highly inaccurate and misleading given the actual changes in the diff. The diff does not add any tests; instead, it refactors Python 2 vs. Python 3 compatibility code, improves debugging output by using StringIO for better control, and organizes logging and output formatting. The changes are about code portability and debugging clarity, not test addition. Therefore, the commit message fails to reflect the actual content of the changes, making it poor and misleading.","The commit message 'fix: rectification failed' is highly inadequate given the actual changes in the diff. The diff shows a significant refactoring of Python 2 vs 3 compatibility, including proper import handling, improved debug method implementations with stringio for output buffering, and better structured logging and verbosity control. The term 'rectification failed' is vague, misleading, and does not describe what was actually fixed or improved. It provides no context about the nature of the fix, the problem it solves, or the impact of the changes. A proper commit message should clearly describe the issue and the solution, such as 'fix: improve debug output compatibility across Python 2 and 3 with proper string output and verbose mode'. Therefore, the commit message is poor and fails to reflect the actual work done."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_arcgis.py,"@@ -9,6 +9,9 @@ ottawa = (45.4215296, -75.6971930)
 def test_arcgis():
     g = geocoder.arcgis(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 0
+    assert fields_count == 8
 
 
 def test_arcgis_reverse():
",add test for reverse arcgis,fix(test_arcgis): assert OSM and fields counts in debug output,Corrective,"The new message indicates a fix to assert OSM and fields counts in debug output, which addresses a potential issue in test validation, suggesting a bug correction rather than a cosmetic or trivial change.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not clarify what exactly was tested or why. The diff shows specific assertions about osm_count and fields_count, which relate to debug output statistics. A better message would mention the specific debug fields tested (e.g., 'added tests verifying debug output counts for OSM and field data'). As it stands, the message is minimally informative and fails to convey the technical detail or intent of the change, resulting in a moderate score.","The commit message 'add test for reverse arcgis' is too vague and does not reflect the actual changes made. The diff shows that the commit adds a test for the arcgis geocoding function, specifically verifying that debug() returns zero OSM counts and eight field counts, which is a concrete assertion about behavior. The commit message fails to mention the specific test content or what is being validated, making it insufficient for understanding the purpose of the change. A better message would describe the test's intent, such as 'add test to verify arcgis debug output has zero OSM count and 8 fields'. Thus, it receives a score of 2 for being minimally relevant but lacking detail and clarity.","The commit message is clear and relevant to the changes made, indicating that it adds assertions for OSM and fields counts in the debug output of the arcgis test. However, it lacks context about why these assertions are important or what the expected behavior is. While the message correctly identifies the test and the change, it does not fully explain the purpose or impact of the assertion (e.g., verifying expected behavior in debug output). This makes it somewhat superficial, hence a score of 3 rather than 4 or 5."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_baidu.py,"@@ -12,6 +12,9 @@ def test_baidu():
     """"""
     g = geocoder.baidu(location, key='35d0b72b3e950e5d0b74b037262f8b41')
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 0
+    assert fields_count == 7
 
 
 def test_baidu_reverse():
",add failing test for,fix(geocoder): add debug count assertions for Baidu geocoding,Corrective,"The new message specifies a fix for a bug related to debug count assertions in Baidu geocoding, indicating a corrective change to ensure proper functionality, unlike the vague test addition in the old message.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not explain what exactly was tested or why. The diff shows concrete assertions about `osm_count` and `fields_count`, which were specifically verified to be 0 and 7, respectively. A better message would mention the specific debug output fields and their expected values. As such, the message is partially informative but insufficiently detailed, warranting a mid-range score.","The commit message 'add failing test for' is extremely vague and provides no context about what is being tested or why. While it correctly indicates a new test was added, it lacks detail about the functionality, the expected behavior, or the purpose of the test. The test itself verifies that OSM count is 0 and fields count is 7, which suggests it's checking for a specific debug output from the Baidu geocoder. However, the commit message fails to communicate this intent. A better message would describe the test's purpose, such as 'Add test to verify debug output for Baidu geocoder returns 0 OSM entries and 7 fields'. Thus, the message is minimally informative and falls short of being clear or useful.","The commit message is clear and relevant, indicating a fix to add debug count assertions for Baidu geocoding. It correctly identifies the component (geocoder) and the nature of the change. However, it lacks context about why these assertions were added or what problem they solve, which reduces its completeness. The message is accurate and concise but could be improved with more detail about the purpose or impact of the change."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_bing.py,"@@ -11,6 +11,9 @@ def test_bing():
     g = geocoder.bing(location)
     assert g.ok
     assert g.city == city
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 12
 
 
 def test_bing_reverse():
",add a regression test for,fix(test_bing): assert debug output counts for OSM and fields,Corrective,"The new message indicates a fix to assert debug output counts, suggesting a bug was resolved in the test logic, which aligns with a corrective improvement.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what was tested, why it matters, or the expected behavior. The diff shows concrete assertions about osm_count and fields_count, which are specific debug statistics from the Bing geocoder. A better message would mention the exact stats tested (e.g., 'added tests for debug() output: osm_count=3, fields_count=12'). As such, the message is partially informative but insufficiently detailed, warranting a medium score.","The commit message 'add a regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's important, or which feature or behavior is being validated. While the diff shows the addition of a test for Bing geocoding that verifies OSM and fields counts, the commit message fails to reflect that detail. A better message would mention the specific test case (e.g., 'add regression test for Bing geocoding debug output counts'). Thus, it receives a score of 2 for being minimally informative but lacking clarity and context.","The commit message is clear and relevant, stating that it fixes assertions for debug output counts in test_bing. It correctly identifies the scope (test_bing) and the nature of the change (asserting debug output counts for OSM and fields). However, it lacks context about why these assertions were added or what the debug output represents, which could help other developers understand the intent. While the message is accurate and concise, it is somewhat minimal in explanatory value, resulting in a moderate score rather than excellent."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_canadapost.py,"@@ -19,3 +19,6 @@ def test_canadapost():
         mocker.get(url_3, text=input_3.read())
         g = geocoder.canadapost(location, key='fake', maxRows=3)
         assert g.ok
+        osm_count, fields_count = g.debug()[0]
+        assert osm_count == 6
+        assert fields_count == 15
",add test for,fix(test_canadapost): assert debug output counts for OSM and fields,Corrective,"The new message specifies a fix for a test related to debug output counts, indicating a bug correction rather than a cosmetic or trivial change.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what was tested, why it matters, or the expected outcome. The diff shows concrete assertions about osm_count and fields_count, which are specific debug statistics. A better message would mention the exact values or the purpose of verifying debug output. Thus, the message is partially informative but lacks clarity and context, resulting in a mid-level score.","The commit message 'add test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it matters, or what functionality is being verified. While the diff shows a concrete test addition for Canadapost's debug output, the commit message fails to reflect that detail. A better message would specify the exact behavior being tested (e.g., 'add test to verify debug output counts for Canadapost geocoding'). Thus, it is only minimally informative and falls short of being clear or useful.","The commit message is clear and relevant, indicating a fix to assert debug output counts for OSM and fields in the test. It correctly identifies the context (test_canadapost) and the nature of the change (assertions on debug output). However, it lacks detail about why these assertions were added or what the expected behavior was, which limits its completeness. The message is accurate and concise but could be improved with more context about the test's purpose or the debugging output structure."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_freegeoip.py,"@@ -9,3 +9,6 @@ location = '99.240.181.199'
 def test_freegeoip():
     g = geocoder.freegeoip(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 12
",add regression test for freegeoip,fix(test): assert OSM and fields count in freegeoip debug output,Corrective,"The new message specifies a fix to assert OSM and fields count in debug output, indicating a bug correction related to test assertions, which improves correctness and reliability.",3.0,3.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity about what was tested or why. While it correctly indicates that tests were added, it does not convey the details of the test (e.g., checking OSM and fields counts), the expected behavior, or the context. The diff shows concrete assertions for specific values (osm_count == 3, fields_count == 12), which are not reflected in the message. A better message would specify the exact validation performed. Thus, it is partially informative but insufficiently detailed, warranting a medium score.","The commit message 'add regression test for freegeoip' is vague and does not convey the specific details of the test added. While it correctly indicates a test was added, it lacks context about what was tested, why it was added, or the expected behavior. The diff shows a concrete test that verifies specific debug output values (osm_count == 3, fields_count == 12), which are not reflected in the commit message. A better message would include these specifics (e.g., 'add test to verify freegeoip debug output has 3 OSM entries and 12 fields'). Thus, the message is partially informative but insufficiently detailed, warranting a mid-range score.","The commit message is clear and relevant to the change, accurately describing the addition of assertions for OSM and fields count in the freegeoip debug output. It specifies the context ('test') and the nature of the fix. However, it lacks detail about why these specific counts matter or the expected behavior, which could be improved for better long-term maintainability. Overall, it is well-written and appropriate for the change, but not exceptionally detailed or explanatory."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_gaode.py,"@@ -12,6 +12,9 @@ def test_gaode():
     """"""
     g = geocoder.gaode(location, key='0716e5809437f14e3dd0793a5c6d2b13')
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 12
 
 
 def test_gaode_reverse():
",add failing test for,fix(geocoder): add assertions for debug output counts in Gaode geocoder,Corrective,"The new message specifies a fix for a missing assertion in the Gaode geocoder's debug output, indicating a bug correction to ensure proper validation of debug stats, which goes beyond mere testing and addresses a functional deficiency.",3.0,2.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what exactly was tested, why it matters, or the significance of the stats (e.g., OSM count, fields count). The diff shows concrete assertions about specific values (osm_count == 3, fields_count == 12), which are meaningful and verifiable, but the message fails to reflect that detail. A better message would specify the exact behavior being tested. Thus, it is partially informative but insufficiently detailed, earning a medium score.","The commit message 'add failing test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's important, or what the expected behavior should be. While it correctly identifies that a test is being added, the term 'failing test' implies the test is expected to fail, which may mislead the reader about the intent (e.g., is it a test to verify a bug, or to validate a feature?). A better message would describe the functionality being tested and the expected outcome. Therefore, the message is minimally informative and falls short of being clear or useful for context or review.","The commit message accurately reflects the change: it adds assertions to verify the debug output counts in the Gaode geocoder. The message is clear, concise, and relevant to the diff, indicating a fix to validate debug output. However, it lacks context about why these specific counts (3 OSM and 12 fields) matter or the expected behavior, which could be improved for completeness. Still, it is well-written and directly tied to the code changes, making it a strong, if slightly minimal, commit message."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_geocodefarm.py,"@@ -15,6 +15,9 @@ def test_geocodefarm():
         mocker.get(url, text=input.read())
         result = geocoder.geocodefarm(location)
         assert result.ok
+        osm_count, fields_count = result.debug()[0]
+        assert osm_count == 3
+        assert fields_count == 15
 
 
 def test_geocodefarm_reverse():
",fix failing test,fix(geocoder): assert correct OSM and fields count in geocodefarm debug output,Corrective,"The new message specifies a bug fix related to asserting correct OSM and fields count in debug output, indicating a correction of a defect in the geocoder's behavior.",3.0,2.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what was tested, why it matters, or the expected behavior. The diff shows concrete assertions on `osm_count` and `fields_count` from `result.debug()[0]`, which implies testing specific debug statistics. A better message would specify the exact debug metrics tested (e.g., 'added tests verifying debug stats: 3 OSM entries and 15 fields'). As it stands, the message is partially informative but lacks detail and context, warranting a moderate score.","The commit message 'fix failing test' is overly vague and provides no information about what was fixed, why it was fixed, or what the test was verifying. While it correctly indicates a fix was applied, it lacks specificity about the test, the issue, or the change in behavior. The diff shows that the test now asserts on `osm_count` and `fields_count`, suggesting the test was enhanced to validate debug output, but this context is missing from the commit message. A better message would specify, for example, 'Add assertions for debug output in geocodefarm test to verify OSM and field counts'. Therefore, the message is minimally adequate but insufficiently informative.","The commit message is clear and relevant to the changes in the code, accurately describing the fix for asserting correct OSM and fields counts in the debug output of geocodefarm. It specifies the context (geocoder), the type of change (fix), and the exact behavior being verified. However, it lacks some detail about why these counts matter or the expected behavior in the broader system, which slightly limits its completeness. Overall, it is well-written and directly tied to the diff, making it excellent for a straightforward fix."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_geolytica.py,"@@ -9,3 +9,6 @@ location = '1552 Payette dr., Ottawa'
 def test_geolytica():
     g = geocoder.geolytica(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 5
+    assert fields_count == 11
",add test for geolytica,fix(test): assert OSM and fields count in geolytica debug output,Corrective,"The new message indicates a fix to assert OSM and fields count in geolytica debug output, implying a bug was addressed to ensure correctness in test assertions, which is a corrective improvement.",3.0,3.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it indicates that tests were added related to debug stats, it does not clarify what stats, why they were tested, or the expected behavior. The diff shows concrete assertions on osm_count and fields_count, which the message fails to reflect. A better message would specify the exact debug output being tested (e.g., 'added tests to verify debug() returns 5 OSM matches and 11 fields'). Therefore, the message is partially informative but lacks detail and clarity, warranting a medium score.","The commit message 'add test for geolytica' is vague and does not convey the specific details of the test added. While it correctly indicates a test was added, it lacks clarity about what was tested, what expectations were verified (e.g., OSM count and field count), or why. The diff shows a concrete test that validates specific debug output values, which is meaningful context missing from the commit message. A better message would include these specifics (e.g., 'add test to verify geolytica debug output: 5 OSM entries, 11 fields'). Thus, it's functional but insufficiently detailed, warranting a moderate score.","The commit message is clear and relevant to the change, accurately describing the addition of assertions for OSM and fields count in the geolytica debug output. It uses the appropriate 'fix(test)' prefix to indicate it's a test-related fix. However, it could be slightly more detailed by mentioning what the counts represent (e.g., number of OSM features and fields parsed), which would improve clarity. Overall, it is well-written and directly reflects the diff, making it a strong but not perfect commit message."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_geonames.py,"@@ -26,6 +26,9 @@ def test_geonames_query(geonames_response):
     assert repr(geonames_response) == '<[OK] Geonames - Geocode [Ottawa]>'
     assert len(geonames_response) == 1
     assert geonames_response.status_code == 200
+    osm_count, fields_count = geonames_response.debug()[0]
+    assert osm_count == 2
+    assert fields_count == 16
 
 
 def test_geonames_first_result(geonames_response):
",add failing test for,fix(test): add debug assertion for OSM and fields count,Corrective,"The new message indicates a fix to add a debug assertion for OSM and fields count, which addresses a potential issue in the testing or functionality, implying a corrective change to ensure correctness.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what was tested, why it matters, or the significance of the debug stats (e.g., OSM count, fields count). The diff shows concrete assertions on specific debug output values, which are not reflected in the message. A better message would specify the exact debug metrics verified (e.g., 'added tests verifying debug output: OSM count = 2, fields count = 16'). As such, the message is partially informative but insufficiently detailed, warranting a moderate score.","The commit message 'add failing test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's being added, or what the expected behavior should be. While the diff shows a new test case that asserts on debug() output, the message fails to communicate the purpose or intent of the test. A better message would describe the test's goal, such as 'add test to verify debug output counts for geonames response'. Therefore, the message is insufficient and only partially informative, warranting a score of 2.","The commit message is clear and relevant, indicating a fix to a test by adding assertions for OSM and fields count. However, it lacks context about why this debug information was added or what the expected behavior was originally. While it correctly identifies the type of change ('fix(test)'), it does not explain the purpose or impact, which limits its completeness. Therefore, it is functional but not fully detailed, earning a moderate score."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_google.py,"@@ -26,6 +26,9 @@ def test_google():
         assert g.ok
         assert g.accuracy == 'APPROXIMATE'
         assert str(g.city) == city
+        osm_count, fields_count = g.debug()[0]
+        assert osm_count == 3
+        assert fields_count == 15
 
 
 def test_google_reverse():
",fix test_google_reverse.py,fix(test_google): assert debug output counts for OSME and fields,Corrective,"The new message indicates a fix to assert debug output counts, suggesting a bug was addressed in the test for Google's debug stats, which aligns with a corrective change.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it indicates that tests were added related to g.debug, it does not clarify what exactly was tested or why. The diff shows concrete assertions on osm_count and fields_count, which suggests a more detailed intent. A better message would specify the exact metrics tested (e.g., 'added tests verifying debug() returns 3 OSM entries and 15 fields'). As such, the message is partially informative but lacks precision and context, resulting in a moderate score.","The commit message 'fix test_google_reverse.py' is extremely vague and does not describe what was actually fixed or why. The diff shows additions to the test_google function, specifically asserting values from g.debug()[0], which relates to testing Google's geocoding output. The commit message fails to mention these changes or their purpose. A better message would indicate the specific test improvement, such as 'Add assertions for OSM and fields count in test_google to validate debug output'. Since the message provides no actionable or informative detail, it receives a score of 2 (Fair).","The commit message is relevant and identifies the change (asserting debug output counts for OSME and fields), but it is somewhat vague and lacks specificity. It does not clearly explain the purpose or context of the assertion, nor does it indicate why these counts matter. A more detailed message, such as 'add assertions to verify debug output counts for OSM entities and field data in test_google', would be stronger. Thus, it is functional but not excellent."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_here.py,"@@ -10,6 +10,9 @@ ottawa = (45.4215296, -75.6971930)
 def test_here():
     g = geocoder.here(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 4
+    assert fields_count == 13
 
 
 def test_here_reverse():
",add regression test for,fix(test_here): assert debug output counts for Here geocoding,Corrective,"The new message indicates a fix to assert debug output counts, suggesting a bug was addressed in the test for Here geocoding, which is a corrective change to ensure correctness.",3.0,2.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not describe what was tested, why it matters, or what the expected behavior is. The diff shows concrete assertions about osm_count and fields_count, which are specific to the debug output. A better message would mention the exact values and their significance (e.g., 'added tests verifying debug output counts for OSM and fields'). As such, the message is partially informative but lacks clarity and context, warranting a moderate score.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's important, or which feature or behavior is being regressed. While the diff shows a concrete test added for the Here geocoder's debug output, the message fails to convey the purpose or context. A better message would specify, for example, 'add regression test for Here geocoder debug output to verify OSM and field counts'. Thus, the message is minimally informative and falls short of being clear or useful for understanding the change's intent.","The commit message is clear and relevant, accurately describing the change: adding assertions to verify the debug output counts from the Here geocoding service. It specifies the test function ('test_here') and the nature of the fix (asserting debug output counts). However, it lacks context about why these specific counts (4 OSM, 13 fields) are important or what issue they resolve, which slightly limits its completeness. Overall, it is well-written and directly tied to the diff, making it effective for a developer to understand the intent quickly."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_ipinfo.py,"@@ -9,3 +9,6 @@ location = '99.240.181.199'
 def test_ipinfo():
     g = geocoder.ipinfo(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 4
+    assert fields_count == 12
",fix ipinfo test,fix(test_ipinfo): assert OSM and fields counts in debug output,Corrective,"The new message indicates a bug fix by adding assertions to verify OSM and field counts in debug output, which addresses a potential issue in test validity or correctness.",3.0,2.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what was tested, why it matters, or the expected behavior. The diff shows concrete assertions about osm_count and fields_count, which are specific to the debug output. A better message would mention the exact values and their significance (e.g., 'added tests verifying debug output counts: 4 OSM entries and 12 fields'). As such, the message is partially informative but insufficiently detailed, warranting a medium score.","The commit message 'fix ipinfo test' is overly vague and does not convey the specific changes or intent behind the update. While the diff shows additions to test assertions for OSM and fields counts, the message fails to indicate what was fixed, why it was fixed, or what behavior it validates. A better message would specify the exact test improvements, such as 'add assertions for OSM and field counts in ipinfo debug output'. Therefore, it receives a score of 2 for lacking detail and clarity.","The commit message is clear and relevant, correctly identifying the task as fixing a test for asserting OSM and fields counts in the debug output. It accurately reflects the change in the test function. However, it could be slightly more precise by specifying which part of the debug output is being tested (e.g., the first element of debug() returns a tuple with osm_count and fields_count). Despite this minor ambiguity, the message is concise, actionable, and directly tied to the code change, making it effective for a developer to understand the intent."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_komoot.py,"@@ -11,6 +11,9 @@ def test_komoot():
     g = geocoder.komoot(location)
     assert g.ok
     assert len(g) == 1
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 15
 
 
 def test_komoot_multi_result():
",add regression test for,fix(test_komoot): assert debug output counts for komoot geocoding,Corrective,"The new message indicates a fix to assert debug output counts, suggesting a bug was resolved in the test for komoot geocoding, which aligns with a corrective improvement.",3.0,2.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks detail about what was tested or why. While it correctly indicates that tests were added, it does not specify the nature of the stats (e.g., osm_count, fields_count), the expected values, or the context. The diff shows concrete assertions on specific debug output values, which are not reflected in the message. A better message would mention the specific debug metrics and their expected values. Thus, it is partially informative but insufficiently detailed, earning a mid-level score.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's important, or which feature or behavior is being verified. While the diff shows a new test added for komoot's debug output, the commit message fails to convey the purpose or context of the test. A better message would specify the exact behavior being validated (e.g., 'add regression test for komoot debug output to verify OSM and fields counts'). Thus, the message is minimally informative and falls short of being clear or useful.","The commit message is clear and relevant, accurately describing the change as fixing an assertion to verify debug output counts in the komoot geocoding test. It specifies the context (test_komoot) and the nature of the fix (asserting debug output counts). However, it lacks some detail about why these specific counts (osm_count=3, fields_count=15) are expected or what they represent, which could be useful for future maintainers. Overall, it is concise, accurate, and sufficient for understanding the change, making it a strong but not perfect commit message."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_mapbox.py,"@@ -11,6 +11,9 @@ ottawa = (45.4215296, -75.6971930)
 def test_mapbox():
     g = geocoder.mapbox(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 0
+    assert fields_count == 9
 
 
 def test_mapbox_reverse():
",add test for mapbox_reverse,fix(test_mapbox): assert debug output counts for Mapbox geocoding,Corrective,"The new message indicates a fix for a specific issue involving debug output counts in Mapbox geocoding, suggesting a bug was identified and resolved, which falls under corrective improvement.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not describe what was tested, why it matters, or the expected behavior. The diff shows concrete assertions about `osm_count` and `fields_count`, which are specific debug statistics from the Mapbox geocoder. A better message would mention the exact debug fields and their expected values (e.g., 'added tests verifying debug output shows 0 OSM counts and 9 field counts'). As it stands, the message is minimally informative and fails to convey the technical intent, resulting in a moderate score.","The commit message 'add test for mapbox_reverse' is overly vague and does not reflect the actual changes in the diff. The diff shows that a new test was added for mapbox, specifically checking that osm_count is 0 and fields_count is 9, which is a concrete assertion about the debug output. The commit message fails to mention the actual test content or what is being verified, making it insufficient and misleading. A better message would describe the test behavior, such as 'add test to verify mapbox debug output has zero OSM count and nine field counts'. Therefore, the message is only minimally relevant and deserves a score of 2.","The commit message is clear and relevant to the changes, indicating that it fixes an assertion in the test for Mapbox geocoding by verifying debug output counts. However, it lacks context about why these specific counts (osm_count == 0 and fields_count == 9) are expected, and does not explain the purpose or rationale behind the test. While it correctly identifies the test and the fix, it is somewhat minimal in explaining the intent or expected behavior, which limits its completeness. Therefore, it is functional but not excellent."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_mapquest.py,"@@ -11,6 +11,9 @@ ottawa = (45.50, -76.05)
 def test_mapquest():
     g = geocoder.mapquest(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 10
 
 
 def test_mapquest_reverse():
",add test for reverse mapquest,fix(test_mapquest): assert debug output counts for MapQuest geocoding,Corrective,"The new message specifies a fix for a test related to MapQuest geocoding debug output, indicating a bug was identified and resolved, which falls under corrective improvement.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks detail about what was tested or why. While it correctly indicates that tests were added, it does not specify the nature of the stats (e.g., OSM count, field count), the purpose of the test, or the expected behavior. The diff shows concrete assertions on specific debug output values, which are not reflected in the message. A better message would mention the specific debug metrics tested and their expected values. Thus, it is partially informative but insufficiently detailed, warranting a mid-range score.","The commit message 'add test for reverse mapquest' is too vague and does not reflect the actual changes made. The diff shows that the commit adds a test for the forward mapquest geocoding functionality, specifically verifying debug output counts (osm_count and fields_count), not reverse geocoding. The message fails to accurately describe the scope and content of the change, leading to a misunderstanding of the task. While it correctly mentions 'mapquest', it misses the key detail of testing the debug output and the specific assertions made. Therefore, it is only minimally informative and deserves a low score.","The commit message is clear and relevant, indicating a fix to assert debug output counts for MapQuest geocoding. It accurately reflects the change in the test function. However, it lacks context about why these specific counts (3 OSM and 10 fields) are important or what the debug output represents, which limits its completeness. A more detailed message could have included the expected behavior or rationale, making it slightly better. Thus, it is functional but not exceptional."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_mapzen.py,"@@ -8,6 +8,9 @@ location = 'Ottawa'
 def test_mapzen():
     g = geocoder.mapzen(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 12
 
 
 def test_mapzen_reverse():
",add a regression test for,fix(test_mapzen): assert OSM and fields counts in debug output,Corrective,"The new message indicates a bug fix by asserting OSM and fields counts in debug output, which addresses a potential issue in test validation, moving beyond mere testing to correct functionality.",3.0,2.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks detail about what was tested or why. While it correctly indicates that tests were added, it does not specify the nature of the stats (e.g., OSM count, field count) or the purpose of the tests. The diff shows specific assertions for `osm_count` and `fields_count`, which are meaningful and measurable, but the message fails to reflect that. A better message would mention the exact values or the functionality being verified. Thus, it's partially informative but lacks clarity and specificity, earning a medium score.","The commit message 'add a regression test for' is extremely vague and lacks specificity. While it correctly indicates that a test was added, it does not describe what the test is for, which feature or behavior it verifies, or why it's important. The diff shows a concrete test added for Mapzen geocoding that checks specific debug output values (OSM count and fields count), but the commit message fails to convey this context. A better message would specify the purpose, such as 'add regression test to verify Mapzen debug output counts for Ottawa location'. Thus, the message is minimally informative and falls short of being useful for understanding the change's intent.","The commit message is clear and relevant, directly indicating that it fixes a test by asserting the OSM and fields counts from the debug output. It accurately reflects the change in the test function. However, it lacks context about why these counts matter or what the expected behavior implies, which slightly limits its completeness. Overall, it is well-written and appropriately scoped, earning a strong 4."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_maxmind.py,"@@ -8,3 +8,6 @@ location = '8.8.8.8'
 def test_maxmind():
     g = geocoder.maxmind(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 1
+    assert fields_count == 13
",add regression test for,fix: rectification failed,Corrective,"The new message indicates a bug fix related to 'rectification failed', suggesting a correction of a functional issue, which falls under corrective improvement.",3.0,2.0,1.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what exactly was tested, why it matters, or what the expected behavior is. The diff shows concrete assertions about `osm_count` and `fields_count`, which are specific debug statistics from the MaxMind geocoder. A better message would mention the exact values and their significance (e.g., 'added tests to verify debug output has 1 OSM entry and 13 fields'). As it stands, the message is minimally informative and could be improved, earning a mid-level score.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's important, or which feature or behavior it targets. While the diff shows a new test for MaxMind geocoding that verifies OSM and field counts, the message fails to convey the purpose or context of the test. A better message would specify the exact behavior being tested (e.g., 'add regression test to verify MaxMind debug output has expected OSM and field counts'). Thus, it receives a score of 2 for being minimally descriptive but lacking clarity and context.","The commit message 'fix: rectification failed' is highly inadequate for the actual changes in the diff. The diff adds test assertions to verify the output of the debug() method in the geocoder.maxmind function, specifically checking that osm_count is 1 and fields_count is 13. This is a test enhancement, not a bug fix related to 'rectification'. The message is vague, technically incorrect, and does not describe what was actually fixed or improved. A proper commit message should reflect the actual change, such as 'test: add debug output validation for MaxMind geocoder'. Therefore, the message is poor and does not match the code changes."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_opencage.py,"@@ -20,6 +20,9 @@ def test_opencage():
     assert g.state_code == 'ON'
     assert g.city == 'Ottawa'
     assert g.town == 'Ottawa'
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 23
 
 
 def test_opencage_multi_result():
",add test for multi-result opencage,fix(test_opencage): add assertion for debug output counts,Corrective,"The new message indicates a fix adding an assertion to verify debug output counts, which addresses a potential deficiency in test coverage or correctness, thus correcting a flaw in the test behavior.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not clarify what was tested, why it matters, or the significance of the changes. The diff shows concrete assertions about osm_count and fields_count, which could have been better captured in the message (e.g., 'added tests verifying debug output counts for OSM and field data'). As such, the message is minimally informative and could be improved, resulting in a moderate score.","The commit message 'add test for multi-result opencage' is vague and does not reflect the actual changes in the diff. The diff shows the addition of a test for a single result (specifically, asserting values for OSM and field counts), not a multi-result scenario. The message is misleading and fails to accurately describe the content of the change, which is actually a test for a single result with specific assertions. A more accurate message would reflect the actual test being added, such as 'add test for opencage result debugging with expected OSM and field counts'.","The commit message is clear and relevant, indicating a fix to add assertions for debug output counts in the test_opencage function. It correctly identifies the scope (test_opencage) and the nature of the change (adding assertions for osm_count and fields_count). However, it lacks context about why these counts matter or what the debug output represents, which could be useful for future maintainers. The message is accurate and concise but not exceptionally detailed or insightful, resulting in a solid but modest score."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_osm.py,"@@ -10,6 +10,9 @@ ottawa = (45.4215296, -75.6971930)
 def test_osm():
     g = geocoder.osm(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 21
 
 
 def test_osm_reverse():
",add unit test for osm,fix(osm): assert debug counts for location lookup,Corrective,"The new message indicates a fix for a bug related to debug counts in location lookup, suggesting a defect was identified and resolved, which falls under corrective changes.",3.0,3.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what was tested, why it matters, or the expected outcome. The diff shows concrete assertions about `osm_count` and `fields_count`, which are specific debug statistics from the OSM geocoder. A better message would mention the exact debug fields and their expected values (e.g., 'added tests verifying debug stats: osm_count=3, fields_count=21'). As such, the message is partially informative but insufficiently detailed, earning a mid-level score.","The commit message 'add unit test for osm' is vague and lacks detail about what specifically was tested or why. While it correctly indicates a unit test was added, the diff shows that the test verifies specific assertions about debug output counts (osm_count == 3 and fields_count == 21), which are meaningful and relevant. A better message would include these details. Therefore, the message is minimally adequate but insufficiently informative, warranting a moderate score.","The commit message is relevant and identifies the change (asserting debug counts for OSM location lookup), but it lacks context about why these assertions matter or what the expected behavior is. It is clear and concise, but could be improved by mentioning the specific purpose (e.g., verifying expected number of results and fields returned by OSM geocoding) or the impact of the change. As a result, it is functional but not fully explanatory, warranting a moderate score."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_ottawa.py,"@@ -8,6 +8,9 @@ location = 'Ottawa'
 def test_ottawa():
     g = geocoder.ottawa(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 10
 
 
 def test_multi_results():
",add test for multi_results,fix(ottawa): add debug count assertions,Corrective,"The new message indicates a fix to ensure debug count assertions are properly added, addressing a potential deficiency in the original test coverage, which aligns with a corrective improvement.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specific details about what was tested or why. While it correctly indicates that tests were added, it does not convey the scope, purpose, or significance of the changes. The diff shows specific assertions about osm_count and fields_count, which are meaningful metrics from the debug output, but the commit message fails to reflect that. A more detailed message like 'Added tests to verify debug output counts for Ottawa geocoding (OSM count: 3, fields count: 10)' would be much clearer and more informative. Thus, it receives a medium score—adequate but lacking precision.","The commit message 'add test for multi_results' is overly vague and does not reflect the actual changes made. The diff shows that a new test was added for the Ottawa geocoder, specifically verifying debug output counts (OSM and fields), not a test for multi-results. The message misrepresents the content of the change, leading to confusion about the purpose of the commit. While it correctly indicates a test addition, it fails to specify what was tested, making it insufficient and potentially misleading.","The commit message is concise and relevant, indicating a fix to the Ottawa geocoding functionality by adding assertions for debug counts. However, it lacks context about why these assertions were added (e.g., for testing consistency or validating data output), and does not explain the significance of the values (3 OSM counts, 10 fields). While it correctly identifies the scope ('ottawa') and the nature of the change ('add debug count assertions'), it is somewhat vague and could be more informative. Thus, it is functional but not excellent."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_session.py,"@@ -16,6 +16,9 @@ def test_session():
     with requests.Session() as session:
         g = geocoder.google(address, session=session)
         assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 4
+    assert fields_count == 16
 
 
 def test_session_called():
",add failing test for,fix(test_session): assert OSM and fields counts in debug output,Corrective,"The new message indicates a fix to assert OSM and fields counts in debug output, which addresses a potential issue in test validation, implying a correction of a defect or failure in the test session.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it indicates that tests were added related to g.debug, it does not clarify what exactly was tested or why. The diff shows concrete assertions on osm_count and fields_count, which the message fails to reflect. A better message would specify the exact stats tested (e.g., 'added tests verifying debug output counts for OSM and field data'). Thus, it's partially informative but insufficiently detailed, warranting a medium score.","The commit message 'add failing test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's failing, or what the expected behavior should be. While the diff shows a new test that checks specific values (osm_count == 4 and fields_count == 16), the commit message fails to convey this context. A better message would describe the test's purpose, such as 'add test to verify debug output counts for geocoder.google with session'. Thus, the message is minimally informative and only scores a 2.","The commit message is clear and relevant to the change, indicating that it adds assertions for OSM and fields counts in the debug output. However, it lacks context about why these specific values (4 and 16) are expected or what the debug output represents. A more detailed message would explain the expected behavior or rationale, which would improve clarity for future reviewers. Therefore, it is functional but not fully comprehensive."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_tamu.py,"@@ -13,3 +13,6 @@ def test_tamu():
         state='CA',
         zipcode='94105')
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 5
+    assert fields_count == 28
",add failing test for,fix(test_tamu): assert OSM and fields count in debug output,Corrective,"The new message indicates a fix to assert OSM and fields count in debug output, which addresses a potential bug or inconsistency in the test, moving beyond mere testing to correct behavior.",3.0,2.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks detail about what specifically was tested or why. While it correctly indicates that tests were added, it does not convey the scope, purpose, or expected behavior of the tests. The diff shows concrete assertions on osm_count and fields_count, which could have been better described in the message (e.g., 'added tests verifying debug output counts for OSM and field data'). Therefore, the message is minimally informative but not fully clear or actionable, resulting in a moderate score.","The commit message 'add failing test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's important, or what the expected behavior should be. While the diff shows a new test case that asserts specific values for OSM and fields counts, the commit message fails to convey the intent or context. A better message would describe the test's purpose, such as 'add test to verify debug output counts for CA, 94105 location'. Therefore, the message is minimally informative and only scores a 2.","The commit message is clear and relevant, directly addressing the change made in the code diff. It correctly identifies the task as fixing a test to assert OSM and fields counts in the debug output. The message is concise and accurately reflects the change. However, it could be slightly improved by specifying the expected values (e.g., 'asserts OSM count is 5 and fields count is 28') to provide more context. Overall, it is well-written and appropriate for a test fix, earning a strong score."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_tomtom.py,"@@ -8,6 +8,9 @@ location = 'Ottawa'
 def test_tomtom():
     g = geocoder.tomtom(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 3
+    assert fields_count == 13
 
 
 def test_multi_results():
",add regression test for,fix(geocoder): assert correct OSM and fields count in Tomtom debug output,Corrective,"The new message specifies a bug fix related to asserting correct OSM and field counts in Tomtom debug output, indicating a correction of a defect in the geocoder functionality.",3.0,2.0,4.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not clarify what exactly was tested or why. The diff shows specific assertions about osm_count and fields_count, which are meaningful details about the debug output. A better message would mention the specific values and their purpose (e.g., 'added tests verifying debug output counts: 3 OSM entries and 13 fields'). As such, the message is partially informative but lacks clarity and detail, earning a moderate score.","The commit message 'add regression test for' is extremely vague and lacks specificity. While it correctly indicates that a test was added, it does not describe what the test is for, which feature or behavior it validates, or why it's important. The diff shows a concrete test added for TomTom geocoding with specific assertions about OSM and fields counts, but the commit message fails to convey that. A better message would mention the specific test case (e.g., 'add regression test for TomTom geocoding debug output counts'). Therefore, it receives a score of 2 for being technically correct but insufficiently descriptive.","The commit message is clear and relevant to the changes in the code, accurately describing the fix involving assertions on OSM and fields counts in Tomtom's debug output. It uses the appropriate prefix 'fix' and specifies the component ('geocoder') and the nature of the change. However, it lacks context about why these counts are important or what the expected behavior implies, which slightly limits its completeness. Overall, it is well-written and directly tied to the diff, making it a strong but not exceptionally detailed message."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_uscensus.py,"@@ -14,6 +14,9 @@ def test_uscensus():
     g = geocoder.uscensus(' '.join([us_address, us_city, us_state, us_zipcode]), timeout=10)
     assert g.ok
     assert g.city == us_city.upper()
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 4
+    assert fields_count == 14
 
 
 def test_uscensus_reverse():
",add failing test for,fix(geocoder): assert OSM and fields count in uscensus debug output,Corrective,"The new message specifies a bug fix related to asserting OSM and fields count in debug output, indicating a correction to ensure accurate behavior, which is a corrective improvement.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what exactly was tested, why it matters, or the significance of the debug stats (e.g., osm_count and fields_count). A more detailed message like 'added tests to verify debug output counts for US Census geocoding (OSM count: 4, fields count: 14)' would be much more informative. Thus, it is moderately clear but insufficiently detailed, earning a score of 3.","The commit message 'add failing test for' is extremely vague and provides no context about what is being tested, why it's being added, or what failure is expected. While it correctly indicates a new test is being introduced, the lack of detail makes it difficult to understand the purpose or impact. The test itself in the diff does verify specific expectations (OSM count and field count), so a better message would reference those. Thus, it's minimally informative but not sufficient for clarity or usefulness, warranting a score of 2.","The commit message is clear and relevant to the change, indicating that it adds assertions for OSM and fields count in the debug output of uscensus. However, it lacks context about why these assertions matter or what the expected behavior is, which reduces its completeness. The message correctly identifies the scope (geocoder, uscensus) and the action (asserting counts), but could be improved with more detail about the purpose or expected validation. Thus, it is functional but not fully explanatory."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_w3w.py,"@@ -9,6 +9,9 @@ ottawa = (45.4215296, -75.6971930)
 def test_w3w():
     g = geocoder.w3w(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 0
+    assert fields_count == 7
 
 
 def test_w3w_reverse():
",add failing test for w3w,fix(test_w3w): assert debug output counts for W3W geocoding,Corrective,"The new message indicates a fix to assert debug output counts, suggesting a bug was addressed in the test for W3W geocoding, which is a corrective change to ensure proper behavior.",3.0,3.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks detail about what specifically was tested or why. While it correctly indicates that tests were added, it does not convey the scope, purpose, or significance of the changes. The diff shows concrete assertions about `osm_count` and `fields_count`, which were added to verify debug output behavior, but the message fails to reflect that. A better message would specify the exact debug metrics tested and their expected values. Thus, it is partially informative but insufficiently descriptive.","The commit message 'add failing test for w3w' is vague and does not accurately reflect the content of the diff. The diff shows the addition of a specific test case that asserts expected values (osm_count == 0 and fields_count == 7), which implies the test is designed to verify behavior, not simply to fail. A better message would indicate the test's purpose, such as 'add test to verify w3w debug output fields and OSM count'. While the message correctly identifies the feature (w3w), it lacks detail and context, resulting in a moderate score.","The commit message is clear and relevant, indicating a fix to assert debug output counts in the W3W geocoding test. However, it lacks context about why these assertions were added (e.g., expected behavior, edge cases, or prior issues), and does not explain the significance of the values (osm_count == 0, fields_count == 7). While it correctly identifies the test and the change, it is somewhat minimal in detail. Therefore, it is functional but not comprehensive, earning a moderate score."
ad3e504f6a0b411e7fe9e340fcf9c2ce1309fe40,added tests on g.debug stats,tests/test_yandex.py,"@@ -9,6 +9,9 @@ coordinates = {'lat': 41.005407, 'lng': 28.978349}
 def test_yandex():
     g = geocoder.yandex(location)
     assert g.ok
+    osm_count, fields_count = g.debug()[0]
+    assert osm_count == 4
+    assert fields_count == 15
 
 
 def test_yandex_reverse():
",add failing test for,fix(test_yandex): assert OSM and fields count in debug output,Corrective,"The new message indicates a fix to assert OSM and fields count in debug output, which addresses a potential bug or inconsistency in the test, making it a corrective change.",3.0,2.0,3.0,"The commit message 'added tests on g.debug stats' is vague and lacks specificity. While it correctly indicates that tests were added, it does not convey what was tested, why it matters, or the expected outcome. The diff shows concrete assertions about osm_count and fields_count, which are specific debug statistics from the Yandex geocoder. A better message would mention the exact values or the purpose (e.g., 'added tests to verify debug output counts for OSM and field data'). As such, the message is partially informative but lacks clarity and technical detail, resulting in a moderate score.","The commit message 'add failing test for' is extremely vague and provides no context about what is being tested, why it's being added, or what failure is expected. While it correctly indicates a new test is being added, the lack of detail makes it difficult to understand the purpose or intent. The test itself, however, is meaningful and targets specific assertions about debug output (OSM and fields counts), so there is some value, but the message fails to communicate that. A better message would describe the test's purpose, e.g., 'Add test to verify debug output of Yandex geocoder has 4 OSM matches and 15 fields'.","The commit message is clear and relevant to the changes, as it indicates a fix to assert OSM and fields counts in the debug output of the Yandex geocoder test. However, it lacks context about why these assertions were added (e.g., expected behavior, edge cases) and does not mention the specific values (4 and 15) or the purpose of the debug output. While it correctly identifies the test and the action taken, it is somewhat minimal in detail and could be more informative for maintainers."
ae22d9a4342278011c293ee763603c010307adda,fixed for python 2.7,geocoder/base.py,"@@ -1,7 +1,8 @@
 #!/usr/bin/python
 # coding: utf8
+from __future__ import absolute_import, print_function
+from builtins import str
 
-from __future__ import absolute_import
 import requests
 import sys
 import json
@@ -138,37 +139,37 @@ class OneResult(object):
 
     def debug(self, verbose=True):
         with StringIO() as output:
-            output.write('\n')
-            output.write('From provider\n')
-            output.write('-----------\n')
-            output.write(json.dumps(self.raw, indent=4))
-            output.write('\n')
-            output.write('Cleaned json\n')
-            output.write('-----------\n')
-            output.write(json.dumps(self.json, indent=4))
-            output.write('\n')
-            output.write('OSM Quality\n')
-            output.write('-----------\n')
+            print(u'\n', file=output)
+            print(u'From provider\n', file=output)
+            print(u'-----------\n', file=output)
+            print(str(json.dumps(self.raw, indent=4)), file=output)
+            print(u'\n', file=output)
+            print(u'Cleaned json\n', file=output)
+            print(u'-----------\n', file=output)
+            print(str(json.dumps(self.json, indent=4)), file=output)
+            print(u'\n', file=output)
+            print(u'OSM Quality\n', file=output)
+            print(u'-----------\n', file=output)
             osm_count = 0
             for key in self.osm:
                 if 'addr:' in key:
                     if self.json.get(key.replace('addr:', '')):
-                        output.write('- [x] {0}\n'.format(key))
+                        print(u'- [x] {0}\n'.format(key), file=output)
                         osm_count += 1
                     else:
-                        output.write('- [ ] {0}\n'.format(key))
-            output.write('({0}/{1})\n'.format(osm_count, len(self.osm) - 2))
-            output.write('\n')
-            output.write('Fieldnames\n')
-            output.write('----------\n')
+                        print(u'- [ ] {0}\n'.format(key), file=output)
+            print(u'({0}/{1})\n'.format(osm_count, len(self.osm) - 2), file=output)
+            print(u'\n', file=output)
+            print(u'Fieldnames\n', file=output)
+            print(u'----------\n', file=output)
             fields_count = 0
             for fieldname in self.fieldnames:
                 if self.json.get(fieldname):
-                    output.write('- [x] {0}\n'.format(fieldname))
+                    print(u'- [x] {0}\n'.format(fieldname), file=output)
                     fields_count += 1
                 else:
-                    output.write('- [ ] {0}\n'.format(fieldname))
-            output.write('({0}/{1})\n'.format(fields_count, len(self.fieldnames)))
+                    print(u'- [ ] {0}\n'.format(fieldname), file=output)
+            print(u'({0}/{1})\n'.format(fields_count, len(self.fieldnames)), file=output)
 
             # print in verbose mode
             if verbose:
@@ -553,24 +554,24 @@ class MultipleResultsQuery(MutableSequence):
 
     def debug(self, verbose=True):
         with StringIO() as output:
-            output.write('===\n')
-            output.write(repr(self))
-            output.write('===\n')
-            output.write('\n')
-            output.write('#res: {}\n'.format(len(self)))
-            output.write('code: {}\n'.format(self.status_code))
-            output.write('url:  {}\n'.format(self.url))
+            print(u'===\n', file=output)
+            print(str(repr(self)), file=output)
+            print(u'===\n', file=output)
+            print(u'\n', file=output)
+            print(u'#res: {}\n'.format(len(self)), file=output)
+            print(u'code: {}\n'.format(self.status_code), file=output)
+            print(u'url:  {}\n'.format(self.url), file=output)
 
             stats = []
 
             if self.ok:
                 for index, result in enumerate(self):
-                    output.write('\n')
-                    output.write('Details for result #{}\n'.format(index + 1))
-                    output.write('---\n')
+                    print(u'\n', file=output)
+                    print(u'Details for result #{}\n'.format(index + 1), file=output)
+                    print(u'---\n', file=output)
                     stats.append(result.debug())
             else:
-                output.write(self.status)
+                print(self.status, file=output)
 
             if verbose:
                 print(output.getvalue())
",add test for osm and quality,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that was previously unreported or masked, implying a corrective action is needed to address the issue.",0.0,0.0,0.0,,,
ae22d9a4342278011c293ee763603c010307adda,fixed for python 2.7,tests/test_gaode.py,"@@ -12,9 +12,6 @@ def test_gaode():
     """"""
     g = geocoder.gaode(location, key='0716e5809437f14e3dd0793a5c6d2b13')
     assert g.ok
-    osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 12
 
 
 def test_gaode_reverse():
",add a regression test for,Fix(test_gaode): Remove debug assertions,Cosmetic,"The change removes debug assertions, which is a minor code cleanup rather than fixing a bug or altering behavior. It does not impact functionality or semantics significantly, making it a cosmetic improvement.",1.0,2.0,3.0,"The commit message 'fixed for python 2.7' is highly misleading and irrelevant to the actual changes in the diff. The diff shows the removal of two assert statements related to debugging output (osm_count and fields_count) in a test function, which suggests a code simplification or test adjustment, not a Python 2.7 compatibility fix. There is no mention of Python 2.7 in the code changes, and the message does not explain what was fixed or why. Therefore, the commit message is inaccurate and fails to provide meaningful context, resulting in a poor score.","The commit message 'add a regression test for' is extremely vague and lacks specificity. It does not indicate what feature, bug, or functionality the test addresses. While it correctly identifies that a test is being added, the message fails to convey the purpose or context of the test. The diff shows the removal of two assertions related to debug output counts, suggesting the test was originally there and now removed — this contradicts the idea of 'adding' a regression test. Therefore, the message is misleading and does not accurately reflect the actual change, resulting in a low score.","The commit message accurately reflects the change — removing debug assertions from the test — and is concise and relevant. However, it lacks context about why the assertions were removed (e.g., if they were flaky, outdated, or no longer valid). A more detailed message would explain the rationale, which would improve clarity and maintainability. Thus, it is functional but not optimal."
ae22d9a4342278011c293ee763603c010307adda,fixed for python 2.7,tests/test_uscensus.py,"@@ -14,9 +14,6 @@ def test_uscensus():
     g = geocoder.uscensus(' '.join([us_address, us_city, us_state, us_zipcode]), timeout=10)
     assert g.ok
     assert g.city == us_city.upper()
-    osm_count, fields_count = g.debug()[0]
-    assert osm_count == 4
-    assert fields_count == 14
 
 
 def test_uscensus_reverse():
",add failing test for,Fix(test_uscensus): Remove debug assertions,Cosmetic,"The change removes debug assertions, which is a minor code cleanup rather than fixing a bug or altering behavior semantically. It does not impact functionality or correctness in a significant way, making it a cosmetic improvement.",1.0,2.0,3.0,"The commit message 'fixed for python 2.7' is highly inadequate given the actual changes in the diff. The diff removes two assert statements related to debug output counts (osm_count and fields_count), which suggests a change in functionality or testing, not a Python version compatibility fix. The commit message does not describe what was actually changed, why, or how it relates to Python 2.7. It is vague, misleading, and completely out of alignment with the code changes. Therefore, it is poor and deserves a score of 1.","The commit message 'add failing test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's failing, or what the expected behavior should be. While it correctly identifies that a test is being added, the message fails to provide context or value to a reviewer. A better message would specify the feature or behavior being tested (e.g., 'add failing test for US Census geocoding debug output fields'). Given the lack of detail, the message is minimally informative and only scores a 2.","The commit message accurately reflects the change — removing debug assertions from the test — but lacks context about why the assertions were removed. A more detailed message (e.g., explaining that debug output was no longer reliable or that the test was being simplified for clarity) would improve it. As it stands, it's clear and relevant but minimal, which is typical for a simple fix. Therefore, it earns a moderate score of 3."
ae22d9a4342278011c293ee763603c010307adda,fixed for python 2.7,tests/test_yandex.py,"@@ -9,9 +9,6 @@ coordinates = {'lat': 41.005407, 'lng': 28.978349}
 def test_yandex():
     g = geocoder.yandex(location)
     assert g.ok
-    osm_count, fields_count = g.debug()[0]
-    assert osm_count == 4
-    assert fields_count == 15
 
 
 def test_yandex_reverse():
",add failing test for,Fix(test_yandex): remove debug assertions,Corrective,"The change removes debug assertions, which are likely causing issues in production or test environments, thus fixing a potential runtime or logic problem.",1.0,2.0,3.0,"The commit message 'fixed for python 2.7' is highly inadequate given the actual changes in the diff. The diff removes two test assertions related to Yandex geocoding debug output, which suggests the test was being used to verify specific debug data (OSM count and fields count), not a Python version compatibility issue. There is no mention of Python 2.7 compatibility, and the changes appear to be test removals, not fixes for a version-specific issue. The commit message is therefore completely out of alignment with the actual code changes, making it poor and misleading.","The commit message 'add failing test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's failing, or which functionality is involved. While it correctly identifies that a test is being added, the message fails to provide context about the test's purpose or the expected behavior. Given the diff shows the removal of a test assertion (which was previously validating OSM count and fields count), the message should at least hint at the intent—such as 'add failing test for Yandex geocoding debug output'—to be meaningful. As it stands, the message is too minimal and generic to be useful for understanding the change's significance, warranting a low score.","The commit message accurately reflects the change — removing debug assertions from the test — and is concise and relevant. However, it lacks context about why the assertions were removed (e.g., if they were flaky, outdated, or no longer applicable), which would have made it more informative. As a result, it is clear and correct but not fully detailed, leading to a moderate score."
7d77c608fbc7f914f9208b86c8505fdc6c7b8714,do not raise exception if accessing attribute of not_ok result,geocoder/base.py,"@@ -594,7 +594,7 @@ class MultipleResultsQuery(MutableSequence):
             Note that if the attribute is found through the normal mechanism, __getattr__() is not called.
         """"""
         if not self.ok:
-            raise ValueError(self.status)
+            return None
 
         if self.current_result is None:
             raise AttributeError(""%s not found on %s, and current_result is None"".format(
",update multipleresultsquery.py,fix(multiple_results_query): return None instead of raising ValueError when ok is False,Corrective,"The change addresses a bug by replacing an exception with a safe return of None when the result is not ok, improving robustness and preventing crashes in error cases.",3.0,2.0,3.0,"The commit message accurately reflects the change: instead of raising an exception when accessing an attribute of a not-ok result, it now returns None. This is a clear and relevant summary of the behavior change. However, the message lacks context about why this change was made (e.g., to avoid exceptions in certain error cases, improve robustness), and does not mention the specific condition (e.g., when `self.ok` is False). While the core idea is correct, it is somewhat minimal and could be more informative. Therefore, it is functional but not excellent.","The commit message 'update multipleresultsquery.py' is extremely vague and provides no information about what was changed or why. The diff shows a significant change in behavior: instead of raising a ValueError when self.ok is False, it now returns None. This is a critical change in error handling and logic, yet the commit message offers no context. A meaningful commit message should explain the nature and impact of the change. While the change is detectable from the diff, the message fails to communicate its purpose or rationale, making it insufficient for understanding the intent.","The commit message accurately identifies the change and its purpose: returning None instead of raising a ValueError when `ok` is False. However, it lacks context about why this change was made (e.g., to maintain consistency, handle edge cases, or improve error handling). It also doesn't mention the impact on user code or the reasoning behind choosing `None` over other alternatives. While the message is clear and relevant, it is somewhat minimal and could be more informative for maintainers."
a8cdd0316b7b89d451f4bc3a300411d421770c9a,fix calls to BBox with invalid input,geocoder/komoot.py,"@@ -22,7 +22,7 @@ class KomootResult(OneResult):
     @property
     def bbox(self):
         extent = self.raw['properties'].get('extent')
-        if extent:
+        if extent and all(extent):
             west = extent[0]
             north = extent[1]
             east = extent[2]
",update komootresult.py,fix: rectification failed,Semantic,"The new message 'fix: rectification failed' provides a more specific and semantically accurate description of the issue compared to the generic 'fix calls to BBox with invalid input', improving clarity and meaning without changing the actual fix.",2.0,2.0,2.0,"The commit message 'fix calls to BBox with invalid input' is vague and does not clearly explain what was fixed or why. The diff shows a small change: adding a check with `all(extent)` to ensure all extent values are valid before using them. The message fails to mention the specific issue (e.g., invalid or missing extent values) or the impact (e.g., preventing crashes or incorrect bounding boxes). While it indicates a fix, it lacks detail about the problem and the solution, making it only minimally informative.","The commit message 'update komootresult.py' is overly vague and provides no information about what was changed or why. While the diff shows a small change in a conditional check (adding `all(extent)`), the message fails to convey the significance or context of the update. A better message would specify the change, such as 'Ensure bbox property only returns valid extent coordinates by validating all extent values.' This lack of detail reduces its usefulness for understanding the commit's purpose, resulting in a score of 2.","The commit message 'fix: rectification failed' is vague and does not clearly describe what was fixed or why. The diff shows a simple change in a conditional check for a bounding box extent, specifically ensuring all values in the extent tuple are present and non-empty. The message fails to convey the actual fix or its purpose, making it difficult to understand the context or impact. A better message would describe the change, such as 'fix: ensure valid bbox coordinates by checking all extent values', which would be more informative and relevant to the diff."
a8cdd0316b7b89d451f4bc3a300411d421770c9a,fix calls to BBox with invalid input,geocoder/location.py,"@@ -168,10 +168,10 @@ class BBox(object):
     def __init__(self, bbox=None, bounds=None,
                  lat=None, lng=None,
                  west=None, south=None, east=None, north=None):
-        if bounds is not None:
+        if bounds is not None and bounds.get('southwest') and bounds.get('northeast'):
             self.south, self.west = map(float, bounds['southwest'])
             self.north, self.east = map(float, bounds['northeast'])
-        elif bbox is not None:
+        elif bbox is not None and all(bbox):
             self.west, self.south, self.east, self.north = map(float, bbox)
         elif lat is not None and lng is not None:
             self.south = float(lat) - self.DEGREES_TOLERANCE
",update bbox.py,fix(bbox): only initialize bounds if southwest and northeast are present,Corrective,"The new message specifies a more precise condition for initialization, indicating a fix that addresses a potential invalid input scenario by ensuring bounds are only initialized when valid coordinates are present, thus correcting a logical flaw in the original behavior.",2.0,2.0,4.0,"The commit message 'fix calls to BBox with invalid input' is too vague and lacks specific details about what was fixed or why. The diff shows a change in conditional logic that adds checks for non-None values and ensures that bounds or bbox contain valid coordinates (e.g., checking for 'southwest' and 'northeast' or that bbox has all elements). The message does not indicate that invalid or missing inputs were being processed incorrectly, nor does it explain the purpose of the added checks. While the change is relevant, the commit message fails to convey the actual problem or impact, making it only minimally informative.","The commit message 'update bbox.py' is extremely vague and provides no information about what was changed, why it was changed, or the impact of the update. While the code diff shows a logical refinement of the bbox initialization logic—specifically adding checks for non-empty bounds and bbox values—the commit message fails to reflect this change. A better message would describe the improvement, such as 'Add validation for bounds and bbox inputs to prevent empty or invalid coordinate assignments in BBox initialization.' Thus, the message is insufficiently descriptive and lacks technical context, resulting in a low score.","The commit message accurately reflects the change: it clarifies that bounds are only initialized when both southwest and northeast are present in the input. This is a precise and relevant summary of the fix. However, it slightly misses mentioning the additional guard condition on `bbox` (`all(bbox)`), which also affects initialization logic. While the message is clear and correct for the primary change, it is not fully comprehensive of all behavioral changes. Thus, it is good but not excellent."
a8cdd0316b7b89d451f4bc3a300411d421770c9a,fix calls to BBox with invalid input,geocoder/opencage.py,"@@ -369,7 +369,8 @@ class OpenCageResult(OneResult):
         north = self._bounds.get('northeast', {}).get('lat')
         west = self._bounds.get('southwest', {}).get('lng')
         east = self._bounds.get('northeast', {}).get('lng')
-        return BBox.factory([south, west, north, east]).as_dict
+        if all([south, west, north, east]):
+            return BBox.factory([south, west, north, east]).as_dict
 
 
 class OpenCageQuery(MultipleResultsQuery):
",add missing import,fix(geocoding): return bbox only if all coordinates are valid,Corrective,"The new message specifies a more precise condition for returning a bbox (only when all coordinates are valid), addressing a potential invalid input scenario and improving correctness over the old message, which only mentioned fixing invalid input calls without specifying the logic.",3.0,1.0,3.0,"The commit message 'fix calls to BBox with invalid input' is somewhat accurate and relevant to the change, as the diff shows a conditional check to prevent BBox creation with invalid (None or falsy) coordinates. However, the message is vague and lacks specific details about the problem (e.g., why the input was invalid, what the original behavior was, or how the fix improves robustness). It does not clearly convey the scope or impact of the change. A more detailed message would have been better, so it earns a mid-level score rather than excellent or poor.","The commit message 'add missing import' is highly inaccurate and irrelevant to the diff. The diff shows a logical change in the code: a conditional check is added to prevent returning a BBox when coordinates are missing, but there is no import statement added or removed. The change is a code logic modification, not an import addition. Therefore, the commit message does not reflect the actual change and misrepresents the purpose of the commit.","The commit message is clear and relevant to the change, indicating that the bbox is only returned when all coordinates are valid. However, it lacks specificity about why the condition was added or what the previous behavior was, which reduces its completeness. The fix is logically sound and matches the code change, but the message could be more detailed to fully explain the intent and context, especially for maintainers unfamiliar with the codebase. Thus, it is adequately descriptive but not excellent."
a8cdd0316b7b89d451f4bc3a300411d421770c9a,fix calls to BBox with invalid input,tests/test_opencage.py,"@@ -25,6 +25,11 @@ def test_opencage():
     assert fields_count == 23
 
 
+def test_issue_292():
+    g = geocoder.opencage('AirportClinic M - MediCare Flughafen München Medizinisches Zentrum', countrycode='DE', language='de', no_annotations=1)
+    assert g.ok
+
+
 def test_opencage_multi_result():
     g = geocoder.opencage(location, maxRows=5)
     assert len(g) > 1
",add regression test for,fix(test): add test for issue #292,Cosmetic,"The new message introduces a test case for an issue, which is a minor addition focused on test coverage rather than fixing a bug or improving semantics. It does not correct a functional flaw or alter behavior, but rather adds a test, making it a cosmetic improvement in terms of commit message content.",1.0,2.0,3.0,"The commit message 'fix calls to BBox with invalid input' is highly mismatched with the actual changes in the diff. The diff introduces a new test function `test_issue_292()` that validates a geocoding request with specific parameters (countrycode='DE', language='de', no_annotations=1), but there is no mention of BBox or invalid input handling. The message does not reflect the content or purpose of the change, making it inaccurate and misleading. Therefore, it receives a low score.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what issue or feature the test addresses, nor does it mention the context (e.g., issue #292, opencage, de language, no_annotations=1). While the diff shows a new test for a specific opencage query with parameters, the commit message fails to link the test to a known issue or provide meaningful context. A better message would reference the issue (e.g., 'add regression test for issue #292: opencage query with German language and no_annotations') to improve clarity and usefulness.","The commit message 'fix(test): add test for issue #292' is accurate in indicating that a test was added, and it references the relevant issue. However, it lacks detail about what the test does or why it was added. While the diff shows a new test function for a specific geocoding query with parameters, the commit message does not convey the context—such as the input, expected behavior, or the nature of the issue being addressed. A more detailed message (e.g., 'add test for opencage geocoding with German input and no annotations') would be better. Thus, it is functional but insufficiently informative, earning a mid-level score."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/arcgis.py,"@@ -10,33 +10,41 @@ from geocoder.base import OneResult, MultipleResultsQuery
 
 class ArcgisResult(OneResult):
 
+    def __init__(self, json_content):
+        # create safe shortcuts
+        self._feature = json_content.get('feature', {})
+
+        # proceed with super.__init__
+        super(ArcgisResult, self).__init__(json_content)
+
     @property
     def address(self):
         return self.raw.get('name', '')
 
     @property
     def lat(self):
-        return self.raw['feature']['geometry'].get('y')
+        return self._feature.get('geometry', {}).get('y')
 
     @property
     def lng(self):
-        return self.raw['feature']['geometry'].get('x')
+        return self._feature.get('geometry', {}).get('x')
 
     @property
     def score(self):
-        return self.raw['feature']['attributes'].get('Score', '')
+        return self._feature.get('attributes', {}).get('Score', '')
 
     @property
     def quality(self):
-        return self.raw['feature']['attributes'].get('Addr_Type', '')
+        return self._feature.get('attributes', {}).get('Addr_Type', '')
 
     @property
     def bbox(self):
-        if self.raw['extent']:
-            south = self.raw['extent'].get('ymin')
-            west = self.raw['extent'].get('xmin')
-            north = self.raw['extent'].get('ymax')
-            east = self.raw['extent'].get('xmax')
+        _extent = self.raw.get('extent')
+        if _extent:
+            south = _extent.get('ymin')
+            west = _extent.get('xmin')
+            north = _extent.get('ymax')
+            east = _extent.get('xmax')
             return self._get_bbox(south, west, north, east)
 
 
",add missing shortcuts to arcgis results,refactor(geocoder): add safe property access for ArcgisResult,Corrective,"The new message indicates a structural refactoring to add safe property access, which addresses potential key errors during geocoding by preventing crashes on missing attributes, thus fixing a runtime issue.",3.0,3.0,4.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is somewhat relevant to the changes, as the diff shows safer access to nested dictionary keys using .get() methods to avoid KeyError. However, the message is vague and lacks specificity—such as which attributes or properties are being protected, or why this improvement matters. A more precise message (e.g., 'Add safe dictionary access to prevent KeyError in ArcGIS result parsing') would be clearer and more informative. Therefore, it receives a medium score reflecting partial accuracy and clarity.","The commit message 'add missing shortcuts to arcgis results' is vague and lacks specificity. While the diff shows the introduction of a `_feature` attribute to safely access nested JSON data (e.g., geometry, attributes), the message does not explain the purpose, the benefit, or why these shortcuts were necessary. A more descriptive message such as 'Introduce _feature shortcut to safely access ArcGIS geometry and attributes in result properties' would be clearer and more informative. Therefore, the message is partially adequate but falls short of being excellent.","The commit message 'refactor(geocoder): add safe property access for ArcgisResult' accurately reflects the change, as the diff shows the introduction of a `_feature` attribute to safely access nested JSON fields (like geometry, attributes, and extent) using get() methods, reducing the risk of KeyError. The refactoring improves code safety and robustness, especially when dealing with potentially missing or malformed JSON responses. However, the message is somewhat generic and doesn't specify the exact scope (e.g., which properties were updated) or the benefit (e.g., preventing crashes on missing keys), which slightly limits its clarity. Still, it correctly identifies the nature and intent of the change, making it a solid, though not exceptional, commit message."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/baidu.py,"@@ -13,11 +13,11 @@ class BaiduResult(OneResult):
 
     @property
     def lat(self):
-        return self.raw['location'].get('lat')
+        return self.raw.get('location', {}).get('lat')
 
     @property
     def lng(self):
-        return self.raw['location'].get('lng')
+        return self.raw.get('location', {}).get('lng')
 
     @property
     def quality(self):
",add missing properties,fix(baidu-result): ensure safe access to location lat and lng,Corrective,"The new message indicates a fix for a specific issue (safe access to location lat and lng in Baidu result) that could lead to key errors, addressing a potential runtime failure, thus classifying as corrective.",4.0,2.0,5.0,"The commit message accurately reflects the change: it prevents KeyError exceptions when accessing missing 'location' or 'lat/lng' attributes by using .get() with default values. The improvement enhances robustness in edge cases where geocoding might return missing data. However, the message is slightly generic and could be more specific (e.g., mentioning 'location' key or 'lat/lng' fields), which would make it more informative. Still, it clearly communicates the intent and impact, justifying a high score.","The commit message 'add missing properties' is overly vague and does not accurately describe the changes. The diff shows that existing properties (lat and lng) are being updated to use a safer dictionary access with default empty dict, which is a safety improvement, not simply adding missing properties. The message fails to convey the actual nature of the change (safe dictionary access) or the reasoning behind it. A better message would specify the improvement in safety or robustness.","The commit message accurately reflects the change and its purpose. The diff shows that the code now safely accesses the 'location' field using a nested get() with a default empty dict, preventing potential KeyError if 'location' is missing. The message 'fix(baidu-result): ensure safe access to location lat and lng' clearly communicates the intent, the component affected (baidu-result), and the benefit (safe access). This is concise, relevant, and sufficient for understanding the change without additional context."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/bing.py,"@@ -9,21 +9,29 @@ import re
 
 class BingResult(OneResult):
 
+    def __init__(self, json_content):
+        # create safe shortcuts
+        self._point = json_content.get('point', {})
+        self._address = json_content.get('address', {})
+
+        # proceed with super.__init__
+        super(BingResult, self).__init__(json_content)
+
     @property
     def lat(self):
-        coord = self.raw['point']['coordinates']
+        coord = self._point['coordinates']
         if coord:
             return coord[0]
 
     @property
     def lng(self):
-        coord = self.raw['point']['coordinates']
+        coord = self._point['coordinates']
         if coord:
             return coord[1]
 
     @property
     def address(self):
-        return self.raw['address'].get('formattedAddress')
+        return self._address.get('formattedAddress')
 
     @property
     def housenumber(self):
@@ -36,23 +44,23 @@ class BingResult(OneResult):
 
     @property
     def street(self):
-        return self.raw['address'].get('addressLine')
+        return self._address.get('addressLine')
 
     @property
     def neighborhood(self):
-        return self.raw['address'].get('neighborhood')
+        return self._address.get('neighborhood')
 
     @property
     def city(self):
-        return self.raw['address'].get('locality')
+        return self._address.get('locality')
 
     @property
     def state(self):
-        return self.raw['address'].get('adminDistrict')
+        return self._address.get('adminDistrict')
 
     @property
     def country(self):
-        return self.raw['address'].get('countryRegion')
+        return self._address.get('countryRegion')
 
     @property
     def quality(self):
@@ -64,15 +72,16 @@ class BingResult(OneResult):
 
     @property
     def postal(self):
-        return self.raw['address'].get('postalCode')
+        return self._address.get('postalCode')
 
     @property
     def bbox(self):
-        if self.raw['bbox']:
-            south = self.raw['bbox'][0]
-            north = self.raw['bbox'][2]
-            west = self.raw['bbox'][1]
-            east = self.raw['bbox'][3]
+        _bbox = self.raw.get('bbox')
+        if _bbox:
+            south = _bbox[0]
+            north = _bbox[2]
+            west = _bbox[1]
+            east = _bbox[3]
             return self._get_bbox(south, west, north, east)
 
 
",add missing docstrings,refactor(bing-result): extract address and point data into safe properties,Corrective,"The new message indicates a structural refactoring to safely extract and handle address and point data, which addresses potential runtime errors (like KeyError) by making the data access safer and more robust, thus correcting a potential issue in the original code.",3.0,1.0,5.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is somewhat accurate in intent but lacks specificity. The diff shows that the code introduces safe attribute access using `.get()` on `self._point` and `self._address` instead of directly accessing `self.raw`, which prevents KeyError when attributes are missing. However, the message does not clearly state that the changes improve safety by using safe dictionary access or that the properties now default gracefully. It also misses context like the scope (e.g., lat, lng, address fields) or the benefit (e.g., robustness in malformed responses). While the message captures the core idea, it is vague and could be more precise. Therefore, a score of 3 reflects a reasonable but under-explained message.","The commit message 'add missing docstrings' is highly misleading given the diff. The diff shows no addition of docstrings at all—instead, it refactors access to JSON fields by introducing safe attribute shortcuts (_point, _address) and replaces direct access to self.raw with safer getter properties. The changes are about code structure, safety, and readability, not documentation. Therefore, the commit message does not accurately reflect the actual changes made, making it poor and misleading.","The commit message accurately reflects the changes in the code diff. It highlights a refactoring effort to extract address and point data into safe, cached properties (self._address and self._point) by using get() methods to avoid KeyError. This improves safety and readability, especially when accessing nested JSON fields. The message is concise, specific, and clearly communicates the purpose and scope of the change, making it excellent for code review and understanding."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/canadapost.py,"@@ -16,11 +16,11 @@ class CanadapostIdResult(OneResult):
 
     @property
     def item_id(self):
-        return self.raw['Id']
+        return self.raw.get('Id')
 
     @property
     def next_action(self):
-        return self.raw['Next']
+        return self.raw.get('Next')
 
 
 class CanadapostIdQuery(MultipleResultsQuery):
",add more docstrings to canadapostidresult,fix: rectification failed,Corrective,"The new message indicates a specific failure in the geocoding process (rectification failed), which addresses a bug or error condition, suggesting a corrective fix rather than a cosmetic or semantic change.",3.0,1.0,2.0,"The commit message correctly identifies the change — avoiding KeyError by using .get() instead of direct dictionary access — which is relevant to the task of geocoding. However, the message is vague about the context (e.g., why this matters in geocoding, which attributes are missing, or the impact). It lacks specificity about the codebase or the risk of KeyError, and does not clearly link the change to a real-world issue. While the action is technically sound and appropriate, the message fails to communicate the significance or scope effectively, resulting in a moderate score.","The commit message 'add more docstrings to canadapostidresult' is highly misleading given the actual changes in the diff. The diff shows a change from accessing dictionary keys directly (`self.raw['Id']`) to using `.get()` with fallbacks (`self.raw.get('Id')`), which is a safety improvement for handling missing keys. This change is not about adding docstrings, as the message suggests. Therefore, the commit message is inaccurate and does not reflect the actual work done, making it poor and potentially confusing for other developers.","The commit message 'fix: rectification failed' is vague and lacks clarity about what was actually fixed or why. While it indicates a fix, the term 'rectification failed' is ambiguous and does not describe the change made in the diff. The diff shows a simple improvement—using `.get()` instead of direct dictionary access—which reduces risk of KeyError. A better message would specify this change, such as 'fix: prevent KeyError by using .get() for Id and Next fields'. As it stands, the message fails to convey the actual improvement or context, resulting in a low score."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/gaode.py,"@@ -13,19 +13,19 @@ class GaodeResult(OneResult):
 
     @property
     def lat(self):
-        return float(self.raw['location'].replace(""'"", '').split(',')[1])
+        return float(self.raw.get('location', '0,0').replace(""'"", '').split(',')[1])
 
     @property
     def lng(self):
-        return float(self.raw['location'].replace(""'"", '').split(',')[0])
+        return float(self.raw.get('location', '0,0').replace(""'"", '').split(',')[0])
 
     @property
     def quality(self):
-        return self.raw['level']
+        return self.raw.get('level')
 
     @property
     def address(self):
-        return self.raw['formatted_address']
+        return self.raw.get('formatted_address')
 
     @property
     def country(self):
@@ -33,31 +33,31 @@ class GaodeResult(OneResult):
 
     @property
     def province(self):
-        return self.raw['province']
+        return self.raw.get('province')
 
     @property
     def state(self):
-        return self.raw['province']
+        return self.raw.get('province')
 
     @property
     def city(self):
-        return self.raw['city']
+        return self.raw.get('city')
 
     @property
     def district(self):
-        return self.raw['district']
+        return self.raw.get('district')
 
     @property
     def street(self):
-        return self.raw['street']
+        return self.raw.get('street')
 
     @property
     def adcode(self):
-        return self.raw['adcode']
+        return self.raw.get('adcode')
 
     @property
     def housenumber(self):
-        return self.raw['number']
+        return self.raw.get('number')
 
 
 class GaodeQuery(MultipleResultsQuery):
",add missing classes to gbode results,fix(geo): add safe access with .get() for GaodeResult properties,Corrective,"The new message indicates a specific fix to prevent key errors by using safe access with .get(), which directly addresses and corrects a potential runtime error in the geocoding functionality.",5.0,1.0,5.0,"The commit message accurately reflects the change: it replaces direct dictionary key access (e.g., `self.raw['location']`) with `.get()` method calls that provide default values (e.g., '0,0'), preventing KeyError exceptions when attributes are missing. This is a safe and defensive programming practice, especially in geocoding where response data may vary or be missing. The message is concise, clear, and directly explains the purpose and benefit of the change, making it excellent for developers who need to understand the rationale quickly.","The commit message 'add missing classes to gbode results' is highly inaccurate and misleading. The diff shows modifications to existing classes (GaodeResult and GaodeQuery), specifically adding .get() calls to handle missing keys safely, which improves error resilience. There are no new classes added. Additionally, 'gbode' is a typo (should be 'Gaode'). The message fails to reflect the actual change, misrepresents the scope, and contains a factual error. Therefore, it is poor and should be scored 1.","The commit message accurately and concisely describes the change: it introduces safe access using `.get()` instead of direct dictionary access (`['key']`) for all properties in the `GaodeResult` class. This improves robustness by preventing KeyError exceptions when the expected keys are missing in the raw data. The message is specific, relevant to the code change, and clearly ties to the task (safe access in geo-related functionality). It is well-written and appropriately scoped to the diff, making it excellent for documentation and code review."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/geocodefarm.py,"@@ -10,15 +10,25 @@ from geocoder.keys import geocodefarm_key
 
 class GeocodeFarmResult(OneResult):
 
+    def __init__(self, json_content):
+        # create safe shortcuts
+        self._coordinates = json_content.get('COORDINATES', {})
+        self._boundaries = json_content.get('BOUNDARIES', {})
+        self._address = json_content.get('ADDRESS', {})
+        self._location_details = json_content.get('LOCATION_DETAILS', {})
+
+        # proceed with super.__init__
+        super(GeocodeFarmResult, self).__init__(json_content)
+
     @property
     def lat(self):
-        lat = self.raw['COORDINATES'].get('latitude')
+        lat = self._coordinates.get('latitude')
         if lat:
             return float(lat)
 
     @property
     def lng(self):
-        lng = self.raw['COORDINATES'].get('longitude')
+        lng = self._coordinates.get('longitude')
         if lng:
             return float(lng)
 
@@ -28,10 +38,10 @@ class GeocodeFarmResult(OneResult):
 
     @property
     def bbox(self):
-        south = self.raw['BOUNDARIES'].get('southwest_latitude')
-        west = self.raw['BOUNDARIES'].get('southwest_longitude')
-        north = self.raw['BOUNDARIES'].get('northeast_latitude')
-        east = self.raw['BOUNDARIES'].get('northeast_longitude')
+        south = self._boundaries.get('southwest_latitude')
+        west = self._boundaries.get('southwest_longitude')
+        north = self._boundaries.get('northeast_latitude')
+        east = self._boundaries.get('northeast_longitude')
         return self._get_bbox(south, west, north, east)
 
     @property
@@ -40,47 +50,47 @@ class GeocodeFarmResult(OneResult):
 
     @property
     def housenumber(self):
-        return self.raw['ADDRESS'].get('street_number')
+        return self._address.get('street_number')
 
     @property
     def street(self):
-        return self.raw['ADDRESS'].get('street_name')
+        return self._address.get('street_name')
 
     @property
     def neighborhood(self):
-        return self.raw['ADDRESS'].get('neighborhood')
+        return self._address.get('neighborhood')
 
     @property
     def city(self):
-        return self.raw['ADDRESS'].get('locality')
+        return self._address.get('locality')
 
     @property
     def county(self):
-        return self.raw['ADDRESS'].get('admin_2')
+        return self._address.get('admin_2')
 
     @property
     def state(self):
-        return self.raw['ADDRESS'].get('admin_1')
+        return self._address.get('admin_1')
 
     @property
     def country(self):
-        return self.raw['ADDRESS'].get('country')
+        return self._address.get('country')
 
     @property
     def postal(self):
-        return self.raw['ADDRESS'].get('postal_code')
+        return self._address.get('postal_code')
 
     @property
     def elevation(self):
-        return self.raw['LOCATION_DETAILS'].get('elevation')
+        return self._location_details.get('elevation')
 
     @property
     def timezone_long(self):
-        return self.raw['LOCATION_DETAILS'].get('timezone_long')
+        return self._location_details.get('timezone_long')
 
     @property
     def timezone_short(self):
-        return self.raw['LOCATION_DETAILS'].get('timezone_short')
+        return self._location_details.get('timezone_short')
 
 
 class GeocodeFarmQuery(MultipleResultsQuery):
",add missing docstrings,refactor(geocoder): add safe property access with _attributes in GeocodeFarmResult,Corrective,"The new message indicates a refactoring to add safe property access, which directly addresses and fixes potential KeyError issues when accessing missing attributes during geocoding, improving robustness and correctness of the code.",3.0,1.0,5.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is somewhat accurate and reflects the intended behavior change — using safe dictionary access (via .get()) to avoid KeyError when attributes are missing. However, the message is vague and lacks specific details about what was changed, why it was necessary, or the impact (e.g., improved robustness, better error handling). A more detailed message (e.g., 'Add safe attribute access via _coordinates, _address, and _location_details to prevent KeyError when geocoding results lack expected fields') would have been more informative and aligned with typical commit message best practices. Thus, it is functional but not excellent.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff shows a refactoring of attribute access patterns, introducing safe property getters using `_coordinates`, `_boundaries`, etc., and replacing direct `raw['X']` accesses with `self._X.get('Y')`. This is not about adding docstrings at all — there are no docstrings present or added in the code. The message fails to accurately describe the actual change, which is a structural improvement for safety and maintainability. Therefore, it is poor and misleading, warranting a score of 1.","The commit message accurately reflects the changes in the code diff. It clearly states that the refactoring involves adding safe property access using `_attributes` (specifically `_coordinates`, `_boundaries`, `_address`, and `_location_details`) in the `GeocodeFarmResult` class. The changes replace direct access to `self.raw` with safer `get()`-based access via these attributes, which improves code safety and maintainability. The message is concise, relevant, and properly scoped to the task, making it excellent for a code review context."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/geolytica.py,"@@ -9,6 +9,13 @@ from geocoder.base import OneResult, MultipleResultsQuery
 
 class GeolyticaResult(OneResult):
 
+    def __init__(self, json_content):
+        # create safe shortcuts
+        self._standard = json_content.get('standard', {})
+
+        # proceed with super.__init__
+        super(GeolyticaResult, self).__init__(json_content)
+
     @property
     def lat(self):
         lat = self.raw.get('latt', '').strip()
@@ -27,19 +34,19 @@ class GeolyticaResult(OneResult):
 
     @property
     def housenumber(self):
-        return self.raw['standard'].get('stnumber', '').strip()
+        return self._standard.get('stnumber', '').strip()
 
     @property
     def street(self):
-        return self.raw['standard'].get('staddress', '').strip()
+        return self._standard.get('staddress', '').strip()
 
     @property
     def city(self):
-        return self.raw['standard'].get('city', '').strip()
+        return self._standard.get('city', '').strip()
 
     @property
     def state(self):
-        return self.raw['standard'].get('prov', '').strip()
+        return self._standard.get('prov', '').strip()
 
     @property
     def address(self):
",add missing shortcuts to geolytica results,feat(geolytica): add safe access to standard data in GeolyticaResult,Corrective,"The new message indicates a safety enhancement by adding safe access to data, which prevents KeyError exceptions on missing attributes—directly addressing the original issue of unhandled missing attribute errors during geocoding.",3.0,3.0,3.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is somewhat accurate in intent but lacks specificity. The actual change introduces a safe access pattern using `.get()` on a cached `_standard` dictionary instead of directly accessing `self.raw['standard']`, which prevents KeyError when attributes are missing. However, the message does not clearly state that a new attribute `_standard` is being introduced or that the change improves safety by avoiding direct key access. It also misses context about the impact—such as improved robustness or error handling. While the message captures the core idea, it is vague and could be more precise. Therefore, it receives a medium score.","The commit message 'add missing shortcuts to geolytica results' is vague and does not clearly describe what was added or why. The diff shows the introduction of a `_standard` attribute in `GeolyticaResult.__init__` to safely access nested JSON data, and subsequent property getters that now use this attribute instead of directly accessing `self.raw['standard']`. While the message indicates a change, it lacks specificity about the improvement (e.g., safety, readability, avoiding direct key access), and does not mention the benefit of using a safe shortcut. A better message would clarify that safe access to standard address fields was added for robustness and maintainability. Therefore, it is functional but insufficiently descriptive.","The commit message accurately reflects the change—adding safe access to standard data in GeolyticaResult—by highlighting the feature and the component affected. However, it lacks context about why this change was necessary (e.g., avoiding direct key access, improving safety), and does not mention the specific improvements (like preventing KeyError or making code more robust). While the message is clear and relevant, it is somewhat superficial and could be more informative for a broader audience. Therefore, it is neither poor nor excellent, but falls in the middle range."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/google.py,"@@ -13,13 +13,9 @@ class GoogleResult(OneResult):
     def __init__(self, json_content):
         # flatten geometry
         geometry = json_content.get('geometry', {})
-        json_content['location'] = geometry.get('location', {})
-        json_content['location_type'] = geometry.get('location_type', {})
-        json_content['bounds'] = geometry.get('bounds', {})
-        json_content['northeast'] = geometry.get(
-            'viewport', {}).get('northeast', {})
-        json_content['southwest'] = geometry.get(
-            'viewport', {}).get('southwest', {})
+        self._location = geometry.get('location', {})
+        self._location_type = geometry.get('location_type', {})
+        self._viewport = geometry.get('viewport', {})
 
         # Parse address components with short & long names
         for item in json_content['address_components']:
@@ -33,11 +29,11 @@ class GoogleResult(OneResult):
 
     @property
     def lat(self):
-        return self.raw['location'].get('lat')
+        return self._location.get('lat')
 
     @property
     def lng(self):
-        return self.raw['location'].get('lng')
+        return self._location.get('lng')
 
     @property
     def place(self):
@@ -51,14 +47,14 @@ class GoogleResult(OneResult):
 
     @property
     def accuracy(self):
-        return self.raw.get('location_type')
+        return self._location_type
 
     @property
     def bbox(self):
-        south = self.raw['southwest'].get('lat')
-        west = self.raw['southwest'].get('lng')
-        north = self.raw['northeast'].get('lat')
-        east = self.raw['northeast'].get('lng')
+        south = self._viewport.get('southwest', {}).get('lat')
+        west = self._viewport.get('southwest', {}).get('lng')
+        north = self._viewport.get('northeast', {}).get('lat')
+        east = self._viewport.get('northeast', {}).get('lng')
         return self._get_bbox(south, west, north, east)
 
     @property
@@ -131,11 +127,11 @@ class GoogleResult(OneResult):
 
     @property
     def country(self):
-        return self.raw['country'].get('short_name')
+        return self.raw.get('country', {}).get('short_name')
 
     @property
     def country_long(self):
-        return self.raw['country'].get('long_name')
+        return self.raw.get('country', {}).get('long_name')
 
 
 class GoogleQuery(MultipleResultsQuery):
",add missing docstrings,refactor(geo): extract geometry properties to instance attributes,Corrective,"The new message indicates a structural refactoring to handle geometry properties more robustly by moving them to instance attributes, which addresses potential key errors on missing attributes during geocoding, thus fixing a root cause of the original issue.",2.0,1.0,4.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is vague and does not accurately reflect the actual changes. The diff shows that the code is not preventing KeyError exceptions — instead, it refactors the access to nested JSON fields by introducing private attributes (`self._location`, `self._location_type`, `self._viewport`) and using safer dictionary lookups. The change improves code safety and readability by avoiding direct access to potentially missing keys, but the message fails to mention these improvements or the actual refactoring. A better message would highlight the introduction of safe attribute access and improved robustness. Therefore, the message is only partially relevant and lacks specificity, warranting a score of 2.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff shows a complete restructuring of attribute access from using `raw` dictionary keys to introducing private attributes (`self._location`, `self._location_type`, `self._viewport`) and updating property getters. This is not about adding docstrings, but about refactoring internal data access and improving encapsulation. The commit message fails to reflect the actual technical changes, which makes it inaccurate and unhelpful for understanding the purpose of the change. Therefore, it receives a low score.","The commit message accurately reflects the changes in the code, which involve extracting geometry-related properties (like location, location_type, viewport) from the raw JSON into instance attributes to improve encapsulation and avoid direct access to raw data. The message is concise, relevant, and uses the appropriate scope ('geo') and type ('refactor'). However, it slightly misses mentioning the removal of redundant raw access (e.g., `raw['location']` replaced with `self._location`), which could have made the refactor more complete in scope. Overall, it's clear and appropriate, but a bit narrow in scope description — hence not 'excellent' yet."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/google_places.py,"@@ -16,7 +16,7 @@ class PlacesResult(OneResult):
     def __init__(self, json_content):
         # flatten geometry
         geometry = json_content.get('geometry', {})
-        json_content['location'] = geometry.get('location', {})
+        self._location = geometry.get('location', {})
         json_content['northeast'] = geometry.get(
             'viewport', {}).get('northeast', {})
         json_content['southwest'] = geometry.get(
@@ -27,11 +27,11 @@ class PlacesResult(OneResult):
 
     @property
     def lat(self):
-        return self.raw['location'].get('lat')
+        return self._location.get('lat')
 
     @property
     def lng(self):
-        return self.raw['location'].get('lng')
+        return self._location.get('lng')
 
     @property
     def id(self):
",add southwest to results,refactor(placesResult): extract location to instance property,Corrective,"The new message indicates a refactoring that extracts a location property to an instance property, which improves robustness and maintainability by avoiding potential key errors during geocoding, thus addressing the original issue semantically and structurally.",2.0,2.0,4.0,"The commit message is overly vague and does not accurately reflect the changes made. The diff shows that the code is moving the 'location' data from the raw JSON content into a private instance attribute `_location`, and updating the `lat` and `lng` properties to access this attribute instead of the raw JSON. This change improves safety by avoiding potential KeyError when accessing location attributes, but the commit message fails to mention this key improvement or the actual change in behavior. It also incorrectly suggests the change is about 'not raising keyerrors on missing attributes when geocoding', which is not the primary intent or the actual scope of the change. A better message would describe the refactoring of location data to instance attributes for safer access. Therefore, the message is only minimally relevant and lacks clarity and accuracy.","The commit message 'add southwest to results' is highly inaccurate and misleading. The diff does not add southwest to results; instead, it already includes southwest in the json_content during initialization. The actual change is about refactoring the location data access to use a private attribute `_location` instead of accessing `raw['location']`, improving encapsulation and data integrity. The commit message fails to reflect the real changes made, thus being both vague and incorrect. A better message would describe the improvement in data handling or encapsulation. Therefore, it receives a score of 2 for poor clarity and factual inaccuracy.","The commit message accurately reflects the change: it extracts the location data from the raw JSON into an instance property (`self._location`) to improve encapsulation and avoid accessing `self.raw['location']` directly. This is a clear and relevant refactor. However, the message could be slightly more detailed—such as mentioning that it improves data access safety or reduces coupling to raw data—making it 'excellent'. As it is, it's precise, concise, and appropriate for the change, earning a strong 4."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/here.py,"@@ -12,33 +12,38 @@ from geocoder.keys import here_app_id, here_app_code
 class HereResult(OneResult):
 
     def __init__(self, json_content):
+        self._display_position = json_content.get('DisplayPosition', {})
+        self._address = json_content.get('Address', {})
+        self._mapview = json_content.get('MapView', {})
+
         for item in json_content['Address']['AdditionalData']:
             json_content[item['key']] = item['value']
+
         super(HereResult, self).__init__(json_content)
 
     @property
     def lat(self):
-        return self.raw['DisplayPosition'].get('Latitude')
+        return self._display_position.get('Latitude')
 
     @property
     def lng(self):
-        return self.raw['DisplayPosition'].get('Longitude')
+        return self._display_position.get('Longitude')
 
     @property
     def address(self):
-        return self.raw['Address'].get('Label')
+        return self._address.get('Label')
 
     @property
     def postal(self):
-        return self.raw['Address'].get('PostalCode')
+        return self._address.get('PostalCode')
 
     @property
     def housenumber(self):
-        return self.raw['Address'].get('HouseNumber')
+        return self._address.get('HouseNumber')
 
     @property
     def street(self):
-        return self.raw['Address'].get('Street')
+        return self._address.get('Street')
 
     @property
     def neighborhood(self):
@@ -46,23 +51,23 @@ class HereResult(OneResult):
 
     @property
     def district(self):
-        return self.raw['Address'].get('District')
+        return self._address.get('District')
 
     @property
     def city(self):
-        return self.raw['Address'].get('City')
+        return self._address.get('City')
 
     @property
     def county(self):
-        return self.raw['Address'].get('County')
+        return self._address.get('County')
 
     @property
     def state(self):
-        return self.raw['Address'].get('State')
+        return self._address.get('State')
 
     @property
     def country(self):
-        return self.raw['Address'].get('Country')
+        return self._address.get('Country')
 
     @property
     def quality(self):
@@ -74,10 +79,10 @@ class HereResult(OneResult):
 
     @property
     def bbox(self):
-        south = self.raw['MapView']['BottomRight'].get('Latitude')
-        north = self.raw['MapView']['TopLeft'].get('Latitude')
-        west = self.raw['MapView']['TopLeft'].get('Longitude')
-        east = self.raw['MapView']['BottomRight'].get('Longitude')
+        south = self._mapview['BottomRight'].get('Latitude')
+        north = self._mapview['TopLeft'].get('Latitude')
+        west = self._mapview['TopLeft'].get('Longitude')
+        east = self._mapview['BottomRight'].get('Longitude')
         return self._get_bbox(south, west, north, east)
 
 
",add missing docstrings,refactor(geocoder): extract address and mapview data into dedicated properties,Corrective,"The new message indicates a structural refactoring to improve code maintainability and separation of concerns by extracting data into dedicated properties, which addresses potential issues with missing attributes and improves robustness during geocoding.",3.0,1.0,5.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is vague and does not accurately reflect the actual changes. The diff shows that the code is now using safe dictionary access (via .get()) on nested attributes like 'DisplayPosition', 'Address', and 'MapView', which prevents KeyError exceptions. However, the message fails to mention that these changes specifically prevent KeyError exceptions, nor does it clarify that the attributes are being safely accessed through fallbacks. While the intent is present, the message lacks specificity and technical accuracy, making it only partially effective. A better message would describe the improvement as 'adding safe attribute access to prevent KeyError during geocoding'. Thus, the score is 3 — acceptable but lacking precision and clarity.","The commit message 'add missing docstrings' is highly misleading given the code diff. The diff shows no addition of docstrings—instead, it demonstrates a refactoring of attribute access to use private attributes (_display_position, _address, _mapview) and improved property access by delegating to these fields. There are no docstrings added, removed, or modified. The message does not accurately reflect the actual changes made, making it incorrect and untrustworthy. Therefore, the score is 1 (Poor).","The commit message accurately reflects the changes in the code diff. It clearly states that address and mapview data have been extracted into dedicated properties, which is exactly what the diff shows: the introduction of `_display_position`, `_address`, and `_mapview` attributes, and the subsequent use of these properties in the getters (e.g., `lat`, `lng`, `address`, `bbox`). The message is concise, specific, and aligns well with the actual refactoring performed. It follows the conventional commit format and provides sufficient context for understanding the purpose of the change."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/komoot.py,"@@ -11,17 +11,25 @@ from geocoder.base import OneResult, MultipleResultsQuery
 
 class KomootResult(OneResult):
 
+    def __init__(self, json_content):
+        # create safe shortcuts
+        self._geometry = json_content.get('geometry', {})
+        self._properties = json_content.get('properties', {})
+
+        # proceed with super.__init__
+        super(KomootResult, self).__init__(json_content)
+
     @property
     def lat(self):
-        return self.raw['geometry']['coordinates'][1]
+        return self._geometry['coordinates'][1]
 
     @property
     def lng(self):
-        return self.raw['geometry']['coordinates'][0]
+        return self._geometry['coordinates'][0]
 
     @property
     def bbox(self):
-        extent = self.raw['properties'].get('extent')
+        extent = self._properties.get('extent')
         if extent and all(extent):
             west = extent[0]
             north = extent[1]
@@ -52,47 +60,47 @@ class KomootResult(OneResult):
 
     @property
     def country(self):
-        return self.raw['properties'].get('country', '')
+        return self._properties.get('country', '')
 
     @property
     def state(self):
         if self.osm_value == 'state':
-            return self.raw['properties'].get('name', '')
-        return self.raw['properties'].get('state', '')
+            return self._properties.get('name', '')
+        return self._properties.get('state', '')
 
     @property
     def city(self):
         if self.osm_value == 'city':
-            return self.raw['properties'].get('name', '')
-        return self.raw['properties'].get('city', '')
+            return self._properties.get('name', '')
+        return self._properties.get('city', '')
 
     @property
     def street(self):
-        return self.raw['properties'].get('street', '')
+        return self._properties.get('street', '')
 
     @property
     def housenumber(self):
-        return self.raw['properties'].get('housenumber', '')
+        return self._properties.get('housenumber', '')
 
     @property
     def postal(self):
-        return self.raw['properties'].get('postcode', '')
+        return self._properties.get('postcode', '')
 
     @property
     def osm_id(self):
-        return self.raw['properties'].get('osm_id', '')
+        return self._properties.get('osm_id', '')
 
     @property
     def osm_value(self):
-        return self.raw['properties'].get('osm_value', '')
+        return self._properties.get('osm_value', '')
 
     @property
     def osm_key(self):
-        return self.raw['properties'].get('osm_key', '')
+        return self._properties.get('osm_key', '')
 
     @property
     def osm_type(self):
-        return self.raw['properties'].get('osm_type', '')
+        return self._properties.get('osm_type', '')
 
 
 class KomootQuery(MultipleResultsQuery):
",add some shortcuts to komoot results,refactor(komoot): add safe property access with _geometry and _properties,Corrective,"The new message indicates a refactoring to add safe property access, which directly addresses and prevents KeyError exceptions on missing attributes during geocoding, improving robustness and correctness of the code.",3.0,3.0,5.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is vague and does not accurately reflect the actual changes. The diff shows that the code replaces direct access to `self.raw['properties']` and `self.raw['geometry']` with safe access via `self._properties.get()` and `self._geometry.get()`, which avoids KeyError only if the keys are missing. However, the message fails to mention that this is about adding safe property access via getters, and does not clarify that it improves robustness by preventing KeyError exceptions during geocoding. While the intent is correct, the message is too generic and lacks specificity about what was improved or why. Thus, it receives a moderate score of 3.","The commit message 'add some shortcuts to komoot results' is vague and lacks specificity. While the diff does introduce safe property shortcuts (e.g., self._geometry and self._properties) to avoid direct access to raw data, the message does not convey the purpose, benefits, or scope of the change. A better message would explain that safe attribute access is being added to improve code safety and readability. As such, the message is minimally informative and only meets basic expectations, earning a moderate score.","The commit message accurately reflects the changes in the diff. It highlights the refactoring effort to introduce safe property access via `_geometry` and `_properties` attributes, which improves code safety and readability by avoiding direct access to `raw` dictionaries. The message is concise, clear, and directly aligns with the implementation—specifically, the use of `.get()` methods and the introduction of private attributes to encapsulate geometry and properties. This is an excellent commit message that precisely describes the purpose and scope of the change."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/mapbox.py,"@@ -10,23 +10,25 @@ from geocoder.location import BBox
 class MapboxResult(OneResult):
 
     def __init__(self, json_content):
-        super(MapboxResult, self).__init__(json_content)
+        self._geometry = json_content.get('geometry', {})
 
         for item in json_content.get('context', []):
             if '.' in item['id']:
                 # attribute=country & text=Canada
                 attribute = item['id'].split('.')[0]
-                self.raw[attribute] = item['text']
+                json_content[attribute] = item['text']
+
+        super(MapboxResult, self).__init__(json_content)
 
     @property
     def lat(self):
-        coord = self.raw['geometry']['coordinates']
+        coord = self._geometry['coordinates']
         if coord:
             return coord[1]
 
     @property
     def lng(self):
-        coord = self.raw['geometry']['coordinates']
+        coord = self._geometry['coordinates']
         if coord:
             return coord[0]
 
@@ -69,15 +71,16 @@ class MapboxResult(OneResult):
 
     @property
     def interpolated(self):
-        return self.raw['geometry'].get('interpolated')
+        return self._geometry.get('interpolated')
 
     @property
     def bbox(self):
-        if self.raw.get('bbox'):
-            west = self.raw['bbox'][0]
-            south = self.raw['bbox'][1]
-            east = self.raw['bbox'][2]
-            north = self.raw['bbox'][3]
+        _bbox = self.raw.get('bbox')
+        if _bbox:
+            west = _bbox[0]
+            south = _bbox[1]
+            east = _bbox[2]
+            north = _bbox[3]
             return self._get_bbox(south, west, north, east)
 
 
",add missing docstrings,refactor(mapbox-result): extract geometry and context data for better access and consistency,Corrective,"The new message indicates a structural refactoring to improve data access and consistency, which addresses potential issues in how geometry and context data are handled, implying a fix or enhancement to underlying data management rather than just styling or semantics.",2.0,1.0,4.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is vague and does not accurately reflect the actual changes in the code. The diff shows that the code is modifying how context attributes are stored (from `self.raw` to `json_content`) and using a protected `_geometry` attribute instead of accessing `self.raw['geometry']` directly. While this avoids potential KeyError when geometry is missing, the message fails to mention the specific changes (e.g., storing context data directly in `json_content`, using `_geometry`), and the core issue (missing keys) is not fully captured. The message also lacks context about the fix's purpose or scope. Thus, it is only partially accurate and lacks clarity, warranting a score of 2.","The commit message 'add missing docstrings' is highly misleading given the code diff. The diff shows no changes to docstrings—instead, it modifies internal attribute access, restructures data assignment, and changes property access paths. The actual changes involve refactoring of data handling (e.g., using `_geometry` instead of `raw['geometry']`), which suggests a structural or logical change, not just documentation. Therefore, the commit message does not accurately reflect the changes made, making it misleading and therefore poor.","The commit message accurately reflects the changes in the code, which involve extracting geometry and context data into dedicated attributes (e.g., `_geometry`) to improve access and consistency. The refactoring centralizes geometry-related data and modifies context handling to avoid storing in `self.raw` directly, which enhances clarity and reduces redundancy. However, the message could be slightly more specific—such as mentioning the removal of direct `raw` access or the improved property access—making it a bit more actionable for reviewers. Still, it is clear, relevant, and appropriately scoped, earning a strong 4."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/mapquest.py,"@@ -10,11 +10,11 @@ class MapquestResult(OneResult):
 
     @property
     def lat(self):
-        return self.raw['latLng'].get('lat')
+        return self.raw.get('latLng', {}).get('lat')
 
     @property
     def lng(self):
-        return self.raw['latLng'].get('lng')
+        return self.raw.get('latLng', {}).get('lng')
 
     @property
     def street(self):
",add missing property,fix(mapquest): ensure safe access to latLng properties,Corrective,"The new message indicates a fix for a specific issue (safe access to latLng properties) in mapquest geocoding, addressing a potential runtime error, which aligns with a corrective improvement.",4.0,2.0,5.0,"The commit message accurately reflects the change: it prevents KeyError exceptions by safely accessing nested dictionary keys using .get() with default values. The improvement enhances robustness when geocoding data may lack expected fields. However, the message is slightly generic and could be more specific (e.g., mentioning 'latLng' or 'lat'/'lng' fields), which would make it more informative. Still, it clearly communicates the intent and impact, earning a strong 4.","The commit message 'add missing property' is overly vague and does not convey what was actually changed or why. The diff shows that the code updated the access to 'lat' and 'lng' properties by adding a default dictionary layer using `.get('latLng', {}).get('lat')`, which improves safety by handling missing 'latLng' keys. A better message would specify the improvement (e.g., 'Add safety checks for latLng in lat/lng properties'). As it stands, the message fails to communicate the significance or context of the change, resulting in a low score.","The commit message accurately reflects the change made in the code diff. It addresses a safety improvement by ensuring safe access to nested dictionary properties (`latLng` and `lat`/`lng`) using `.get()` with default values. The message is concise, specific, and clearly indicates both the scope (mapquest) and the purpose (safe access to latLng properties), which aligns well with the actual code changes. This is an excellent commit message for clarity and context."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/mapzen.py,"@@ -12,13 +12,21 @@ from geocoder.keys import mapzen_key
 
 class MapzenResult(OneResult):
 
+    def __init__(self, json_content):
+        # create safe shortcuts
+        self._geometry = json_content.get('geometry', {})
+        self._properties = json_content.get('properties', {})
+
+        # proceed with super.__init__
+        super(MapzenResult, self).__init__(json_content)
+
     @property
     def lat(self):
-        return self.raw['geometry']['coordinates'][1]
+        return self._geometry['coordinates'][1]
 
     @property
     def lng(self):
-        return self.raw['geometry']['coordinates'][0]
+        return self._geometry['coordinates'][0]
 
     @property
     def bbox(self):
@@ -26,43 +34,43 @@ class MapzenResult(OneResult):
 
     @property
     def address(self):
-        return self.raw['properties'].get('label')
+        return self._properties.get('label')
 
     @property
     def housenumber(self):
-        return self.raw['properties'].get('housenumber')
+        return self._properties.get('housenumber')
 
     @property
     def street(self):
-        return self.raw['properties'].get('street')
+        return self._properties.get('street')
 
     @property
     def neighbourhood(self):
-        return self.raw['properties'].get('neighbourhood')
+        return self._properties.get('neighbourhood')
 
     @property
     def city(self):
-        return self.raw['properties'].get('locality')
+        return self._properties.get('locality')
 
     @property
     def state(self):
-        return self.raw['properties'].get('region')
+        return self._properties.get('region')
 
     @property
     def country(self):
-        return self.raw['properties'].get('country')
+        return self._properties.get('country')
 
     @property
     def postal(self):
-        return self.raw['properties'].get('postalcode')
+        return self._properties.get('postalcode')
 
     @property
     def gid(self):
-        return self.raw['properties'].get('gid')
+        return self._properties.get('gid')
 
     @property
     def id(self):
-        return self.raw['properties'].get('id')
+        return self._properties.get('id')
 
 
 class MapzenQuery(MultipleResultsQuery):
",add mapzen shortcuts,refactor(geocoder): add safe property access in MapzenResult,Corrective,"The new message indicates a refactoring to add safe property access, which directly addresses and prevents KeyError exceptions when accessing missing attributes in MapzenResult, improving robustness and correctness of geocoding logic.",3.0,2.0,4.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is somewhat accurate in describing the intent of the change — it avoids direct key errors by using .get() methods on nested dictionaries. However, the message is vague and lacks specificity about what exactly was changed or why. It does not mention the introduction of _geometry and _properties attributes, nor does it highlight that the code now safely accesses nested JSON fields without raising KeyError. A more detailed message would explain the improvement in robustness and safety when handling missing geocoding data. Thus, while the message is not incorrect, it falls short in clarity and technical detail, resulting in a moderate score.","The commit message 'add mapzen shortcuts' is overly vague and lacks detail about what was actually changed. While the diff shows the introduction of safe property accessors (`_geometry` and `_properties`) to avoid direct access to `raw` dict, which improves code safety and readability, the message does not convey the significance or scope of the improvement. A better message would specify the enhancement (e.g., 'Introduce safe geometry and properties shortcuts in MapzenResult to improve access safety and reduce raw dict exposure'). As it stands, the message is too minimal to reflect the actual change, resulting in a low score.","The commit message 'refactor(geocoder): add safe property access in MapzenResult' accurately reflects the change, which involves introducing safe property access via _geometry and _properties attributes to avoid direct access to raw data. The diff shows that all properties now use .get() on these safe attributes, improving robustness and reducing the risk of KeyError. While the message is concise and correctly categorized with the 'refactor' tag, it lacks detail about the specific improvements (e.g., avoiding raw access, enhancing safety). However, it is still clear, relevant, and sufficient for a typical code review context. Therefore, it earns a solid 4 rather than 5, as it could have included more context about why this safety improvement matters (e.g., handling missing keys gracefully)."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/maxmind.py,"@@ -10,37 +10,45 @@ from geocoder.base import OneResult, MultipleResultsQuery
 
 class MaxmindResults(OneResult):
 
+    def __init__(self, json_content):
+        # create safe shortcuts
+        self._location = json_content.get('location', {})
+        self._traits = json_content.get('traits', {})
+
+        # proceed with super.__init__
+        super(MaxmindResults, self).__init__(json_content)
+
     @property
     def lat(self):
-        return self.raw['location'].get('latitude')
+        return self._location.get('latitude')
 
     @property
     def lng(self):
-        return self.raw['location'].get('longitude')
+        return self._location.get('longitude')
 
     @property
     def timezone(self):
-        return self.raw['location'].get('time_zone')
+        return self._location.get('time_zone')
 
     @property
     def metro_code(self):
-        return self.raw['location'].get('metro_code')
+        return self._location.get('metro_code')
 
     @property
     def domain(self):
-        return self.raw['traits'].get('domain')
+        return self._traits.get('domain')
 
     @property
     def isp(self):
-        return self.raw['traits'].get('isp')
+        return self._traits.get('isp')
 
     @property
     def organization(self):
-        return self.raw['traits'].get('organization')
+        return self._traits.get('organization')
 
     @property
     def ip(self):
-        return self.raw['traits'].get('ip_address')
+        return self._traits.get('ip_address')
 
     @property
     def postal(self):
",add more maxmind results,refactor(geocoder): add safe property access for MaxmindResults,Corrective,"The new message indicates a refactoring to add safe property access, which addresses potential key errors on missing attributes during geocoding, directly correcting a potential runtime issue.",2.0,2.0,3.0,"The commit message is too vague and does not accurately reflect the changes made. While the diff shows that the code is now using safe dictionary access (via `_location` and `_traits` attributes) to avoid direct access to `raw` dictionary keys, which could potentially raise KeyError, the message 'do not raise keyerrors on missing attributes when geocoding' is overly generic and lacks specificity. It fails to mention the actual improvement (safe access via cached attributes), the class involved (MaxmindResults), or the intent (to prevent KeyError exceptions during attribute access). A better message would clarify the change and its benefit. Therefore, it receives a score of 2 for being technically relevant but poorly worded and insufficiently informative.","The commit message 'add more maxmind results' is extremely vague and provides no context about what was actually changed or why. The diff shows a refactoring of property getters to use cached `_location` and `_traits` attributes for safety and readability, which improves code maintainability and avoids direct access to `raw` dictionary. However, the commit message fails to communicate the significance of the change—such as improved safety, reduced risk of key errors, or better encapsulation. A more descriptive message like 'Improve MaxmindResults safety by caching location and traits data' would be far more informative and appropriate.","The commit message 'refactor(geocoder): add safe property access for MaxmindResults' is somewhat accurate and follows a standard commit message format. It correctly identifies the type of change (refactor) and the affected component (geocoder). However, it lacks specific detail about what was refactored — for example, it doesn't mention the use of `_location` and `_traits` as safe shortcuts or the improvement in accessing nested JSON fields via `.get()`. This makes the message vague and only minimally informative. While it's not poor, it falls short of being excellent due to insufficient technical detail."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/osm.py,"@@ -10,6 +10,13 @@ from geocoder.base import OneResult, MultipleResultsQuery
 
 class OsmResult(OneResult):
 
+    def __init__(self, json_content):
+        # create safe shortcuts
+        self._address = json_content.get('address', {})
+
+        # proceed with super.__init__
+        super(OsmResult, self).__init__(json_content)
+
     # ============================ #
     # Geometry - Points & Polygons #
     # ============================ #
@@ -28,11 +35,12 @@ class OsmResult(OneResult):
 
     @property
     def bbox(self):
-        if self.raw['boundingbox']:
-            south = float(self.raw['boundingbox'][0])
-            west = float(self.raw['boundingbox'][2])
-            north = float(self.raw['boundingbox'][1])
-            east = float(self.raw['boundingbox'][3])
+        _boundingbox = self.raw.get('boundingbox')
+        if _boundingbox:
+            south = float(_boundingbox[0])
+            west = float(_boundingbox[2])
+            north = float(_boundingbox[1])
+            east = float(_boundingbox[3])
             return self._get_bbox(south, west, north, east)
 
     # ========================== #
@@ -45,15 +53,15 @@ class OsmResult(OneResult):
 
     @property
     def housenumber(self):
-        return self.raw['address'].get('house_number')
+        return self._address.get('house_number')
 
     @property
     def street(self):
-        return self.raw['address'].get('road')
+        return self._address.get('road')
 
     @property
     def postal(self):
-        return self.raw['address'].get('postcode')
+        return self._address.get('postcode')
 
     # ============================ #
     # Populated settlements, urban #
@@ -74,7 +82,7 @@ class OsmResult(OneResult):
         Note: the British English spelling is used rather than the
               American English spelling of neighborhood.
         """"""
-        return self.raw['address'].get('neighbourhood')
+        return self._address.get('neighbourhood')
 
     @property
     def suburb(self):
@@ -90,7 +98,7 @@ class OsmResult(OneResult):
         - industrial districts or recreation areas within a settlements with
           specific names.
         """"""
-        return self.raw['address'].get('suburb')
+        return self._address.get('suburb')
 
     @property
     def quarter(self):
@@ -102,7 +110,7 @@ class OsmResult(OneResult):
 
         The term quarter is sometimes used synonymously for neighbourhood.
         """"""
-        return self.raw['address'].get('quarter')
+        return self._address.get('quarter')
 
     # ====================================== #
     # Populated settlements, urban and rural #
@@ -117,7 +125,7 @@ class OsmResult(OneResult):
         countries of the former Soviet Union, where a lot of such unofficial
         settlements exist
         """"""
-        return self.raw['address'].get('hamlet')
+        return self._address.get('hamlet')
 
     @property
     def farm(self):
@@ -126,7 +134,7 @@ class OsmResult(OneResult):
         A farm that has its own name. If the farm is not a part of bigger
         settlement use place=isolated_dwelling. See also landuse=farmyard
         """"""
-        return self.raw['address'].get('hamlet')
+        return self._address.get('hamlet')
 
     @property
     def locality(self):
@@ -134,7 +142,7 @@ class OsmResult(OneResult):
 
         For an unpopulated named place.
         """"""
-        return self.raw['address'].get('locality')
+        return self._address.get('locality')
 
     @property
     def isolated_dwelling(self):
@@ -142,7 +150,7 @@ class OsmResult(OneResult):
 
         Smallest kind of human settlement. No more than 2 households.
         """"""
-        return self.raw['address'].get('hamlet')
+        return self._address.get('hamlet')
 
     @property
     def hamlet(self):
@@ -151,7 +159,7 @@ class OsmResult(OneResult):
         A smaller rural community typically with less than 100-200 inhabitants,
         few infrastructure.
         """"""
-        return self.raw['address'].get('hamlet')
+        return self._address.get('hamlet')
 
     @property
     def village(self):
@@ -164,7 +172,7 @@ class OsmResult(OneResult):
 
         See place=neighbourhood on how to tag divisions within a larger village
         """"""
-        return self.raw['address'].get('village')
+        return self._address.get('village')
 
     @property
     def town(self):
@@ -179,7 +187,7 @@ class OsmResult(OneResult):
         See place=neighbourhood and possibly also place=suburb on how to tag
         divisions within a town.
         """"""
-        return self.raw['address'].get('town')
+        return self._address.get('town')
 
     @property
     def island(self):
@@ -189,7 +197,7 @@ class OsmResult(OneResult):
         place=islet for very small islandsIdentifies the coastline of an
         island (> 1 km2), also consider place=islet for very small islands
         """"""
-        return self.raw['address'].get('island')
+        return self._address.get('island')
 
     @property
     def city(self):
@@ -205,7 +213,7 @@ class OsmResult(OneResult):
         within a city. The outskirts of urban settlements may or may not match
         the administratively declared boundary of the city.
         """"""
-        return self.raw['address'].get('city')
+        return self._address.get('city')
 
     # ================================ #
     # Administratively declared places #
@@ -214,32 +222,32 @@ class OsmResult(OneResult):
     @property
     def municipality(self):
         """"""admin_level=8""""""
-        return self.raw['address'].get('municipality')
+        return self._address.get('municipality')
 
     @property
     def county(self):
         """"""admin_level=6""""""
-        return self.raw['address'].get('county')
+        return self._address.get('county')
 
     @property
     def district(self):
         """"""admin_level=5/6""""""
-        return self.raw['address'].get('city_district')
+        return self._address.get('city_district')
 
     @property
     def state(self):
         """"""admin_level=4""""""
-        return self.raw['address'].get('state')
+        return self._address.get('state')
 
     @property
     def region(self):
         """"""admin_level=3""""""
-        return self.raw['address'].get('state')
+        return self._address.get('state')
 
     @property
     def country(self):
         """"""admin_level=2""""""
-        return self.raw['address'].get('country')
+        return self._address.get('country')
 
     # ======================== #
     # Quality Control & Others #
",add documentation for osm results,fix: rectification failed,Corrective,"The new message indicates a fix for a specific failure case (rectification failed), suggesting it addresses a bug or error that was previously occurring, thus classifying it as corrective.",3.0,1.0,1.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is somewhat accurate and addresses the core change — replacing direct access to `self.raw['address']` with safer `self._address.get()` calls to avoid KeyError. However, the message is vague and lacks specificity about what was actually changed (e.g., the introduction of a safe `_address` property, the scope of the fix, or the benefit). It does not mention that the change improves safety or reduces risk of runtime errors, nor does it indicate that the original code relied on `raw` directly. While the intent is correct, the message fails to convey the technical significance or scope of the improvement, making it only moderately effective. Hence, a score of 3 reflects a reasonable but under-explained commit message.","The commit message 'add documentation for osm results' is highly inaccurate given the actual changes in the code diff. The diff does not add any documentation; instead, it refactors access to address fields by introducing a safe `_address` attribute and replacing direct accesses to `self.raw['address']` with `self._address.get('field')`. This is a code refactoring for safety and maintainability, not documentation. The commit message misrepresents the change, making it misleading and technically incorrect. Therefore, it receives a low score.","The commit message 'fix: rectification failed' is highly inadequate for the actual changes in the diff. The diff shows a refactoring and improvement in code structure: introducing a safe `_address` attribute to avoid direct access to `self.raw['address']` throughout multiple properties, which enhances safety and maintainability. This is not a simple fix for a failed rectification, but rather a code quality improvement with better data access patterns. The commit message fails to describe what was actually fixed, why it was necessary, or what problem it solves. It lacks specificity, context, and clarity, making it nearly meaningless for developers reviewing the change. A proper message would describe the improvement, such as 'refactor: introduce safe address access via _address to prevent raw dictionary key access'."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/ottawa.py,"@@ -13,11 +13,11 @@ class OttawaResult(OneResult):
 
     @property
     def lat(self):
-        return self.raw['location'].get('y')
+        return self.raw.get('location', {}).get('y')
 
     @property
     def lng(self):
-        return self.raw['location'].get('x')
+        return self.raw.get('location', {}).get('x')
 
     @property
     def postal(self):
",add missing properties,fix(utility): ensure safe access to location coordinates in OttawaResult,Corrective,"The new message indicates a fix to a potential runtime error (key errors) when accessing location coordinates, which is a bug fix ensuring safe attribute access, thus addressing a correctness issue in the utility function.",3.0,2.0,5.0,"The commit message accurately describes the change — avoiding KeyError exceptions when accessing nested dictionary keys — which is a valid and important improvement for robustness. However, it lacks specific details such as the context (e.g., why this was needed, which part of the codebase it affects), the impact (e.g., preventing crashes in edge cases), or the exact nature of the fix (e.g., using .get() with default values). While the message is clear and relevant, it is somewhat generic and could be more informative. Thus, it receives a moderate score of 3.","The commit message 'add missing properties' is overly vague and does not convey what was actually changed or why. The diff shows that the code is making safer access to nested dictionary values using .get() with default empty dicts, which improves robustness by preventing KeyError when 'location' is missing. A better message would specify the improvement (e.g., 'Improve safety of lat/lng property access by using safe dictionary lookup'). As it stands, the message lacks detail and context, so it receives a score of 2.","The commit message is concise, relevant, and accurately reflects the change. It identifies the fix as being in the utility aspect of the code, specifically addressing safe access to location coordinates. The diff shows that the code now uses a double `.get()` to safely access nested dictionary values, preventing potential KeyError exceptions. This improvement enhances robustness, and the commit message clearly communicates the intent and scope of the change without unnecessary detail, making it excellent for both clarity and context."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/ottawa_parcel.py,"@@ -15,7 +15,7 @@ class OttawaParcelIdResult(OneResult):
 
     @property
     def address_id(self):
-        return self.raw['attributes']['PI Municipal Address ID']
+        return self.raw.get('attributes', {}).get('PI Municipal Address ID')
 
 
 class OttawaParcelIdQuery(MultipleResultsQuery):
",add missing annotation to ottawaparcelidresult,fix(utility): safely access PI Municipal Address ID in OttawaParcelIdResult,Corrective,"The new message indicates a specific bug fix addressing unsafe attribute access, which resolves a potential runtime error (KeyError) during geocoding, thus correcting a defect in the utility function.",3.0,2.0,5.0,"The commit message accurately describes the change—avoiding KeyError when accessing nested dictionary keys by using .get()—which is relevant to the context of geocoding where attributes might be missing. However, the message is somewhat vague and lacks specifics about the impact or why this change is important (e.g., robustness, error handling, edge cases). It correctly identifies the problem but could be more precise or contextual. Therefore, it is functional but not excellent.","The commit message 'add missing annotation to ottawaparcelidresult' is vague and does not clearly describe what was changed or why. The diff shows a change from direct access to a safe dictionary get (using .get()), which improves safety and handles missing keys gracefully. This is a meaningful improvement, but the commit message fails to convey the actual nature of the change—specifically, that a potential KeyError was being avoided by using a safer access pattern. A better message would clarify the intent, such as 'Fix potential KeyError in OttawaParcelIdResult.address_id by using safe dictionary access.' Therefore, the message is only mildly informative and lacks technical clarity, warranting a score of 2.","The commit message is clear, concise, and accurately reflects the change. It identifies the fix as related to 'utility' functionality and specifically mentions the safe access to 'PI Municipal Address ID' in the OttawaParcelIdResult class. The diff shows a change from direct dictionary access to using .get() with fallbacks, which improves safety when the key might be missing. The message appropriately conveys the purpose and scope of the change without unnecessary detail, making it excellent for understanding the intent."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/tgos.py,"@@ -21,11 +21,11 @@ class TgosResult(OneResult):
 
     @property
     def lat(self):
-        return self.raw['geometry'].get('y')
+        return self.raw('geometry', {}).get('y')
 
     @property
     def lng(self):
-        return self.raw['geometry'].get('x')
+        return self.raw('geometry', {}).get('x')
 
     @property
     def address(self):
",add missing docstrings,refactor(core): use raw accessor with default fallback for lat and lng,Corrective,"The new message indicates a refactoring that addresses missing attribute errors by introducing a safe fallback mechanism, which directly fixes the issue of key errors during geocoding, moving beyond just a cosmetic or semantic change.",3.0,1.0,3.0,"The commit message correctly identifies the intent of the change—avoiding KeyError exceptions when accessing missing attributes in geocoding data—but it lacks specific details about the implementation (e.g., using a safe accessor method like `raw('geometry', {})`). While the message is clear and relevant, it does not fully explain the technical improvement or why this change is necessary. A more detailed message would have been better, such as explaining that the use of a default empty dict prevents KeyError when accessing nested keys. Thus, it's accurate but somewhat vague, warranting a moderate score.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff shows a change in code from accessing `self.raw['geometry'].get('y')` to `self.raw('geometry', {}).get('y')`, which suggests a modification to the method call syntax, not the addition of docstrings. There are no docstrings present or added in the code, so the commit message does not accurately reflect the changes. This misalignment between the message and the diff makes it poor and untrustworthy.","The commit message accurately reflects the change—refactoring the lat and lng properties to use a raw accessor with a default fallback—aligning with the diff. However, it lacks context about why this change was made (e.g., handling missing geometry, improving safety, or fixing edge cases), and does not mention the specific improvement in robustness or error handling. While the message is clear and relevant, it is somewhat minimal in explanation, which limits its completeness. Thus, it is functional but not outstanding."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/tomtom.py,"@@ -18,11 +18,11 @@ class TomtomResult(OneResult):
 
     @property
     def lat(self):
-        return self.raw['position'].get('lat')
+        return self.raw.get('position', {}).get('lat')
 
     @property
     def lng(self):
-        return self.raw['position'].get('lon')
+        return self.raw.get('position', {}).get('lon')
 
     @property
     def geohash(self):
",add missing docstrings,fix(geolocation): ensure safe access to position lat and lon,Corrective,"The new message indicates a fix to prevent errors when accessing missing attributes (like lat and lon), which directly addresses a bug in the geolocation functionality, making it a corrective improvement.",3.0,1.0,4.0,"The commit message correctly identifies the intent of the change — avoiding KeyError exceptions when accessing nested dictionary keys — which is relevant to the diff. However, it lacks specific details about what was changed, why it was necessary, and how it improves robustness. While the fix is valid and the issue is addressed, the message is vague and does not clearly explain the impact or context (e.g., missing 'position' or 'lat/lon' fields in raw data). A more detailed message would have been better, such as 'Fix KeyError in lat/lng access by safely accessing nested dictionaries using .get()'. Thus, it is functional but not excellent.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff shows changes to property getters that use more robust dictionary access (adding a default empty dict), not the addition of docstrings. There are no docstrings present or added in the code, so the commit message does not accurately reflect the changes. This misalignment between the message and the diff makes it poor and potentially confusing for other developers.","The commit message accurately describes the change and its purpose: ensuring safe access to lat and lon values by using a nested get() with default empty dictionaries. It uses the correct terminology ('safe access') and is relevant to the task (geolocation). However, it lacks context about why the original access was unsafe (e.g., missing 'position' key), and does not mention the broader impact or any related changes. Overall, it is clear and appropriate but slightly incomplete in scope."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/uscensus.py,"@@ -10,20 +10,25 @@ from geocoder.base import OneResult, MultipleResultsQuery
 
 class USCensusResult(OneResult):
 
+    def __init__(self, json_content):
+        # create safe shortcuts
+        self._coordinates = json_content.get('coordinates', {})
+        self._address_components = json_content.get('addressComponents', {})
+
+        # proceed with super.__init__
+        super(USCensusResult, self).__init__(json_content)
+
     @property
     def lat(self):
-        if self.raw['coordinates']:
-            return self.raw['coordinates'].get('y')
+        return self._coordinates.get('y')
 
     @property
     def lng(self):
-        if self.raw['coordinates']:
-            return self.raw['coordinates'].get('x')
+        return self._coordinates.get('x')
 
     @property
     def address(self):
-        if self.raw['matchedAddress']:
-            return self.raw.get('matchedAddress')
+        return self.raw.get('matchedAddress')
 
     @property
     def housenumber(self):
@@ -34,63 +39,51 @@ class USCensusResult(OneResult):
 
     @property
     def fromhousenumber(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('fromAddress')
+        return self._address_components.get('fromAddress')
 
     @property
     def tohousenumber(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('toAddress')
+        return self._address_components.get('toAddress')
 
     @property
     def streetname(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('streetName')
+        return self._address_components.get('streetName')
 
     @property
     def prequalifier(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('preQualifier')
+        return self._address_components.get('preQualifier')
 
     @property
     def predirection(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('preDirection')
+        return self._address_components.get('preDirection')
 
     @property
     def pretype(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('preType')
+        return self._address_components.get('preType')
 
     @property
     def suffixtype(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('suffixType')
+        return self._address_components.get('suffixType')
 
     @property
     def suffixdirection(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('suffixDirection')
+        return self._address_components.get('suffixDirection')
 
     @property
     def suffixqualifier(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('suffixQualifier')
+        return self._address_components.get('suffixQualifier')
 
     @property
     def city(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('city')
+        return self._address_components.get('city')
 
     @property
     def state(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('state')
+        return self._address_components.get('state')
 
     @property
     def postal(self):
-        if self.raw['addressComponents']:
-            return self.raw['addressComponents'].get('zip')
+        return self._address_components.get('zip')
 
 
 class USCensusQuery(MultipleResultsQuery):
",add missing shortcuts to uscensusresult,refactor(USCensusResult): extract address and coordinates properties into safe getters,Corrective,"The new message indicates a refactoring that improves safety and reliability by extracting properties into safe getters, which prevents potential key errors on missing attributes during geocoding, addressing the original issue directly.",3.0,3.0,5.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is somewhat accurate in intent but lacks specificity and technical precision. The diff shows that the code introduces safe attribute access via `_coordinates` and `_address_components` properties, which avoids direct access to `self.raw` and thus prevents potential KeyError when keys are missing. However, the message does not clearly state that the changes use safe dictionary access (via `.get()`), nor does it mention the specific properties or the improvement in robustness. It also misses context about the impact (e.g., improved error resilience in geocoding). While the intent is correct, the message is vague and could be more informative for developers reviewing the change.","The commit message 'add missing shortcuts to uscensusresult' is technically accurate and reflects the change — introducing safe attribute shortcuts for coordinates and address components to avoid direct access to `self.raw`. However, it lacks specificity about what was added, why it was needed (e.g., for safety, performance, or readability), and the impact of the change. A more detailed message like 'Add safe property shortcuts for coordinates and address components in USCensusResult to improve access safety and reduce raw dictionary dependency' would be superior. As it is, the message is minimal and somewhat vague, making it only moderately informative.","The commit message accurately reflects the changes in the diff. It clearly states that the code has been refactored to extract address and coordinates properties into safe getters, which is exactly what the diff shows: introducing `_coordinates` and `_address_components` attributes with safe `get()` calls instead of direct access to `self.raw`. This improves safety and readability by avoiding potential KeyError exceptions and making the code more robust. The message is concise, specific, and directly aligns with the implemented changes, making it excellent for code review and understanding."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,geocoder/yandex.py,"@@ -15,13 +15,13 @@ class YandexResult(OneResult):
 
     @property
     def lat(self):
-        pos = self.raw['Point'].get('pos')
+        pos = self.raw.get('Point', {}).get('pos')
         if pos:
             return pos.split(' ')[1]
 
     @property
     def lng(self):
-        pos = self.raw['Point'].get('pos')
+        pos = self.raw.get('Point', {}).get('pos')
         if pos:
             return pos.split(' ')[0]
 
@@ -41,7 +41,7 @@ class YandexResult(OneResult):
 
     @property
     def description(self):
-        return self.raw['description']
+        return self.raw.get('description')
 
     @property
     def address(self):
",add more yandex properties,fix(yandex-result): make safe access to raw data fields,Corrective,"The new message indicates a fix for unsafe access to raw data fields, which addresses a potential runtime error (like KeyError) during geocoding, aligning with the original intent of preventing crashes on missing attributes.",4.0,2.0,5.0,"The commit message accurately reflects the change: it prevents KeyError exceptions by using .get() instead of direct dictionary access on potentially missing keys. The improvement is relevant to the task of safe geocoding, where missing attributes could cause crashes. However, the message is slightly generic and could be more specific (e.g., mentioning 'Point' and 'description' fields), but it clearly conveys the intent. It is not overly verbose or technically detailed, and it correctly identifies the problem (avoiding key errors). Thus, it is good but not excellent.","The commit message 'add more yandex properties' is vague and does not accurately reflect the changes. The diff shows only safety improvements by adding `.get()` calls to handle potential missing keys (e.g., `Point` or `description`), which prevents KeyError exceptions. This is a defensive programming improvement, not the addition of new properties. The message fails to describe the actual nature of the change, making it misleading and uninformative. A better message would describe the fix for key access safety.","The commit message accurately reflects the changes in the code. The diff shows that unsafe direct dictionary access (e.g., `self.raw['Point']`) has been replaced with safe `get()` methods using nested dictionary access (`self.raw.get('Point', {}).get('pos')`), which prevents KeyError exceptions when fields are missing. Similarly, `self.raw['description']` is replaced with `self.raw.get('description')`. The commit message 'fix(yandex-result): make safe access to raw data fields' clearly and concisely summarizes the purpose and impact of the change, aligning well with the actual code modifications. The message is specific, relevant, and appropriately formatted with a clear scope and intent."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,tests/test_google.py,"@@ -31,6 +31,11 @@ def test_google():
         assert fields_count == 15
 
 
+def test_issue_294():
+    g = geocoder.google(""Cerro Torre Mountain"")
+    assert g.ok
+
+
 def test_google_reverse():
     g = geocoder.google(ottawa, method='reverse')
     assert g.ok
@@ -40,7 +45,7 @@ def test_google_reverse():
         '100 Albert St, Ottawa, ON K1P 1A5, Canada',
         'Queen / Metcalfe, Ottawa, ON K1P 5T8, Canada',
         'Byward Market - Parliament Hill, Ottawa, ON, Canada',
-        ]
+    ]
     assert [result.address for result in g][:3] == first_three_expected_addresses
 
 
",add test for reverse geocoder,fix(tests): add test for issue #294,Corrective,"The new message indicates the addition of a test to address a specific issue, which implies a fix to ensure proper behavior—specifically, testing for missing attributes during geocoding to prevent key errors. This is a corrective improvement as it addresses a potential bug by adding validation.",2.0,3.0,3.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is inaccurate and does not reflect the actual changes in the diff. The diff adds a new test case (test_issue_294) for geocoding a specific location and modifies an existing test to ensure expected addresses are returned, but there is no code that prevents KeyError exceptions or handles missing attributes. Therefore, the commit message is misleading and does not accurately describe the changes made. It receives a score of 2 (Fair) because it is off-topic and incorrect, though it may hint at a related issue.","The commit message 'add test for reverse geocoder' is vague and lacks specificity. While it correctly identifies that a test was added, it does not convey the full scope—such as the fact that the test involves a specific query ('Cerro Torre Mountain') or that it validates the reverse geocoding functionality. A more detailed message would have improved clarity and context. Therefore, it is moderately accurate but insufficiently descriptive, warranting a score of 3.","The commit message 'fix(tests): add test for issue #294' is concise and correctly identifies the type of change (test fix) and references the relevant issue. However, it lacks detail about what the test is verifying—specifically, that it checks geocoding of 'Cerro Torre Mountain' and confirms the response is valid (g.ok). A more detailed message would improve clarity and help other developers understand the test's purpose. Thus, it is functional but not fully informative, earning a mid-level score."
5f7eccc16e05c997c51abaff2626e1ef7a1f4d46,do not raise keyerrors on missing attributes when geocoding,tests/test_mapbox.py,"@@ -12,8 +12,8 @@ def test_mapbox():
     g = geocoder.mapbox(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 0
-    assert fields_count == 9
+    assert osm_count == 2
+    assert fields_count == 11
 
 
 def test_mapbox_reverse():
",add test for mapbox_reverse,fix(test_mapbox): update expected osm_count and fields_count,Corrective,"The new message indicates a fix to test expectations related to osm_count and fields_count, which suggests a correction of incorrect or mismatched test assertions, improving test accuracy and reliability.",1.0,2.0,3.0,"The commit message 'do not raise keyerrors on missing attributes when geocoding' is highly inconsistent with the actual changes in the code diff. The diff modifies assertions in a test case for Mapbox geocoding, changing expected values for osm_count and fields_count from 0/9 to 2/11. This suggests the test is now validating different behavior, possibly due to updated or changed data. However, the commit message does not reflect this change at all—there is no mention of testing, assertions, or data fields. Moreover, the message refers to preventing KeyError exceptions, which is not present or implied in the code changes. Therefore, the message is irrelevant and misleading, making it poor.","The commit message 'add test for mapbox_reverse' is overly vague and does not reflect the actual changes made in the code diff. The diff shows modifications to an existing test function `test_mapbox()`, specifically changing assertions about `osm_count` and `fields_count`, which implies the test is being updated to reflect expected behavior (now 2 and 11 instead of 0 and 9). The commit message fails to mention these specific changes or the intent behind them. A better message would indicate the update to the test case with the new expected values. Therefore, it is only minimally relevant and lacks clarity or context, warranting a score of 2.","The commit message is accurate and relevant to the changes made, as it correctly identifies the fix in the test case for mapbox. However, it lacks context about why the values changed (e.g., due to updates in Mapbox's API behavior or data structure), and does not explain the impact or expected behavior. While it correctly states what was fixed, it is minimal and could be more informative. Therefore, it is functional but not detailed or explanatory enough to be considered excellent."
452446c4e8e7798748d4321d98d8bfba87402a8c,fixed test,tests/test_osm.py,"@@ -27,6 +27,6 @@ def test_multi_results():
 def test_detailed_query():
     g = geocoder.osm("""",postalcode=""45326"", street=""Ellernstraße"", method=""details"")
     assert g.postal == ""45326""
-    assert g.street.lower() == ""ellernstraße""
+    assert ""ellern"" in g.street.lower()
     assert g.ok
 
",add failing test for,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed'), suggesting a bug or issue that was addressed, which is a corrective action rather than a cosmetic or trivial change.",2.0,2.0,1.0,"The commit message 'fixed test' is extremely vague and provides no context about what was fixed, why it was fixed, or what the change addresses. While the diff shows a specific change in a test assertion—from checking the exact street name to checking if 'ellern' is in the street name—this change could be due to various reasons (e.g., handling of case, data inconsistencies, or string matching). A better message would explain the intent, such as 'updated street name assertion to allow partial matching due to potential case variations or data inconsistencies'. As it stands, the message lacks detail and fails to communicate the significance of the change, resulting in a low score.","The commit message 'add failing test for' is extremely vague and provides no context about what is being tested, why it's failing, or what functionality it relates to. While it does indicate a test addition, the lack of specificity makes it insufficient. The test diff shows a change that improves robustness by using a substring match ('ellern' in g.street.lower()) instead of an exact match, which suggests the intent was to make the test more resilient to minor formatting differences. However, the commit message fails to reflect this improvement or the reasoning behind it. Thus, it is minimally informative and scores a 2.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code. The diff shows a modification to a test case where the assertion from checking the exact street name is changed to a partial match (checking if 'ellern' is in the street). This is not a 'rectification' of a failed fix, but rather a more lenient test assertion. The message provides no context about what was fixed, why, or what the intended behavior is. It fails to communicate the actual change or its purpose, making it poor for a commit message."
2c4bc5ab4098aa10f55e342d723afcd268d8a007,Fixed error status_code from 200 to 0,geocoder/baidu.py,"@@ -122,7 +122,7 @@ class BaiduQuery(MultipleResultsQuery):
 
     def _catch_errors(self, json_response):
         status_code = json_response.get('status')
-        if status_code != 200:
+        if status_code != 0:
             self.status_code = status_code
             self.error = json_response.get('message')
 
",add status_code and error to baiduquery,fix(query): handle correct status code for Baidu API,Corrective,"The new message specifies a targeted fix for a query-related issue with the Baidu API status code, indicating a deliberate correction of a functional error, moving beyond a simple status code change to a context-aware fix.",3.0,2.0,4.0,"The commit message correctly identifies the change in status code from 200 to 0, which aligns with the code diff. However, it lacks context about why the change was made—such as what the status code means in the Baidu API context or what error handling behavior was being corrected. While the message is accurate and concise, it is somewhat vague and does not fully explain the impact or reasoning, which reduces its clarity and usefulness for other developers. Therefore, it is functional but not excellent.","The commit message 'add status_code and error to baiduquery' is vague and does not accurately reflect the change. The diff shows a correction of the condition from checking for status_code != 200 to status_code != 0, which indicates a fix or adjustment to error handling, not an addition. The message fails to convey the actual nature of the change—specifically, that the status code check was corrected from 200 to 0—making it misleading. A better message would clarify the fix and its purpose.","The commit message correctly identifies the change as a fix for handling the Baidu API status code, which is relevant to the task. The diff shows a change from checking for status code 200 to 0, which aligns with the actual Baidu API's status code convention (where 0 typically indicates success). The message is clear, concise, and accurately reflects the change. However, it could be slightly improved by specifying why status code 0 is correct (e.g., 'Baidu API uses 0 for success, not 200'), which would make it more informative. Still, it is accurate and meaningful, warranting a high score."
206dbf4cb3294a7b255b42fb6ef01a62ee2b903f,Added method _catch_errors for Arcgis,geocoder/arcgis.py,"@@ -85,6 +85,15 @@ class ArcgisQuery(MultipleResultsQuery):
     def _adapt_results(self, json_response):
         return json_response['locations']
 
+    def _catch_errors(self, json_response):
+        status = json_response.get('error')
+        if status:
+            self.error = status.get('code')
+            self.message = status.get('message')
+            self.details = status.get('details')
+
+        return self.error
+
 
 if __name__ == '__main__':
     logging.basicConfig(level=logging.INFO)
",update arcgis_query.py,feat(query): add error handling to ArcgisQuery,Semantic,"The new message provides a more descriptive and context-rich title by specifying the feature (query) and the purpose (error handling), improving clarity and semantic meaning compared to the generic old message.",3.0,2.0,3.0,"The commit message 'Added method _catch_errors for Arcgis' is technically accurate and identifies the change, but it is overly brief and lacks context. It does not mention the purpose of the method, what errors it handles, or how it improves error handling in the query process. A more informative message would describe the functionality (e.g., 'Added error handling to extract error code, message, and details from ArcGIS API responses'). While the implementation is clear and relevant, the commit message fails to provide sufficient context for understanding the impact or intent, which reduces its effectiveness.","The commit message 'update arcgis_query.py' is extremely vague and provides no information about what was changed or why. While the diff shows the addition of a new method `_catch_errors` that handles error responses from ArcGIS, the commit message fails to convey the purpose or impact of the change. A meaningful commit message should describe the specific improvement or functionality added, such as 'Add error handling to extract error details from ArcGIS API responses'. As it only states the file updated without context, it lacks clarity and usefulness, warranting a score of 2.","The commit message 'feat(query): add error handling to ArcgisQuery' is appropriate in terms of categorization (feat) and scope (query), but it lacks detail about what exactly is being handled or how it improves the functionality. The diff shows the addition of an error-capturing method that extracts error code, message, and details from the JSON response, which is meaningful. However, the commit message does not convey the specific nature of the error handling (e.g., structured error extraction, failure propagation) or its impact. A more detailed message like 'feat(query): add structured error extraction from Arcgis API response' would be better. Therefore, it's functional but not fully descriptive, earning a moderate score."
9166447ac764ce238c95ef1f525fdb10bb3a33c7,"- mention the addition of country_code to the osm module in CHANGELOG
- bump revision to 1.3.2 as requested",geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.32.1'
+__version__ = '1.32.2'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a fix for a rectification failure, suggesting a bug was resolved, which falls under corrective improvements.",2.0,1.0,1.0,"The commit message is incomplete and misleading. It mentions a change to the version number (bumping to 1.32.2), which is correct, but falsely claims to mention the addition of country_code to the osm module, which is not present in the diff. The diff only shows a version bump, not any code changes to the osm module. Therefore, the message contains false information and fails to accurately reflect the actual changes. While it includes a version update, the incorrect detail about country_code significantly reduces its credibility and clarity.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.32.1' to '1.32.2', not any addition of docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and incorrect. A proper message would have been something like 'Bump version to 1.32.2'.","The commit message 'fix: rectification failed' is highly vague and does not accurately reflect the actual change in the code diff. The diff shows only a version bump from '1.32.1' to '1.32.2', which is a minor version update, not a fix for a rectification failure. The message lacks context, specificity, and technical clarity, making it difficult to understand the purpose of the commit. A proper commit message should describe what was changed and why, not refer to an undefined or incorrect issue."
9499721aa6a3ae6c01b94594f6a9e595560c2c7e,Fix opencage reverse issue where it was using self.lcoation instead of just location,geocoder/opencage_reverse.py,"@@ -39,7 +39,7 @@ class OpenCageReverse(OpenCageQuery):
     def _build_params(self, location, provider_key, **kwargs):
         location = Location(location)
         return {
-            'query': self.location,
+            'query': location,
             'key': provider_key,
         }
 
",add location to opencage_reverse,fix(OpenCageReverse): use location object in query parameter,Corrective,"The change addresses a bug by correctly using the 'location' object in the query parameter instead of 'self.location', ensuring the reverse geocoding request is properly formed and functional.",3.0,2.0,4.0,"The commit message correctly identifies the issue — using `self.location` instead of `location` — and describes the fix. However, it contains a typo: 'lcoation' should be 'location'. This error reduces clarity and professionalism. The message is mostly accurate and addresses the intended change, but the typo slightly undermines its quality. Therefore, it receives a moderate score of 3 rather than 4 or 5.","The commit message 'add location to opencage_reverse' is too vague and does not clearly describe the change or its significance. While the diff shows a simple parameter update from `self.location` to `location`, the message fails to explain what was changed, why it was changed, or the impact. A better message would specify that the query parameter now uses the input location object instead of a stored self.location, improving accuracy or correctness. Thus, it lacks clarity and context, warranting a score of 2.","The commit message is clear and relevant, correctly identifying the fix and the specific change made (using the location object instead of self.location). It follows the standard format for a fix commit and accurately reflects the diff. However, it could be slightly improved by mentioning the purpose or impact (e.g., ensuring correct geocoding queries are formed), which would make it more informative. Overall, it is good but not excellent."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_baidu.py,"@@ -14,7 +14,7 @@ def test_baidu():
     assert g.ok
     osm_count, fields_count = g.debug()[0]
     assert osm_count == 0
-    assert fields_count == 7
+    assert fields_count >= 7
 
 
 def test_baidu_reverse():
",fix baidu test,fix(test_baidu): assert fields_count is at least 7,Corrective,"The new message indicates a fix to ensure a minimum number of fields are returned, addressing a potential failure in test validation, which is a corrective change to fix a bug or deficiency in the test behavior.",3.0,2.0,4.0,"The commit message indicates a change in the test to allow more fields to be returned, which aligns with the code change that now checks `fields_count >= 7` instead of exactly `7`. However, the message is somewhat vague and does not clearly explain the purpose or impact of the change. It lacks specificity about why the test was modified or what the expected outcome is. While it correctly reflects the change in assertion, it fails to convey the context or rationale, making it only moderately informative. Thus, a score of 3 is appropriate.","The commit message 'fix baidu test' is overly vague and provides no details about what was fixed or why. While the code change modifies an assertion from an exact equality to a greater-than-or-equal condition, which is a reasonable adjustment for flexibility in testing, the message lacks context such as the specific issue addressed, the reason for the change, or its impact. A better message would explain that the test now allows for a minimum of 7 fields instead of exactly 7, improving robustness. As such, the message is insufficiently descriptive and only scores a 2.","The commit message is clear and relevant, correctly identifying the change as a fix in the test_baidu function. It accurately reflects the modification from asserting equality to a greater-than-or-equal condition, which is appropriate if the actual field count may vary. The message is concise and sufficiently descriptive. However, it could be slightly improved by mentioning why the change was made (e.g., due to dynamic field count or backward compatibility), which would make it more informative. Overall, it is good but not exceptional."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_bing.py,"@@ -12,8 +12,8 @@ def test_bing():
     assert g.ok
     assert g.city == city
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 12
+    assert osm_count >= 3
+    assert fields_count >= 12
 
 
 def test_bing_reverse():
",add failing test for,chore(test): relax osm_count and fields_count assertions,Cosmetic,"The change modifies test assertions to be more lenient without altering functionality or adding new features, reflecting a minor adjustment for test robustness rather than improving semantics, correctness, or behavior.",3.0,1.0,5.0,"The commit message accurately reflects the change in the test assertions, noting that the tests now allow for more fields and OSM count (using >= instead of exact values). This indicates a reasonable update to accommodate potential improvements in result quality. However, the message is somewhat vague and lacks context about why the change was made—such as whether this was due to expected data growth, API changes, or improved accuracy. It also doesn't mention the original strict expectations (exactly 3 OSM entries and 12 fields), which makes the motivation slightly unclear. Thus, it's functional but not fully detailed or precise, earning a mid-level score.","The commit message 'add failing test for' is extremely vague and provides no context about what is being tested, why it's failing, or what functionality is affected. It does not indicate the purpose of the change, the expected behavior, or the rationale behind modifying the assertions from exact equality to inequality. A good commit message should clearly describe the intent and impact of the change. Given the lack of detail and clarity, this message is poor and fails to meet basic expectations for meaningful communication.","The commit message accurately reflects the change in the test assertions, stating that the requirements for osm_count and fields_count have been relaxed from exact equality to greater-than-or-equal comparisons. This is a clear, concise, and relevant description of the change, directly tied to the diff. The use of 'chore(test)' appropriately categorizes it as a test-related maintenance change, and the message provides sufficient context for understanding the purpose of the update without unnecessary detail."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_canadapost.py,"@@ -20,5 +20,5 @@ def test_canadapost():
         g = geocoder.canadapost(location, key='fake', maxRows=3)
         assert g.ok
         osm_count, fields_count = g.debug()[0]
-        assert osm_count == 6
-        assert fields_count == 15
+        assert osm_count >= 6
+        assert fields_count >= 15
",add a regression test for,fix(test_canadapost): relax osm_count and fields_count assertions,Corrective,"The change addresses and relaxes strict assertions in tests related to OSM and fields count, which likely resolves false failures due to stricter expectations, thereby correcting test behavior to better reflect actual output quality.",3.0,2.0,5.0,"The commit message acknowledges a change in the test expectations to allow for more fields and OSM records, which reflects the actual code change. However, it lacks specificity about why the change was made—such as whether this is due to improved data quality, changes in the API, or better performance. The message is accurate but vague and does not clearly explain the impact or context, which limits its effectiveness as a commit message. Thus, it is moderately clear and relevant but not excellent.","The commit message 'add a regression test for' is extremely vague and provides no context about what is being tested, why it was added, or what specific issue it addresses. While the code change does modify a test to use >= instead of exact values (which might reflect a more robust test), the message fails to communicate the purpose or significance of the change. A better message would specify the test's intent, such as 'update canadapost test to allow for variable OSM and fields counts due to data variability'. Thus, the message is minimally informative and lacks clarity, warranting a low score.","The commit message accurately reflects the change made in the code diff, which relaxes strict equality assertions to inequalities (>=) for osm_count and fields_count. This is a clear and appropriate description of the change, especially since the original test was likely too rigid and may have failed due to variability in real-world data. The message is concise, relevant, and correctly identifies the nature of the update as a relaxation of assertions, which aligns with the actual code modification."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_freegeoip.py,"@@ -10,5 +10,5 @@ def test_freegeoip():
     g = geocoder.freegeoip(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 12
+    assert osm_count >= 3
+    assert fields_count >= 12
",add a regression test for,fix(test_freegeoip): relax osm_count and fields_count assertions,Corrective,"The change addresses and fixes specific assertion failures in tests related to field and count validations, improving test accuracy and reliability.",3.0,2.0,5.0,"The commit message is somewhat relevant to the change, as it mentions allowing more fields to be returned, which aligns with the test modification from exact equality to inequality. However, it lacks specificity about what was changed, why it was changed, and the impact on test reliability. The test now allows for more fields and OSM counts, which could reflect improved data quality, but the message does not clearly explain the rationale or the expected behavior change. It is not misleading, but it is also not detailed or precise enough for a clear understanding of the intent.","The commit message 'add a regression test for' is extremely vague and provides no context about what is being tested, why it's important, or what specific issue it addresses. While the code change does modify a test to use >= instead of exact values (which may reflect a more lenient expectation), the commit message fails to communicate the purpose or significance of the change. A good commit message should explain the intent and impact, especially in a regression test context. Thus, it is only marginally better than poor, earning a score of 2.","The commit message accurately reflects the change in the test: it relaxes the strict equality assertions to inequalities (>=), which is appropriate if the expected values may vary. The message is clear, concise, and directly relates to the change made in the code diff. It correctly identifies the scope (test_freegeoip) and the nature of the change (relaxing assertions), making it excellent for a code review context."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_geocodefarm.py,"@@ -16,8 +16,8 @@ def test_geocodefarm():
         result = geocoder.geocodefarm(location)
         assert result.ok
         osm_count, fields_count = result.debug()[0]
-        assert osm_count == 3
-        assert fields_count == 15
+        assert osm_count >= 3
+        assert fields_count >= 15
 
 
 def test_geocodefarm_reverse():
",fix test_geocodefarm,chore(test): relax osm_count and fields_count assertions in geocodefarm test,Corrective,"The change relaxes assertions in tests to better align with expected behavior, improving test accuracy and allowing for more realistic results, which is a corrective adjustment to test expectations rather than a cosmetic or trivial change.",3.0,2.0,5.0,"The commit message accurately reflects the change in the test assertions, which now use >= instead of exact values, allowing for more fields and OSM counts. However, it lacks context about why the change was made—such as whether the expected values were outdated or if the API behavior changed. The message is clear and relevant but lacks depth or motivation, which limits its completeness. Thus, it is moderately good but not excellent.","The commit message 'fix test_geocodefarm' is overly vague and does not convey the actual change or reason for the update. While the diff shows a modification to the test assertions (changing strict equality to greater-than-or-equal), the message fails to indicate that the test is now more lenient or that it accounts for variability in results. A better message would specify the change, such as 'adjust test_geocodefarm to allow variable OSM and fields counts'. As it stands, the message lacks detail and context, resulting in a low score.","The commit message accurately reflects the change in the test code, which relaxes strict equality assertions to inequalities (>=) for osm_count and fields_count. This is a clear, concise, and relevant description of the change, properly categorized as a chore (maintenance) related to testing. The message is specific, actionable, and aligns with the actual diff, making it excellent for understanding the intent of the change."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_geolytica.py,"@@ -10,5 +10,5 @@ def test_geolytica():
     g = geocoder.geolytica(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 5
-    assert fields_count == 11
+    assert osm_count >= 5
+    assert fields_count >= 11
",improve coverage for geolytica,fix(test_geolytica): relax osm_count and fields_count assertions,Corrective,"The change addresses and relaxes strict assertions in tests, which likely resolves false failures due to stricter expectations, thereby correcting test inaccuracies rather than improving functionality or appearance.",3.0,2.0,5.0,"The commit message is somewhat relevant to the change, as it mentions allowing more fields to be returned, which aligns with the test update that now uses >= instead of exact values. However, it lacks specificity about what changed, why the change was made, and whether the test is more lenient due to expected improvements in result quality. The message is vague and does not clearly explain the intent or impact of the test modification, which reduces its clarity and usefulness. Thus, it is moderately adequate but not excellent.","The commit message 'improve coverage for geolytica' is vague and does not clearly describe the change or its impact. The diff shows a relaxation of strict equality assertions to inequalities (>=), which suggests a more permissive test to account for potential variability in data counts. However, the commit message fails to explain why the change was made, what the original expectations were, or how this improves test coverage. A better message would specify the change (e.g., 'adjusting geolytica debug assertions to be more robust') and clarify the intent behind improving coverage. As a result, the message is technically relevant but lacks specificity and context, warranting a score of 2.","The commit message accurately reflects the change in the test: it relaxes strict equality assertions to inequalities (>=), which is consistent with the diff. The message is concise, clear, and directly describes the purpose of the change—relaxing the assertions—making it easy to understand without additional context. This is an excellent commit message for a test modification."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_geonames.py,"@@ -27,8 +27,8 @@ def test_geonames_query(geonames_response):
     assert len(geonames_response) == 1
     assert geonames_response.status_code == 200
     osm_count, fields_count = geonames_response.debug()[0]
-    assert osm_count == 2
-    assert fields_count == 16
+    assert osm_count >= 2
+    assert fields_count >= 16
 
 
 def test_geonames_first_result(geonames_response):
",add a regression test for,chg(test_geonames_query): relax osm_count and fields_count assertions,Corrective,"The change modifies test assertions to be more lenient (relaxing constraints on osm_count and fields_count), which better aligns with the actual behavior or expected output, correcting potential false failures due to strict expectations.",3.0,2.0,5.0,"The commit message accurately reflects the change in the test assertions, which now use >= instead of exact equality, allowing for more fields and OSM counts. However, it lacks specificity about why the change was made—such as whether it's due to expected growth in data or a response format update. The message is understandable but not detailed enough to fully explain the context or impact, which limits its clarity and usefulness for a code reviewer. Thus, it is moderately accurate but not excellent.","The commit message 'add a regression test for' is extremely vague and provides no context about what is being tested, why it's important, or which issue it addresses. While the diff shows a change in test assertions to use >= instead of exact values, which may indicate a relaxation of expectations (perhaps due to variability in data), the commit message fails to communicate the purpose or significance of the change. A meaningful regression test should describe the specific behavior or edge case being verified. Thus, the message is insufficient and lacks clarity, warranting a low score.","The commit message accurately reflects the change: it relaxes the strict equality assertions in the test from `==` to `>=`, indicating a more permissive expectation for osm_count and fields_count. This aligns with the diff, which removes exact values and replaces them with minimum thresholds. The message is concise, clear, and directly relevant to the change, making it excellent for understanding the intent of the update."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_google.py,"@@ -27,8 +27,8 @@ def test_google():
         assert g.accuracy == 'APPROXIMATE'
         assert str(g.city) == city
         osm_count, fields_count = g.debug()[0]
-        assert osm_count == 3
-        assert fields_count == 15
+        assert osm_count >= 3
+        assert fields_count >= 15
 
 
 def test_issue_294():
",add a regression test for,chore(test): relax osm and fields count assertions,Cosmetic,"The change only relaxes assertion conditions in tests without altering functionality or quality of results, indicating a minor, non-functional update for test robustness.",3.0,2.0,5.0,"The commit message accurately reflects the change in the test assertions, noting that the tests now allow for more fields and OSM counts (using >= instead of exact values). However, it lacks context about why the change was made—such as whether this relates to a known issue or expected improvements in data quality. While the message is clear and relevant to the diff, it is somewhat vague and does not fully explain the motivation or impact of the change, which limits its completeness.","The commit message 'add a regression test for' is extremely vague and provides no context about what is being tested, why it's important, or which issue it addresses. While the diff shows a change in test assertions to use >= instead of exact values, which may indicate a more lenient or realistic test, the message fails to communicate the purpose or significance of the change. A better message would specify the feature, behavior, or issue being tested (e.g., 'add regression test for OSM and field count thresholds in geocoding'). As such, the message is insufficient and lacks clarity, warranting a score of 2.","The commit message accurately reflects the change in the test assertions, clearly indicating that the strict equality checks were relaxed to use '>='. This is a precise and relevant description of the modification. The message is concise, properly categorized as a chore (test-related), and directly aligns with the diff, making it clear to any developer reviewing the change what was modified and why."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_here.py,"@@ -11,8 +11,8 @@ def test_here():
     g = geocoder.here(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 4
-    assert fields_count == 13
+    assert osm_count >= 4
+    assert fields_count >= 13
 
 
 def test_here_reverse():
",add a regression test for,chore(test): relax osm_count and fields_count assertions,Cosmetic,"The change modifies test assertions to be more lenient without altering functionality or behavior, reflecting a minor adjustment for test robustness rather than adding new features or fixing bugs.",3.0,2.0,5.0,"The commit message accurately reflects the change in the test assertions, noting that the tests now allow for more fields and OSM counts instead of strict equality. This is appropriate for a test relaxation that accounts for potential improvements in result quality. However, the message is somewhat vague and lacks context about why the change was made—such as whether this was due to expected API updates or improved data retrieval. It does not explain the impact or rationale behind increasing the thresholds, which would make it more informative. Thus, it is functional but not fully clear or detailed, earning a moderate score.","The commit message 'add a regression test for' is extremely vague and provides no context about what specific issue or feature it addresses. While the diff shows a change in test assertions to use >= instead of exact values, which may indicate a more lenient or dynamic test, the commit message fails to explain the purpose, the problem being tested, or why the change was made. A good commit message should clarify the intent and context, especially for regression testing. Therefore, it receives a score of 2 — insufficient detail but not entirely meaningless.","The commit message accurately reflects the change in the test logic, clearly indicating that the assertions for osm_count and fields_count have been relaxed from exact equality to inequality (>=). This is a precise and relevant description of the change, and the term 'chore(test)' appropriately categorizes it as a test-related maintenance task. The message is concise, clear, and directly matches the diff, making it excellent for understanding the intent of the change."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_ipinfo.py,"@@ -10,5 +10,5 @@ def test_ipinfo():
     g = geocoder.ipinfo(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 4
-    assert fields_count == 12
+    assert osm_count >= 4
+    assert fields_count >= 12
",fix test_ipinfo,fix(test_ipinfo): relax osm_count and fields_count assertions,Corrective,"The change addresses a specific assertion failure in the test by relaxing constraints on osm_count and fields_count, which improves the test's ability to pass under realistic conditions without altering the core functionality.",3.0,2.0,5.0,"The commit message accurately reflects the change in the test—relaxing strict equality assertions to use >=, which allows for more fields and OSM count. However, it lacks specificity about why the change was made (e.g., due to improved data quality or API updates) and does not explain the impact on test robustness. While the message is clear and relevant, it is somewhat vague and does not fully convey the technical reasoning or context, resulting in a moderate score.","The commit message 'fix test_ipinfo' is overly vague and does not convey the actual change or its significance. While the diff shows a modification to the test assertions from exact equality to inequality (>=), which suggests a more permissive validation, the message lacks context about why the change was made. A better message would explain that the test now allows for more variability in the counts, possibly due to dynamic data or expected fluctuations. As such, the message is insufficiently descriptive and fails to communicate the intent or impact of the change, warranting a score of 2.","The commit message accurately reflects the change in the code: it relaxes the strict equality assertions (`==`) to inequalities (`>=`) for `osm_count` and `fields_count`, which indicates a more lenient validation. This is appropriate if the expected values may vary due to environmental or data source differences. The message is clear, concise, and directly relates to the diff, making it excellent for understanding the intent of the change."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_komoot.py,"@@ -12,8 +12,8 @@ def test_komoot():
     assert g.ok
     assert len(g) == 1
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 15
+    assert osm_count >= 3
+    assert fields_count >= 15
 
 
 def test_komoot_multi_result():
",add regression test for,chore(test): relax osm_count and fields_count assertions to >=,Corrective,"The change modifies test assertions to be more permissive (using '>=') instead of strict equality, which better aligns with the actual behavior when result quality improves by returning more fields, thus fixing potential false failures in tests.",3.0,2.0,4.0,"The commit message accurately reflects the change in the test assertions, which now use >= instead of exact equality, allowing for more fields and OSM count. This aligns with the comment about 'allowing the quality of results to increase'. However, the message is somewhat vague and lacks context about why the change was made—such as whether the original values were outdated or if the expected behavior has evolved. It would be more precise if it explained the rationale (e.g., 'adjusting test expectations to account for improved data retrieval'). Thus, it's functional but not fully clear or detailed, resulting in a moderate score.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's important, or which functionality is being regressed. While the diff shows a change in test assertions to use >= instead of exact values, which may suggest a more lenient test (potentially due to data variability), the commit message fails to convey this context. A better message would mention the specific test, the change in expectation (e.g., 'adjusting test to account for variable OSM/field counts'), and the purpose (e.g., 'to ensure minimum data completeness'). Thus, the message is insufficient and only partially informative, warranting a score of 2.","The commit message accurately reflects the change: it relaxes the strict equality assertions to inequalities (>=), which is a reasonable and justified adjustment for test robustness. The message is concise, relevant, and clearly indicates the nature of the change. However, it lacks context about why the relaxation was necessary (e.g., due to data variability or edge cases), which slightly limits its completeness. Overall, it is clear and appropriate for a test modification, earning a strong 4."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_mapbox.py,"@@ -12,8 +12,8 @@ def test_mapbox():
     g = geocoder.mapbox(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 2
-    assert fields_count == 11
+    assert osm_count >= 2
+    assert fields_count >= 11
 
 
 def test_mapbox_reverse():
",add regression test for,fix(test_mapbox): relax osm_count and fields_count assertions,Corrective,"The change addresses and fixes specific assertion failures in test_mapbox by relaxing constraints on osm_count and fields_count, which improves test accuracy and allows for better results without introducing regressions.",3.0,2.0,5.0,"The commit message accurately reflects the change in the test assertions, noting that the tests now allow for more fields and osm_count rather than strict equality. This aligns with the diff, which changes `==` to `>=` to account for potential improvements in result quality. However, the message is somewhat vague and lacks context about why the change was made—such as whether this reflects a real-world improvement in the API or a response to a known issue. It also doesn't mention the specific test or the impact on test robustness. Therefore, it's clear and relevant but not detailed or insightful enough for an excellent score.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what exactly is being tested, why it's important, or which issue it addresses. While the diff shows a change in test assertions to use >= instead of exact values, which may reflect a more robust test, the commit message fails to communicate the purpose or context of the change. A better message would specify the feature or behavior being tested (e.g., 'add regression test for Mapbox geocoding response fields count'). Therefore, it receives a score of 2 for being minimally descriptive but lacking meaningful context.","The commit message accurately reflects the change in the code: it relaxes the strict equality assertions for osm_count and fields_count to inequalities (>=), which aligns with the purpose of the fix. The message is concise, clear, and directly describes the nature of the change, making it easy to understand without additional context. This is an excellent commit message for a test modification."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_mapquest.py,"@@ -12,8 +12,8 @@ def test_mapquest():
     g = geocoder.mapquest(location, timeout=10)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 10
+    assert osm_count >= 3
+    assert fields_count >= 10
 
 
 def test_mapquest_reverse():
",add a regression test for,chore(test): relax osm_count and fields_count assertions,Cosmetic,"The change only modifies test assertions to be more lenient without altering functionality or behavior, reflecting a minor, non-functional update to test expectations.",3.0,2.0,5.0,"The commit message accurately reflects the change in the test assertions, which now use >= instead of exact equality, allowing for more fields and OSM count. However, it lacks context about why the change was made—such as whether the API behavior changed or if it's due to improved data quality or a more permissive test. While the message is clear and relevant, it is somewhat vague and does not explain the motivation or impact, which reduces its completeness. Therefore, it is neither poor nor excellent, but moderate in quality.","The commit message 'add a regression test for' is extremely vague and provides no context about what is being tested, why it was added, or which issue it addresses. While it correctly indicates a test addition, it lacks specificity and technical detail. The diff shows a change in test assertions from exact equality to inequality (>=), which suggests a relaxation of expectations—this change is not explained in the message. A good commit message should clarify the purpose, impact, and reasoning behind the change. Therefore, the message is minimally informative and falls short of being useful for understanding the commit's intent.","The commit message accurately reflects the change in the test assertions, clearly stating that the assertions for osm_count and fields_count have been relaxed from exact equality to greater-than-or-equal comparisons. This is a precise and relevant description of the change, and it aligns with the diff showing the replacement of `==` with `>=`. The message is concise, specific, and appropriately categorized as a chore (maintenance) related to testing. It provides sufficient context for understanding the purpose and nature of the change without unnecessary detail."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_mapzen.py,"@@ -9,8 +9,8 @@ def test_mapzen():
     g = geocoder.mapzen(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 12
+    assert osm_count >= 3
+    assert fields_count >= 12
 
 
 def test_mapzen_reverse():
",add regression test for mapzen,fix(test_mapzen): relax osm_count and fields_count assertions,Corrective,"The change relaxes assertions related to field and count limits, which likely resolves a failure in test validation due to stricter expectations, thereby fixing a test issue rather than improving functionality or quality.",3.0,3.0,5.0,"The commit message accurately reflects the change in the test logic—changing strict equality assertions to greater-than-or-equal assertions—to account for potentially improved result quality. However, it lacks specificity about why the change was made (e.g., due to API updates, increased data availability, or changes in behavior), and does not explain the impact on test robustness or reliability. While the message is clear and relevant, it is somewhat vague and could be more informative. Thus, it is neither poor nor excellent, but moderately adequate.","The commit message 'add regression test for mapzen' is vague and does not convey the specific changes or their significance. The diff shows a modification to the test case where exact assertions (==) are replaced with relaxed ones (>=), which suggests a change in expectations—possibly due to dynamic or variable data output. However, the commit message fails to explain why the change was made, what the original test was verifying, or how this relates to regression testing. A better message would indicate the nature of the change (e.g., 'update mapzen test to account for variable OSM and field counts') and its purpose. Thus, while the message is technically correct in stating a test addition, it lacks detail and context, resulting in a moderate score.","The commit message accurately reflects the change in the code: it relaxes the strict equality assertions for osm_count and fields_count to use '>=', which is a logical and appropriate adjustment when the exact values may vary. The message is concise, clear, and directly relates to the diff, indicating a fix that improves robustness by making assertions more forgiving. This is an excellent commit message for a code change that modifies test expectations."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_maxmind.py,"@@ -9,5 +9,5 @@ def test_maxmind():
     g = geocoder.maxmind(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 1
-    assert fields_count == 14
+    assert osm_count >= 1
+    assert fields_count >= 14
",add regression test for,fix(test_maxmind): relax osm_count and fields_count assertions,Corrective,"The change addresses and fixes specific assertion failures in tests related to osm_count and fields_count, improving test accuracy and reliability.",3.0,2.0,5.0,"The commit message is somewhat relevant to the change, as it mentions allowing more fields to be returned, which aligns with the test modification that now uses >= instead of exact values. However, it lacks specificity about why the change was made—such as whether this reflects a real-world improvement in data quality or a test relaxation due to expected variability. The message is not overly vague, but it doesn't clearly explain the impact or intent behind the test update. Therefore, it is functional but not excellent.","The commit message 'add regression test for' is extremely vague and provides no context about what is being tested, why it's important, or what specific behavior it covers. While the diff shows a change in a test that adjusts expectations from exact values to minimum values (which may be due to a regression or a more flexible test), the commit message fails to explain the purpose or significance of this change. A better message would specify the test's intent, such as 'update maxmind test to handle variable OSM and fields counts with minimum thresholds'. As it stands, the message lacks detail and clarity, earning a score of 2.","The commit message accurately reflects the change in the test: it relaxes the strict equality assertions to inequalities (>=), which is appropriate if the test is meant to be more lenient due to potential variations in data or implementation. The message is concise, clear, and directly describes the nature of the change, making it easy to understand the intent without ambiguity. This is an excellent commit message for a test modification."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_opencage.py,"@@ -21,8 +21,8 @@ def test_opencage():
     assert g.city == 'Ottawa'
     assert g.town == 'Ottawa'
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 23
+    assert osm_count >= 3
+    assert fields_count >= 23
 
 
 def test_issue_292():
",add regression test for,chore(test): relax osm and fields count assertions,Cosmetic,"The change modifies test assertions to be more lenient without altering functionality, reflecting a minor adjustment in test expectations rather than improving semantics, correctness, or behavior.",3.0,2.0,5.0,"The commit message accurately reflects the change in the test assertions, noting that the tests now allow for more fields (using >= instead of exact values). However, it lacks context about why the change was made—such as whether this relates to improved data quality, a bug fix, or a response to a specific issue (e.g., issue #292). While the message is clear and relevant to the diff, it is somewhat vague and does not fully explain the impact or motivation behind the change, which limits its completeness and clarity.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what feature, bug, or behavior the test is addressing. While the diff shows a change in test assertions (making them less strict with >= instead of exact values), the message fails to communicate the purpose or context of the change. A better message would specify the issue being tested (e.g., 'add regression test for issue #292: OSM and field count validation'). Thus, the message is insufficient and only provides minimal context, warranting a score of 2.","The commit message accurately reflects the change in the test assertions, which were relaxed from exact equality to greater-than-or-equal comparisons. This is a clear, concise, and relevant description of the modification. The message is appropriate for a chore (testing) change and correctly communicates the intent without unnecessary detail. The diff supports this by showing the change from strict assertions to more permissive ones, which aligns perfectly with the commit message."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_osm.py,"@@ -11,8 +11,8 @@ def test_osm():
     g = geocoder.osm(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 21
+    assert osm_count >= 3
+    assert fields_count >= 21
 
 
 def test_osm_reverse():
",add a regression test for,chore(test): relax assert conditions for OSM debug counts,Cosmetic,"The change modifies test assertions to be more lenient for OSM debug counts, which is a minor adjustment to test behavior without altering functionality or quality of results, making it a cosmetic improvement.",3.0,2.0,5.0,"The commit message accurately reflects the change in the test assertions, which now use >= instead of exact values, allowing for more fields to be returned. This aligns with the stated goal of accommodating improved result quality. However, the message is somewhat vague and lacks context about why the change was necessary (e.g., due to API updates or increased data availability). It also doesn't explicitly mention the test modification or the technical impact. While it's correct in intent, it could be more precise and informative for developers unfamiliar with the codebase.","The commit message 'add a regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it was added, or which issue it addresses. While the code change does add a test (a more lenient assertion), the message fails to provide context or value. A better message would mention the specific behavior being tested (e.g., 'add regression test for OSM geocoding debug output counts'). Thus, it receives a score of 2 for being minimally informative but lacking clarity and purpose.","The commit message accurately reflects the change in the test logic, clearly indicating that the assert conditions for OSM debug counts have been relaxed from exact equality to inequality (>=). This is relevant and directly tied to the diff, which shows the replacement of `==` with `>=` in the assertions. The message is concise, specific, and appropriately categorized as a chore (maintenance) related to testing. It provides sufficient context for understanding the purpose and impact of the change without overreaching."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_ottawa.py,"@@ -9,8 +9,8 @@ def test_ottawa():
     g = geocoder.ottawa(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 10
+    assert osm_count >= 3
+    assert fields_count >= 10
 
 
 def test_multi_results():
",add regression test for,fix(test_ottawa): relax osm_count and fields_count assertions,Corrective,"The change relaxes assertions related to field and count values, which likely resolves a failure in test cases due to stricter expectations, thereby fixing a test inconsistency rather than improving functionality or quality.",3.0,2.0,5.0,"The commit message correctly reflects a change in the test expectations, noting that the test now allows for more fields and OSM count rather than strict equality. However, it lacks specificity about why the change was made—such as whether this is due to data improvements, API changes, or expected growth in results. While the message is accurate and relevant, it is vague and does not provide context about the underlying issue or impact, which reduces its completeness. Therefore, it is moderately clear but not excellent.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it was added, or which issue it addresses. While the diff shows a change in a test that now uses >= instead of exact values, the message fails to communicate the purpose or context of the change. A better message would specify the feature or behavior being tested (e.g., 'add regression test for Ottawa geocoding results count'). Therefore, it receives a score of 2 for being minimally informative but lacking clarity and context.","The commit message accurately reflects the change: it relaxes the strict equality assertions in the test case to use '>=', which is appropriate if the test is meant to account for variability in the number of OSM entries or fields. The message is concise, clear, and directly relates to the diff, indicating a meaningful improvement in test robustness. It correctly identifies the scope (test_ottawa) and the nature of the change (relaxing assertions), making it excellent for a code reviewer."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_session.py,"@@ -17,8 +17,8 @@ def test_session():
         g = geocoder.google(address, session=session)
         assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 4
-    assert fields_count == 16
+    assert osm_count >= 4
+    assert fields_count >= 16
 
 
 def test_session_called():
",add regression test for,changed(test): relax osm_count and fields_count assertions,Corrective,"The change relaxes assertions on osm_count and fields_count, which likely addresses a strict test condition that was preventing accurate evaluation of results, thereby correcting a potential failure in test validation.",2.0,2.0,4.0,"The commit message is vague and does not clearly explain the change or its purpose. While it mentions allowing 'quality of results to increase' and 'more fields returned', it lacks specificity about why the assertion changed from exact equality to inequality. The diff shows a relaxation of test expectations (from == to >=), which implies a change in test robustness, but the message fails to communicate this clearly or justify the reasoning. A better message would explain that the test is now more lenient to account for potential improvements in data retrieval or field counts. Thus, it is only moderately informative and lacks technical clarity.","The commit message 'add regression test for' is extremely vague and provides no context about what is being tested, why it was added, or which issue it addresses. While it correctly indicates a test addition, the lack of specificity makes it insufficient for understanding the purpose or impact of the change. A better message would include the feature or behavior being tested and the reason for the test (e.g., 'add regression test for OSM count and field count to ensure minimum expected values are met'). Therefore, it receives a score of 2 for being technically correct but lacking meaningful detail.","The commit message accurately reflects the change: it relaxes the strict equality assertions to inequalities (>=), which aligns with the code modification. The message is concise, relevant, and clearly communicates the intent of the change. However, it lacks context about why the relaxation was necessary (e.g., due to variability in data or environment differences), which slightly limits its completeness. Overall, it is clear and appropriate for a code change, earning a solid 4."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_tamu.py,"@@ -14,5 +14,5 @@ def test_tamu():
         zipcode='94105')
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 5
-    assert fields_count == 28
+    assert osm_count >= 5
+    assert fields_count >= 28
",add a test case for,chore(test): relax osm and fields count assertions,Cosmetic,"The change modifies test assertions to be more lenient without altering functionality, focusing on test structure and maintainability rather than behavior or quality of results.",3.0,2.0,4.0,"The commit message accurately reflects the change in the test—adjusting strict equality assertions to use 'greater than or equal' to allow for potentially improved results. However, it lacks specificity about why the change was made (e.g., due to data updates, API changes, or improved data retrieval). While the message is clear and relevant to the diff, it does not provide context about the expected improvement in quality or the rationale behind relaxing the assertions. This makes it somewhat adequate but not fully explanatory, resulting in a moderate score.","The commit message 'add a test case for' is extremely vague and provides no context about what was added, why it was added, or what the test case is testing. While the diff shows a change in the test to use >= instead of exact values, the commit message fails to communicate the purpose or significance of this change. A better message would explain that the test now allows for variability in counts (e.g., 'update test to account for potential variations in OSM and field count data'). As such, the message is insufficient and lacks clarity, warranting a low score.","The commit message accurately reflects the change: it relaxes strict equality assertions to inequalities (>=), indicating a more lenient test condition. This is appropriate for a test update, especially if the actual counts may vary due to data changes or external factors. The message is clear, concise, and contextually relevant. However, it lacks detail about why the relaxation was necessary (e.g., due to data variability or upstream changes), which slightly limits its completeness. Overall, it is good but not excellent."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_tomtom.py,"@@ -9,8 +9,8 @@ def test_tomtom():
     g = geocoder.tomtom(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count == 3
-    assert fields_count == 13
+    assert osm_count >= 3
+    assert fields_count >= 13
 
 
 def test_multi_results():
",add regression test for,chore(test): relax osm_count and fields_count assertions,Cosmetic,"The change modifies test assertions to be more lenient without altering functionality or behavior, reflecting a minor adjustment for test clarity or robustness rather than improving correctness or semantics.",2.0,2.0,5.0,"The commit message is vague and does not clearly explain the change or its purpose. While it mentions 'allow the quality of results to increase', the actual change in the test (changing strict equality to >=) suggests a relaxation of expectations, which may indicate a shift in testing assumptions rather than an improvement in result quality. The message fails to provide context about why the change was made, what it affects, or how it relates to the functionality. A better message would explain that test thresholds were relaxed to account for potential improvements in field count or OSM count due to updates in the service or data handling.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it was added, or which issue it addresses. While the diff shows a change in test assertions to use >= instead of exact values, which may reflect a more lenient or realistic expectation, the commit message fails to convey this context. A good commit message should explain the purpose and impact of the change. Therefore, it receives a score of 2 for being minimally informative but lacking clarity and context.","The commit message accurately reflects the change in the code: it relaxes strict equality assertions (`==`) to inequality assertions (`>=`) for `osm_count` and `fields_count`, which indicates a more permissive test behavior. The message is concise, relevant, and clearly communicates the nature of the change as a test adjustment. Given that the change is focused on test relaxation and the message directly describes the impact, it is excellent and aligns well with conventional commit message standards."
45de2743e7ae60b3bf050bf9cec75f360d4b9e5f,change tests to allow the quality of results to increase (more fields returned),tests/test_w3w.py,"@@ -11,7 +11,7 @@ def test_w3w():
     assert g.ok
     osm_count, fields_count = g.debug()[0]
     assert osm_count == 0
-    assert fields_count == 7
+    assert fields_count >= 7
 
 
 def test_w3w_reverse():
",fix w3c test,fix(test_w3w): assert fields_count is at least 7,Corrective,"The new message indicates a fix to ensure the test asserts a minimum number of fields, addressing a potential deficiency in the test's validation logic, which improves correctness and reliability.",3.0,2.0,4.0,"The commit message indicates a change in the test to allow more fields to be returned, which aligns with the code diff that changes an exact equality assertion (`assert fields_count == 7`) to a greater-than-or-equal assertion (`assert fields_count >= 7`). This suggests the test is now more lenient, accommodating potential improvements in result quality. However, the message is somewhat vague and lacks context about why the change was made—such as whether this reflects a feature enhancement, bug fix, or expected behavior shift. While the change is reasonable and technically sound, the commit message does not clearly explain the motivation or impact, which reduces its clarity and completeness. Thus, it is neither poor nor excellent, but moderate in quality.","The commit message 'fix w3c test' is highly misleading and inaccurate. The code change modifies a test to assert `fields_count >= 7` instead of exactly `7`, which suggests a relaxation of a condition, possibly due to expected variability in data. However, the message refers to 'w3c' (which is likely a typo for 'w3w', as the test is named `test_w3w`) and incorrectly implies a bug fix rather than a test adjustment. The message lacks specificity, context, and correctness, making it poorly informative. A better message would clarify the actual change, such as 'adjust test to account for variable field count in w3w'. Thus, it receives a score of 2 for being technically incorrect and vague.","The commit message is clear and relevant, accurately reflecting the change made in the code: the assertion was updated from a strict equality to a greater-than-or-equal check, which better accommodates potential future changes in field counts. The message uses the correct format 'fix(test_w3w):' and clearly states what was fixed. However, it could be slightly improved by mentioning why the change was necessary (e.g., due to dynamic field generation or backward compatibility), which would make it more informative. Overall, it is accurate, concise, and appropriate for the change, earning a strong 4."
535feea845fa52ad392d958bdfa95d06c688ddc5,fixing number of expected restults for tomtom provider,tests/test_tomtom.py,"@@ -9,8 +9,8 @@ def test_tomtom():
     g = geocoder.tomtom(location)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
-    assert osm_count >= 3
-    assert fields_count >= 13
+    assert osm_count >= 2
+    assert fields_count >= 12
 
 
 def test_multi_results():
",add regression test for,fix(test_tomtom): reduce osm_count and fields_count minimum thresholds,Corrective,"The change addresses a specific issue by adjusting minimum thresholds for osm_count and fields_count in the test for Tomtom, ensuring accurate results and fixing potential mismatches in expected outcomes.",3.0,2.0,3.0,"The commit message indicates a change in expected result counts for the TomTom provider, which is relevant to the code diff. However, it lacks specificity about why the numbers were changed (e.g., due to API updates, testing adjustments, or data changes) and does not explain the impact or context. While it correctly identifies the nature of the change, it is too vague to be considered excellent. It is accurate and relevant but lacks depth, earning a moderate score.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what exactly is being tested, why the test was added, or what issue it addresses. While the diff shows a change in test expectations (reducing thresholds from 3/13 to 2/12), the commit message fails to connect this change to any specific problem, feature, or regression. A meaningful commit message should provide context about the purpose and impact of the change, which is missing here.","The commit message is accurate and relevant to the changes made, as it correctly identifies the fix in the test case for TomTom geocoding. However, it lacks context about why the thresholds were reduced (e.g., due to changes in API behavior, testing environment, or data variability), which would improve clarity. While the message is concise and properly formatted, it does not provide sufficient motivation or background for the change, limiting its completeness. Thus, it is functional but not excellent."
c77ba080d5a9837d73485b6bbb299bf92c4893e9,"Fix issue #315, a regression on custom params and headers (PR #248)",geocoder/base.py,"@@ -388,12 +388,12 @@ class MultipleResultsQuery(MutableSequence):
         self.proxies = kwargs.get('proxies', '')
         self.session = kwargs.get('session', requests.Session())
         # headers can be overriden in _build_headers
-        self.headers = kwargs.get(
-            'headers', self._build_headers(provider_key, **kwargs))
+        self.headers = self._build_headers(provider_key, **kwargs).copy()
+        self.headers.update(kwargs.get('headers', {}))
         # params can be overriden in _build_params
-        # it is an OrderedDict in order to preserver the order of the url query parameters
-        self.params = OrderedDict(kwargs.get(
-            'params', self._build_params(location, provider_key, **kwargs)))
+        # it is an OrderedDict in order to preserve the order of the url query parameters
+        self.params = OrderedDict(self._build_params(location, provider_key, **kwargs))
+        self.params.update(kwargs.get('params', {}))
 
         # results of query (set by _connect)
         self.status_code = None
",add more documentation to multipleresultsquery,docs(multiple-results-query): update headers and params to preserve order and allow overrides,Corrective,"The update addresses a regression by ensuring headers and params preserve order and allow overrides, fixing a functional issue in query handling.",3.0,1.0,3.0,"The commit message references a fix for issue #315 and mentions a regression related to custom params and headers, which aligns with the changes in the code. However, the message is vague about the nature of the regression and does not clearly explain what was fixed or why the change is important. The diff shows that headers and params are now properly merged with user-provided values using .copy() and .update(), which improves correctness and order preservation. While the fix is valid and relevant, the commit message lacks specific details about the problem (e.g., order loss, missing overrides) or the impact, making it only moderately informative. Thus, it receives a score of 3 — adequate but not excellent.","The commit message 'add more documentation to multipleresultsquery' is highly inconsistent with the actual changes in the diff. The diff shows modifications to the code, specifically changes in how headers and params are initialized and updated, including the use of .copy() and .update(), as well as improved documentation of the OrderedDict usage. These are substantive code changes involving logic and structure, not just documentation. Therefore, the commit message fails to accurately reflect the nature and scope of the changes, making it misleading and inadequate.","The commit message mentions updating headers and params to preserve order and allow overrides, which is partially accurate. However, it lacks specificity about the actual changes made—such as the use of `.copy()` and `.update()` for headers and the use of `OrderedDict` for params—and does not clearly convey that the changes improve order preservation or allow overriding of built defaults. The message is too vague and doesn't fully reflect the technical impact of the diff, which includes structural changes to how headers and params are constructed and updated. Therefore, it is only moderately informative and falls short of being excellent."
9851579ef6514edf05c6af19aa5fd1f029405cbb,Change documentation to url provided by David Masclet,geocoder/gisgraphy.py,"@@ -54,7 +54,7 @@ class GisgraphyQuery(MultipleResultsQuery):
 
     API Reference
     -------------
-    http://www.gisgraphy.com/documentation/api/
+    http://www.gisgraphy.com/documentation/user-guide.php
     """"""
     provider = 'gisgraphy'
     method = 'geocode'
",add missing doc block,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that needs to be fixed, which aligns with a corrective change rather than a cosmetic or semantic update.",3.0,2.0,1.0,"The commit message is brief and mentions the change but lacks specific details such as what was changed, why it was changed, and who the change was for. While it correctly states that the documentation URL was updated, it does not provide context about the source of the URL (e.g., David Masclet) or the reason for the change (e.g., the API documentation was outdated or moved). A more detailed message would improve clarity and maintainability. Thus, it is functional but not comprehensive, earning a moderate score.","The commit message 'add missing doc block' is vague and does not convey the specific change or its significance. While it correctly identifies that a doc block was added, it lacks detail about what was changed (e.g., the URL was updated from the API reference to the user guide) and why. A better message would specify the update to the documentation URL and its relevance. Thus, it is only minimally informative and falls short of being clear or meaningful for context.","The commit message 'fix: rectification failed' is highly inadequate. It does not describe what was actually fixed, lacks context, and uses vague terminology ('rectification failed') that is not clear to anyone reading it. The diff shows a simple update of a URL in the documentation from an API reference to a user guide, which is a straightforward change. A proper commit message should explain the change in plain language, such as 'update API reference URL to point to user guide'. Therefore, the message is poor and fails to convey any meaningful information about the change."
9851579ef6514edf05c6af19aa5fd1f029405cbb,Change documentation to url provided by David Masclet,geocoder/gisgraphy_reverse.py,"@@ -23,7 +23,7 @@ class GisgraphyReverse(GisgraphyQuery):
 
     API Reference
     -------------
-    http://www.gisgraphy.com/documentation/api/
+    http://www.gisgraphy.com/documentation/user-guide.php
     """"""
     provider = 'gisgraphy'
     method = 'reverse'
",add docs to the reverse example,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs fixing, which aligns with a corrective change rather than a cosmetic or semantic update.",2.0,2.0,2.0,"The commit message is too vague and lacks specific details about the change. While it mentions a URL update, it does not indicate what was changed, why, or how it impacts the code or users. A better message would specify the exact URL change and reference the source (e.g., David Masclet) in a more contextual way. The message is minimally informative and fails to provide sufficient context for understanding the purpose of the change, hence a score of 2.","The commit message 'add docs to the reverse example' is overly vague and does not accurately reflect the change. The diff shows a replacement of an API reference URL from a deprecated documentation page to a user guide page, which is a more specific update. The message fails to convey the actual change in content or purpose, making it unclear what was modified or why. A better message would specify the update to the API reference URL. Thus, it receives a score of 2 for being minimally informative but lacking precision.","The commit message 'fix: rectification failed' is vague and does not clearly describe the change or its purpose. While it indicates a fix, the term 'rectification failed' is ambiguous and not directly related to the actual diff, which simply updates a URL in the API reference from one documentation page to another. A better message would explicitly state the change, such as 'fix: update API reference URL to user-guide.php'. The current message provides little context about what was fixed or why, making it insufficient for understanding the change's intent."
f7d5028468477b414f230dec6d40f78c53f2b6bd,Fix failing tests,geocoder/gisgraphy.py,"@@ -66,7 +66,7 @@ class GisgraphyQuery(MultipleResultsQuery):
     def _build_params(self, location, provider_key, **kwargs):
         return {
             'address': location,
-            'to': kwargs.get('maxRows', 1),
+            'limitnbresult': kwargs.get('maxRows', 1),
             'format': 'json',
         }
 
",add json format to gisgraphy query,feat(gisgraphy): use limitnbresult instead of to in query params,Corrective,"The change replaces a failing query parameter ('to') with a more appropriate one ('limitnbresult'), addressing a specific bug or test failure in the GISGraphy module.",2.0,2.0,4.0,"The commit message 'Fix failing tests' is overly vague and provides no context about what was actually fixed or why. While the diff shows a simple parameter name change from 'to' to 'limitnbresult', the commit message fails to explain the change or its purpose. A better message would specify the issue (e.g., 'Fix GisgraphyQuery parameter mapping to use correct API field limitnbresult instead of to'). Since the message lacks technical detail and context, it only scores a 2 — it indicates a fix occurred but doesn't communicate the significance or reasoning behind it.","The commit message is highly inaccurate and does not reflect the actual change. The diff shows a change in parameter name from 'to' to 'limitnbresult', which is related to the number of results, not adding JSON format. The message 'add json format to gisgraphy query' is misleading and incorrect, as the format is already specified as 'json' in the code. The change is about parameter naming, not adding JSON format. Therefore, the message is poor and fails to describe the actual change, warranting a low score.","The commit message is clear and relevant, accurately reflecting the change made in the code — replacing 'to' with 'limitnbresult' in the query parameters. It specifies the feature area (gisgraphy) and the exact change. However, it lacks context about why the change was made (e.g., API documentation, deprecation, or compatibility), which slightly limits its completeness. Overall, it is well-written and actionable, making it a strong commit message."
f7d5028468477b414f230dec6d40f78c53f2b6bd,Fix failing tests,tests/test_gisgraphy.py,"@@ -13,7 +13,7 @@ def test_gisgraphy():
     assert len(g) == 1
     osm_count, fields_count = g.debug()[0]
     assert osm_count >= 3
-    assert fields_count >= 15
+    assert fields_count >= 9
 
 
 def test_gisgraphy_multi_result():
",add test for multi-result ggisgraphy,fix(gisgraphy): reduce minimum fields count from 15 to 9,Corrective,"The change addresses a specific issue by reducing the minimum fields count, which likely resolves a test failure related to field validation or data requirements.",2.0,2.0,4.0,"The commit message 'Fix failing tests' is overly vague and provides no context about what was fixed, why it was fixed, or which specific test or behavior was affected. The diff shows a change in an assertion threshold from 15 to 9 for `fields_count`, suggesting a more specific fix related to expected field counts in GIS data. A better message would indicate the change in expectation and the rationale (e.g., 'Adjust fields_count threshold from 15 to 9 due to reduced field count in GISGraphy output'). As it stands, the message lacks detail and technical context, making it only marginally informative.","The commit message 'add test for multi-result ggisgraphy' is vague and does not accurately reflect the actual change. The diff shows a modification to an existing test function (test_gisgraphy) that reduces the expected value of fields_count from 15 to 9, not the addition of a new test for multi-result functionality. The message fails to describe what was actually changed or why, making it misleading and insufficient for understanding the commit's purpose. Therefore, it receives a score of 2 (Fair) for lack of clarity and accuracy.","The commit message accurately reflects the change made in the code: it reduces the minimum required fields count from 15 to 9 in the test for gisgraphy. The message is clear, concise, and directly related to the diff. It includes the appropriate context (fix, gisgraphy, and the specific change). However, it could be slightly more detailed by mentioning why the change was made (e.g., due to observed data or test stability), but as it stands, it is well-written and sufficient for a typical code review. Therefore, it earns a strong 4."
97cc60106517c6b6bf5f241caf7e38b101e82a38,MapQuest: fixing key parameter in reverse method,geocoder/mapquest_reverse.py,"@@ -33,7 +33,7 @@ class MapquestReverse(MapquestQuery):
 
     def _build_params(self, location, provider_key, **kwargs):
         return {
-            'key': self._get_api_key(mapquest_key),
+            'key': provider_key,
             'location': str(Location(location)),
             'maxResults': 1,
             'outFormat': 'json',
",update mapquest_reverse.py,feat(mapquest): use provider_key instead of hardcoded api key,Corrective,"The change replaces a hardcoded API key with a configurable provider_key, improving security and maintainability by avoiding hardcoding sensitive information and aligning with best practices for API key management.",3.0,2.0,4.0,"The commit message is somewhat relevant but lacks detail. It correctly identifies the change as fixing a key parameter in the MapQuest reverse method, which aligns with the diff. However, it does not explain why the change was necessary (e.g., replacing hardcoded key with provider_key), nor does it clarify the impact or context. A stronger message would include the reason for the change, such as 'Fixing key parameter to use provider_key instead of hardcoded API key for better key management and flexibility.' As it stands, the message is accurate but minimal, earning a mid-level score.","The commit message ""update mapquest_reverse.py"" is extremely vague and provides no information about what was changed or why. While the diff shows a clear change in the parameter used for the API key (from using a private `_get_api_key` method to using the `provider_key` directly), the commit message fails to communicate this context. A better message would specify the change, such as 'Use provider_key directly in MapquestReverse instead of internal key retrieval'. Therefore, it receives a score of 2 for lacking detail and clarity.","The commit message is clear and relevant, indicating a feature change that replaces a hardcoded API key with a provider_key, which improves flexibility and security. However, it could be slightly more precise by mentioning the context of the change (e.g., removing hardcoded keys in favor of dynamic injection) or the benefit (e.g., better key management). Still, it effectively communicates the intent and is well-aligned with the diff. Thus, it receives a strong 4 rather than an excellent 5."
467c6b214e2f3c350cd954cc03c632a385196be7,Change documentation to url provided by David Masclet,geocoder/gisgraphy.py,"@@ -54,7 +54,7 @@ class GisgraphyQuery(MultipleResultsQuery):
 
     API Reference
     -------------
-    http://www.gisgraphy.com/documentation/api/
+    http://www.gisgraphy.com/documentation/user-guide.php
     """"""
     provider = 'gisgraphy'
     method = 'geocode'
",add missing doc block,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs to be fixed, which aligns with a corrective change rather than a cosmetic or semantic update.",3.0,2.0,2.0,"The commit message is brief and mentions the change but lacks specific details such as why the URL was changed, who requested it, or the context of the update. While it correctly states the action taken ('Change documentation to url provided by David Masclet'), it does not provide enough context to be considered excellent. It is accurate and relevant, but lacks depth or clarity about the impact or reasoning, which limits its completeness. A score of 3 reflects a moderately adequate message that is correct but insufficiently informative.","The commit message 'add missing doc block' is vague and does not clearly convey the change or its significance. While it correctly identifies that a documentation block was added, it lacks specificity about what was changed (e.g., the URL was updated from the API reference to the user guide) and why. A better message would explain the update to the URL and its relevance. Thus, it is only minimally informative and falls short of being clear or useful for understanding the context of the change.","The commit message 'fix: rectification failed' is vague and does not clearly describe the change or its purpose. While it indicates a fix, the term 'rectification failed' is ambiguous and not directly related to the actual change in the code diff, which simply updates a URL in the documentation from an API reference to a user guide. A better message would specify the change, such as 'fix: update Gisgraphy API reference URL to user-guide.php'. Therefore, the message is minimally informative and lacks clarity, warranting a score of 2."
467c6b214e2f3c350cd954cc03c632a385196be7,Change documentation to url provided by David Masclet,geocoder/gisgraphy_reverse.py,"@@ -23,7 +23,7 @@ class GisgraphyReverse(GisgraphyQuery):
 
     API Reference
     -------------
-    http://www.gisgraphy.com/documentation/api/
+    http://www.gisgraphy.com/documentation/user-guide.php
     """"""
     provider = 'gisgraphy'
     method = 'reverse'
",add docs to the reverse example,docs(gisgraphy): update API reference link to user-guide,Semantic,The new message specifies a more precise and contextual update—changing the API reference link to the user-guide—improving clarity and intent compared to the vague original message.,2.0,2.0,4.0,"The commit message is insufficiently detailed. While it acknowledges a change in documentation URL, it lacks context such as why the change was made, who requested it (David Masclet), and whether this was a correction or update. The message is too vague to be meaningful for a code review or audit, and does not clearly link to the actual change in the diff. A better message would specify the old vs. new URL and the reason for the change.","The commit message 'add docs to the reverse example' is vague and does not accurately reflect the change. The diff shows a replacement of an API reference URL from a deprecated or incorrect one to a correct user guide URL. The message fails to convey the actual change—specifically, updating the API documentation link to point to the correct user guide—making it misleading and insufficient. A better message would specify the update to the reference URL. Thus, it receives a score of 2 for being technically incorrect and under-communicative.","The commit message is clear and relevant, indicating a documentation update to the API reference link. It correctly identifies the scope ('docs(gisgraphy)') and the specific change ('update API reference link to user-guide'). However, it could be slightly more precise by mentioning the reason for the change (e.g., the user-guide is the current official documentation) or noting that the link was updated from the old API page to the user-guide. Despite this minor gap, the message is accurate, concise, and sufficient for understanding the change."
2f6fe82e37911d9afefd781313f1783f733b4d2d,Fix failing tests,geocoder/gisgraphy.py,"@@ -66,7 +66,7 @@ class GisgraphyQuery(MultipleResultsQuery):
     def _build_params(self, location, provider_key, **kwargs):
         return {
             'address': location,
-            'to': kwargs.get('maxRows', 1),
+            'limitnbresult': kwargs.get('maxRows', 1),
             'format': 'json',
         }
 
",add json format to gisgraphy query,feat(gisgraphy): replace to with limitnbresult in params,Corrective,"The change addresses a specific bug by replacing 'to' with 'limitnbresult' in the parameters, which corrects a failing test by aligning the parameter name with the expected behavior.",2.0,2.0,3.0,"The commit message 'Fix failing tests' is overly vague and provides no context about what was actually fixed or why. The diff shows a simple parameter name change from 'to' to 'limitnbresult' in the query parameters, which suggests a specific bug related to Gisgraphy's API expectations. A better message would indicate the exact change (e.g., 'Fix Gisgraphy API parameter name mismatch by replacing 'to' with 'limitnbresult'') and its impact. While the message correctly indicates a fix, it lacks technical detail and fails to explain the problem or solution, resulting in a low score.","The commit message is overly vague and does not accurately reflect the changes made. The diff shows a change in parameter name from 'to' to 'limitnbresult' in the Gisgraphy query parameters, and the task description mentions adding JSON format, which is already present in the code. The message fails to mention the actual parameter rename or the purpose of the change, making it misleading and incomplete. A better message would clarify that the 'to' parameter was renamed to 'limitnbresult' to match Gisgraphy's API expectations. Therefore, the score is 2 for being technically incorrect and lacking clarity.","The commit message is clear and identifies the change (replacing 'to' with 'limitnbresult') and the context (feat(gisgraphy)). However, it lacks detail about why the change was made, such as if it was due to a API specification update or a known issue. While the change is technically accurate and relevant, the message does not provide sufficient context or motivation to be considered excellent. It is accurate and relevant but could be improved with more detail about the reasoning or impact."
2f6fe82e37911d9afefd781313f1783f733b4d2d,Fix failing tests,tests/test_gisgraphy.py,"@@ -13,7 +13,7 @@ def test_gisgraphy():
     assert len(g) == 1
     osm_count, fields_count = g.debug()[0]
     assert osm_count >= 3
-    assert fields_count >= 15
+    assert fields_count >= 9
 
 
 def test_gisgraphy_multi_result():
",add test for multi-result ggisgraphy,fix(gisgraphy): reduce minimum fields count from 15 to 9,Corrective,"The change addresses a specific issue by reducing the minimum fields count, which likely resolves a test failure related to field requirements, indicating a fix for a functional or structural problem.",2.0,2.0,4.0,"The commit message 'Fix failing tests' is overly vague and provides no details about what was fixed, why it was fixed, or which tests were affected. The diff shows a specific change: reducing the expected value of `fields_count` from 15 to 9, which suggests a change in expected behavior due to actual data or implementation differences. A better commit message would specify the exact change, such as 'Lowered fields_count threshold from 15 to 9 to match actual output in GISGraphy tests'. Since the message lacks context and technical detail, it only scores a 2.","The commit message 'add test for multi-result ggisgraphy' is vague and does not accurately reflect the actual change. The diff shows a modification to an existing test function (test_gisgraphy) where the assertion for fields_count was reduced from >=15 to >=9, not the addition of a new test for multi-result functionality. The message fails to describe what was actually changed, misrepresents the scope, and does not indicate any new test for multi-result cases. Therefore, it is poorly descriptive and misleading, warranting a score of 2.","The commit message accurately reflects the change made in the code diff, where the minimum required fields count was reduced from 15 to 9. It includes the appropriate context (fixing gisgraphy), the component affected (gisgraphy), and the specific change (reducing fields count). The message is clear, concise, and relevant. However, it lacks additional context such as why the change was made (e.g., due to reduced data or compatibility), which could have made it more comprehensive. Overall, it is good but not exceptional."
3cde90d5a880030b125da13ae47f6b43114ad9b9,Syntax error fix for bing tests (Python <= 3.4),tests/test_bing.py,"@@ -22,7 +22,7 @@ def test_bing_details():
         'locality': 'Ottawa'
     }
 
-    g = geocoder.bing(None, **details, method='details')
+    g = geocoder.bing(None, method='details', **details)
     assert g.ok
     assert g.city == city
     osm_count, fields_count = g.debug()[0]
@@ -36,7 +36,7 @@ def test_bing_details():
         'locality': 'Ludlow'
     }
 
-    g = geocoder.bing(None, **details, method='details')
+    g = geocoder.bing(None, method='details', **details)
     assert g.ok
     osm_count, fields_count = g.debug()[0]
     assert osm_count >= 3
",add a regression test for,refactor(bing): fix method parameter order in geocoder calls,Corrective,"The change addresses a specific issue in method parameter order, which could lead to incorrect behavior in geocoder calls, thus correcting a potential logic or execution error.",2.0,2.0,3.0,"The commit message incorrectly states it fixes a 'syntax error', when in fact the change is a reordering of keyword arguments in a function call. This is not a syntax error but a code formatting or argument order issue. The message misrepresents the actual change and does not accurately reflect the nature of the modification. While the change is minor and valid, the commit message is misleading and lacks precision, reducing its quality.","The commit message 'add a regression test for' is extremely vague and lacks specificity. It does not indicate what is being tested, why it's important, or which issue it addresses. While the diff shows a minor reordering of arguments in test cases for the Bing geocoder, the message fails to convey the purpose or context of the test. A better message would specify the feature or behavior being tested (e.g., 'add regression test for Bing details method with correct argument ordering'). Therefore, it receives a score of 2 for being minimally informative but lacking clarity and context.","The commit message correctly identifies the change as a refactoring and specifies the context (bing geocoder) and the nature of the fix (method parameter order). However, it lacks detail about why the order matters or any impact on functionality or behavior. While the change is valid and technically sound, the message is minimal and does not fully explain the significance or intent behind the reordering. A more detailed message would have improved clarity and context, which is why it earns a 3 rather than a higher score."
98db09eead3f5aef77c6a8e2a875e1f3f802c8be,Small tomtom extraction fixes,geocoder/tomtom.py,"@@ -66,11 +66,11 @@ class TomtomResult(OneResult):
 
     @property
     def state(self):
-        return self._address.get('countrySubdivisionName')
+        return self._address.get('countrySubdivisionName', self._address.get('countrySubdivision'))
 
     @property
     def country(self):
-        return self._address.get('countrySecondarySubdivision')
+        return self._address.get('countryCode')
 
     @property
     def postal(self):
",add missing properties,fix(address): return country subdivision name with fallback to country subdivision,Corrective,"The new message specifies a fix for a missing or incorrect fallback in country subdivision naming, indicating a bug correction that ensures proper data return behavior.",3.0,2.0,3.0,"The commit message 'Small tomtom extraction fixes' is vague and lacks detail about what was actually fixed or why. While the diff shows changes to property getters that improve fallback behavior (e.g., using a default value for countrySubdivisionName and switching to countryCode), the message does not indicate the intent or context. A better message would specify the issue, such as 'Fix fallback for country subdivision in TomtomResult when countrySubdivisionName is missing'. Therefore, it's functional but insufficiently descriptive, earning a moderate score.","The commit message 'add missing properties' is overly vague and does not describe what was actually changed or why. The diff shows specific modifications to two properties (state and country) that now fall back to alternative keys when the primary one is missing, which implies improved robustness or fallback behavior. A better message would specify the changes, such as 'Fix fallback for state and country properties to handle missing data gracefully'. As it stands, the message lacks detail and context, making it only minimally informative.","The commit message is relevant and addresses the change in the code, which involves modifying the state property to include a fallback value. However, it lacks precision in describing the actual change — specifically, it incorrectly refers to 'country subdivision' as if it were a valid fallback for 'countrySubdivisionName', when the code actually falls back to 'countrySubdivision', which may not be semantically equivalent. Additionally, the commit message does not mention the country property change, which also involves a significant update (from countrySecondarySubdivision to countryCode). The message is incomplete and slightly misleading, reducing its clarity and completeness."
713cb69428e5029ab7e9a44ef08bbc0f5a36d42d,Fix #334: Add language parameter for OpenCage,geocoder/opencage.py,"@@ -395,11 +395,16 @@ class OpenCageQuery(MultipleResultsQuery):
     _KEY = opencage_key
 
     def _build_params(self, location, provider_key, **kwargs):
-        return {
+        base_params = {
             'query': location,
             'key': provider_key,
             'limit': kwargs.get('maxRows', 1)
         }
+        language = kwargs.get('language', None)
+        if language:
+            base_params['language'] = language
+
+        return base_params
 
     def _catch_errors(self, json_response):
         status = json_response.get('status')
",add language param to opencage query,feat(query): add language parameter to opencage query params,Semantic,"The new message provides more specific context by indicating the feature type ('feat') and the exact component ('query params'), improving clarity and aligning with conventional commit standards.",3.0,3.0,4.0,"The commit message correctly references the issue (#334) and indicates the addition of a language parameter for OpenCage. However, it lacks detail about the implementation changes, such as how the parameter is handled (e.g., conditional addition, default value, or integration with the query). A more detailed message would explain the scope and impact, but this one is sufficient for basic awareness. Therefore, it is moderately clear and relevant but not fully comprehensive.","The commit message 'add language param to opencage query' is accurate and indicates a relevant change, but it is overly vague and lacks detail about how the parameter is used or its impact. The diff shows that the language parameter is added to the query params when provided, which is a meaningful enhancement. However, the message does not mention that the parameter is optional, or that it's derived from kwargs, nor does it indicate the purpose (e.g., localization of results). A better message would specify the behavior or intent (e.g., 'add optional language parameter to OpenCage query to support localized results'). Thus, it is functional but lacks completeness and context, earning a mid-level score.","The commit message accurately reflects the change: adding a language parameter to the OpenCage query parameters. It is clear, concise, and relevant to the diff, which shows the addition of language handling in `_build_params`. However, it lacks context about why the parameter was added (e.g., user-facing benefit or use case), which slightly limits its completeness. Overall, it is good but not exceptional."
713cb69428e5029ab7e9a44ef08bbc0f5a36d42d,Fix #334: Add language parameter for OpenCage,tests/test_opencage.py,"@@ -31,6 +31,19 @@ def test_issue_292():
     g = geocoder.opencage('AirportClinic M - MediCare Flughafen München Medizinisches Zentrum', countrycode='DE', language='de', no_annotations=1)
     assert g.ok
 
+def test_opencage_no_language_param():
+    """""" Expected result :
+        https://api.opencagedata.com/geocode/v1/json=Ottawa,Ontario&key=YOUR-API-KEY
+    """"""
+    g = geocoder.opencage(location)
+    assert 'language' not in g.url
+
+def test_opencage_language_param():
+    """""" Expected result :
+        https://api.opencagedata.com/geocode/v1/json=Ottawa,Ontario&key=YOUR-API-KEY&language=de
+    """"""
+    g = geocoder.opencage(location, language='de')
+    assert 'language=de' in g.url.split('&')
 
 def test_opencage_multi_result():
     g = geocoder.opencage(location, maxRows=5)
",add regression test for,test(opencage): add language parameter handling,Semantic,"The new message provides more specific context by indicating the test scope and functionality (language parameter handling) rather than just stating a fix, improving clarity and intent.",2.0,2.0,3.0,"The commit message 'Fix #334: Add language parameter for OpenCage' is vague and misleading. The diff shows the addition of two new tests that verify the behavior of the `language` parameter (both presence and absence), not a fix. The message implies a bug fix, but the actual change is a feature addition or clarification of behavior. Additionally, it does not mention the specific tests or the fact that the parameter is optional or handled differently based on presence. A better message would clarify that new tests were added to validate language parameter handling in OpenCage geocoding. Thus, the message is inaccurate and under-communicative, warranting a score of 2.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what exactly is being tested, why it's important, or which behavior it covers. While the diff shows the addition of two tests related to the `language` parameter in OpenCage geocoding, the commit message fails to mention these details. A better message would specify, for example, 'add tests for language parameter handling in opencage geocoding'. As such, the message is insufficient and provides minimal value to a reviewer or developer, warranting a score of 2.","The commit message 'test(opencage): add language parameter handling' is brief and technically accurate, indicating that tests related to the language parameter in opencage were added. However, it lacks detail about what was tested (e.g., presence/absence of the parameter in the URL), the scope (e.g., no language vs. with language), and the expected behavior. A more detailed message would better inform developers about the intent and coverage of the changes. Thus, it's functional but insufficiently descriptive for clarity and maintainability."
323f8d812bdaf7b65d3161ea6ee43ccc2f98a42e,Change default value of fuzzy to 1.0 for Geonames,geocoder/geonames.py,"@@ -90,7 +90,7 @@ class GeonamesQuery(MultipleResultsQuery):
         """"""Will be overridden according to the targetted web service""""""
         base_kwargs = {
             'q': location,
-            'fuzzy': kwargs.get('fuzzy', 0.8),
+            'fuzzy': kwargs.get('fuzzy', 1.0),
             'username': provider_key,
             'maxRows': kwargs.get('maxRows', 1),
         }
",add missing keyword args to geonames query,feat(query): set default fuzzy value to 1.0,Semantic,"The new message provides additional context by specifying the type of change (feat/query) and improves clarity by describing the change in a more structured and meaningful way, enhancing semantic precision without altering functionality.",3.0,2.0,3.0,"The commit message is clear and directly addresses the change made in the code, stating that the default value of 'fuzzy' is now set to 1.0. However, it lacks context about why this change was made—such as whether it's due to a bug fix, improved accuracy, or alignment with Geonames API requirements. A more detailed message would include the rationale, which would improve its completeness. Thus, it is accurate and relevant but not fully explanatory, resulting in a moderate score.","The commit message 'add missing keyword args to geonames query' is vague and does not accurately describe the change. The diff shows a specific modification: changing the default value of 'fuzzy' from 0.8 to 1.0, not the addition of missing arguments. The message fails to convey what was actually changed, why it was changed, or its impact. A better message would specify the exact parameter and its updated default value. Thus, it is only minimally informative and falls short of being clear or useful.","The commit message correctly identifies the change as a feature update to the query behavior and accurately reflects the change in default fuzzy value from 0.8 to 1.0. However, it lacks context about why the change was made (e.g., for better accuracy, compatibility, or performance), and does not mention the impact or rationale. This makes it somewhat incomplete for a high-quality commit message. It is clear and relevant but lacks depth, hence a score of 3 rather than 4 or 5."
323f8d812bdaf7b65d3161ea6ee43ccc2f98a42e,Change default value of fuzzy to 1.0 for Geonames,tests/test_geonames.py,"@@ -13,7 +13,7 @@ ottawa = (45.4215296, -75.6971930)
 
 @pytest.fixture(scope='module')
 def geonames_response(request):
-    url = 'http://api.geonames.org/searchJSON?q=Ottawa%2C+Ontario&fuzzy=0.8&username=mock&maxRows=1'
+    url = 'http://api.geonames.org/searchJSON?q=Ottawa%2C+Ontario&fuzzy=1.0&username=mock&maxRows=1'
     data_file = 'tests/results/geonames.json'
     with requests_mock.Mocker() as mocker, open(data_file, 'r') as input:
         mocker.get(url, text=input.read())
@@ -23,7 +23,7 @@ def geonames_response(request):
 
 @pytest.fixture(scope='module')
 def paid_geonames_response(request):
-    url = 'http://ws.geonames.org/searchJSON?q=Ottawa%2C+Ontario&fuzzy=0.8&username=mock&maxRows=1'
+    url = 'http://ws.geonames.org/searchJSON?q=Ottawa%2C+Ontario&fuzzy=1.0&username=mock&maxRows=1'
     data_file = 'tests/results/geonames.json'
     with requests_mock.Mocker() as mocker, open(data_file, 'r') as input:
         mocker.get(url, text=input.read())
@@ -95,7 +95,7 @@ def test_geonames_delegation(geonames_response):
 
 
 def test_extra():
-    url = 'http://api.geonames.org/searchJSON?q=Ottawa%2C+Ontario&fuzzy=0.8&username=mock&maxRows=1&featureClass=A'
+    url = 'http://api.geonames.org/searchJSON?q=Ottawa%2C+Ontario&fuzzy=1.0&username=mock&maxRows=1&featureClass=A'
     data_file = 'tests/results/geonames_extra.json'
     with requests_mock.Mocker() as mocker, open(data_file, 'r') as input:
         mocker.get(url, text=input.read())
@@ -216,7 +216,7 @@ def test_geocoding_with_proximity():
             mocker.get(url, text=input.read())
         google = geocoder.google(location, client=None, key='mock')
     # query geonames with bbox
-    url = 'http://api.geonames.org/searchJSON?q=Ottawa%2C+Ontario&fuzzy=0.8&username=mock&maxRows=1&east=-75.2465979&west=-76.3539158&north=45.5375801&south=44.962733'
+    url = 'http://api.geonames.org/searchJSON?q=Ottawa%2C+Ontario&fuzzy=1.0&username=mock&maxRows=1&east=-75.2465979&west=-76.3539158&north=45.5375801&south=44.962733'
     data_file = 'tests/results/geonames_proximity.json'
     with requests_mock.Mocker() as mocker, open(data_file, 'r') as input:
         mocker.get(url, text=input.read())
",add unit tests for geonames api,fix(test): update fuzzy match threshold to 1.0 in all geonames API requests,Corrective,"The change addresses a specific issue by fixing the fuzzy match threshold to 1.0 across all Geonames API requests, ensuring consistent and correct behavior in testing.",3.0,2.0,5.0,"The commit message is accurate and captures the main change — updating the default fuzzy value from 0.8 to 1.0 in Geonames API requests. However, it lacks context about why this change was made (e.g., for better accuracy, consistency, or compatibility), and it does not mention that the change applies across multiple test fixtures and URLs. While the message is clear and relevant, it is somewhat minimal and could be improved with additional context to fully explain the impact. Thus, it receives a moderate score of 3.","The commit message 'add unit tests for geonames api' is overly vague and does not reflect the actual changes made. The diff shows a specific update: increasing the fuzzy match threshold from 0.8 to 1.0 across multiple test fixtures and test cases, which is a configuration change rather than the addition of new unit tests. The message fails to indicate what was modified, why, or the impact of the change. A more accurate message would reflect the change in fuzzy matching values and their purpose, such as 'update fuzzy match threshold to 1.0 in geonames API test fixtures for stricter matching'. Therefore, the commit message is poorly descriptive and misrepresents the actual change, resulting in a score of 2.","The commit message is clear, concise, and accurately reflects the change. It specifies the type of change ('fix'), the scope ('test'), and the exact nature of the update (changing the fuzzy match threshold from 0.8 to 1.0 across all geonames API requests). The diff confirms that this change is consistent and applied uniformly across multiple test fixtures, which strengthens the message's accuracy. There is no ambiguity, and the message aligns perfectly with the actual code changes."
bdfd96c28f2f405021024a5b57f2ceefe60115ca,fixed bing_batch for python 3,geocoder/bing_batch.py,"@@ -9,9 +9,17 @@ import io
 import csv
 import requests
 import logging
+import sys
 
 LOGGER = logging.getLogger(__name__)
 
+is_python2 = sys.version_info < (3, 0)
+
+if is_python2:
+    csvIO = io.BytesIO
+else:
+    csvIO = io.StringIO
+
 
 class BingBatchResult(OneResult):
 
@@ -31,10 +39,10 @@ class BingBatchResult(OneResult):
             return coord[1]
 
     def debug(self, verbose=True):
-        with io.StringIO() as output:
-            print(u'\n', file=output)
-            print(u'Bing Batch result\n', file=output)
-            print(u'-----------\n', file=output)
+        with csvIO() as output:
+            print('\n', file=output)
+            print('Bing Batch result\n', file=output)
+            print('-----------\n', file=output)
             print(self._content, file=output)
 
             if verbose:
@@ -68,13 +76,13 @@ class BingBatch(MultipleResultsQuery):
     _KEY = bing_key
 
     def generate_batch(self, addresses):
-        out = io.BytesIO()
+        out = csvIO()
         writer = csv.writer(out)
-        writer.writerow(
-            ['Id',
-             'GeocodeRequest/Query',
-             'GeocodeResponse/Point/Latitude',
-             'GeocodeResponse/Point/Longitude'])
+        writer.writerow([
+            'Id',
+            'GeocodeRequest/Query',
+            'GeocodeResponse/Point/Latitude',
+            'GeocodeResponse/Point/Longitude'])
 
         for idx, address in enumerate(addresses):
             writer.writerow([idx, address, None, None])
@@ -144,6 +152,8 @@ class BingBatch(MultipleResultsQuery):
                 proxies=self.proxies
             )
 
+            print(self.batch)
+
             # check that response is ok
             self.status_code = response.status_code
             response.raise_for_status()
@@ -176,7 +186,7 @@ class BingBatch(MultipleResultsQuery):
         return False
 
     def _adapt_results(self, response):
-        result = io.BytesIO(response)
+        result = csvIO(str(response))
         # Skipping first line with Bing header
         next(result)
 
",add bing_batch_test.py,feat(bing_batch): support Python 2 and 3 with csvIO compatibility,Semantic,"The new message indicates a broader feature addition (support for both Python 2 and 3) and introduces compatibility with csvIO, which expands functionality beyond just fixing a Python 3 issue, thus representing a semantic improvement in scope and capability.",3.0,1.0,3.0,"The commit message 'fixed bing_batch for python 3' is overly vague and does not accurately reflect the actual changes. The diff shows that the code adds Python 2/3 compatibility by introducing a conditional import and using `sys.version_info` to determine whether to use `io.BytesIO` or `io.StringIO`. It also replaces hardcoded string operations with a more dynamic approach using `csvIO`. While the code does handle Python 2/3 differences, the commit message fails to mention the specific changes (e.g., using `csvIO` for consistent behavior across versions) or the purpose (e.g., ensuring compatibility with both Python 2 and 3). A better message would explicitly state the fix for Python 2/3 compatibility using `io.StringIO`/`io.BytesIO`. Therefore, it is only moderately accurate and lacks detail, earning a score of 3.","The commit message 'add bing_batch_test.py' is highly irrelevant to the code diff provided. The diff shows changes to Python code related to handling CSV output and Python 2/3 compatibility, including modifications to `csvIO` and `io.StringIO`/`BytesIO` usage. There is no mention or indication of a new test file being added. The message fails to reflect the actual changes in the code, making it inaccurate and misleading. A proper commit message should describe what was actually changed, such as 'Add Python 2/3 compatibility for CSV I/O in BingBatch class'. Therefore, the score is 1 (Poor).","The commit message accurately reflects the primary change—adding Python 2/3 compatibility through a conditional import and usage of csvIO—however, it lacks detail about the specific improvements (e.g., using StringIO/BytesIO conditionally, avoiding version-specific code). While the message is clear and relevant, it does not fully capture the scope or impact of the changes, such as the refactoring of file I/O handling across Python versions or the removal of deprecated patterns. A stronger message would include more context about the problem solved (e.g., 'fixes Python 2 compatibility in CSV output handling') or the benefit (e.g., 'enables consistent CSV handling across Python 2 and 3'). Thus, it's functional but not excellent."
bdfd96c28f2f405021024a5b57f2ceefe60115ca,fixed bing_batch for python 3,tests/test_bing.py,"@@ -1,4 +1,5 @@
 # coding: utf8
+from builtins import str
 import requests_mock
 import geocoder
 
@@ -62,14 +63,14 @@ def test_bing_batch():
     url_result = 'http://spatial.virtualearth.net/REST/v1/Dataflows/Geocode/3bf1b729dddd498e9df45515cdb36130/output/succeeded'
     submission_file = 'tests/results/bing_batch_submission.json'
     confirmation_file = 'tests/results/bing_batch_confirmation.json'
-    data_file = 'tests/results/bing_batch.json'
+    data_file = 'tests/results/bing_batch.csv'
     with requests_mock.Mocker() as mocker, \
-            open(submission_file, 'r') as submission_result, \
-            open(confirmation_file, 'r') as confirmation_result, \
-            open(data_file, 'r') as batch_restul:
-        mocker.post(url_submission, text=submission_result.read())
-        mocker.get(url_check, text=confirmation_result.read())
-        mocker.get(url_result, text=batch_restul.read())
+            open(submission_file, 'rb') as submission_result, \
+            open(confirmation_file, 'rb') as confirmation_result, \
+            open(data_file, 'rb') as batch_restul:
+        mocker.post(url_submission, text=str(submission_result.read(), 'utf8'))
+        mocker.get(url_check, text=str(confirmation_result.read(), 'utf8'))
+        mocker.get(url_result, text=str(batch_restul.read(), 'utf8'))
         g = geocoder.bing(locations, key='test', method='batch')
         assert g.ok
         assert len(g) == 2
",add regression test for,fix(tests): update file extension and handle binary data in requests_mock,Corrective,"The change addresses a specific issue in test file handling and binary data processing within requests_mock, ensuring proper functionality and correctness in test cases.",2.0,2.0,4.0,"The commit message 'fixed bing_batch for python 3' is overly vague and does not accurately reflect the actual changes made. The diff shows a change in file extension from JSON to CSV and a modification in how binary file reads are converted to strings using `str()` with UTF-8 encoding. These changes are not simply about Python 3 compatibility, but rather a specific fix to handle binary file reads correctly when using `requests_mock` in a context where text decoding is required. The message fails to mention the CSV format change or the explicit string conversion, which are significant changes. While the fix may have been intended for Python 3, the commit message lacks detail and technical specificity, making it insufficiently informative for a reviewer.","The commit message 'add regression test for' is extremely vague and lacks specificity. It does not indicate what feature, bug, or functionality the test addresses. While the diff shows a change in file format (from JSON to CSV) and updated file reading logic (with binary mode and UTF-8 decoding), the commit message fails to convey the purpose or context of the change. A better message would specify the exact test being added, such as 'add regression test for batch geocoding with CSV output'. Therefore, the message is insufficient and only receives a score of 2.","The commit message accurately reflects the changes in the diff: it updates the file extension from `.json` to `.csv` and properly handles binary data by reading files in binary mode (`'rb'`) and converting the bytes to strings using `str(..., 'utf8')`. The message is concise and relevant, covering both key aspects of the change. However, it could be slightly more precise by explicitly mentioning the use of `str()` for encoding, which is a subtle but important detail. Overall, it's clear, accurate, and sufficient for a test-related fix, making it a strong commit message."
89660ad95ce2cc51f7f81b7bddb3d45efe307c27,"rollback flake8 ""fix"" on rate_limited_get_for_work",geocoder/google.py,"@@ -275,7 +275,7 @@ class GoogleQuery(MultipleResultsQuery):
 
     @ratelim.greedy(100000, 60 * 60 * 24)  # Google for Work daily limit
     @ratelim.greedy(50, 1)  # Google for Work limit per second
-    def rate_limited_get_for_work(self, url, *args, **kwargs):
+    def rate_limited_get_for_work(self, url, **kwargs):
         return super(GoogleQuery, self).rate_limited_get(*args, **kwargs)
 
     def _catch_errors(self, json_response):
",add missing greedy comment,refactor(query): remove unnecessary rate limiting arguments,Corrective,"The new message indicates the removal of unnecessary rate limiting arguments, which addresses a potential misconfiguration or inefficiency in the query logic, thus correcting a flaw in the original implementation.",1.0,2.0,3.0,"The commit message is highly misleading and irrelevant to the actual changes in the code diff. The diff shows a removal of `*args` from the function signature and a corresponding change in the call to `super()`, which simplifies the function by removing unused arguments. However, the commit message claims it is a 'rollback' of a 'flake8 fix', which is not supported by any flake8-related changes or any mention of linting in the diff. There is no reference to flake8, no code formatting issue, and no indication of a fix or rollback. The message fails to describe what was actually changed or why, making it unclear, inaccurate, and unhelpful. Thus, it receives a poor score.","The commit message 'add missing greedy comment' is vague and does not clearly explain what was changed or why. The diff shows that a comment was removed (the `@ratelim.greedy(50, 1)` line) and the function signature was modified to drop `*args`, which suggests a refactoring or simplification. The message fails to indicate the actual change or its purpose, making it difficult to understand the intent. While it's technically accurate that a comment was missing, it lacks context and clarity, which is essential for a good commit message. A score of 2 reflects that it's minimally informative but not sufficient for clarity or maintainability.","The commit message correctly identifies the refactoring and removes unnecessary rate limiting arguments, which aligns with the diff showing the removal of `*args, **kwargs` from the function signature. However, it lacks context about why the arguments were unnecessary or how this change improves performance or maintainability. While the message is accurate and concise, it is somewhat vague and does not fully explain the impact or rationale, which reduces its completeness. Thus, it is neither poor nor excellent, but moderately clear and relevant."
6a24ea9f0948475810ada0fd17185ad25812a6a4,fix flake and bug (hopefully),geocoder/google.py,"@@ -276,7 +276,7 @@ class GoogleQuery(MultipleResultsQuery):
     @ratelim.greedy(100000, 60 * 60 * 24)  # Google for Work daily limit
     @ratelim.greedy(50, 1)  # Google for Work limit per second
     def rate_limited_get_for_work(self, url, **kwargs):
-        return super(GoogleQuery, self).rate_limited_get(*args, **kwargs)
+        return super(GoogleQuery, self).rate_limited_get(url, **kwargs)
 
     def _catch_errors(self, json_response):
         status = json_response.get('status')
",add more examples,fix(GoogleQuery): correct argument passing in rate_limited_get,Corrective,"The new message specifies a precise bug fix related to argument passing in a rate-limited GET request, indicating a functional correction rather than a cosmetic or trivial change.",2.0,1.0,3.0,"The commit message 'fix flake and bug (hopefully)' is vague and lacks specificity. While the diff shows a minor fix (correcting argument passing in a method call from `*args` to `url`), the message does not clearly describe what was fixed, why it was necessary, or whether it addresses a real bug or just a linting issue. The use of 'hopefully' undermines confidence in the message. A better message would explicitly state the fix, such as 'Fix argument mismatch in rate_limited_get_for_work to pass url instead of *args'. Therefore, the message is only minimally informative and receives a score of 2.","The commit message 'add more examples' is highly irrelevant to the actual code changes. The diff shows a simple fix: correcting a function call in `rate_limited_get_for_work` to pass the correct argument (`url` instead of `*args`). This is a bug fix or parameter correction, not the addition of examples. The commit message does not reflect the nature of the change, making it misleading and poor in context.","The commit message correctly identifies the issue as a fix for argument passing in the rate_limited_get method. However, it lacks specific details about why the change was necessary (e.g., mismatched arguments, incorrect method signature) or the impact of the fix. While the fix is technically accurate and relevant, the message is vague and does not provide enough context to fully communicate the significance or the problem being solved. A more detailed message would have been better, such as explaining that the original call was passing `*args` instead of `url` explicitly, which could lead to incorrect behavior. Therefore, it is functional but not excellent."
e5cf718e5dc5b8d6e04ab7adb6f9ce7e19862e95,"Small fixes, timeout option added, doc for batch method",geocoder/bing_batch.py,"@@ -120,6 +120,7 @@ class BingBatch(MultipleResultsQuery):
         self.batch = self.generate_batch(locations)
         self.locations_length = len(locations)
         self.provider_key = provider_key
+        self._BATCH_TIMEOUT = kwargs.get('timeout', 60)
 
         return {
             'input': 'csv',
",update bingbatch.py,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error that needs to be addressed, which falls under corrective improvements.",2.0,2.0,1.0,"The commit message mentions a 'timeout option added' which is accurate and relevant to the code change, but it also includes 'small fixes' and 'doc for batch method' without evidence of documentation changes or other fixes. The diff shows only the addition of a timeout attribute, not any documentation updates. The message is vague and lacks specificity about what was actually fixed or improved. It fails to clearly link the changes to the task or provide context, making it insufficiently informative for a clear understanding of the commit's purpose.","The commit message 'update bingbatch.py' is extremely vague and provides no information about what was changed or why. While the diff shows a clear addition of a timeout parameter to the class, the commit message fails to reflect that. A better message would specify the change, such as 'Add timeout support to BingBatch class for configurable request timeout'. This lack of detail reduces its usefulness for understanding the context or impact of the change, resulting in a low but not completely poor score.","The commit message 'fix: rectification failed' is highly vague and provides no context about what was fixed, why it was necessary, or what issue it resolves. It does not align with conventional commit message standards (which require a clear description of the change and its purpose). The diff shows a simple addition of a timeout parameter to the class initialization, which suggests the commit likely added timeout support for batch processing. A meaningful message should reflect this, such as 'fix: add timeout support for Bing batch queries'. As it fails to describe the actual change or its significance, the message is poor and lacks clarity."
e5cf718e5dc5b8d6e04ab7adb6f9ce7e19862e95,"Small fixes, timeout option added, doc for batch method",geocoder/mapquest_batch.py,"@@ -2,6 +2,7 @@
 # coding: utf8
 
 from __future__ import absolute_import
+from geocoder.base import OneResult, MultipleResultsQuery
 from geocoder.keys import mapquest_key
 from geocoder.mapquest import MapquestResult, MapquestQuery
 from geocoder.location import Location
@@ -14,7 +15,7 @@ class MapQuestBatchResult(MapquestResult):
         return bool(self.quality)
 
 
-class MapquestBatch(MapquestQuery):
+class MapquestBatch(MultipleResultsQuery):
     """"""
     MapQuest
     ========
@@ -31,9 +32,13 @@ class MapquestBatch(MapquestQuery):
     provider = 'mapquest'
     method = 'batch'
 
+    _RESULT_CLASS = MapQuestBatchResult
     _URL = 'http://www.mapquestapi.com/geocoding/v1/batch'
+    _TIMEOUT = 30
 
     def _build_params(self, location, provider_key, **kwargs):
+        self._TIMEOUT = kwargs.get('timeout', 30)
+
         return {
             'key': provider_key,
             'location': location,
",add docs for mapquestbatch,feat(mapquest): add batch geocoding with timeout support,Semantic,"The new message provides a clearer, more specific description of the feature (batch geocoding with timeout support) and explicitly identifies the component (mapquest), enhancing semantic meaning and context compared to the vague 'small fixes' in the old message.",3.0,1.0,4.0,"The commit message mentions 'Small fixes, timeout option added, doc for batch method', which partially captures the changes. The addition of a timeout option is correctly noted, and the docstring update is implied. However, the message is vague and lacks specificity—such as not mentioning the replacement of MapquestQuery with MultipleResultsQuery or the import of MultipleResultsQuery. It also doesn't clearly indicate the purpose or impact of the changes. While it's not entirely off-base, it falls short of being clear, concise, and informative enough to be considered excellent.","The commit message 'add docs for mapquestbatch' is highly inaccurate given the diff. The diff does not add any documentation; instead, it modifies the code by importing new classes, changing the class inheritance, adding attributes like _TIMEOUT and _RESULT_CLASS, and updating method parameters. These are code changes, not documentation additions. The commit message fails to reflect the actual content of the change, making it misleading and irrelevant. Therefore, it receives a poor score.","The commit message accurately reflects the changes made: it introduces batch geocoding support for MapQuest with timeout configuration. The message includes the correct scope ('feat(mapquest)') and highlights the key addition ('batch geocoding with timeout support'). However, it lacks detail about the specific refactoring (e.g., replacing MapquestQuery with MultipleResultsQuery) or the impact of the timeout parameter, which slightly limits its completeness. Overall, it is clear, relevant, and appropriately scoped, making it a strong but not perfect commit message."
eb56f173a038c50103101aa1f212f39ecd65a88b,Bing: fixed encoding issues. Google: fixed work ratelim,geocoder/bing_batch.py,"@@ -4,21 +4,17 @@
 from __future__ import absolute_import, print_function
 from geocoder.base import OneResult, MultipleResultsQuery
 from geocoder.keys import bing_key
+
 import time
 import io
-import csv
 import requests
 import logging
 import sys
 
-LOGGER = logging.getLogger(__name__)
-
-is_python2 = sys.version_info < (3, 0)
+PY2 = sys.version_info < (3, 0)
+csv_io = io.BytesIO if PY2 else io.StringIO
 
-if is_python2:
-    csvIO = io.BytesIO
-else:
-    csvIO = io.StringIO
+LOGGER = logging.getLogger(__name__)
 
 
 class BingBatchResult(OneResult):
@@ -39,7 +35,7 @@ class BingBatchResult(OneResult):
             return coord[1]
 
     def debug(self, verbose=True):
-        with csvIO() as output:
+        with csv_io() as output:
             print('\n', file=output)
             print('Bing Batch result\n', file=output)
             print('-----------\n', file=output)
@@ -74,20 +70,6 @@ class BingBatch(MultipleResultsQuery):
     _RESULT_CLASS = BingBatchResult
     _KEY = bing_key
 
-    def generate_batch(self, addresses):
-        out = csvIO()
-        writer = csv.writer(out)
-        writer.writerow([
-            'Id',
-            'GeocodeRequest/Query',
-            'GeocodeResponse/Point/Latitude',
-            'GeocodeResponse/Point/Longitude'])
-
-        for idx, address in enumerate(addresses):
-            writer.writerow([idx, address, None, None])
-
-        return ""Bing Spatial Data Services, 2.0\n{}"".format(out.getvalue())
-
     def extract_resource_id(self, response):
         for rs in response['resourceSets']:
             for resource in rs['resources']:
@@ -185,17 +167,6 @@ class BingBatch(MultipleResultsQuery):
 
         return False
 
-    def _adapt_results(self, response):
-        result = csvIO(str(response))
-        # Skipping first line with Bing header
-        next(result)
-
-        rows = {}
-        for row in csv.DictReader(result):
-            rows[row['Id']] = [row['GeocodeResponse/Point/Latitude'], row['GeocodeResponse/Point/Longitude']]
-
-        return rows
-
     def _parse_results(self, response):
         rows = self._adapt_results(response)
 
",add bing batch results,refactor(bing): use io.BytesIO/StringIO based on Python version,Corrective,"The new message indicates a refactoring to fix encoding issues by using version-appropriate io classes, which addresses a potential underlying problem in the original implementation rather than just surface-level changes.",1.0,2.0,4.0,"The commit message 'Bing: fixed encoding issues. Google: fixed work ratelim' is highly misleading and inaccurate given the code diff. The diff shows removal of Python 2-specific CSV handling and refactoring of `csv_io` to use a conditional import, which is more about Python 2/3 compatibility than encoding issues. There is no mention of Google or rate limiting in the code changes. The reference to 'work ratelim' is likely a typo or misstatement. The message fails to accurately describe what was changed, misattributes the scope, and introduces unrelated content. This makes the commit message poor in clarity, accuracy, and relevance to the actual changes.","The commit message 'add bing batch results' is overly vague and does not reflect the actual changes made. The diff shows a refactoring and cleanup of Python 2/3 compatibility code, removal of redundant CSV handling, and consolidation of imports and variables (e.g., replacing duplicated CSV IO logic with a single `csv_io` variable). The change is not simply 'adding' batch results but rather improving code quality, removing dead code, and simplifying Python 2/3 compatibility. A better message would describe these improvements, such as 'refactor Bing batch query to improve Python 2/3 compatibility and remove redundant CSV handling'. As such, the commit message fails to convey the true nature of the change, earning a score of 2.","The commit message accurately reflects the main change: refactoring the use of CSV I/O classes to be version-aware using `io.BytesIO` and `io.StringIO` based on Python version. This is a clear and relevant summary of the diff, which shows the removal of redundant conditional logic and the introduction of a more maintainable `csv_io` variable. However, it does not mention the removal of the `generate_batch` and `_adapt_results` methods, which were also significant changes (e.g., batch generation and result parsing were deprecated). While the message is concise and technically correct, it misses some context about the broader deprecation and simplification of functionality. A score of 4 reflects a good, accurate summary with minor omissions."
eb56f173a038c50103101aa1f212f39ecd65a88b,Bing: fixed encoding issues. Google: fixed work ratelim,geocoder/bing_batch_forward.py,"@@ -4,13 +4,16 @@
 from __future__ import absolute_import, print_function
 from geocoder.base import OneResult
 from geocoder.bing_batch import BingBatch
-from geocoder.keys import bing_key
-from geocoder.location import Location
-import time
+
 import io
 import csv
-import requests
-import logging
+import sys
+
+PY2 = sys.version_info < (3, 0)
+csv_io = io.BytesIO if PY2 else io.StringIO
+csv_encode = (lambda input: input) if PY2 else (lambda input: input.encode('utf-8'))
+csv_decode = (lambda input: input) if PY2 else (lambda input: input.decode('utf-8'))
+
 
 class BingBatchForwardResult(OneResult):
 
@@ -34,11 +37,11 @@ class BingBatchForwardResult(OneResult):
         return bool(self._content)
 
     def debug(self, verbose=True):
-        with io.StringIO() as output:
-            print(u'\n', file=output)
-            print(u'Bing Batch result\n', file=output)
-            print(u'-----------\n', file=output)
-            print(unicode(str(self._content), ""utf-8""), file=output)
+        with csv_io() as output:
+            print('\n', file=output)
+            print('Bing Batch result\n', file=output)
+            print('-----------\n', file=output)
+            print(self._content, file=output)
 
             if verbose:
                 print(output.getvalue())
@@ -69,17 +72,22 @@ class BingBatchForward(BingBatch):
     _RESULT_CLASS = BingBatchForwardResult
 
     def generate_batch(self, addresses):
-        out = io.BytesIO()
+        out = csv_io()
         writer = csv.writer(out)
-        writer.writerow(['Id', 'GeocodeRequest/Query', 'GeocodeResponse/Point/Latitude', 'GeocodeResponse/Point/Longitude'])
-        
+        writer.writerow([
+            'Id',
+            'GeocodeRequest/Query',
+            'GeocodeResponse/Point/Latitude',
+            'GeocodeResponse/Point/Longitude'
+        ])
+
         for idx, address in enumerate(addresses):
             writer.writerow([idx, address, None, None])
-        
-        return ""Bing Spatial Data Services, 2.0\n{}"".format(out.getvalue())
+
+        return csv_encode(""Bing Spatial Data Services, 2.0\n{}"".format(out.getvalue()))
 
     def _adapt_results(self, response):
-        result = io.BytesIO(response)
+        result = csv_io(csv_decode(response))
         # Skipping first line with Bing header
         next(result)
 
@@ -89,6 +97,7 @@ class BingBatchForward(BingBatch):
 
         return rows
 
+
 if __name__ == '__main__':
     g = BingBatchForward(['Denver,CO', 'Boulder,CO'], key=None)
     g.debug()
",add tests for bingbatchforward,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously fixed, thus pointing to a corrective action being taken to address a problem.",1.0,1.0,1.0,"The commit message is highly inaccurate and misleading. It claims to fix 'encoding issues' for Bing, which is partially true (as the code introduces Python 2/3 compatibility for CSV handling), but the changes are not primarily about encoding — they are about making the code compatible across Python 2 and 3, particularly with io and string/bytes handling. Moreover, the message mentions 'Google: fixed work ratelim', which is entirely unrelated to the diff — there is no mention of Google or rate limiting in the code changes. This is a clear case of a fabricated or incorrect commit message that misrepresents the actual changes. Therefore, the score is 1 (Poor).","The commit message 'add tests for bingbatchforward' is highly misaligned with the actual changes in the diff. The diff shows code modifications related to Python 2/3 compatibility, including handling of CSV I/O, encoding, and string/byte handling using `csv_io`, `csv_encode`, and `csv_decode`. These changes are primarily about improving cross-version compatibility, not adding tests. There is no mention of test files, test functions, or any test-related code. Therefore, the commit message is inaccurate and does not reflect the real content of the change, making it poor and misleading.","The commit message 'fix: rectification failed' is highly inadequate and does not describe what was actually changed or why. The diff shows a substantial refactoring of Python 2/3 compatibility, including the introduction of conditional imports for CSV handling, proper UTF-8 encoding/decoding based on Python version, and improved code readability. The term 'rectification failed' is vague, incorrect, and implies a failure that is not evident in the changes. There is no indication of the actual problem being fixed, nor does it reflect the real purpose of the changes (which is to improve cross-version compatibility). A proper commit message should clearly state what was fixed and why. This message fails to meet even basic expectations for clarity and informativeness."
eb56f173a038c50103101aa1f212f39ecd65a88b,Bing: fixed encoding issues. Google: fixed work ratelim,geocoder/bing_batch_reverse.py,"@@ -4,13 +4,16 @@
 from __future__ import absolute_import, print_function
 from geocoder.base import OneResult
 from geocoder.bing_batch import BingBatch
-from geocoder.keys import bing_key
-from geocoder.location import Location
-import time
+
 import io
 import csv
-import requests
-import logging
+import sys
+
+PY2 = sys.version_info < (3, 0)
+csv_io = io.BytesIO if PY2 else io.StringIO
+csv_encode = (lambda input: input) if PY2 else (lambda input: input.encode('utf-8'))
+csv_decode = (lambda input: input) if PY2 else (lambda input: input.decode('utf-8'))
+
 
 class BingBatchReverseResult(OneResult):
 
@@ -19,50 +22,51 @@ class BingBatchReverseResult(OneResult):
 
     @property
     def address(self):
-        coord = self._content
-        if coord:
-            return coord[0]
+        address = self._content
+        if address:
+            return address[0]
 
     @property
     def city(self):
-        coord = self._content
-        if coord:
-            return coord[1]
+        city = self._content
+        if city:
+            return city[1]
 
     @property
     def postal(self):
-        coord = self._content
-        if coord:
-            return coord[2]
+        postal = self._content
+        if postal:
+            return postal[2]
 
     @property
     def state(self):
-        coord = self._content
-        if coord:
-            return coord[3]
+        state = self._content
+        if state:
+            return state[3]
 
     @property
     def country(self):
-        coord = self._content
-        if coord:
-            return coord[4]
+        country = self._content
+        if country:
+            return country[4]
 
     @property
     def ok(self):
         return bool(self._content)
 
     def debug(self, verbose=True):
-        with io.StringIO() as output:
-            print(u'\n', file=output)
-            print(u'Bing Batch result\n', file=output)
-            print(u'-----------\n', file=output)
-            print(unicode(str(self._content), ""utf-8""), file=output)
+        with csv_io() as output:
+            print('\n', file=output)
+            print('Bing Batch result\n', file=output)
+            print('-----------\n', file=output)
+            print(self._content, file=output)
 
             if verbose:
                 print(output.getvalue())
 
             return [None, None]
 
+
 class BingBatchReverse(BingBatch):
     """"""
     Bing Maps REST Services
@@ -86,29 +90,41 @@ class BingBatchReverse(BingBatch):
     _RESULT_CLASS = BingBatchReverseResult
 
     def generate_batch(self, locations):
-        out = io.BytesIO()
+        out = csv_io()
         writer = csv.writer(out)
-        writer.writerow(['Id', 'ReverseGeocodeRequest/Location/Latitude', 'ReverseGeocodeRequest/Location/Longitude', \
-                        'GeocodeResponse/Address/FormattedAddress', 'GeocodeResponse/Address/Locality', 'GeocodeResponse/Address/PostalCode', \
-                        'GeocodeResponse/Address/AdminDistrict', 'GeocodeResponse/Address/CountryRegion'])
-        
+        writer.writerow([
+            'Id',
+            'ReverseGeocodeRequest/Location/Latitude',
+            'ReverseGeocodeRequest/Location/Longitude',
+            'GeocodeResponse/Address/FormattedAddress',
+            'GeocodeResponse/Address/Locality',
+            'GeocodeResponse/Address/PostalCode',
+            'GeocodeResponse/Address/AdminDistrict',
+            'GeocodeResponse/Address/CountryRegion'
+        ])
+
         for idx, location in enumerate(locations):
             writer.writerow([idx, location[0], location[1], None, None, None, None, None])
-        
-        return ""Bing Spatial Data Services, 2.0\n{}"".format(out.getvalue())
+
+        return csv_encode(""Bing Spatial Data Services, 2.0\n{}"".format(out.getvalue()))
 
     def _adapt_results(self, response):
-        result = io.BytesIO(response)
+        # print(type(response))
+        result = csv_io(csv_decode(response))
         # Skipping first line with Bing header
         next(result)
 
         rows = {}
         for row in csv.DictReader(result):
-            rows[row['Id']] = [row['GeocodeResponse/Address/FormattedAddress'], row['GeocodeResponse/Address/Locality'], row['GeocodeResponse/Address/PostalCode'], \
-                            row['GeocodeResponse/Address/AdminDistrict'], row['GeocodeResponse/Address/CountryRegion']]
+            rows[row['Id']] = [row['GeocodeResponse/Address/FormattedAddress'],
+                               row['GeocodeResponse/Address/Locality'],
+                               row['GeocodeResponse/Address/PostalCode'],
+                               row['GeocodeResponse/Address/AdminDistrict'],
+                               row['GeocodeResponse/Address/CountryRegion']]
 
         return rows
 
+
 if __name__ == '__main__':
     g = BingBatchReverse((40.7943, -73.970859), (48.845580, 2.321807), key=None)
     g.debug()
",add missing properties to bingbatchreverseresult,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or issue that was previously addressed, thus pointing to a corrective action taken to fix a problem.",1.0,2.0,1.0,"The commit message is highly inaccurate and misleading. It claims to fix 'encoding issues' for Bing, which is partially true (as the code introduces Python 2/3 compatibility for CSV handling), but the actual changes are minimal and focused on Python 2/3 compatibility, not encoding per se. More importantly, it mentions 'Google: fixed work ratelim' — there is no mention of Google in the code diff at all, and no reference to rate limiting or Google-related changes. This is a complete fabrication. The message fails to accurately reflect the actual changes, leading to confusion and potential misattribution. Therefore, it is poor and should receive a score of 1.","The commit message 'add missing properties to bingbatchreverseresult' is inaccurate and misleading. The diff does not add missing properties — instead, it refactors and improves Python 2/3 compatibility by introducing `PY2`, `csv_io`, `csv_encode`, and `csv_decode` to handle CSV I/O across Python versions. The actual changes involve better cross-version support for CSV handling in the debug output and batch generation, not the addition of missing properties. The properties like address, city, postal, state, country are already present and just renamed/renamed to use more descriptive variables. Therefore, the commit message fails to reflect the true nature of the changes, making it poor and misleading.","The commit message 'fix: rectification failed' is highly inadequate and does not describe what was actually changed or why. The diff shows a significant refactoring and addition of Python 2/3 compatibility code (e.g., PY2 detection, csv_io, csv_encode/decode), which improves cross-version compatibility and fixes potential encoding issues. The message fails to mention any actual bug, the nature of the fix, or the impact of the changes. It is vague, technically incorrect (no 'rectification' is evident), and provides no context. A proper commit message should reflect the actual change, such as 'fix: add Python 2/3 compatibility for CSV handling in BingBatchReverse'. Therefore, this message is poor and deserves a score of 1."
eb56f173a038c50103101aa1f212f39ecd65a88b,Bing: fixed encoding issues. Google: fixed work ratelim,geocoder/google.py,"@@ -275,8 +275,8 @@ class GoogleQuery(MultipleResultsQuery):
 
     @ratelim.greedy(100000, 60 * 60 * 24)  # Google for Work daily limit
     @ratelim.greedy(50, 1)  # Google for Work limit per second
-    def rate_limited_get_for_work(self, url, **kwargs):
-        return super(GoogleQuery, self).rate_limited_get(url, **kwargs)
+    def rate_limited_get_for_work(self, *args, **kwargs):
+        return super(GoogleQuery, self).rate_limited_get(*args, **kwargs)
 
     def _catch_errors(self, json_response):
         status = json_response.get('status')
",add missing keyword args,refactor(query): update argument handling in rate_limited_get_for_work,Corrective,"The new message indicates a refactoring of argument handling in a rate-limited function, which addresses a potential issue in how work queries are processed, suggesting a fix for incorrect or inefficient handling of rate limiting, thus correcting a functional flaw.",2.0,2.0,3.0,"The commit message claims to fix 'Google: work ratelim', but the diff shows only a minor change: updating argument handling from `url, **kwargs` to `*args, **kwargs` in a method that already has rate limiting decorators. There is no actual fix to the rate limiting logic or behavior, and the change is trivial. Additionally, the message incorrectly references 'Bing' which is not related to the diff. The message is misleading and does not accurately reflect the actual change, so it receives a low score.","The commit message 'add missing keyword args' is too vague and lacks specificity. While the diff shows a change from using `url, **kwargs` to `*args, **kwargs` in a method call, the message does not explain the context or why this change was necessary. The change appears to be a minor fix to ensure proper argument passing, but the commit message fails to convey the actual intent or impact. A better message would clarify that the method now properly handles variable arguments to match the expected signature of the parent method. Therefore, it receives a score of 2 for being technically relevant but insufficiently descriptive.","The commit message accurately reflects the change — updating argument handling in the method — but lacks specific details about the impact or reason for the change. While it correctly identifies the refactoring and the component (query), it does not explain why the arguments were changed (e.g., to support variable arguments or improve flexibility), nor does it mention the removal of rate limiting annotations or the underlying issue being addressed. A stronger message would include context about the fix or improvement. Thus, it is somewhat clear and relevant but lacks depth, warranting a moderate score."
eb56f173a038c50103101aa1f212f39ecd65a88b,Bing: fixed encoding issues. Google: fixed work ratelim,tests/test_bing.py,"@@ -53,7 +53,7 @@ def test_bing_reverse():
 
 
 def test_bing_batch():
-    """""" Data subnitted would be the following:
+    """""" Data submitted would be the following:
             Bing Spatial Data Services, 2.0
             Id,GeocodeRequest/Query,GeocodeResponse/Point/Latitude,GeocodeResponse/Point/Longitude
             0,""Denver,CO"",,
@@ -68,11 +68,11 @@ def test_bing_batch():
     with requests_mock.Mocker() as mocker, \
             open(submission_file, 'rb') as submission_result, \
             open(confirmation_file, 'rb') as confirmation_result, \
-            open(data_file, 'rb') as batch_restul:
+            open(data_file, 'rb') as batch_result:
         mocker.post(url_submission, text=str(submission_result.read(), 'utf8'))
         mocker.get(url_check, text=str(confirmation_result.read(), 'utf8'))
-        mocker.get(url_result, text=str(batch_restul.read(), 'utf8'))
-        g = geocoder.bing(locations, key='test', method='batch')
+        mocker.get(url_result, text=str(batch_result.read(), 'utf8'))
+        g = geocoder.bing(locations_forward, method='batch')
         assert g.ok
         assert len(g) == 2
 
",add failing test for,fix(bing): correct batch geocoding function call and file reference,Corrective,"The new message identifies a specific bug in the batch geocoding function call and file reference, indicating a fix for a functional issue rather than a stylistic or trivial change.",1.0,2.0,3.0,"The commit message is highly inaccurate and misleading. It claims to fix 'encoding issues' for Bing, but the diff shows only a typo correction (changing 'batch_restul' to 'batch_result') and a change in the method parameter from 'batch' to 'batch' with a different location list ('locations' to 'locations_forward'). There is no mention of encoding issues. Additionally, it mentions 'Google: fixed work ratelim' which is completely unrelated to the diff, as the changes are solely about Bing and involve no Google code or rate limiting. The message is irrelevant, factually incorrect, and fails to reflect the actual changes.","The commit message 'add failing test for' is extremely vague and lacks specificity. It does not indicate what test is being added, why it's failing, or what functionality it relates to. While the diff shows a test modification involving a batch geocoding test with a typo in the filename (batch_restul → batch_result), the commit message fails to reflect that. A good commit message should clearly describe the change and its intent. This message is too minimal and provides no context, making it poor for understanding the purpose of the change. Hence, a score of 2 reflects a basic but insufficient message.","The commit message accurately identifies the fix as correcting a function call and file reference in the bing batch geocoding test. However, it lacks specific details about what was changed—such as the exact error or why the change was necessary. While the message is clear and relevant to the diff, it is somewhat vague and does not fully explain the impact or context of the fix. A stronger message would include specifics like 'corrected method name from 'batch' to 'batch' (was 'batch_restul', now 'batch_result') and fixed parameter from 'locations' to 'locations_forward'.' Thus, it is functional but not excellent."
89b23236e8cca65213395cfbcc4fb2519628a976,Version bump & changelog updated,geocoder/__init__.py,"@@ -28,7 +28,7 @@ Consistant JSON responses from various providers.
 __title__ = 'geocoder'
 __author__ = 'Denis Carriere'
 __author_email__ = 'carriere.denis@gmail.com'
-__version__ = '1.37.0'
+__version__ = '1.38.0'
 __license__ = 'MIT'
 __copyright__ = 'Copyright (c) 2013-2016 Denis Carriere'
 
",add missing docstrings,fix: rectification failed,Corrective,"The new message indicates a specific issue ('rectification failed') that was likely fixed, suggesting a correction to a bug or failure in the system, unlike the generic version bump.",2.0,1.0,1.0,"The commit message 'Version bump & changelog updated' is technically correct but lacks detail and specificity. While it acknowledges a version update, it does not explain what was changed, why the version was incremented, or what new features or fixes were introduced. A more informative message would include context about the change (e.g., 'Updated version to 1.38.0 with consistent JSON responses across providers'). As it only states a version bump without meaningful context, it falls short of being excellent but is not entirely poor—hence a score of 2.","The commit message 'add missing docstrings' is highly inaccurate given the diff. The diff shows only a version bump from '1.37.0' to '1.38.0', not any addition of docstrings. Therefore, the commit message does not reflect the actual changes made, making it misleading and irrelevant. This misalignment severely undermines its usefulness and should be scored poorly.","The commit message 'fix: rectification failed' is highly unclear and does not accurately reflect the actual change in the code diff. The diff only shows a version number update from '1.37.0' to '1.38.0', which is a simple version bump, not a fix for a rectification failure. The message lacks context, specificity, and technical clarity, making it difficult to understand the purpose of the commit. A proper message should describe what was fixed and why, not reference an ambiguous or incorrect term like 'rectification failed'."
6ef7c21dc853c79319d0f4306cb699b0d6678f4c,Fixed Bing tests according to newest Bing geo results,tests/test_bing.py,"@@ -72,7 +72,7 @@ def test_bing_batch():
         mocker.post(url_submission, text=str(submission_result.read(), 'utf8'))
         mocker.get(url_check, text=str(confirmation_result.read(), 'utf8'))
         mocker.get(url_result, text=str(batch_result.read(), 'utf8'))
-        g = geocoder.bing(locations_forward, method='batch')
+        g = geocoder.bing(locations_forward, key='test', method='batch')
         assert g.ok
         assert len(g) == 2
 
@@ -98,12 +98,12 @@ def test_bing_batch_reverse():
 
 def test_multi_results():
     g = geocoder.bing(location, maxRows=3)
-    assert len(g) == 3
+
+    assert len(g) == 2
     assert g.city == city
 
     expected_results = [
         [45.4217796325684, -75.6911926269531],
-        [45.2931327819824, -75.7756805419922],
-        [36.9871711730957, -94.7606735229492],
+        [45.2931327819824, -75.7756805419922]
     ]
     assert [result.latlng for result in g] == expected_results
",add tests for reverse geocoder,fix(bing): update batch request to include API key and adjust expected results count,Corrective,"The new message provides specific details about the changes made (updating batch request with API key and adjusting expected results count), indicating a fix to a technical issue rather than a cosmetic or semantic change.",2.0,2.0,3.0,"The commit message is vague and does not accurately reflect the changes made. While it claims to 'fix' the tests according to 'newest Bing geo results', the actual changes involve modifying test assertions (e.g., changing expected result count from 3 to 2) and adding a `key='test'` parameter to the geocoder call. These changes are not about fixing results but rather adjusting test expectations and adding a hardcoded key. The message lacks specificity about what was changed, why, and whether the tests are now more accurate or valid. It fails to provide context or technical clarity, making it poor for a commit message.","The commit message 'add tests for reverse geocoder' is overly broad and misleading. The diff shows modifications to batch geocoding tests, including adding a 'key' parameter and changing expected result counts, which are more related to forward geocoding functionality than reverse geocoding. There is no evidence of reverse geocoding tests being added. The message does not accurately reflect the actual changes, making it misleading and insufficiently specific. Therefore, it receives a score of 2 (Fair) — it's somewhat relevant but incorrect in scope.","The commit message accurately reflects the main changes: adding an API key to the batch request and adjusting the expected result count. However, it lacks detail about why the expected results count was changed (e.g., due to API behavior or data updates), and it doesn't explicitly mention the test cases affected (e.g., test_bing_batch_reverse or test_multi_results). While the message is clear and relevant, it could be more precise and informative for maintainers who need context on the changes. Thus, it is functional but not fully comprehensive."
71d041575f17a007cc28570cf0d1b37846b2e6c0,MapQuest flake8 fix,geocoder/mapquest_batch.py,"@@ -2,9 +2,8 @@
 # coding: utf8
 
 from __future__ import absolute_import
-from geocoder.base import OneResult, MultipleResultsQuery
-from geocoder.keys import mapquest_key
-from geocoder.mapquest import MapquestResult, MapquestQuery
+from geocoder.base import MultipleResultsQuery
+from geocoder.mapquest import MapquestResult
 
 
 class MapQuestBatchResult(MapquestResult):
",add missing import,fix: rectification failed,Corrective,"The new message indicates a failure in rectification, suggesting a bug or error in the system, which implies a corrective action is needed to fix the issue.",2.0,2.0,1.0,"The commit message 'MapQuest flake8 fix' is overly vague and does not provide meaningful context about what was actually changed or why. The diff shows removal of imports from geocoder.base and geocoder.keys, and only retains a partial import from geocoder.mapquest. This suggests a refactoring or cleanup, possibly related to code organization or dependency reduction, but the commit message fails to explain the rationale or impact. A better message would describe the change (e.g., 'Remove unused imports and simplify MapQuest module imports'). As such, the message is minimally informative and lacks technical clarity, warranting a score of 2.","The commit message 'add missing import' is too vague and lacks context. While it correctly identifies that an import was added, it does not specify which import or why it was necessary. The diff shows that two imports were removed and only one was kept, suggesting a broader change in the module's structure or dependency. A more descriptive message, such as 'Remove unused imports and simplify MapQuest module dependencies', would better reflect the actual change. Therefore, the message is minimally accurate but insufficiently informative, warranting a score of 2.","The commit message 'fix: rectification failed' is extremely vague and provides no context about what was actually fixed or why. It does not describe the change in the code diff, which removes references to OneResult and mapquest_key, nor does it explain the purpose of the change. A good commit message should clearly indicate what was fixed, why it was necessary, and how it relates to the code changes. This message fails to meet even basic standards for clarity and informativeness."
e0baa310fc8e30fc587be2e4e97d23db678ba0a8,Fixed MapQuest batch not using env key,geocoder/mapquest_batch.py,"@@ -4,6 +4,7 @@
 from __future__ import absolute_import
 from geocoder.base import MultipleResultsQuery
 from geocoder.mapquest import MapquestResult
+from geocoder.keys import mapquest_key
 
 
 class MapQuestBatchResult(MapquestResult):
@@ -33,6 +34,7 @@ class MapquestBatch(MultipleResultsQuery):
     _RESULT_CLASS = MapQuestBatchResult
     _URL = 'http://www.mapquestapi.com/geocoding/v1/batch'
     _TIMEOUT = 30
+    _KEY = mapquest_key
 
     def _build_params(self, location, provider_key, **kwargs):
         self._TIMEOUT = kwargs.get('timeout', 30)
",add missing docstrings,feat(geocoder): add mapquest key configuration,Corrective,"The new message indicates a fix to configure MapQuest key properly, addressing a missing or misconfigured environment key issue, which is a functional correction rather than a cosmetic or trivial change.",3.0,1.0,3.0,"The commit message 'Fixed MapQuest batch not using env key' is somewhat accurate and indicates a fix, but it lacks specific details about what was changed or why the issue occurred. The diff shows that the `_KEY` attribute is now set to `mapquest_key` from `geocoder.keys`, which suggests the fix enables the use of an environment variable key. However, the message is vague and does not clearly explain the problem, the solution, or the impact. It would be improved with more context (e.g., 'Added support for environment-based MapQuest key in batch requests'). Thus, it is functional but not detailed enough to be considered excellent.","The commit message 'add missing docstrings' is highly misleading given the actual changes in the diff. The diff shows additions of imports and class attributes (like `_KEY = mapquest_key` and `_KEY` being set), not any missing docstrings. There is no evidence of docstring additions or modifications in the code. Therefore, the commit message does not accurately reflect the changes, making it poor and misleading.","The commit message 'feat(geocoder): add mapquest key configuration' is generally clear and follows a standard format (e.g., 'feat' prefix), indicating it's a feature addition. However, it lacks specific detail about what exactly was configured or how the change improves functionality. The diff shows that a mapquest key is now imported and assigned to a class attribute (_KEY), which is a configuration change, but the message does not clearly communicate the purpose or impact. A more detailed message (e.g., 'feat(geocoder): enable configurable MapQuest API key via _KEY') would be better. Thus, it's functional but insufficiently descriptive, warranting a medium score."
ba1cd0b960517f1807351df956853bb7163c647a,Fixed printing outputs,geocoder/bing_batch.py,"@@ -37,7 +37,7 @@ class BingBatchResult(OneResult):
     def debug(self, verbose=True):
         with csv_io() as output:
             print('\n', file=output)
-            print('Bing Batch result\n', file=output)
+            print('{} result\n'.format(self.__class__.__name__), file=output)
             print('-----------\n', file=output)
             print(self._content, file=output)
 
@@ -60,6 +60,10 @@ class BingBatch(MultipleResultsQuery):
     -------------
     http://msdn.microsoft.com/en-us/library/ff701714.aspx
 
+    Dataflow Reference
+    ------------------
+    https://msdn.microsoft.com/en-us/library/ff701733.aspx
+
     """"""
     provider = 'bing'
 
@@ -134,8 +138,6 @@ class BingBatch(MultipleResultsQuery):
                 proxies=self.proxies
             )
 
-            print(self.batch)
-
             # check that response is ok
             self.status_code = response.status_code
             response.raise_for_status()
",update bingbatch.py,docs(bing): enhance batch result documentation with dataflow reference,Semantic,"The new message provides more specific and meaningful context by indicating documentation enhancement with a reference to dataflow, improving clarity and intent compared to the vague 'Fixed printing outputs'.",2.0,2.0,4.0,"The commit message 'Fixed printing outputs' is overly vague and does not accurately reflect the actual changes. The diff shows that the output formatting was improved by using the class name dynamically instead of a hardcoded string, and additional documentation was added for dataflow references. The message fails to mention these specific improvements or the addition of documentation. While it correctly identifies a change in output, it lacks detail and context, making it insufficient for a clear understanding of what was actually fixed or enhanced.","The commit message 'update bingbatch.py' is extremely vague and provides no information about what was changed or why. While the diff shows meaningful updates—such as improving debug output by using the class name dynamically and adding a dataflow reference to documentation—the commit message fails to reflect these changes. A better message would specify the improvements, like 'Add dataflow reference to BingBatch documentation and improve debug output formatting'. As it stands, the message offers no actionable insight, resulting in a low score.","The commit message accurately reflects the change: it adds a dataflow reference link to the Bing batch result documentation. The message is concise, relevant, and clearly indicates the scope (docs, bing, batch result) and the specific improvement (adding a dataflow reference). While it could be slightly more explicit about the file or section modified (e.g., 'in bing_batch.py'), it effectively communicates the intent. It is not overly verbose or missing key details, making it a strong, clear commit message."
5d58f9a8557dd8380b91371e902944e06adf9000,Import fix,geocoder/bing_batch_forward.py,"@@ -2,8 +2,7 @@
 # coding: utf8
 
 from __future__ import absolute_import, print_function
-from geocoder.base import OneResult
-from geocoder.bing_batch import BingBatch
+from geocoder.bing_batch import BingBatch, BingBatchResult
 
 import io
 import csv
@@ -45,8 +44,8 @@ class BingBatchForwardResult(BingBatchResult):
 
             return [None, None]
 
-class BingBatchForward(BingBatch):
 
+class BingBatchForward(BingBatch):
     method = 'batch'
     _RESULT_CLASS = BingBatchForwardResult
 
",add documentation for bingbatchforward,fix: rectification failed,Corrective,"The new message indicates a specific failure ('rectification failed'), suggesting a fix addressing a functional issue rather than just a stylistic change.",2.0,1.0,2.0,"The commit message 'Import fix' is overly vague and provides no context about what was fixed or why. While the diff shows a new import of `BingBatchResult` and a removal of an old one, the message fails to explain the purpose or impact of the change. A better message would indicate the addition of a result class for batch processing, improving type safety or functionality. As such, it lacks specificity and technical detail, resulting in a low score.","The commit message 'add documentation for bingbatchforward' does not align with the actual changes in the code diff. The diff shows the addition of a new class `BingBatchForwardResult` and a reference to it in the `BingBatchForward` class, but there is no mention of documentation being added. The change appears to be a code refactoring or class definition update, not a documentation addition. Therefore, the commit message is misleading and inaccurate, resulting in a poor score.","The commit message 'fix: rectification failed' is extremely vague and provides no context about what was actually fixed or why. The diff shows a simple import addition of 'BingBatchResult' and a class-level reference update, which appears to be a code refactoring or improvement for better result handling. However, the commit message fails to explain the purpose of the change, the problem it solves, or its impact. While it uses the correct 'fix:' prefix, the term 'rectification failed' is ambiguous and not descriptive. A better message would explain, for example, 'fix: add BingBatchResult import to support proper result handling in batch forward requests'. Thus, the message is technically correct in format but lacks meaningful content, warranting a low score."
5d58f9a8557dd8380b91371e902944e06adf9000,Import fix,geocoder/bing_batch_reverse.py,"@@ -2,8 +2,7 @@
 # coding: utf8
 
 from __future__ import absolute_import, print_function
-from geocoder.base import OneResult
-from geocoder.bing_batch import BingBatch
+from geocoder.bing_batch import BingBatch, BingBatchResult
 
 import io
 import csv
@@ -67,7 +66,6 @@ class BingBatchReverseResult(BingBatchResult):
 class BingBatchReverse(BingBatch):
 
     method = 'batch_reverse'
-
     _RESULT_CLASS = BingBatchReverseResult
 
     def generate_batch(self, locations):
@@ -109,5 +107,5 @@ class BingBatchReverse(BingBatch):
 
 
 if __name__ == '__main__':
-    g = BingBatchReverse((40.7943, -73.970859), (48.845580, 2.321807), key=None)
+    g = BingBatchReverse([(40.7943, -73.970859), (48.845580, 2.321807)], key=None)
     g.debug()
",add docstrings for bingbatchreverse,feat(bing_batch): support batch reverse geocoding with multiple locations,Semantic,"The new message provides a clear, descriptive explanation of the feature addition, including the specific functionality (batch reverse geocoding) and its scope (multiple locations), which goes beyond a simple fix and conveys the actual intent and impact of the change.",2.0,1.0,3.0,"The commit message 'Import fix' is overly vague and does not describe the actual change or its impact. While the diff shows that a new import `BingBatchResult` was added and a location input format was changed from a tuple of two points to a list of two-point tuples, the message fails to convey the purpose or context of the change. A better message would explain that the code now properly handles batch reverse geocoding with a list of locations and that the result class was updated to support this. As such, the message is insufficiently descriptive and lacks technical detail, warranting a score of 2.","The commit message 'add docstrings for bingbatchreverse' is completely inconsistent with the actual changes in the diff. The diff does not introduce any docstrings; instead, it removes the import of `OneResult` and replaces it with `BingBatchResult`, and modifies the usage of the `BingBatchReverse` class to accept a list of locations. The changes are related to code structure and argument handling, not documentation. Therefore, the commit message is misleading and does not accurately reflect the changes made.","The commit message accurately describes the intended functionality—supporting batch reverse geocoding with multiple locations—which is reflected in the code changes (e.g., updating the input format from individual tuples to a list of tuples). However, it lacks context about the specific changes made (e.g., introducing a new result class, modifying the generate_batch method, or updating the constructor). While the message is clear and relevant, it doesn't fully capture the technical scope or impact of the changes, such as the removal of the deprecated `OneResult` import or the addition of `BingBatchResult`. A more detailed message would have improved clarity and completeness, making it slightly less than excellent."
8deae1a6d058fc552facd7a17902de4cb9110a65,"MapZen marked as deprecated, tests changed accordingly",geocoder/mapzen.py,"@@ -89,6 +89,9 @@ class MapzenQuery(MultipleResultsQuery):
     _RESULT_CLASS = MapzenResult
     _KEY = mapzen_key
 
+    def __init__(self, *args, **kwargs):
+        raise DeprecationWarning('MapZen shut down as of January 2018: https://mapzen.com/blog/shutdown')
+
     def _build_params(self, location, provider_key, **kwargs):
         return {
             'text': location,
",update mapzen.py,Warning(multiple-results-query): MapZen shut down as of January 2018,Semantic,"The new message provides more specific context about the deprecation (shut down as of January 2018) and includes a warning code, enhancing clarity and semantic precision compared to the old message.",2.0,2.0,3.0,"The commit message is too vague and does not accurately reflect the content of the diff. While it mentions 'MapZen marked as deprecated', the diff shows a concrete change: a `DeprecationWarning` being added in the `__init__` method to inform users of the shutdown. The message lacks specific details about what was changed, why it was changed, and how it affects usage. A better message would explicitly state that the MapZen provider is deprecated and that the class now raises a deprecation warning upon initialization. As such, the message is insufficiently descriptive and fails to provide context, earning a score of 2.","The commit message 'update mapzen.py' is overly vague and provides no context about the changes or their significance. While the diff shows a deprecation warning added to indicate MapZen's shutdown, the message fails to communicate that this is a deprecation notice for a discontinued service. A better message would explain the nature of the change (e.g., 'Add deprecation warning for MapZen due to service shutdown in January 2018'). As such, the message is minimally informative and lacks clarity, warranting a score of 2.","The commit message correctly indicates that MapZen shut down, which is relevant to the code change. However, it lacks specific context about the change—such as the addition of a deprecation warning in the __init__ method—which is the actual purpose of the diff. The message is factual but overly generic and does not clearly link the action (adding a deprecation warning) to the reason (MapZen shutdown). A better message would explicitly state that a deprecation warning was added to inform users of MapZen's shutdown. Therefore, it is moderately informative but not fully descriptive or actionable."
8deae1a6d058fc552facd7a17902de4cb9110a65,"MapZen marked as deprecated, tests changed accordingly",tests/test_mapzen.py,"@@ -1,4 +1,5 @@
 # coding: utf8
+import pytest
 
 import geocoder
 
@@ -6,18 +7,15 @@ location = 'Ottawa'
 
 
 def test_mapzen():
-    g = geocoder.mapzen(location)
-    assert g.ok
-    osm_count, fields_count = g.debug()[0]
-    assert osm_count >= 3
-    assert fields_count >= 12
+    with pytest.raises(DeprecationWarning) as e:
+        g = geocoder.mapzen(location)
 
 
 def test_mapzen_reverse():
-    g = geocoder.mapzen(""45.4049053 -75.7077965"", method='reverse')
-    assert g.ok
+    with pytest.raises(DeprecationWarning) as e:
+        g = geocoder.mapzen(""45.4049053 -75.7077965"", method='reverse')
 
 
 def test_multi_results():
-    g = geocoder.mapzen(location, maxRows=3)
-    assert len(g) == 3
+    with pytest.raises(DeprecationWarning) as e:
+        g = geocoder.mapzen(location, maxRows=3)
",add tests for mapzen,fix(geocoder): deprecate mapzen methods with DeprecationWarning,Corrective,"The new message indicates a deliberate action to deprecate MapZen methods using DeprecationWarning, which addresses a technical issue by properly signaling deprecation and aligning with best practices for backward compatibility, making it a corrective change.",3.0,2.0,3.0,"The commit message accurately states that MapZen is marked as deprecated and that the tests have been updated to reflect this change. However, it lacks specific details about how the tests were modified—such as the addition of deprecation warning assertions or the removal of original assertions. While the message is clear and relevant, it is somewhat vague and does not fully convey the technical impact or scope of the changes. A more detailed message (e.g., mentioning 'all MapZen test cases now raise DeprecationWarning') would have been stronger.","The commit message 'add tests for mapzen' is vague and does not accurately reflect the actual changes. The diff shows that the tests are not adding new assertions or functionality to validate the behavior of mapzen, but instead are raising DeprecationWarnings to test deprecated usage. The message fails to convey the intent—testing deprecation warnings rather than verifying successful functionality—and lacks specificity about what is being tested. A better message would indicate the deprecation testing aspect, such as 'add deprecation warning tests for mapzen functions'. Thus, the message is insufficiently descriptive and technically inaccurate, warranting a low score.","The commit message accurately reflects the intent of the change—deprecating Mapzen methods by raising a DeprecationWarning—though it lacks specific details about the scope (e.g., which methods or test cases are affected) or the rationale behind the deprecation. The diff shows that all test cases now raise a DeprecationWarning instead of asserting success, which aligns with the message. However, the message is somewhat generic and does not convey the technical impact or future plan (e.g., removal timeline or migration path), which would make it more complete. Therefore, it is functional but not fully detailed or clear for a broader audience."
